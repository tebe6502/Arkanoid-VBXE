mads 2.1.7 build 38 (8 Jul 25)
D:\!Delphi\Arkanoid-VBXE\vbxe\arkanoid_vbxe.a65 -hm -xli:d:\!Delphi\MadPascal\base 
Source: arkanoid_vbxe.a65
     1 				; ------------------------------------------------------------
     2 				; Mad Pascal Compiler version 1.7.5 [2025/08/28] for MOS 6502 CPU
     3 				; ------------------------------------------------------------
     4
     5 = 0010			STACKWIDTH	= 16
     6 = 2000			CODEORIGIN	= $2000
     7
     8 = 0001			TRUE		= 1
     9 = 0000			FALSE		= 0
    10 = 009B			EOL		= $9B
    11 = 0400			__BUFFER	= $0400
    12 = 0400			@BUF		= __BUFFER
    13
    14 				; ------------------------------------------------------------
    15
    16 					org $80
    17
    18 				zpage
    19
    20 				.if .def(@vbxe_detect)
    21 = 0080			fxptr	.ds 2						; VBXE pointer
    22 				.fi
    23
    24 				.if .def(@AllocMem)||.def(MAIN.SYSTEM.GETMEM)||.def(MAIN.SYSTEM.FREEMEM)
    25 				psptr	.ds 2						; PROGRAMSTACK Pointer
    26 				.fi
    27
    28 = 0082			bp	.ds 2
    29 = 0084			bp2	.ds 2
    30 = 0083			bp3	= bp+1
    31
    32 = 0086			eax	.ds 4						;8 bytes (aex + edx) -> divREAL
    33 = 008A			edx	.ds 4
    34 = 008E			ecx	.ds 4
    35
    36 				TMP
    37 				ztmp
    38 = 0092			ztmp8	.ds 1
    39 = 0093			ztmp9	.ds 1
    40 = 0094			ztmp10	.ds 1
    41 = 0095			ztmp11	.ds 1
    42
    43 = 0096			STACKORIGIN	.ds STACKWIDTH*4
    44 				zpend
    45
    46 				; ------------------------------------------------------------
    47
    48 = 0086			ax	= eax
    49 = 0086			al	= eax
    50 = 0087			ah	= eax+1
    51
    52 = 008E			cx	= ecx
    53 = 008E			cl	= ecx
    54 = 008F			ch	= ecx+1
    55
    56 = 008A			dx	= edx
    57 = 008A			dl	= edx
    58 = 008B			dh	= edx+1
    59
    60 					org eax
    61
    62 = 0086			FP1MAN0	.ds 1
    63 = 0087			FP1MAN1	.ds 1
    64 = 0088			FP1MAN2	.ds 1
    65 = 0089			FP1MAN3	.ds 1
    66
    67 					org edx
    68
    69 = 008A			FP2MAN0	.ds 1
    70 = 008B			FP2MAN1	.ds 1
    71 = 008C			FP2MAN2	.ds 1
    72 = 008D			FP2MAN3	.ds 1
    73
    74 					org ecx
    75
    76 = 008E			FPMAN0	.ds 1
    77 = 008F			FPMAN1	.ds 1
    78 = 0090			FPMAN2	.ds 1
    79 = 0091			FPMAN3	.ds 1
    80
    81 					org ztmp8
    82
    83 = 0092			FP1SGN	.ds 1
    84 = 0093			FP1EXP	.ds 1
    85
    86 					org ztmp10
    87
    88 = 0094			FP2SGN	.ds 1
    89 = 0095			FP2EXP	.ds 1
    90
    91 					org bp2
    92
    93 = 0084			FPSGN	.ds 1
    94 = 0085			FPEXP	.ds 1
    95
    96 					.ifdef MAIN.@DEFINES.BASICOFF
    97 					org CODEORIGIN
    98 					icl 'atari\basicoff.asm'
    99 					ini CODEORIGIN
   100 					.fi
   101
   102 					.ifdef MAIN.@DEFINES.S_VBXE
   103 					opt h-
   104 					ins 'atari\s_vbxe\sdxld2.obx'
   105 					opt h+
   106 					.fi
   107
   108 					org CODEORIGIN
   109
   110 				.local	MAIN.@RESOURCE
   111 				.endl
   112
   113 				.local	RESOURCE
   114 					icl 'atari\resource.asm'
Source: resource.asm
     1
  1539 					opt l+
   115 = 0000				?EXTDETECT = 0
   116 = 0000				?VBXDETECT = 0
   117
   118 20BB				RCDATA 'walls.dat' adr.ALL_WALLS 0 0 0 0 0 0 0 0
Macro: RESOURCE.RCDATA [Source: resource.asm]
     2 = 2100			len = .filesize('walls.dat')-0
     8 20BB				org RESORIGIN
    10 20BB 20 87 20		mcpy	jsr sys.off
    12 20BE A9 DC 85 8A A9 20 +  MWA #DATA EDX
    12 20C6 A9 00 85 8E A9 DC +  MWA #MAIN.ADR.ALL_WALLS ECX
    12 20CE A9 00 85 86 A9 21 +  MWA #LEN EAX
    12 20D6 20 2B 20		 JSR RESOURCE.MEMCPY
    14 20D9 4C AB 20			jmp sys.on
    16 20DC 00 00 00 00 00 00 + data	ins 'walls.dat',0
    20 					.print '$R RCDATA  ',main.ADR.ALL_WALLS,'..',main.ADR.ALL_WALLS+len-1," 'walls.dat'"
    20 				$R RCDATA  $DC00..$FCFF 'walls.dat'
    22 02E2-02E3> BB 20			ini mcpy
Source: arkanoid_vbxe.a65
   119 41DC				XBMP 'btm.bmp' VBXE_DATA 0 1 0 0 0 0 0 0
Macro: RESOURCE.XBMP [Source: resource.asm]
     2 = 0036			he	= .sizeof(s@bmp)
     4 41DC				.get 'btm.bmp',0,he
     9 = 0140			?bw	= .dget[s@bmp.biwidth]
    10 = 01EE			?bh	= .dget[s@bmp.biheight]
    20 41DC				org RESORIGIN
    22 20BB			lbmp
    25 20BB-2552> 20 00 20		jsr vbxe_detect
    26 20BE 90 4B			bcc ok
    28 20C0 A0 20		 LDY> NOTVBXE
    28 20C2 A9 DF		 LDA< NOTVBXE
    28 20C4 20 6C 20		 JSR RESOURCE.@PRINT
    29 20C7 A0 20		 LDY> _EOL
    29 20C9 A9 F0		 LDA< _EOL
    29 20CB 20 6C 20		 JSR RESOURCE.@PRINT
    30 20CE A0 20		 LDY> ANYKEY
    30 20D0 A9 F1		 LDA< ANYKEY
    30 20D2 20 6C 20		 JSR RESOURCE.@PRINT
    32 20D5 AD 0F D2		keypres	lda $d20f
    33 20D8 29 04			and #4
    34 20DA D0 F9			bne keypres
    36 20DC 68				pla
    37 20DD 68				pla
    38 20DE 60				rts
    40 20DF 56 42 58 45 20 6E + notVBXE	dta c'VBXE not detected'
    41 20F0 9B			_eol	dta $9b
    42 20F1 50 72 65 73 73 20 + anyKEY	dta c'Press any key to continue',$9b
    46 = 0001				.def ?VBXDETECT=1
    48 210B			ok	fxs FX_MEMC #%1000+$b0
Macro: RESOURCE.FXS [Source: vbxe.hea]
     2 210B A9 B8		        lda     #%1000+$B0
     3 210D A0 5E		        ldy     #FX_MEMC
     4 210F 91 80		        sta     (fxptr),y
Source: arkanoid_vbxe.a65
     2 2111 A9 01		        lda     #1
     3 2113 A0 45		        ldy     #FX_PSEL
     4 2115 91 80		        sta     (fxptr),y
Source: arkanoid_vbxe.a65
     2 2117 A9 00		        lda     #0
     3 2119 A0 44		        ldy     #FX_CSEL
     4 211B 91 80		        sta     (fxptr),y
Source: arkanoid_vbxe.a65
    53 211D A2 00			ldx #0
    55 211F 20 47 21		paloop	jsr pal
    56 2122 85 92			sta ztmp
    57 2124 20 47 21			jsr pal
    58 2127 85 93			sta ztmp+1
    59 2129 20 47 21			jsr pal
    60 212C 85 94			sta ztmp+2
    61 212E 20 47 21			jsr pal
    63 2131 A5 94			lda ztmp+2
     2 2133 A0 46		        ldy     #FX_CR
     3 2135 91 80		        sta     (fxptr),y
Source: arkanoid_vbxe.a65
    66 2137 A5 93			lda ztmp+1
     2 2139 A0 47		        ldy     #FX_CG
     3 213B 91 80		        sta     (fxptr),y
Source: arkanoid_vbxe.a65
    69 213D A5 92			lda ztmp
     2 213F A0 48		        ldy     #FX_CB
     3 2141 91 80		        sta     (fxptr),y
Source: arkanoid_vbxe.a65
    72 2143 E8				inx
    73 2144 D0 D9			bne paloop
    75 2146 60				rts
    77 2147 AD 53 21		pal	lda cpal
    78 = 2148			paladr	equ *-2
    79 214A EE 48 21 D0 03 EE + 	inw paladr
    80 2152 60				rts
    82 2153 00 00 00 00 7E 7E + cpal	ins 'btm.bmp',he,1024
    84 02E2-02E3> BB 20			ini lbmp
    87 = 026980			ln	= .filesize('btm.bmp')-he-1024
    88 = 0015			?bnk	= main.VBXE_DATA/$1000
    89 = 0001			?cnt	= 1
    91 2553				org RESORIGIN
     2 20BB-20C1> A9 95		        lda     #?BNK+$80
     3 20BD A0 5F		        ldy     #FX_MEMS
     4 20BF 91 80		        sta     (fxptr),y
Source: arkanoid_vbxe.a65
    93 20C1 60				rts
    94 02E2-02E3> BB 20			ini RESORIGIN
    96 20C2				org main.VBXE_DATA%$1000+$B000
    99 BE00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0002				?CNT++
    99 BF40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00C0				?TMP = ?BW-(*+?BW)%$C000
    99 = 0016				?BNK++
    99 C000				ORG RESORIGIN
     2 20BB-20C1> A9 96		        lda     #?BNK+$80
     3 20BD A0 5F		        ldy     #FX_MEMS
     4 20BF 91 80		        sta     (fxptr),y
    99 20C1 60				RTS
    99 02E2-02E3> BB 20			INI RESORIGIN
    99 20C2				ORG $B000
    99 = 0003				?CNT++
    99 B080				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0004				?CNT++
    99 B1C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0005				?CNT++
    99 B300				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0006				?CNT++
    99 B440				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0007				?CNT++
    99 B580				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0008				?CNT++
    99 B6C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0009				?CNT++
    99 B800				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 000A				?CNT++
    99 B940				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 000B				?CNT++
    99 BA80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 000C				?CNT++
    99 BBC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 000D				?CNT++
    99 BD00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 000E				?CNT++
    99 BE40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 000F				?CNT++
    99 BF80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0080				?TMP = ?BW-(*+?BW)%$C000
    99 = 0017				?BNK++
    99 C000				ORG RESORIGIN
     2 20BB-20C1> A9 97		        lda     #?BNK+$80
     3 20BD A0 5F		        ldy     #FX_MEMS
     4 20BF 91 80		        sta     (fxptr),y
    99 20C1 60				RTS
    99 02E2-02E3> BB 20			INI RESORIGIN
    99 20C2				ORG $B000
    99 = 0010				?CNT++
    99 B0C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0011				?CNT++
    99 B200				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0012				?CNT++
    99 B340				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0013				?CNT++
    99 B480				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0014				?CNT++
    99 B5C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0015				?CNT++
    99 B700				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0016				?CNT++
    99 B840				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0017				?CNT++
    99 B980				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0018				?CNT++
    99 BAC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0019				?CNT++
    99 BC00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 001A				?CNT++
    99 BD40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 001B				?CNT++
    99 BE80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 001C				?CNT++
    99 BFC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0040				?TMP = ?BW-(*+?BW)%$C000
    99 = 0018				?BNK++
    99 C000				ORG RESORIGIN
     2 20BB-20C1> A9 98		        lda     #?BNK+$80
     3 20BD A0 5F		        ldy     #FX_MEMS
     4 20BF 91 80		        sta     (fxptr),y
    99 20C1 60				RTS
    99 02E2-02E3> BB 20			INI RESORIGIN
    99 20C2				ORG $B000
    99 = 001D				?CNT++
    99 B100				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 001E				?CNT++
    99 B240				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 001F				?CNT++
    99 B380				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0020				?CNT++
    99 B4C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0021				?CNT++
    99 B600				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0022				?CNT++
    99 B740				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0023				?CNT++
    99 B880				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0024				?CNT++
    99 B9C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0025				?CNT++
    99 BB00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0026				?CNT++
    99 BC40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0027				?CNT++
    99 BD80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0028				?CNT++
    99 BEC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0140				?TMP = ?BW-(*+?BW)%$C000
    99 = 0019				?BNK++
    99 C000				ORG RESORIGIN
     2 20BB-20C1> A9 99		        lda     #?BNK+$80
     3 20BD A0 5F		        ldy     #FX_MEMS
     4 20BF 91 80		        sta     (fxptr),y
    99 20C1 60				RTS
    99 02E2-02E3> BB 20			INI RESORIGIN
    99 20C2				ORG $B000
    99 = 0029				?CNT++
    99 B000				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 002A				?CNT++
    99 B140				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 002B				?CNT++
    99 B280				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 002C				?CNT++
    99 B3C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 002D				?CNT++
    99 B500				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 002E				?CNT++
    99 B640				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 002F				?CNT++
    99 B780				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0030				?CNT++
    99 B8C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0031				?CNT++
    99 BA00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0032				?CNT++
    99 BB40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0033				?CNT++
    99 BC80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0034				?CNT++
    99 BDC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0035				?CNT++
    99 BF00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0100				?TMP = ?BW-(*+?BW)%$C000
    99 = 001A				?BNK++
    99 C000				ORG RESORIGIN
     2 20BB-20C1> A9 9A		        lda     #?BNK+$80
     3 20BD A0 5F		        ldy     #FX_MEMS
     4 20BF 91 80		        sta     (fxptr),y
    99 20C1 60				RTS
    99 02E2-02E3> BB 20			INI RESORIGIN
    99 20C2				ORG $B000
    99 = 0036				?CNT++
    99 B040				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0037				?CNT++
    99 B180				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0038				?CNT++
    99 B2C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0039				?CNT++
    99 B400				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 003A				?CNT++
    99 B540				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 003B				?CNT++
    99 B680				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 003C				?CNT++
    99 B7C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 003D				?CNT++
    99 B900				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 003E				?CNT++
    99 BA40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 003F				?CNT++
    99 BB80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0040				?CNT++
    99 BCC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0041				?CNT++
    99 BE00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0042				?CNT++
    99 BF40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00C0				?TMP = ?BW-(*+?BW)%$C000
    99 = 001B				?BNK++
    99 C000				ORG RESORIGIN
     2 20BB-20C1> A9 9B		        lda     #?BNK+$80
     3 20BD A0 5F		        ldy     #FX_MEMS
     4 20BF 91 80		        sta     (fxptr),y
    99 20C1 60				RTS
    99 02E2-02E3> BB 20			INI RESORIGIN
    99 20C2				ORG $B000
    99 = 0043				?CNT++
    99 B080				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0044				?CNT++
    99 B1C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0045				?CNT++
    99 B300				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0046				?CNT++
    99 B440				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0047				?CNT++
    99 B580				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0048				?CNT++
    99 B6C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0049				?CNT++
    99 B800				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 004A				?CNT++
    99 B940				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 004B				?CNT++
    99 BA80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 004C				?CNT++
    99 BBC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 004D				?CNT++
    99 BD00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 004E				?CNT++
    99 BE40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 004F				?CNT++
    99 BF80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0080				?TMP = ?BW-(*+?BW)%$C000
    99 = 001C				?BNK++
    99 C000				ORG RESORIGIN
     2 20BB-20C1> A9 9C		        lda     #?BNK+$80
     3 20BD A0 5F		        ldy     #FX_MEMS
     4 20BF 91 80		        sta     (fxptr),y
    99 20C1 60				RTS
    99 02E2-02E3> BB 20			INI RESORIGIN
    99 20C2				ORG $B000
    99 = 0050				?CNT++
    99 B0C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0051				?CNT++
    99 B200				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0052				?CNT++
    99 B340				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0053				?CNT++
    99 B480				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0054				?CNT++
    99 B5C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0055				?CNT++
    99 B700				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0056				?CNT++
    99 B840				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0057				?CNT++
    99 B980				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0058				?CNT++
    99 BAC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0059				?CNT++
    99 BC00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 005A				?CNT++
    99 BD40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 005B				?CNT++
    99 BE80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 005C				?CNT++
    99 BFC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0040				?TMP = ?BW-(*+?BW)%$C000
    99 = 001D				?BNK++
    99 C000				ORG RESORIGIN
     2 20BB-20C1> A9 9D		        lda     #?BNK+$80
     3 20BD A0 5F		        ldy     #FX_MEMS
     4 20BF 91 80		        sta     (fxptr),y
    99 20C1 60				RTS
    99 02E2-02E3> BB 20			INI RESORIGIN
    99 20C2				ORG $B000
    99 = 005D				?CNT++
    99 B100				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 005E				?CNT++
    99 B240				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 005F				?CNT++
    99 B380				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0060				?CNT++
    99 B4C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0061				?CNT++
    99 B600				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0062				?CNT++
    99 B740				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0063				?CNT++
    99 B880				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0064				?CNT++
    99 B9C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0065				?CNT++
    99 BB00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0066				?CNT++
    99 BC40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0067				?CNT++
    99 BD80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0068				?CNT++
    99 BEC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0140				?TMP = ?BW-(*+?BW)%$C000
    99 = 001E				?BNK++
    99 C000				ORG RESORIGIN
     2 20BB-20C1> A9 9E		        lda     #?BNK+$80
     3 20BD A0 5F		        ldy     #FX_MEMS
     4 20BF 91 80		        sta     (fxptr),y
    99 20C1 60				RTS
    99 02E2-02E3> BB 20			INI RESORIGIN
    99 20C2				ORG $B000
    99 = 0069				?CNT++
    99 B000				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 006A				?CNT++
    99 B140				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 006B				?CNT++
    99 B280				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 006C				?CNT++
    99 B3C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 006D				?CNT++
    99 B500				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 006E				?CNT++
    99 B640				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 006F				?CNT++
    99 B780				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0070				?CNT++
    99 B8C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0071				?CNT++
    99 BA00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0072				?CNT++
    99 BB40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0073				?CNT++
    99 BC80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0074				?CNT++
    99 BDC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0075				?CNT++
    99 BF00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0100				?TMP = ?BW-(*+?BW)%$C000
    99 = 001F				?BNK++
    99 C000				ORG RESORIGIN
     2 20BB-20C1> A9 9F		        lda     #?BNK+$80
     3 20BD A0 5F		        ldy     #FX_MEMS
     4 20BF 91 80		        sta     (fxptr),y
    99 20C1 60				RTS
    99 02E2-02E3> BB 20			INI RESORIGIN
    99 20C2				ORG $B000
    99 = 0076				?CNT++
    99 B040				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0077				?CNT++
    99 B180				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0078				?CNT++
    99 B2C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0079				?CNT++
    99 B400				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 007A				?CNT++
    99 B540				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 007B				?CNT++
    99 B680				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 007C				?CNT++
    99 B7C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 007D				?CNT++
    99 B900				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 007E				?CNT++
    99 BA40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 007F				?CNT++
    99 BB80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0080				?CNT++
    99 BCC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0081				?CNT++
    99 BE00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0082				?CNT++
    99 BF40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00C0				?TMP = ?BW-(*+?BW)%$C000
    99 = 0020				?BNK++
    99 C000				ORG RESORIGIN
     2 20BB-20C1> A9 A0		        lda     #?BNK+$80
     3 20BD A0 5F		        ldy     #FX_MEMS
     4 20BF 91 80		        sta     (fxptr),y
    99 20C1 60				RTS
    99 02E2-02E3> BB 20			INI RESORIGIN
    99 20C2				ORG $B000
    99 = 0083				?CNT++
    99 B080				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0084				?CNT++
    99 B1C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0085				?CNT++
    99 B300				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0086				?CNT++
    99 B440				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0087				?CNT++
    99 B580				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0088				?CNT++
    99 B6C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0089				?CNT++
    99 B800				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 008A				?CNT++
    99 B940				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 008B				?CNT++
    99 BA80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 008C				?CNT++
    99 BBC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 008D				?CNT++
    99 BD00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 008E				?CNT++
    99 BE40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 008F				?CNT++
    99 BF80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0080				?TMP = ?BW-(*+?BW)%$C000
    99 = 0021				?BNK++
    99 C000				ORG RESORIGIN
     2 20BB-20C1> A9 A1		        lda     #?BNK+$80
     3 20BD A0 5F		        ldy     #FX_MEMS
     4 20BF 91 80		        sta     (fxptr),y
    99 20C1 60				RTS
    99 02E2-02E3> BB 20			INI RESORIGIN
    99 20C2				ORG $B000
    99 = 0090				?CNT++
    99 B0C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0091				?CNT++
    99 B200				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0092				?CNT++
    99 B340				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0093				?CNT++
    99 B480				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0094				?CNT++
    99 B5C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0095				?CNT++
    99 B700				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0096				?CNT++
    99 B840				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0097				?CNT++
    99 B980				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0098				?CNT++
    99 BAC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0099				?CNT++
    99 BC00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 009A				?CNT++
    99 BD40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 009B				?CNT++
    99 BE80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 009C				?CNT++
    99 BFC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0040				?TMP = ?BW-(*+?BW)%$C000
    99 = 0022				?BNK++
    99 C000				ORG RESORIGIN
     2 20BB-20C1> A9 A2		        lda     #?BNK+$80
     3 20BD A0 5F		        ldy     #FX_MEMS
     4 20BF 91 80		        sta     (fxptr),y
    99 20C1 60				RTS
    99 02E2-02E3> BB 20			INI RESORIGIN
    99 20C2				ORG $B000
    99 = 009D				?CNT++
    99 B100				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 009E				?CNT++
    99 B240				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 009F				?CNT++
    99 B380				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00A0				?CNT++
    99 B4C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00A1				?CNT++
    99 B600				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00A2				?CNT++
    99 B740				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00A3				?CNT++
    99 B880				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00A4				?CNT++
    99 B9C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00A5				?CNT++
    99 BB00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00A6				?CNT++
    99 BC40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00A7				?CNT++
    99 BD80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00A8				?CNT++
    99 BEC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0140				?TMP = ?BW-(*+?BW)%$C000
    99 = 0023				?BNK++
    99 C000				ORG RESORIGIN
     2 20BB-20C1> A9 A3		        lda     #?BNK+$80
     3 20BD A0 5F		        ldy     #FX_MEMS
     4 20BF 91 80		        sta     (fxptr),y
    99 20C1 60				RTS
    99 02E2-02E3> BB 20			INI RESORIGIN
    99 20C2				ORG $B000
    99 = 00A9				?CNT++
    99 B000				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00AA				?CNT++
    99 B140				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00AB				?CNT++
    99 B280				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00AC				?CNT++
    99 B3C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00AD				?CNT++
    99 B500				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00AE				?CNT++
    99 B640				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00AF				?CNT++
    99 B780				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00B0				?CNT++
    99 B8C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00B1				?CNT++
    99 BA00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00B2				?CNT++
    99 BB40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00B3				?CNT++
    99 BC80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00B4				?CNT++
    99 BDC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00B5				?CNT++
    99 BF00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0100				?TMP = ?BW-(*+?BW)%$C000
    99 = 0024				?BNK++
    99 C000				ORG RESORIGIN
     2 20BB-20C1> A9 A4		        lda     #?BNK+$80
     3 20BD A0 5F		        ldy     #FX_MEMS
     4 20BF 91 80		        sta     (fxptr),y
    99 20C1 60				RTS
    99 02E2-02E3> BB 20			INI RESORIGIN
    99 20C2				ORG $B000
    99 = 00B6				?CNT++
    99 B040				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00B7				?CNT++
    99 B180				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00B8				?CNT++
    99 B2C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00B9				?CNT++
    99 B400				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00BA				?CNT++
    99 B540				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00BB				?CNT++
    99 B680				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00BC				?CNT++
    99 B7C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00BD				?CNT++
    99 B900				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00BE				?CNT++
    99 BA40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00BF				?CNT++
    99 BB80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00C0				?CNT++
    99 BCC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00C1				?CNT++
    99 BE00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00C2				?CNT++
    99 BF40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00C0				?TMP = ?BW-(*+?BW)%$C000
    99 = 0025				?BNK++
    99 C000				ORG RESORIGIN
     2 20BB-20C1> A9 A5		        lda     #?BNK+$80
     3 20BD A0 5F		        ldy     #FX_MEMS
     4 20BF 91 80		        sta     (fxptr),y
    99 20C1 60				RTS
    99 02E2-02E3> BB 20			INI RESORIGIN
    99 20C2				ORG $B000
    99 = 00C3				?CNT++
    99 B080				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00C4				?CNT++
    99 B1C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00C5				?CNT++
    99 B300				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00C6				?CNT++
    99 B440				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00C7				?CNT++
    99 B580				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00C8				?CNT++
    99 B6C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00C9				?CNT++
    99 B800				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00CA				?CNT++
    99 B940				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00CB				?CNT++
    99 BA80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00CC				?CNT++
    99 BBC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00CD				?CNT++
    99 BD00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00CE				?CNT++
    99 BE40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00CF				?CNT++
    99 BF80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0080				?TMP = ?BW-(*+?BW)%$C000
    99 = 0026				?BNK++
    99 C000				ORG RESORIGIN
     2 20BB-20C1> A9 A6		        lda     #?BNK+$80
     3 20BD A0 5F		        ldy     #FX_MEMS
     4 20BF 91 80		        sta     (fxptr),y
    99 20C1 60				RTS
    99 02E2-02E3> BB 20			INI RESORIGIN
    99 20C2				ORG $B000
    99 = 00D0				?CNT++
    99 B0C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00D1				?CNT++
    99 B200				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00D2				?CNT++
    99 B340				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00D3				?CNT++
    99 B480				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00D4				?CNT++
    99 B5C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00D5				?CNT++
    99 B700				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00D6				?CNT++
    99 B840				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00D7				?CNT++
    99 B980				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00D8				?CNT++
    99 BAC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00D9				?CNT++
    99 BC00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00DA				?CNT++
    99 BD40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00DB				?CNT++
    99 BE80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00DC				?CNT++
    99 BFC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0040				?TMP = ?BW-(*+?BW)%$C000
    99 = 0027				?BNK++
    99 C000				ORG RESORIGIN
     2 20BB-20C1> A9 A7		        lda     #?BNK+$80
     3 20BD A0 5F		        ldy     #FX_MEMS
     4 20BF 91 80		        sta     (fxptr),y
    99 20C1 60				RTS
    99 02E2-02E3> BB 20			INI RESORIGIN
    99 20C2				ORG $B000
    99 = 00DD				?CNT++
    99 B100				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00DE				?CNT++
    99 B240				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00DF				?CNT++
    99 B380				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00E0				?CNT++
    99 B4C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00E1				?CNT++
    99 B600				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00E2				?CNT++
    99 B740				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00E3				?CNT++
    99 B880				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00E4				?CNT++
    99 B9C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00E5				?CNT++
    99 BB00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00E6				?CNT++
    99 BC40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00E7				?CNT++
    99 BD80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00E8				?CNT++
    99 BEC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0140				?TMP = ?BW-(*+?BW)%$C000
    99 = 0028				?BNK++
    99 C000				ORG RESORIGIN
     2 20BB-20C1> A9 A8		        lda     #?BNK+$80
     3 20BD A0 5F		        ldy     #FX_MEMS
     4 20BF 91 80		        sta     (fxptr),y
    99 20C1 60				RTS
    99 02E2-02E3> BB 20			INI RESORIGIN
    99 20C2				ORG $B000
    99 = 00E9				?CNT++
    99 B000				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00EA				?CNT++
    99 B140				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00EB				?CNT++
    99 B280				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00EC				?CNT++
    99 B3C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00ED				?CNT++
    99 B500				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00EE				?CNT++
    99 B640				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00EF				?CNT++
    99 B780				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00F0				?CNT++
    99 B8C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00F1				?CNT++
    99 BA00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00F2				?CNT++
    99 BB40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00F3				?CNT++
    99 BC80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00F4				?CNT++
    99 BDC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00F5				?CNT++
    99 BF00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0100				?TMP = ?BW-(*+?BW)%$C000
    99 = 0029				?BNK++
    99 C000				ORG RESORIGIN
     2 20BB-20C1> A9 A9		        lda     #?BNK+$80
     3 20BD A0 5F		        ldy     #FX_MEMS
     4 20BF 91 80		        sta     (fxptr),y
    99 20C1 60				RTS
    99 02E2-02E3> BB 20			INI RESORIGIN
    99 20C2				ORG $B000
    99 = 00F6				?CNT++
    99 B040				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00F7				?CNT++
    99 B180				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00F8				?CNT++
    99 B2C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00F9				?CNT++
    99 B400				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00FA				?CNT++
    99 B540				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00FB				?CNT++
    99 B680				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00FC				?CNT++
    99 B7C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00FD				?CNT++
    99 B900				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00FE				?CNT++
    99 BA40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00FF				?CNT++
    99 BB80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0100				?CNT++
    99 BCC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0101				?CNT++
    99 BE00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0102				?CNT++
    99 BF40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00C0				?TMP = ?BW-(*+?BW)%$C000
    99 = 002A				?BNK++
    99 C000				ORG RESORIGIN
     2 20BB-20C1> A9 AA		        lda     #?BNK+$80
     3 20BD A0 5F		        ldy     #FX_MEMS
     4 20BF 91 80		        sta     (fxptr),y
    99 20C1 60				RTS
    99 02E2-02E3> BB 20			INI RESORIGIN
    99 20C2				ORG $B000
    99 = 0103				?CNT++
    99 B080				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0104				?CNT++
    99 B1C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0105				?CNT++
    99 B300				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0106				?CNT++
    99 B440				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0107				?CNT++
    99 B580				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0108				?CNT++
    99 B6C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0109				?CNT++
    99 B800				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 010A				?CNT++
    99 B940				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 010B				?CNT++
    99 BA80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 010C				?CNT++
    99 BBC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 010D				?CNT++
    99 BD00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 010E				?CNT++
    99 BE40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 010F				?CNT++
    99 BF80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0080				?TMP = ?BW-(*+?BW)%$C000
    99 = 002B				?BNK++
    99 C000				ORG RESORIGIN
     2 20BB-20C1> A9 AB		        lda     #?BNK+$80
     3 20BD A0 5F		        ldy     #FX_MEMS
     4 20BF 91 80		        sta     (fxptr),y
    99 20C1 60				RTS
    99 02E2-02E3> BB 20			INI RESORIGIN
    99 20C2				ORG $B000
    99 = 0110				?CNT++
    99 B0C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0111				?CNT++
    99 B200				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0112				?CNT++
    99 B340				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0113				?CNT++
    99 B480				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0114				?CNT++
    99 B5C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0115				?CNT++
    99 B700				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0116				?CNT++
    99 B840				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0117				?CNT++
    99 B980				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0118				?CNT++
    99 BAC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0119				?CNT++
    99 BC00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 011A				?CNT++
    99 BD40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 011B				?CNT++
    99 BE80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 011C				?CNT++
    99 BFC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0040				?TMP = ?BW-(*+?BW)%$C000
    99 = 002C				?BNK++
    99 C000				ORG RESORIGIN
     2 20BB-20C1> A9 AC		        lda     #?BNK+$80
     3 20BD A0 5F		        ldy     #FX_MEMS
     4 20BF 91 80		        sta     (fxptr),y
    99 20C1 60				RTS
    99 02E2-02E3> BB 20			INI RESORIGIN
    99 20C2				ORG $B000
    99 = 011D				?CNT++
    99 B100				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 011E				?CNT++
    99 B240				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 011F				?CNT++
    99 B380				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0120				?CNT++
    99 B4C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0121				?CNT++
    99 B600				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0122				?CNT++
    99 B740				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0123				?CNT++
    99 B880				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0124				?CNT++
    99 B9C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0125				?CNT++
    99 BB00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0126				?CNT++
    99 BC40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0127				?CNT++
    99 BD80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0128				?CNT++
    99 BEC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0140				?TMP = ?BW-(*+?BW)%$C000
    99 = 002D				?BNK++
    99 C000				ORG RESORIGIN
     2 20BB-20C1> A9 AD		        lda     #?BNK+$80
     3 20BD A0 5F		        ldy     #FX_MEMS
     4 20BF 91 80		        sta     (fxptr),y
    99 20C1 60				RTS
    99 02E2-02E3> BB 20			INI RESORIGIN
    99 20C2				ORG $B000
    99 = 0129				?CNT++
    99 B000				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 012A				?CNT++
    99 B140				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 012B				?CNT++
    99 B280				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 012C				?CNT++
    99 B3C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 012D				?CNT++
    99 B500				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 012E				?CNT++
    99 B640				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 012F				?CNT++
    99 B780				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0130				?CNT++
    99 B8C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0131				?CNT++
    99 BA00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0132				?CNT++
    99 BB40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0133				?CNT++
    99 BC80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0134				?CNT++
    99 BDC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0135				?CNT++
    99 BF00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0100				?TMP = ?BW-(*+?BW)%$C000
    99 = 002E				?BNK++
    99 C000				ORG RESORIGIN
     2 20BB-20C1> A9 AE		        lda     #?BNK+$80
     3 20BD A0 5F		        ldy     #FX_MEMS
     4 20BF 91 80		        sta     (fxptr),y
    99 20C1 60				RTS
    99 02E2-02E3> BB 20			INI RESORIGIN
    99 20C2				ORG $B000
    99 = 0136				?CNT++
    99 B040				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0137				?CNT++
    99 B180				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0138				?CNT++
    99 B2C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0139				?CNT++
    99 B400				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 013A				?CNT++
    99 B540				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 013B				?CNT++
    99 B680				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 013C				?CNT++
    99 B7C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 013D				?CNT++
    99 B900				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 013E				?CNT++
    99 BA40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 013F				?CNT++
    99 BB80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0140				?CNT++
    99 BCC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0141				?CNT++
    99 BE00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0142				?CNT++
    99 BF40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00C0				?TMP = ?BW-(*+?BW)%$C000
    99 = 002F				?BNK++
    99 C000				ORG RESORIGIN
     2 20BB-20C1> A9 AF		        lda     #?BNK+$80
     3 20BD A0 5F		        ldy     #FX_MEMS
     4 20BF 91 80		        sta     (fxptr),y
    99 20C1 60				RTS
    99 02E2-02E3> BB 20			INI RESORIGIN
    99 20C2				ORG $B000
    99 = 0143				?CNT++
    99 B080				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0144				?CNT++
    99 B1C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0145				?CNT++
    99 B300				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0146				?CNT++
    99 B440				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0147				?CNT++
    99 B580				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0148				?CNT++
    99 B6C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0149				?CNT++
    99 B800				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 014A				?CNT++
    99 B940				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 014B				?CNT++
    99 BA80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 014C				?CNT++
    99 BBC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 014D				?CNT++
    99 BD00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 014E				?CNT++
    99 BE40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 014F				?CNT++
    99 BF80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0080				?TMP = ?BW-(*+?BW)%$C000
    99 = 0030				?BNK++
    99 C000				ORG RESORIGIN
     2 20BB-20C1> A9 B0		        lda     #?BNK+$80
     3 20BD A0 5F		        ldy     #FX_MEMS
     4 20BF 91 80		        sta     (fxptr),y
    99 20C1 60				RTS
    99 02E2-02E3> BB 20			INI RESORIGIN
    99 20C2				ORG $B000
    99 = 0150				?CNT++
    99 B0C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0151				?CNT++
    99 B200				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0152				?CNT++
    99 B340				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0153				?CNT++
    99 B480				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0154				?CNT++
    99 B5C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0155				?CNT++
    99 B700				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0156				?CNT++
    99 B840				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0157				?CNT++
    99 B980				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0158				?CNT++
    99 BAC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0159				?CNT++
    99 BC00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 015A				?CNT++
    99 BD40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 015B				?CNT++
    99 BE80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 015C				?CNT++
    99 BFC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0040				?TMP = ?BW-(*+?BW)%$C000
    99 = 0031				?BNK++
    99 C000				ORG RESORIGIN
     2 20BB-20C1> A9 B1		        lda     #?BNK+$80
     3 20BD A0 5F		        ldy     #FX_MEMS
     4 20BF 91 80		        sta     (fxptr),y
    99 20C1 60				RTS
    99 02E2-02E3> BB 20			INI RESORIGIN
    99 20C2				ORG $B000
    99 = 015D				?CNT++
    99 B100				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 015E				?CNT++
    99 B240				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 015F				?CNT++
    99 B380				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0160				?CNT++
    99 B4C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0161				?CNT++
    99 B600				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0162				?CNT++
    99 B740				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0163				?CNT++
    99 B880				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0164				?CNT++
    99 B9C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0165				?CNT++
    99 BB00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0166				?CNT++
    99 BC40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0167				?CNT++
    99 BD80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0168				?CNT++
    99 BEC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0140				?TMP = ?BW-(*+?BW)%$C000
    99 = 0032				?BNK++
    99 C000				ORG RESORIGIN
     2 20BB-20C1> A9 B2		        lda     #?BNK+$80
     3 20BD A0 5F		        ldy     #FX_MEMS
     4 20BF 91 80		        sta     (fxptr),y
    99 20C1 60				RTS
    99 02E2-02E3> BB 20			INI RESORIGIN
    99 20C2				ORG $B000
    99 = 0169				?CNT++
    99 B000				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 016A				?CNT++
    99 B140				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 016B				?CNT++
    99 B280				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 016C				?CNT++
    99 B3C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 016D				?CNT++
    99 B500				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 016E				?CNT++
    99 B640				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 016F				?CNT++
    99 B780				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0170				?CNT++
    99 B8C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0171				?CNT++
    99 BA00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0172				?CNT++
    99 BB40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0173				?CNT++
    99 BC80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0174				?CNT++
    99 BDC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0175				?CNT++
    99 BF00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0100				?TMP = ?BW-(*+?BW)%$C000
    99 = 0033				?BNK++
    99 C000				ORG RESORIGIN
     2 20BB-20C1> A9 B3		        lda     #?BNK+$80
     3 20BD A0 5F		        ldy     #FX_MEMS
     4 20BF 91 80		        sta     (fxptr),y
    99 20C1 60				RTS
    99 02E2-02E3> BB 20			INI RESORIGIN
    99 20C2				ORG $B000
    99 = 0176				?CNT++
    99 B040				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0177				?CNT++
    99 B180				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0178				?CNT++
    99 B2C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0179				?CNT++
    99 B400				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 017A				?CNT++
    99 B540				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 017B				?CNT++
    99 B680				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 017C				?CNT++
    99 B7C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 017D				?CNT++
    99 B900				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 017E				?CNT++
    99 BA40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 017F				?CNT++
    99 BB80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0180				?CNT++
    99 BCC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0181				?CNT++
    99 BE00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0182				?CNT++
    99 BF40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00C0				?TMP = ?BW-(*+?BW)%$C000
    99 = 0034				?BNK++
    99 C000				ORG RESORIGIN
     2 20BB-20C1> A9 B4		        lda     #?BNK+$80
     3 20BD A0 5F		        ldy     #FX_MEMS
     4 20BF 91 80		        sta     (fxptr),y
    99 20C1 60				RTS
    99 02E2-02E3> BB 20			INI RESORIGIN
    99 20C2				ORG $B000
    99 = 0183				?CNT++
    99 B080				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0184				?CNT++
    99 B1C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0185				?CNT++
    99 B300				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0186				?CNT++
    99 B440				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0187				?CNT++
    99 B580				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0188				?CNT++
    99 B6C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0189				?CNT++
    99 B800				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 018A				?CNT++
    99 B940				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 018B				?CNT++
    99 BA80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 018C				?CNT++
    99 BBC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 018D				?CNT++
    99 BD00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 018E				?CNT++
    99 BE40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 018F				?CNT++
    99 BF80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0080				?TMP = ?BW-(*+?BW)%$C000
    99 = 0035				?BNK++
    99 C000				ORG RESORIGIN
     2 20BB-20C1> A9 B5		        lda     #?BNK+$80
     3 20BD A0 5F		        ldy     #FX_MEMS
     4 20BF 91 80		        sta     (fxptr),y
    99 20C1 60				RTS
    99 02E2-02E3> BB 20			INI RESORIGIN
    99 20C2				ORG $B000
    99 = 0190				?CNT++
    99 B0C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0191				?CNT++
    99 B200				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0192				?CNT++
    99 B340				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0193				?CNT++
    99 B480				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0194				?CNT++
    99 B5C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0195				?CNT++
    99 B700				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0196				?CNT++
    99 B840				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0197				?CNT++
    99 B980				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0198				?CNT++
    99 BAC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0199				?CNT++
    99 BC00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 019A				?CNT++
    99 BD40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 019B				?CNT++
    99 BE80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 019C				?CNT++
    99 BFC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0040				?TMP = ?BW-(*+?BW)%$C000
    99 = 0036				?BNK++
    99 C000				ORG RESORIGIN
     2 20BB-20C1> A9 B6		        lda     #?BNK+$80
     3 20BD A0 5F		        ldy     #FX_MEMS
     4 20BF 91 80		        sta     (fxptr),y
    99 20C1 60				RTS
    99 02E2-02E3> BB 20			INI RESORIGIN
    99 20C2				ORG $B000
    99 = 019D				?CNT++
    99 B100				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 019E				?CNT++
    99 B240				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 019F				?CNT++
    99 B380				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01A0				?CNT++
    99 B4C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01A1				?CNT++
    99 B600				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01A2				?CNT++
    99 B740				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01A3				?CNT++
    99 B880				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01A4				?CNT++
    99 B9C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01A5				?CNT++
    99 BB00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01A6				?CNT++
    99 BC40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01A7				?CNT++
    99 BD80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01A8				?CNT++
    99 BEC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0140				?TMP = ?BW-(*+?BW)%$C000
    99 = 0037				?BNK++
    99 C000				ORG RESORIGIN
     2 20BB-20C1> A9 B7		        lda     #?BNK+$80
     3 20BD A0 5F		        ldy     #FX_MEMS
     4 20BF 91 80		        sta     (fxptr),y
    99 20C1 60				RTS
    99 02E2-02E3> BB 20			INI RESORIGIN
    99 20C2				ORG $B000
    99 = 01A9				?CNT++
    99 B000				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01AA				?CNT++
    99 B140				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01AB				?CNT++
    99 B280				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01AC				?CNT++
    99 B3C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01AD				?CNT++
    99 B500				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01AE				?CNT++
    99 B640				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01AF				?CNT++
    99 B780				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01B0				?CNT++
    99 B8C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01B1				?CNT++
    99 BA00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01B2				?CNT++
    99 BB40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01B3				?CNT++
    99 BC80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01B4				?CNT++
    99 BDC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01B5				?CNT++
    99 BF00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0100				?TMP = ?BW-(*+?BW)%$C000
    99 = 0038				?BNK++
    99 C000				ORG RESORIGIN
     2 20BB-20C1> A9 B8		        lda     #?BNK+$80
     3 20BD A0 5F		        ldy     #FX_MEMS
     4 20BF 91 80		        sta     (fxptr),y
    99 20C1 60				RTS
    99 02E2-02E3> BB 20			INI RESORIGIN
    99 20C2				ORG $B000
    99 = 01B6				?CNT++
    99 B040				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01B7				?CNT++
    99 B180				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01B8				?CNT++
    99 B2C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01B9				?CNT++
    99 B400				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01BA				?CNT++
    99 B540				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01BB				?CNT++
    99 B680				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01BC				?CNT++
    99 B7C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01BD				?CNT++
    99 B900				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01BE				?CNT++
    99 BA40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01BF				?CNT++
    99 BB80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01C0				?CNT++
    99 BCC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01C1				?CNT++
    99 BE00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01C2				?CNT++
    99 BF40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00C0				?TMP = ?BW-(*+?BW)%$C000
    99 = 0039				?BNK++
    99 C000				ORG RESORIGIN
     2 20BB-20C1> A9 B9		        lda     #?BNK+$80
     3 20BD A0 5F		        ldy     #FX_MEMS
     4 20BF 91 80		        sta     (fxptr),y
    99 20C1 60				RTS
    99 02E2-02E3> BB 20			INI RESORIGIN
    99 20C2				ORG $B000
    99 = 01C3				?CNT++
    99 B080				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01C4				?CNT++
    99 B1C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01C5				?CNT++
    99 B300				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01C6				?CNT++
    99 B440				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01C7				?CNT++
    99 B580				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01C8				?CNT++
    99 B6C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01C9				?CNT++
    99 B800				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01CA				?CNT++
    99 B940				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01CB				?CNT++
    99 BA80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01CC				?CNT++
    99 BBC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01CD				?CNT++
    99 BD00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01CE				?CNT++
    99 BE40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01CF				?CNT++
    99 BF80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0080				?TMP = ?BW-(*+?BW)%$C000
    99 = 003A				?BNK++
    99 C000				ORG RESORIGIN
     2 20BB-20C1> A9 BA		        lda     #?BNK+$80
     3 20BD A0 5F		        ldy     #FX_MEMS
     4 20BF 91 80		        sta     (fxptr),y
    99 20C1 60				RTS
    99 02E2-02E3> BB 20			INI RESORIGIN
    99 20C2				ORG $B000
    99 = 01D0				?CNT++
    99 B0C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01D1				?CNT++
    99 B200				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01D2				?CNT++
    99 B340				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01D3				?CNT++
    99 B480				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01D4				?CNT++
    99 B5C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01D5				?CNT++
    99 B700				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01D6				?CNT++
    99 B840				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01D7				?CNT++
    99 B980				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01D8				?CNT++
    99 BAC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01D9				?CNT++
    99 BC00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01DA				?CNT++
    99 BD40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01DB				?CNT++
    99 BE80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01DC				?CNT++
    99 BFC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0040				?TMP = ?BW-(*+?BW)%$C000
    99 = 003B				?BNK++
    99 C000				ORG RESORIGIN
     2 20BB-20C1> A9 BB		        lda     #?BNK+$80
     3 20BD A0 5F		        ldy     #FX_MEMS
     4 20BF 91 80		        sta     (fxptr),y
    99 20C1 60				RTS
    99 02E2-02E3> BB 20			INI RESORIGIN
    99 20C2				ORG $B000
    99 = 01DD				?CNT++
    99 B100				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01DE				?CNT++
    99 B240				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01DF				?CNT++
    99 B380				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01E0				?CNT++
    99 B4C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01E1				?CNT++
    99 B600				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01E2				?CNT++
    99 B740				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01E3				?CNT++
    99 B880				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01E4				?CNT++
    99 B9C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01E5				?CNT++
    99 BB00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01E6				?CNT++
    99 BC40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01E7				?CNT++
    99 BD80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01E8				?CNT++
    99 BEC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0140				?TMP = ?BW-(*+?BW)%$C000
    99 = 003C				?BNK++
    99 C000				ORG RESORIGIN
     2 20BB-20C1> A9 BC		        lda     #?BNK+$80
     3 20BD A0 5F		        ldy     #FX_MEMS
     4 20BF 91 80		        sta     (fxptr),y
    99 20C1 60				RTS
    99 02E2-02E3> BB 20			INI RESORIGIN
    99 20C2				ORG $B000
    99 = 01E9				?CNT++
    99 B000				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01EA				?CNT++
    99 B140				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01EB				?CNT++
    99 B280				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01EC				?CNT++
    99 B3C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01ED				?CNT++
    99 B500				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01EE				?CNT++
    99 B640				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01EF				?CNT++
   121 B780				org RESORIGIN
     2 20BB-20C5> A9 00		        lda     #0
     3 20BD A0 5E		        ldy     #FX_MEMC
     4 20BF 91 80		        sta     (fxptr),y
Source: arkanoid_vbxe.a65
     2 20C1 A0 5F		        ldy     #FX_MEMS
     3 20C3 91 80		        sta     (fxptr),y
Source: arkanoid_vbxe.a65
   124 20C5 60				rts
   125 02E2-02E3> BB 20			ini RESORIGIN
   127 					.print '$R XBMP    ',main.VBXE_DATA,'..',main.VBXE_DATA+ln-1," 'btm.bmp'",' width: ',?bw,' height: ',?bh,' palsel: ',1,' colsel: ',0
   127 				$R XBMP    $015E00..$03C77F 'btm.bmp' width: $0140 height: $01EE palsel: $0001 colsel: $0000
Source: arkanoid_vbxe.a65
   120 				.endl
   121
   122 				; ------------------------------------------------------------
   123
   124 20C6				org CODEORIGIN
   125
   126 2000				STATICDATA
Macro: STATICDATA [Source: arkanoid_vbxe.a65]
     1 2000-9E98> 11 56 42 58 + .by  $11 $56 $42 $58 $45 $20 $6E $6F  $74 $20 $64 $65 $74 $65 $63 $74  $65 $64 $0B $47 $61 $6D $65 $20
     2 2018 50 61 75 73 65 64 + .by  $50 $61 $75 $73 $65 $64 $00 $00  $00 $00 $00 $00 $AA $00 $00 $AA  $00 $00 $00 $55 $AA $00 $AA $00
     3 2030 00 00 AA 00 AA 00 + .by  $00 $00 $AA $00 $AA $00 $AA $AA  $00 $00 $AA $AA $AA $00 $55 $55  $55 $00 $55 $55 $FF $00 $55 $FF
     4 2048 55 00 55 FF FF 00 + .by  $55 $00 $55 $FF $FF $00 $FF $55  $55 $00 $FF $55 $FF $00 $FF $FF  $55 $00 $FF $FF $FF $00 $FF $D4
     5 2060 D3 D2 D1 D0 CF CE + .by  $D3 $D2 $D1 $D0 $CF $CE $CD $CC  $CB $00 $00 $0A $00 $14 $00 $1E  $00 $28 $00 $32 $00 $64 $00 $C8
     6 2078 00 FA 00 F4 01 E8 + .by  $00 $FA $00 $F4 $01 $E8 $03 $00  $02 $13 $24 $35 $12 $23 $34 $45  $D4 $D3 $D2 $D1 $D0 $CF $CE $CD
     7 2090 CC CB 00 3C 5D 80 + .by  $CC $CB $00 $3C $5D $80 $7D $60  $37 $67 $6A $4F $5F $61 $7F $6F  $00 $00 $00 $E8 $03 $2C $01 $64
     8 20A8 00 3C 00 23 00 00 + .by  $00 $3C $00 $23 $00 $00 $10 $14  $03 $12 $14 $14 $03
Source: arkanoid_vbxe.a65
   127
   128 				; ------------------------------------------------------------
   129
   130 20B5			RTLIB
   131 20B5				icl 'rtl6502_a8.asm'
Source: rtl6502_a8.asm
    64 					opt l+
   132
   133 				.print 'ZPAGE: ',zpage,'..',zpend-1
   133 				ZPAGE: $0080..$00D5
   134
   135 				.print 'RTBUF: ',@buf,'..',@buf+255
   135 				RTBUF: $0400..$04FF
   136
   137 				.print 'RTLIB: ',RTLIB,'..',*-1
   137 				RTLIB: $20B5..$2A2E
   138
   139 				; ------------------------------------------------------------
   140
   141 2A2F			START
   142 2A2F BA				tsx
   143 2A30 8E 2D 9E			stx MAIN.@halt+1
   144
   145 					.ifdef MAIN.@DEFINES.ROMOFF
   146 2A33				icl 'atari\romoff.asm'
Source: romoff.asm
     1
     2 				// http://atariki.krap.pl/index.php/Programowanie:_U%C5%BCycie_OS-a_przy_wy%C5%82%C4%85czonym_ROM-ie
     3
     4 2A33			.local	rominit
     5
     6 2A33 78			        sei
     7 2A34 A9 00		        lda #%00000000
     8 2A36 8D 0E D4		        sta NMIEN       ;$D40E
     9 2A39 A9 FE		        lda #%11111110
    10 2A3B 8D 01 D3		        sta PORTB       ;$D301
    11
    12 				; Wprowadzona zmiana pozwala wyłączyć z poziomu kodu Pascala, kopiowanie czcionek z pamięci ROM do RAM przy wyłączonym ROMie
    13 				; Proces ten (niefortunnie) powoduje nadpisanie danych w obszarze $E000..$E3FF, gdy w zasobach umieścimi dane, które
    14 				; w ten obszar są wczytywane. Za pomocą definicji '{$DEFINE NOROMFONT}` można wyłączyć przerzut danych czcionek z ROM do RAMu,
    15 				; co pozwala zachować, wczytywane zasoby.
    16
    17 				.ifndef MAIN.@DEFINES.NOROMFONT
    18 					ldx #3
    19 					ldy #0
    20 				mv	inc portb
    21 				afnt0	lda $e000,y
    22 					dec portb
    23 				afnt1	sta $e000,y
    24 					iny
    25 					bne mv
    26 					inc afnt0+2
    27 					inc afnt1+2
    28 					dex
    29 					bpl mv
    30 				.endif
    31
    32 2A3E A2 5B		        ldx #<nmiint
    33 2A40 A0 2A		        ldy #>nmiint
    34 2A42 8E FA FF		        stx NMIVEC      ;$FFFA
    35 2A45 8C FB FF		        sty NMIVEC+1
    36
    37 2A48 A2 65		        ldx #<irqint
    38 2A4A A0 2A		        ldy #>irqint
    39 2A4C 8E FE FF		        stx IRQVEC      ;$FFFE
    40 2A4F 8C FF FF		        sty IRQVEC+1
    41
    42 2A52 A9 40		        lda #%01000000
    43 2A54 8D 0E D4		        sta NMIEN       ;$D40E
    44 2A57 58			        cli
    45
    46 2A58 4C 86 2A			jmp skp
    47
    48
    49 2A5B 2C 0F D4		nmiint  bit NMIST        ;$D40F
    50 2A5E 10 03		        spl
    51 2A60 6C 00 02		        jmp (VDSLST)     ;$0200
    52
    53 2A63 38			        sec
    54 2A64 24			        .byte $24        ;BIT $18
    55
    56 2A65 18			irqint  clc
    57
    58 				        ;wlaczenie OS ROM
    59
    60 2A66 EE 01 D3		        inc PORTB       ;$D301
    61
    62 2A69 48			        pha
    63 2A6A 8A			        txa
    64 2A6B 48			        pha
    65 2A6C BA			        tsx
    66
    67 				        ;odlozenie na stos danych dla powrotu z przerwania (RTI)
    68
    69 2A6D A9 2A		        lda #>iret      ;adres procedury iret
    70 2A6F 48			        pha
    71 2A70 A9 7F		        lda #<iret
    72 2A72 48			        pha
    73 2A73 BD 03 01		        lda $103,x      ;skopiowanie wartosci rejestru stanu procesora
    74 2A76 48			        pha
    75
    76 				        ;skok przez odpowiedni wektor przerwania
    77
    78 2A77 90 03		        scc
    79 2A79 6C FA FF		        jmp (NMIVEC)    ;$FFFA
    80 2A7C 6C FE FF		        jmp (IRQVEC)    ;$FFFE
    81
    82 2A7F 68			iret	pla
    83 2A80 AA				tax
    84 2A81 68				pla
    85
    86 				        ;wylaczenie OS ROM
    87
    88 2A82 CE 01 D3		        dec PORTB       ;$D301
    89 2A85 40			        rti
    90
    91 2A86			skp
    92
    93 				.endl
   147 					.fi
   148
   149 = 042A			VLEN	= VARDATASIZE-VARINITSIZE
   150 = 9EF9			VADR	= DATAORIGIN+VARINITSIZE
   151
   152 					ift (VADR > $BFFF) && .not(.def MAIN.@DEFINES.ROMOFF)
   153 					ert 'Invalid memory address range ',VADR
   154 					eif
   155
   156 					ift (VLEN > 0) && (VLEN <= 256)
   157 					ldx #256-VLEN
   158 					lda #$00
   159 					sta:rne VADR+VLEN-256,x+
   160 					eli VLEN>256
   161 2A86				m@init
Macro: M@INIT [Source: macros.asm]
     2 2A86 A0 F9			ldy <VADR
     3 2A88 A2 9E			ldx >VADR
     5 2A8A A9 00			lda #$00
     6 2A8C F0 07			beq skp_
     8 2A8E 99 00 10		clr	sta adr: $1000,y
    10 2A91 C8				iny
    11 2A92 D0 04			bne skp
    12 2A94 E8				inx
    13 2A95 8E 90 2A		skp_	stx adr+1
    15 2A98 E0 A3		skp	cpx >VADR+VLEN
    16 2A9A D0 F2			bne clr
    17 2A9C C0 23			cpy <VADR+VLEN
    18 2A9E D0 EE			bne clr
   162 					eif
   163
   164 				.ifdef psptr
   165 					mwa #PROGRAMSTACK psptr
   166 				.fi
   167
   168 2AA0 A2 00			ldx #$00					; X = 0
   169 2AA2 86 82			stx bp						; BP = 0
   170
   171 2AA4 8E 08 D2			stx audctl					; reset POKEY
   172 2AA7 8E 18 D2			stx audctl+$10
   173 2AAA A9 03			lda #3
   174 2AAC 8D 0F D2			sta skctl
   175 2AAF 8D 1F D2			sta skctl+$10
   176
   177 2AB2 CA				dex						; X = 255
   178
   179 2AB3				UNITINITIALIZATION
Macro: UNITINITIALIZATION [Source: arkanoid_vbxe.a65]
     3 2AB3 20 90 33			jsr MAIN.SYSTEM.@UnitInit
    23 2AB6 20 1B 38			jsr MAIN.VBXE.@UnitInit
   180
   181 2AB9			.local	MAIN						; PROCEDURE
   182
   183 2AB9 4C 29 9E			jmp l_0022
   184
   185 				; ------------------------------------------------------------
   186
   187 2ABC			.local	SYSTEM						; UNIT
   188
   189 2ABC			.local	PEEK						; FUNCTION | ASSEMBLER | REGISTER
   190
   191 				; ------------------------------------------------------------
   192
   193 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   194 				; as Pointer
   195 2ABC B5 96			lda :STACKORIGIN,x
   196 2ABE 85 8A			sta A
   197 2AC0 B5 A6			lda :STACKORIGIN+STACKWIDTH,x
   198 2AC2 85 8B			sta A+1
   199 2AC4 CA				dex
   200 2AC5			@main
   201
   202 				; -------------------  ASM Block 00000002  -------------------
   203
   204 2AC5 A0 00			ldy #0
   205 2AC7 B1 8A 85 92			mva (:edx),y Result
   206
   207 2ACB			@exit
   208
   209 				; ------------------------------------------------------------
   210
   211 				; Push BYTE / CHAR / SHORTINT / BOOLEAN
   212 				; as Pointer
   213
   214 2ACB E8				inx
   215 2ACC A5 92 95 96			mva RESULT :STACKORIGIN,x
   216
   217 					.ifdef @new
   218 					lda <@VarData
   219 					sta :ztmp
   220 					lda >@VarData
   221 					ldy #@VarDataSize-1
   222 					jmp @FreeMem
   223 					eif
   224
   225 				; ------------------------------------------------------------
   226
   227 = 008A			A	= :EDX
   228 = 0092			RESULT	= :STACKORIGIN-4
   229
   230 2AD0 60				rts						; ret
   231 				.endl
   232
   233 2AD1			.local	ABS						; FUNCTION | ASSEMBLER | OVERLOAD | REGISTER
   234 2AD1			.local	@010184000
   235
   236 				; -------------------  ASM Block 00000008  -------------------
   237
   238 2AD1 A5 8B			lda :edx+1
   239 2AD3 10 0D			bpl @+
   240
   241 2AD5 A9 00			lda #$00
   242 2AD7 38 E5 8A			sub :edx
   243 2ADA 85 8A			sta :edx
   244 2ADC A9 00			lda #$00
   245 2ADE E5 8B			sbc :edx+1
   246 2AE0 85 8B			sta :edx+1
   247 				@
   248 2AE2 85 93			sta Result+1
   249
   250 2AE4 A5 8A 85 92			mva :edx Result
   251
   252 2AE8			@exit
   253
   254 				; ------------------------------------------------------------
   255
   256 = 008A			X	= :EDX
   257 = 0092			RESULT	= :STACKORIGIN-4
   258
   259 2AE8 60				rts						; ret
   260 				.endl
   261 				.endl							; overload
   262
   263 2AE9			.local	ABS						; FUNCTION | ASSEMBLER | OVERLOAD | REGISTER
   264 2AE9			.local	@010185000
   265
   266 				; -------------------  ASM Block 00000009  -------------------
   267
   268 2AE9 A5 8D			lda :edx+3
   269 2AEB 10 03			spl
   270 2AED 20 1C 21			jsr @negEDX
   271
   272 2AF0 85 95			sta Result+3
   273
   274 2AF2 A5 8A 85 92			mva :edx Result
   275 2AF6 A5 8B 85 93			mva :edx+1 Result+1
   276 2AFA A5 8C 85 94			mva :edx+2 Result+2
   277
   278 2AFE			@exit
   279
   280 				; ------------------------------------------------------------
   281
   282 = 008A			X	= :EDX
   283 = 0092			RESULT	= :STACKORIGIN-4
   284
   285 2AFE 60				rts						; ret
   286 				.endl
   287 				.endl							; overload
   288
   289 2AFF			.local	ARCTAN						; FUNCTION | OVERLOAD
   290 2AFF			.local	@01018F000
   291
   292 				; optimize OK (SYSTEM), line = 904
   293
   294 2AFF A9 00			lda #$00
   295 2B01 8D C0 9E			sta SIGN
   296
   297 				; optimize OK (SYSTEM), line = 905
   298
   299 2B04 AD B0 9E			lda VALUE
   300 2B07 8D B8 9E			sta X
   301 2B0A AD B1 9E			lda VALUE+1
   302 2B0D 8D B9 9E			sta X+1
   303 2B10 AD B2 9E			lda VALUE+2
   304 2B13 8D BA 9E			sta X+2
   305 2B16 AD B3 9E			lda VALUE+3
   306 2B19 8D BB 9E			sta X+3
   307
   308 				; optimize OK (SYSTEM), line = 906
   309
   310 2B1C A9 00			lda #$00
   311 2B1E 8D BC 9E			sta Y
   312 2B21 8D BD 9E			sta Y+1
   313 2B24 8D BE 9E			sta Y+2
   314 2B27 8D BF 9E			sta Y+3
   315
   316 				; optimize OK (SYSTEM), line = 908
   317
   318 2B2A AD B3 9E			lda VALUE+3
   319 2B2D D0 0D			bne @+
   320 2B2F AD B2 9E			lda VALUE+2
   321 2B32 D0 08			bne @+
   322 2B34 AD B1 9E			lda VALUE+1
   323 2B37 D0 03			bne @+
   324 2B39 AD B0 9E			lda VALUE
   325 				@
   326 2B3C D0 11			jne l_0053
   327
   328 				; optimize OK (SYSTEM), line = 909
   329
   330 2B3E A9 00			lda #$00
   331 2B40 8D B4 9E			sta RESULT
   332 2B43 8D B5 9E			sta RESULT+1
   333 2B46 8D B6 9E			sta RESULT+2
   334 2B49 8D B7 9E			sta RESULT+3
   335 2B4C 4C 28 2F			jmp @exit
   336 2B4F			l_0053
   337
   338 				; optimize OK (SYSTEM), line = 912
   339
   340 2B4F AD BB 9E			lda X+3
   341 2B52 10 0D			jpl l_0071
   342
   343 				; optimize OK (SYSTEM), line = 913
   344
   345 2B54 A9 01			lda #$01
   346 2B56 8D C0 9E			sta SIGN
   347
   348 				; optimize OK (SYSTEM), line = 914
   349
   350 2B59 AD BB 9E			lda X+3
   351 2B5C 49 80			eor #$80
   352 2B5E 8D BB 9E			sta X+3
   353 2B61			l_0071
   354 2B61			l_0061
   355
   356 				; optimize OK (SYSTEM), line = 917
   357
   358 2B61 A9 00			lda #$00
   359 2B63 85 8A			sta :FP2MAN0
   360 2B65 85 8B			sta :FP2MAN1
   361 2B67 A9 80			lda #$80
   362 2B69 85 8C			sta :FP2MAN2
   363 2B6B A9 3F			lda #$3F
   364 2B6D 85 8D			sta :FP2MAN3
   365 2B6F AD B8 9E			lda X
   366 2B72 85 86			sta :FP1MAN0
   367 2B74 AD B9 9E			lda X+1
   368 2B77 85 87			sta :FP1MAN1
   369 2B79 AD BA 9E			lda X+2
   370 2B7C 85 88			sta :FP1MAN2
   371 2B7E AD BB 9E			lda X+3
   372 2B81 85 89			sta :FP1MAN3
   373 2B83 20 63 24			jsr @FSUB
   374 2B86 A5 8E			lda :FPMAN0
   375 2B88 85 9F			sta :STACKORIGIN+9
   376 2B8A A5 8F			lda :FPMAN1
   377 2B8C 85 AF			sta :STACKORIGIN+STACKWIDTH+9
   378 2B8E A5 90			lda :FPMAN2
   379 2B90 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
   380 2B92 A5 91			lda :FPMAN3
   381 2B94 85 CF			sta :STACKORIGIN+STACKWIDTH*3+9
   382 2B96 A9 00			lda #$00
   383 2B98 85 8A			sta :FP2MAN0
   384 2B9A 85 8B			sta :FP2MAN1
   385 2B9C A9 80			lda #$80
   386 2B9E 85 8C			sta :FP2MAN2
   387 2BA0 A9 3F			lda #$3F
   388 2BA2 85 8D			sta :FP2MAN3
   389 2BA4 AD B8 9E			lda X
   390 2BA7 85 86			sta :FP1MAN0
   391 2BA9 AD B9 9E			lda X+1
   392 2BAC 85 87			sta :FP1MAN1
   393 2BAE AD BA 9E			lda X+2
   394 2BB1 85 88			sta :FP1MAN2
   395 2BB3 AD BB 9E			lda X+3
   396 2BB6 85 89			sta :FP1MAN3
   397 2BB8 20 5E 24			jsr @FADD
   398 2BBB A5 8E			lda :FPMAN0
   399 2BBD 85 8A			sta :FP2MAN0
   400 2BBF A5 8F			lda :FPMAN1
   401 2BC1 85 8B			sta :FP2MAN1
   402 2BC3 A5 90			lda :FPMAN2
   403 2BC5 85 8C			sta :FP2MAN2
   404 2BC7 A5 91			lda :FPMAN3
   405 2BC9 85 8D			sta :FP2MAN3
   406 2BCB A5 9F			lda :STACKORIGIN+9
   407 2BCD 85 86			sta :FP1MAN0
   408 2BCF A5 AF			lda :STACKORIGIN+STACKWIDTH+9
   409 2BD1 85 87			sta :FP1MAN1
   410 2BD3 A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
   411 2BD5 85 88			sta :FP1MAN2
   412 2BD7 A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
   413 2BD9 85 89			sta :FP1MAN3
   414 2BDB 20 6B 26			jsr @FDIV
   415 2BDE A5 8E			lda :FPMAN0
   416 2BE0 8D B8 9E			sta X
   417 2BE3 A5 8F			lda :FPMAN1
   418 2BE5 8D B9 9E			sta X+1
   419 2BE8 A5 90			lda :FPMAN2
   420 2BEA 8D BA 9E			sta X+2
   421 2BED A5 91			lda :FPMAN3
   422 2BEF 8D BB 9E			sta X+3
   423
   424 				; optimize OK (SYSTEM), line = 918
   425
   426 2BF2 AD B8 9E			lda X
   427 2BF5 85 8A			sta :FP2MAN0
   428 2BF7 AD B9 9E			lda X+1
   429 2BFA 85 8B			sta :FP2MAN1
   430 2BFC AD BA 9E			lda X+2
   431 2BFF 85 8C			sta :FP2MAN2
   432 2C01 AD BB 9E			lda X+3
   433 2C04 85 8D			sta :FP2MAN3
   434 2C06 AD B8 9E			lda X
   435 2C09 85 86			sta :FP1MAN0
   436 2C0B AD B9 9E			lda X+1
   437 2C0E 85 87			sta :FP1MAN1
   438 2C10 AD BA 9E			lda X+2
   439 2C13 85 88			sta :FP1MAN2
   440 2C15 AD BB 9E			lda X+3
   441 2C18 85 89			sta :FP1MAN3
   442 2C1A 20 CA 25			jsr @FMUL
   443 2C1D A5 8E			lda :FPMAN0
   444 2C1F 8D BC 9E			sta Y
   445 2C22 A5 8F			lda :FPMAN1
   446 2C24 8D BD 9E			sta Y+1
   447 2C27 A5 90			lda :FPMAN2
   448 2C29 8D BE 9E			sta Y+2
   449 2C2C A5 91			lda :FPMAN3
   450 2C2E 8D BF 9E			sta Y+3
   451
   452 				; optimize OK (SYSTEM), line = 919
   453
   454 2C31 AD BC 9E			lda Y
   455 2C34 85 8A			sta :FP2MAN0
   456 2C36 AD BD 9E			lda Y+1
   457 2C39 85 8B			sta :FP2MAN1
   458 2C3B AD BE 9E			lda Y+2
   459 2C3E 85 8C			sta :FP2MAN2
   460 2C40 AD BF 9E			lda Y+3
   461 2C43 85 8D			sta :FP2MAN3
   462 2C45 A9 4A			lda #$4A
   463 2C47 85 86			sta :FP1MAN0
   464 2C49 A9 D7			lda #$D7
   465 2C4B 85 87			sta :FP1MAN1
   466 2C4D A9 3B			lda #$3B
   467 2C4F 85 88			sta :FP1MAN2
   468 2C51 85 89			sta :FP1MAN3
   469 2C53 20 CA 25			jsr @FMUL
   470 2C56 A5 8E			lda :FPMAN0
   471 2C58 85 86			sta :FP1MAN0
   472 2C5A A5 8F			lda :FPMAN1
   473 2C5C 85 87			sta :FP1MAN1
   474 2C5E A5 90			lda :FPMAN2
   475 2C60 85 88			sta :FP1MAN2
   476 2C62 A5 91			lda :FPMAN3
   477 2C64 85 89			sta :FP1MAN3
   478 2C66 A9 02			lda #$02
   479 2C68 85 8A			sta :FP2MAN0
   480 2C6A A9 6E			lda #$6E
   481 2C6C 85 8B			sta :FP2MAN1
   482 2C6E A9 84			lda #$84
   483 2C70 85 8C			sta :FP2MAN2
   484 2C72 A9 3C			lda #$3C
   485 2C74 85 8D			sta :FP2MAN3
   486 2C76 20 63 24			jsr @FSUB
   487 2C79 A5 8E			lda :FPMAN0
   488 2C7B 85 86			sta :FP1MAN0
   489 2C7D A5 8F			lda :FPMAN1
   490 2C7F 85 87			sta :FP1MAN1
   491 2C81 A5 90			lda :FPMAN2
   492 2C83 85 88			sta :FP1MAN2
   493 2C85 A5 91			lda :FPMAN3
   494 2C87 85 89			sta :FP1MAN3
   495 2C89 AD BC 9E			lda Y
   496 2C8C 85 8A			sta :FP2MAN0
   497 2C8E AD BD 9E			lda Y+1
   498 2C91 85 8B			sta :FP2MAN1
   499 2C93 AD BE 9E			lda Y+2
   500 2C96 85 8C			sta :FP2MAN2
   501 2C98 AD BF 9E			lda Y+3
   502 2C9B 85 8D			sta :FP2MAN3
   503 2C9D 20 CA 25			jsr @FMUL
   504 2CA0 A5 8E			lda :FPMAN0
   505 2CA2 85 86			sta :FP1MAN0
   506 2CA4 A5 8F			lda :FPMAN1
   507 2CA6 85 87			sta :FP1MAN1
   508 2CA8 A5 90			lda :FPMAN2
   509 2CAA 85 88			sta :FP1MAN2
   510 2CAC A5 91			lda :FPMAN3
   511 2CAE 85 89			sta :FP1MAN3
   512 2CB0 A9 FE			lda #$FE
   513 2CB2 85 8A			sta :FP2MAN0
   514 2CB4 A9 C1			lda #$C1
   515 2CB6 85 8B			sta :FP2MAN1
   516 2CB8 A9 2F			lda #$2F
   517 2CBA 85 8C			sta :FP2MAN2
   518 2CBC A9 3D			lda #$3D
   519 2CBE 85 8D			sta :FP2MAN3
   520 2CC0 20 5E 24			jsr @FADD
   521 2CC3 A5 8E			lda :FPMAN0
   522 2CC5 85 86			sta :FP1MAN0
   523 2CC7 A5 8F			lda :FPMAN1
   524 2CC9 85 87			sta :FP1MAN1
   525 2CCB A5 90			lda :FPMAN2
   526 2CCD 85 88			sta :FP1MAN2
   527 2CCF A5 91			lda :FPMAN3
   528 2CD1 85 89			sta :FP1MAN3
   529 2CD3 AD BC 9E			lda Y
   530 2CD6 85 8A			sta :FP2MAN0
   531 2CD8 AD BD 9E			lda Y+1
   532 2CDB 85 8B			sta :FP2MAN1
   533 2CDD AD BE 9E			lda Y+2
   534 2CE0 85 8C			sta :FP2MAN2
   535 2CE2 AD BF 9E			lda Y+3
   536 2CE5 85 8D			sta :FP2MAN3
   537 2CE7 20 CA 25			jsr @FMUL
   538 2CEA A5 8E			lda :FPMAN0
   539 2CEC 85 86			sta :FP1MAN0
   540 2CEE A5 8F			lda :FPMAN1
   541 2CF0 85 87			sta :FP1MAN1
   542 2CF2 A5 90			lda :FPMAN2
   543 2CF4 85 88			sta :FP1MAN2
   544 2CF6 A5 91			lda :FPMAN3
   545 2CF8 85 89			sta :FP1MAN3
   546 2CFA A9 74			lda #$74
   547 2CFC 85 8A			sta :FP2MAN0
   548 2CFE A9 31			lda #$31
   549 2D00 85 8B			sta :FP2MAN1
   550 2D02 A9 9A			lda #$9A
   551 2D04 85 8C			sta :FP2MAN2
   552 2D06 A9 3D			lda #$3D
   553 2D08 85 8D			sta :FP2MAN3
   554 2D0A 20 63 24			jsr @FSUB
   555 2D0D A5 8E			lda :FPMAN0
   556 2D0F 85 86			sta :FP1MAN0
   557 2D11 A5 8F			lda :FPMAN1
   558 2D13 85 87			sta :FP1MAN1
   559 2D15 A5 90			lda :FPMAN2
   560 2D17 85 88			sta :FP1MAN2
   561 2D19 A5 91			lda :FPMAN3
   562 2D1B 85 89			sta :FP1MAN3
   563 2D1D AD BC 9E			lda Y
   564 2D20 85 8A			sta :FP2MAN0
   565 2D22 AD BD 9E			lda Y+1
   566 2D25 85 8B			sta :FP2MAN1
   567 2D27 AD BE 9E			lda Y+2
   568 2D2A 85 8C			sta :FP2MAN2
   569 2D2C AD BF 9E			lda Y+3
   570 2D2F 85 8D			sta :FP2MAN3
   571 2D31 20 CA 25			jsr @FMUL
   572 2D34 A5 8E			lda :FPMAN0
   573 2D36 85 86			sta :FP1MAN0
   574 2D38 A5 8F			lda :FPMAN1
   575 2D3A 85 87			sta :FP1MAN1
   576 2D3C A5 90			lda :FPMAN2
   577 2D3E 85 88			sta :FP1MAN2
   578 2D40 A5 91			lda :FPMAN3
   579 2D42 85 89			sta :FP1MAN3
   580 2D44 A9 83			lda #$83
   581 2D46 85 8A			sta :FP2MAN0
   582 2D48 A9 3D			lda #$3D
   583 2D4A 85 8B			sta :FP2MAN1
   584 2D4C A9 DA			lda #$DA
   585 2D4E 85 8C			sta :FP2MAN2
   586 2D50 A9 3D			lda #$3D
   587 2D52 85 8D			sta :FP2MAN3
   588 2D54 20 5E 24			jsr @FADD
   589 2D57 A5 8E			lda :FPMAN0
   590 2D59 85 86			sta :FP1MAN0
   591 2D5B A5 8F			lda :FPMAN1
   592 2D5D 85 87			sta :FP1MAN1
   593 2D5F A5 90			lda :FPMAN2
   594 2D61 85 88			sta :FP1MAN2
   595 2D63 A5 91			lda :FPMAN3
   596 2D65 85 89			sta :FP1MAN3
   597 2D67 AD BC 9E			lda Y
   598 2D6A 85 8A			sta :FP2MAN0
   599 2D6C AD BD 9E			lda Y+1
   600 2D6F 85 8B			sta :FP2MAN1
   601 2D71 AD BE 9E			lda Y+2
   602 2D74 85 8C			sta :FP2MAN2
   603 2D76 AD BF 9E			lda Y+3
   604 2D79 85 8D			sta :FP2MAN3
   605 2D7B 20 CA 25			jsr @FMUL
   606 2D7E A5 8E			lda :FPMAN0
   607 2D80 85 86			sta :FP1MAN0
   608 2D82 A5 8F			lda :FPMAN1
   609 2D84 85 87			sta :FP1MAN1
   610 2D86 A5 90			lda :FPMAN2
   611 2D88 85 88			sta :FP1MAN2
   612 2D8A A5 91			lda :FPMAN3
   613 2D8C 85 89			sta :FP1MAN3
   614 2D8E A9 C7			lda #$C7
   615 2D90 85 8A			sta :FP2MAN0
   616 2D92 A9 7F			lda #$7F
   617 2D94 85 8B			sta :FP2MAN1
   618 2D96 A9 11			lda #$11
   619 2D98 85 8C			sta :FP2MAN2
   620 2D9A A9 3E			lda #$3E
   621 2D9C 85 8D			sta :FP2MAN3
   622 2D9E 20 63 24			jsr @FSUB
   623 2DA1 A5 8E			lda :FPMAN0
   624 2DA3 85 86			sta :FP1MAN0
   625 2DA5 A5 8F			lda :FPMAN1
   626 2DA7 85 87			sta :FP1MAN1
   627 2DA9 A5 90			lda :FPMAN2
   628 2DAB 85 88			sta :FP1MAN2
   629 2DAD A5 91			lda :FPMAN3
   630 2DAF 85 89			sta :FP1MAN3
   631 2DB1 AD BC 9E			lda Y
   632 2DB4 85 8A			sta :FP2MAN0
   633 2DB6 AD BD 9E			lda Y+1
   634 2DB9 85 8B			sta :FP2MAN1
   635 2DBB AD BE 9E			lda Y+2
   636 2DBE 85 8C			sta :FP2MAN2
   637 2DC0 AD BF 9E			lda Y+3
   638 2DC3 85 8D			sta :FP2MAN3
   639 2DC5 20 CA 25			jsr @FMUL
   640 2DC8 A5 8E			lda :FPMAN0
   641 2DCA 85 86			sta :FP1MAN0
   642 2DCC A5 8F			lda :FPMAN1
   643 2DCE 85 87			sta :FP1MAN1
   644 2DD0 A5 90			lda :FPMAN2
   645 2DD2 85 88			sta :FP1MAN2
   646 2DD4 A5 91			lda :FPMAN3
   647 2DD6 85 89			sta :FP1MAN3
   648 2DD8 A9 E5			lda #$E5
   649 2DDA 85 8A			sta :FP2MAN0
   650 2DDC A9 BB			lda #$BB
   651 2DDE 85 8B			sta :FP2MAN1
   652 2DE0 A9 4C			lda #$4C
   653 2DE2 85 8C			sta :FP2MAN2
   654 2DE4 A9 3E			lda #$3E
   655 2DE6 85 8D			sta :FP2MAN3
   656 2DE8 20 5E 24			jsr @FADD
   657 2DEB A5 8E			lda :FPMAN0
   658 2DED 85 86			sta :FP1MAN0
   659 2DEF A5 8F			lda :FPMAN1
   660 2DF1 85 87			sta :FP1MAN1
   661 2DF3 A5 90			lda :FPMAN2
   662 2DF5 85 88			sta :FP1MAN2
   663 2DF7 A5 91			lda :FPMAN3
   664 2DF9 85 89			sta :FP1MAN3
   665 2DFB AD BC 9E			lda Y
   666 2DFE 85 8A			sta :FP2MAN0
   667 2E00 AD BD 9E			lda Y+1
   668 2E03 85 8B			sta :FP2MAN1
   669 2E05 AD BE 9E			lda Y+2
   670 2E08 85 8C			sta :FP2MAN2
   671 2E0A AD BF 9E			lda Y+3
   672 2E0D 85 8D			sta :FP2MAN3
   673 2E0F 20 CA 25			jsr @FMUL
   674 2E12 A5 8E			lda :FPMAN0
   675 2E14 85 86			sta :FP1MAN0
   676 2E16 A5 8F			lda :FPMAN1
   677 2E18 85 87			sta :FP1MAN1
   678 2E1A A5 90			lda :FPMAN2
   679 2E1C 85 88			sta :FP1MAN2
   680 2E1E A5 91			lda :FPMAN3
   681 2E20 85 89			sta :FP1MAN3
   682 2E22 A9 6C			lda #$6C
   683 2E24 85 8A			sta :FP2MAN0
   684 2E26 A9 AA			lda #$AA
   685 2E28 85 8B			sta :FP2MAN1
   686 2E2A 85 8C			sta :FP2MAN2
   687 2E2C A9 3E			lda #$3E
   688 2E2E 85 8D			sta :FP2MAN3
   689 2E30 20 63 24			jsr @FSUB
   690 2E33 A5 8E			lda :FPMAN0
   691 2E35 85 86			sta :FP1MAN0
   692 2E37 A5 8F			lda :FPMAN1
   693 2E39 85 87			sta :FP1MAN1
   694 2E3B A5 90			lda :FPMAN2
   695 2E3D 85 88			sta :FP1MAN2
   696 2E3F A5 91			lda :FPMAN3
   697 2E41 85 89			sta :FP1MAN3
   698 2E43 AD BC 9E			lda Y
   699 2E46 85 8A			sta :FP2MAN0
   700 2E48 AD BD 9E			lda Y+1
   701 2E4B 85 8B			sta :FP2MAN1
   702 2E4D AD BE 9E			lda Y+2
   703 2E50 85 8C			sta :FP2MAN2
   704 2E52 AD BF 9E			lda Y+3
   705 2E55 85 8D			sta :FP2MAN3
   706 2E57 20 CA 25			jsr @FMUL
   707 2E5A A5 8E			lda :FPMAN0
   708 2E5C 85 86			sta :FP1MAN0
   709 2E5E A5 8F			lda :FPMAN1
   710 2E60 85 87			sta :FP1MAN1
   711 2E62 A5 90			lda :FPMAN2
   712 2E64 85 88			sta :FP1MAN2
   713 2E66 A5 91			lda :FPMAN3
   714 2E68 85 89			sta :FP1MAN3
   715 2E6A A9 00			lda #$00
   716 2E6C 85 8A			sta :FP2MAN0
   717 2E6E 85 8B			sta :FP2MAN1
   718 2E70 A9 80			lda #$80
   719 2E72 85 8C			sta :FP2MAN2
   720 2E74 A9 3F			lda #$3F
   721 2E76 85 8D			sta :FP2MAN3
   722 2E78 20 5E 24			jsr @FADD
   723 2E7B A5 8E			lda :FPMAN0
   724 2E7D 85 86			sta :FP1MAN0
   725 2E7F A5 8F			lda :FPMAN1
   726 2E81 85 87			sta :FP1MAN1
   727 2E83 A5 90			lda :FPMAN2
   728 2E85 85 88			sta :FP1MAN2
   729 2E87 A5 91			lda :FPMAN3
   730 2E89 85 89			sta :FP1MAN3
   731 2E8B AD B8 9E			lda X
   732 2E8E 85 8A			sta :FP2MAN0
   733 2E90 AD B9 9E			lda X+1
   734 2E93 85 8B			sta :FP2MAN1
   735 2E95 AD BA 9E			lda X+2
   736 2E98 85 8C			sta :FP2MAN2
   737 2E9A AD BB 9E			lda X+3
   738 2E9D 85 8D			sta :FP2MAN3
   739 2E9F 20 CA 25			jsr @FMUL
   740 2EA2 A5 8E			lda :FPMAN0
   741 2EA4 8D B8 9E			sta X
   742 2EA7 A5 8F			lda :FPMAN1
   743 2EA9 8D B9 9E			sta X+1
   744 2EAC A5 90			lda :FPMAN2
   745 2EAE 8D BA 9E			sta X+2
   746 2EB1 A5 91			lda :FPMAN3
   747 2EB3 8D BB 9E			sta X+3
   748
   749 				; optimize OK (SYSTEM), line = 922
   750
   751 2EB6 AD B8 9E			lda X
   752 2EB9 85 8A			sta :FP2MAN0
   753 2EBB AD B9 9E			lda X+1
   754 2EBE 85 8B			sta :FP2MAN1
   755 2EC0 AD BA 9E			lda X+2
   756 2EC3 85 8C			sta :FP2MAN2
   757 2EC5 AD BB 9E			lda X+3
   758 2EC8 85 8D			sta :FP2MAN3
   759 2ECA A9 DB			lda #$DB
   760 2ECC 85 86			sta :FP1MAN0
   761 2ECE A9 0F			lda #$0F
   762 2ED0 85 87			sta :FP1MAN1
   763 2ED2 A9 49			lda #$49
   764 2ED4 85 88			sta :FP1MAN2
   765 2ED6 A9 3F			lda #$3F
   766 2ED8 85 89			sta :FP1MAN3
   767 2EDA 20 5E 24			jsr @FADD
   768 2EDD A5 8E			lda :FPMAN0
   769 2EDF 8D B8 9E			sta X
   770 2EE2 A5 8F			lda :FPMAN1
   771 2EE4 8D B9 9E			sta X+1
   772 2EE7 A5 90			lda :FPMAN2
   773 2EE9 8D BA 9E			sta X+2
   774 2EEC A5 91			lda :FPMAN3
   775 2EEE 8D BB 9E			sta X+3
   776
   777 				; optimize OK (SYSTEM), line = 924
   778
   779 2EF1 AD C0 9E			lda SIGN
   780 2EF4 F0 1A			jeq l_00F3
   781
   782 				; optimize OK (SYSTEM), line = 925
   783
   784 2EF6 AD B8 9E			lda X
   785 2EF9 8D B4 9E			sta RESULT
   786 2EFC AD B9 9E			lda X+1
   787 2EFF 8D B5 9E			sta RESULT+1
   788 2F02 AD BA 9E			lda X+2
   789 2F05 8D B6 9E			sta RESULT+2
   790 2F08 AD BB 9E			lda X+3
   791 2F0B 49 80			eor #$80
   792 2F0D 4C 25 2F			jmp l_0104
   793 2F10			l_00F3
   794
   795 				; optimize OK (SYSTEM), line = 927
   796
   797 2F10 AD B8 9E			lda X
   798 2F13 8D B4 9E			sta RESULT
   799 2F16 AD B9 9E			lda X+1
   800 2F19 8D B5 9E			sta RESULT+1
   801 2F1C AD BA 9E			lda X+2
   802 2F1F 8D B6 9E			sta RESULT+2
   803 2F22 AD BB 9E			lda X+3
   804 2F25			l_0104
   805 2F25 8D B7 9E			sta RESULT+3
   806 2F28			@exit
   807
   808 				; ------------------------------------------------------------
   809
   810 = 9EB0			VALUE	= DATAORIGIN+$000B
   811 = 9EB4			RESULT	= DATAORIGIN+$000F
   812 = 9EB8			X	= DATAORIGIN+$0013
   813 = 9EBC			Y	= DATAORIGIN+$0017
   814 = 9EC0			SIGN	= DATAORIGIN+$001B
   815
   816 = 9EB0			@VarData	= VALUE
   817 = 000D			@VarDataSize	= 13
   818
   819 2F28 60				rts						; ret
   820 				.endl
   821 				.endl							; overload
   822
   823 2F29			.local	POKE						; PROCEDURE | ASSEMBLER | REGISTER
   824
   825 				; ------------------------------------------------------------
   826
   827 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   828 				; as Pointer
   829 2F29 B5 96			lda :STACKORIGIN,x
   830 2F2B 85 8A			sta A
   831 2F2D B5 A6			lda :STACKORIGIN+STACKWIDTH,x
   832 2F2F 85 8B			sta A+1
   833 2F31 CA				dex
   834 2F32 30 05			jmi @main
   835
   836 				; ------------------------------------------------------------
   837
   838 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
   839 				; as Pointer
   840 2F34 B5 96			lda :STACKORIGIN,x
   841 2F36 85 8E			sta VALUE
   842 2F38 CA				dex
   843 2F39			@main
   844
   845 				; -------------------  ASM Block 00000025  -------------------
   846
   847 2F39 A0 00			ldy #0
   848 2F3B A5 8E 91 8A			mva value (:edx),y
   849
   850 				; ------------------------------------------------------------
   851
   852 = 008A			A	= :EDX
   853 = 008E			VALUE	= :ECX
   854
   855 2F3F			@exit
   856 					.ifdef @new
   857 					lda <@VarData
   858 					sta :ztmp
   859 					lda >@VarData
   860 					ldy #@VarDataSize-1
   861 					jmp @FreeMem
   862 					els
   863 2F3F 60				rts						; ret
   864 					eif
   865 				.endl
   866
   867 2F40			.local	FILLBYTE					; PROCEDURE | ASSEMBLER | OVERLOAD | REGISTER | INLINE
   868 2F40			.local	@03018000001810000300000
   869
   870 					.MACRO m@INLINE
   871 				
   872 				; -------------------  ASM Block 00000033  -------------------
   873 				
   874 					jsr @fill
   875 				
   876 					.ENDM
   877
   878 				; ------------------------------------------------------------
   879
   880 = 008A			A	= :EDX
   881 = 008E			COUNT	= :ECX
   882 = 0086			VALUE	= :EAX
   883
   884 2F40			@exit
   885 				.endl
   886 				.endl							; overload
   887
   888 2F40			.local	FSINCOS						; FUNCTION
   889
   890 				; --- WhileProlog
   891 2F40 4C 7E 2F			jmp l_015A
   892 2F43			l_015B
   893
   894 				; optimize OK (SYSTEM), line = 1909
   895
   896 2F43 A9 DB			lda #$DB
   897 2F45 85 8A			sta :FP2MAN0
   898 2F47 A9 0F			lda #$0F
   899 2F49 85 8B			sta :FP2MAN1
   900 2F4B A9 C9			lda #$C9
   901 2F4D 85 8C			sta :FP2MAN2
   902 2F4F A9 40			lda #$40
   903 2F51 85 8D			sta :FP2MAN3
   904 2F53 AD C1 9E			lda X
   905 2F56 85 86			sta :FP1MAN0
   906 2F58 AD C2 9E			lda X+1
   907 2F5B 85 87			sta :FP1MAN1
   908 2F5D AD C3 9E			lda X+2
   909 2F60 85 88			sta :FP1MAN2
   910 2F62 AD C4 9E			lda X+3
   911 2F65 85 89			sta :FP1MAN3
   912 2F67 20 63 24			jsr @FSUB
   913 2F6A A5 8E			lda :FPMAN0
   914 2F6C 8D C1 9E			sta X
   915 2F6F A5 8F			lda :FPMAN1
   916 2F71 8D C2 9E			sta X+1
   917 2F74 A5 90			lda :FPMAN2
   918 2F76 8D C3 9E			sta X+2
   919 2F79 A5 91			lda :FPMAN3
   920 2F7B 8D C4 9E			sta X+3
   921 2F7E			l_015A
   922 2F7E A9 DB			lda #$DB
   923 2F80 85 86			sta @FCMPL.A
   924 2F82 A9 0F			lda #$0F
   925 2F84 85 87			sta @FCMPL.A+1
   926 2F86 A9 C9			lda #$C9
   927 2F88 85 88			sta @FCMPL.A+2
   928 2F8A A9 40			lda #$40
   929 2F8C 85 89			sta @FCMPL.A+3
   930 2F8E AD C1 9E			lda X
   931 2F91 85 8E			sta @FCMPL.B
   932 2F93 AD C2 9E			lda X+1
   933 2F96 85 8F			sta @FCMPL.B+1
   934 2F98 AD C3 9E			lda X+2
   935 2F9B 85 90			sta @FCMPL.B+2
   936 2F9D AD C4 9E			lda X+3
   937 2FA0 85 91			sta @FCMPL.B+3
   938 2FA2 20 E7 26			jsr @FCMPL
   939 2FA5 30 02			smi
   940 2FA7 D0 9A			jne l_015B
   941
   942 				; --- WhileProlog
   943 2FA9 4C E7 2F			jmp l_016F
   944 2FAC			l_0170
   945
   946 				; optimize OK (SYSTEM), line = 1910
   947
   948 2FAC A9 DB			lda #$DB
   949 2FAE 85 8A			sta :FP2MAN0
   950 2FB0 A9 0F			lda #$0F
   951 2FB2 85 8B			sta :FP2MAN1
   952 2FB4 A9 C9			lda #$C9
   953 2FB6 85 8C			sta :FP2MAN2
   954 2FB8 A9 40			lda #$40
   955 2FBA 85 8D			sta :FP2MAN3
   956 2FBC AD C1 9E			lda X
   957 2FBF 85 86			sta :FP1MAN0
   958 2FC1 AD C2 9E			lda X+1
   959 2FC4 85 87			sta :FP1MAN1
   960 2FC6 AD C3 9E			lda X+2
   961 2FC9 85 88			sta :FP1MAN2
   962 2FCB AD C4 9E			lda X+3
   963 2FCE 85 89			sta :FP1MAN3
   964 2FD0 20 5E 24			jsr @FADD
   965 2FD3 A5 8E			lda :FPMAN0
   966 2FD5 8D C1 9E			sta X
   967 2FD8 A5 8F			lda :FPMAN1
   968 2FDA 8D C2 9E			sta X+1
   969 2FDD A5 90			lda :FPMAN2
   970 2FDF 8D C3 9E			sta X+2
   971 2FE2 A5 91			lda :FPMAN3
   972 2FE4 8D C4 9E			sta X+3
   973 2FE7			l_016F
   974 2FE7 AD C4 9E			lda X+3
   975 2FEA 30 C0			jmi l_0170
   976
   977 				; optimize OK (SYSTEM), line = 1913
   978
   979 2FEC A9 83			lda #$83
   980 2FEE 85 8A			sta :FP2MAN0
   981 2FF0 A9 F9			lda #$F9
   982 2FF2 85 8B			sta :FP2MAN1
   983 2FF4 A9 22			lda #$22
   984 2FF6 85 8C			sta :FP2MAN2
   985 2FF8 A9 3F			lda #$3F
   986 2FFA 85 8D			sta :FP2MAN3
   987 2FFC AD C1 9E			lda X
   988 2FFF 85 86			sta :FP1MAN0
   989 3001 AD C2 9E			lda X+1
   990 3004 85 87			sta :FP1MAN1
   991 3006 AD C3 9E			lda X+2
   992 3009 85 88			sta :FP1MAN2
   993 300B AD C4 9E			lda X+3
   994 300E 85 89			sta :FP1MAN3
   995 3010 20 CA 25			jsr @FMUL
   996 3013 A5 8E			lda :FPMAN0
   997 3015 8D C1 9E			sta X
   998 3018 A5 8F			lda :FPMAN1
   999 301A 8D C2 9E			sta X+1
  1000 301D A5 90			lda :FPMAN2
  1001 301F 8D C3 9E			sta X+2
  1002 3022 A5 91			lda :FPMAN3
  1003 3024 8D C4 9E			sta X+3
  1004
  1005 				; optimize OK (SYSTEM), line = 1916
  1006
  1007 3027 AD C1 9E			lda X
  1008 302A 85 8E			sta :FPMAN0
  1009 302C AD C2 9E			lda X+1
  1010 302F 85 8F			sta :FPMAN1
  1011 3031 AD C3 9E			lda X+2
  1012 3034 85 90			sta :FPMAN2
  1013 3036 AD C4 9E			lda X+3
  1014 3039 85 91			sta :FPMAN3
  1015 303B 20 33 27			jsr @F2I
  1016 303E A5 8E			lda :FPMAN0
  1017 3040 8D CA 9E			sta I
  1018
  1019 				; optimize OK (SYSTEM), line = 1919
  1020
  1021 3043 AD C4 9E			lda X+3
  1022 3046 10 03			jpl l_019E
  1023 3048 CE CA 9E			dec I
  1024 304B			l_019E
  1025
  1026 				; optimize OK (SYSTEM), line = 1922
  1027
  1028 304B A0 00			ldy #$00
  1029 304D AD CA 9E			lda I
  1030 3050 10 01			spl
  1031 3052 88				dey
  1032 3053 85 8E			sta :FPMAN0
  1033 3055 84 8F			sty :FPMAN1
  1034 3057 84 90			sty :FPMAN2
  1035 3059 84 91			sty :FPMAN3
  1036 305B 20 A4 27			jsr @I2F
  1037 305E A5 8E			lda :FPMAN0
  1038 3060 85 8A			sta :FP2MAN0
  1039 3062 A5 8F			lda :FPMAN1
  1040 3064 85 8B			sta :FP2MAN1
  1041 3066 A5 90			lda :FPMAN2
  1042 3068 85 8C			sta :FP2MAN2
  1043 306A A5 91			lda :FPMAN3
  1044 306C 85 8D			sta :FP2MAN3
  1045 306E AD C1 9E			lda X
  1046 3071 85 86			sta :FP1MAN0
  1047 3073 AD C2 9E			lda X+1
  1048 3076 85 87			sta :FP1MAN1
  1049 3078 AD C3 9E			lda X+2
  1050 307B 85 88			sta :FP1MAN2
  1051 307D AD C4 9E			lda X+3
  1052 3080 85 89			sta :FP1MAN3
  1053 3082 20 63 24			jsr @FSUB
  1054 3085 A5 8E			lda :FPMAN0
  1055 3087 8D C1 9E			sta X
  1056 308A A5 8F			lda :FPMAN1
  1057 308C 8D C2 9E			sta X+1
  1058 308F A5 90			lda :FPMAN2
  1059 3091 8D C3 9E			sta X+2
  1060 3094 A5 91			lda :FPMAN3
  1061 3096 8D C4 9E			sta X+3
  1062
  1063 				; optimize OK (SYSTEM), line = 1925
  1064
  1065 3099 AD C5 9E			lda SC
  1066 309C F0 03			jeq l_01BB
  1067 309E EE CA 9E			inc I
  1068 30A1			l_01BB
  1069
  1070 				; optimize OK (SYSTEM), line = 1928
  1071
  1072 30A1 AD CA 9E			lda I
  1073 30A4 29 01			and #$01
  1074 30A6 D0 39			jne l_01D8
  1075 30A8 AD C1 9E			lda X
  1076 30AB 85 8A			sta :FP2MAN0
  1077 30AD AD C2 9E			lda X+1
  1078 30B0 85 8B			sta :FP2MAN1
  1079 30B2 AD C3 9E			lda X+2
  1080 30B5 85 8C			sta :FP2MAN2
  1081 30B7 AD C4 9E			lda X+3
  1082 30BA 85 8D			sta :FP2MAN3
  1083 30BC A9 00			lda #$00
  1084 30BE 85 86			sta :FP1MAN0
  1085 30C0 85 87			sta :FP1MAN1
  1086 30C2 A9 80			lda #$80
  1087 30C4 85 88			sta :FP1MAN2
  1088 30C6 A9 3F			lda #$3F
  1089 30C8 85 89			sta :FP1MAN3
  1090 30CA 20 63 24			jsr @FSUB
  1091 30CD A5 8E			lda :FPMAN0
  1092 30CF 8D C1 9E			sta X
  1093 30D2 A5 8F			lda :FPMAN1
  1094 30D4 8D C2 9E			sta X+1
  1095 30D7 A5 90			lda :FPMAN2
  1096 30D9 8D C3 9E			sta X+2
  1097 30DC A5 91			lda :FPMAN3
  1098 30DE 8D C4 9E			sta X+3
  1099 30E1			l_01D8
  1100
  1101 				; optimize OK (SYSTEM), line = 1931
  1102
  1103 30E1 AD C1 9E			lda X
  1104 30E4 85 8A			sta :FP2MAN0
  1105 30E6 AD C2 9E			lda X+1
  1106 30E9 85 8B			sta :FP2MAN1
  1107 30EB AD C3 9E			lda X+2
  1108 30EE 85 8C			sta :FP2MAN2
  1109 30F0 AD C4 9E			lda X+3
  1110 30F3 85 8D			sta :FP2MAN3
  1111 30F5 AD C1 9E			lda X
  1112 30F8 85 86			sta :FP1MAN0
  1113 30FA AD C2 9E			lda X+1
  1114 30FD 85 87			sta :FP1MAN1
  1115 30FF AD C3 9E			lda X+2
  1116 3102 85 88			sta :FP1MAN2
  1117 3104 AD C4 9E			lda X+3
  1118 3107 85 89			sta :FP1MAN3
  1119 3109 20 CA 25			jsr @FMUL
  1120 310C A5 8E			lda :FPMAN0
  1121 310E 8D C1 9E			sta X
  1122 3111 A5 8F			lda :FPMAN1
  1123 3113 8D C2 9E			sta X+1
  1124 3116 A5 90			lda :FPMAN2
  1125 3118 8D C3 9E			sta X+2
  1126 311B A5 91			lda :FPMAN3
  1127 311D 8D C4 9E			sta X+3
  1128
  1129 				; optimize OK (SYSTEM), line = 1932
  1130
  1131 3120 A9 42			lda #$42
  1132 3122 85 8A			sta :FP2MAN0
  1133 3124 A9 01			lda #$01
  1134 3126 85 8B			sta :FP2MAN1
  1135 3128 A9 5E			lda #$5E
  1136 312A 85 8C			sta :FP2MAN2
  1137 312C A9 3A			lda #$3A
  1138 312E 85 8D			sta :FP2MAN3
  1139 3130 AD C1 9E			lda X
  1140 3133 85 86			sta :FP1MAN0
  1141 3135 AD C2 9E			lda X+1
  1142 3138 85 87			sta :FP1MAN1
  1143 313A AD C3 9E			lda X+2
  1144 313D 85 88			sta :FP1MAN2
  1145 313F AD C4 9E			lda X+3
  1146 3142 85 89			sta :FP1MAN3
  1147 3144 20 CA 25			jsr @FMUL
  1148 3147 A5 8E			lda :FPMAN0
  1149 3149 85 8A			sta :FP2MAN0
  1150 314B A5 8F			lda :FPMAN1
  1151 314D 85 8B			sta :FP2MAN1
  1152 314F A5 90			lda :FPMAN2
  1153 3151 85 8C			sta :FP2MAN2
  1154 3153 A5 91			lda :FPMAN3
  1155 3155 85 8D			sta :FP2MAN3
  1156 3157 A9 D3			lda #$D3
  1157 3159 85 86			sta :FP1MAN0
  1158 315B A9 59			lda #$59
  1159 315D 85 87			sta :FP1MAN1
  1160 315F A9 A3			lda #$A3
  1161 3161 85 88			sta :FP1MAN2
  1162 3163 A9 3C			lda #$3C
  1163 3165 85 89			sta :FP1MAN3
  1164 3167 20 63 24			jsr @FSUB
  1165 316A A5 8E			lda :FPMAN0
  1166 316C 85 86			sta :FP1MAN0
  1167 316E A5 8F			lda :FPMAN1
  1168 3170 85 87			sta :FP1MAN1
  1169 3172 A5 90			lda :FPMAN2
  1170 3174 85 88			sta :FP1MAN2
  1171 3176 A5 91			lda :FPMAN3
  1172 3178 85 89			sta :FP1MAN3
  1173 317A AD C1 9E			lda X
  1174 317D 85 8A			sta :FP2MAN0
  1175 317F AD C2 9E			lda X+1
  1176 3182 85 8B			sta :FP2MAN1
  1177 3184 AD C3 9E			lda X+2
  1178 3187 85 8C			sta :FP2MAN2
  1179 3189 AD C4 9E			lda X+3
  1180 318C 85 8D			sta :FP2MAN3
  1181 318E 20 CA 25			jsr @FMUL
  1182 3191 A5 8E			lda :FPMAN0
  1183 3193 85 86			sta :FP1MAN0
  1184 3195 A5 8F			lda :FPMAN1
  1185 3197 85 87			sta :FP1MAN1
  1186 3199 A5 90			lda :FPMAN2
  1187 319B 85 88			sta :FP1MAN2
  1188 319D A5 91			lda :FPMAN3
  1189 319F 85 89			sta :FP1MAN3
  1190 31A1 A9 DE			lda #$DE
  1191 31A3 85 8A			sta :FP2MAN0
  1192 31A5 A9 4D			lda #$4D
  1193 31A7 85 8B			sta :FP2MAN1
  1194 31A9 A9 6F			lda #$6F
  1195 31AB 85 8C			sta :FP2MAN2
  1196 31AD A9 3E			lda #$3E
  1197 31AF 85 8D			sta :FP2MAN3
  1198 31B1 20 63 24			jsr @FSUB
  1199 31B4 A5 8E			lda :FPMAN0
  1200 31B6 85 86			sta :FP1MAN0
  1201 31B8 A5 8F			lda :FPMAN1
  1202 31BA 85 87			sta :FP1MAN1
  1203 31BC A5 90			lda :FPMAN2
  1204 31BE 85 88			sta :FP1MAN2
  1205 31C0 A5 91			lda :FPMAN3
  1206 31C2 85 89			sta :FP1MAN3
  1207 31C4 AD C1 9E			lda X
  1208 31C7 85 8A			sta :FP2MAN0
  1209 31C9 AD C2 9E			lda X+1
  1210 31CC 85 8B			sta :FP2MAN1
  1211 31CE AD C3 9E			lda X+2
  1212 31D1 85 8C			sta :FP2MAN2
  1213 31D3 AD C4 9E			lda X+3
  1214 31D6 85 8D			sta :FP2MAN3
  1215 31D8 20 CA 25			jsr @FMUL
  1216 31DB A5 8E			lda :FPMAN0
  1217 31DD 85 86			sta :FP1MAN0
  1218 31DF A5 8F			lda :FPMAN1
  1219 31E1 85 87			sta :FP1MAN1
  1220 31E3 A5 90			lda :FPMAN2
  1221 31E5 85 88			sta :FP1MAN2
  1222 31E7 A5 91			lda :FPMAN3
  1223 31E9 85 89			sta :FP1MAN3
  1224 31EB A9 00			lda #$00
  1225 31ED 85 8A			sta :FP2MAN0
  1226 31EF 85 8B			sta :FP2MAN1
  1227 31F1 A9 80			lda #$80
  1228 31F3 85 8C			sta :FP2MAN2
  1229 31F5 A9 3F			lda #$3F
  1230 31F7 85 8D			sta :FP2MAN3
  1231 31F9 20 5E 24			jsr @FADD
  1232 31FC A5 8E			lda :FPMAN0
  1233 31FE 85 9F			sta :STACKORIGIN+9
  1234 3200 A5 8F			lda :FPMAN1
  1235 3202 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  1236 3204 A5 90			lda :FPMAN2
  1237 3206 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
  1238 3208 A5 91			lda :FPMAN3
  1239 320A 85 CF			sta :STACKORIGIN+STACKWIDTH*3+9
  1240 320C AD C1 9E			lda X
  1241 320F 85 8A			sta :FP2MAN0
  1242 3211 AD C2 9E			lda X+1
  1243 3214 85 8B			sta :FP2MAN1
  1244 3216 AD C3 9E			lda X+2
  1245 3219 85 8C			sta :FP2MAN2
  1246 321B AD C4 9E			lda X+3
  1247 321E 85 8D			sta :FP2MAN3
  1248 3220 A9 00			lda #$00
  1249 3222 85 86			sta :FP1MAN0
  1250 3224 85 87			sta :FP1MAN1
  1251 3226 A9 80			lda #$80
  1252 3228 85 88			sta :FP1MAN2
  1253 322A A9 3F			lda #$3F
  1254 322C 85 89			sta :FP1MAN3
  1255 322E 20 63 24			jsr @FSUB
  1256 3231 A5 8E			lda :FPMAN0
  1257 3233 85 8A			sta :FP2MAN0
  1258 3235 A5 8F			lda :FPMAN1
  1259 3237 85 8B			sta :FP2MAN1
  1260 3239 A5 90			lda :FPMAN2
  1261 323B 85 8C			sta :FP2MAN2
  1262 323D A5 91			lda :FPMAN3
  1263 323F 85 8D			sta :FP2MAN3
  1264 3241 A5 9F			lda :STACKORIGIN+9
  1265 3243 85 86			sta :FP1MAN0
  1266 3245 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  1267 3247 85 87			sta :FP1MAN1
  1268 3249 A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
  1269 324B 85 88			sta :FP1MAN2
  1270 324D A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
  1271 324F 85 89			sta :FP1MAN3
  1272 3251 20 CA 25			jsr @FMUL
  1273 3254 A5 8E			lda :FPMAN0
  1274 3256 8D C6 9E			sta RESULT
  1275 3259 A5 8F			lda :FPMAN1
  1276 325B 8D C7 9E			sta RESULT+1
  1277 325E A5 90			lda :FPMAN2
  1278 3260 8D C8 9E			sta RESULT+2
  1279 3263 A5 91			lda :FPMAN3
  1280 3265 8D C9 9E			sta RESULT+3
  1281
  1282 				; optimize OK (SYSTEM), line = 1935
  1283
  1284 3268 AD CA 9E			lda I
  1285 326B 29 02			and #$02
  1286 326D C9 02			cmp #$02
  1287 326F D0 08			jne l_0225
  1288 3271 AD C9 9E			lda RESULT+3
  1289 3274 49 80			eor #$80
  1290 3276 8D C9 9E			sta RESULT+3
  1291 3279			l_0225
  1292 3279			@exit
  1293
  1294 				; ------------------------------------------------------------
  1295
  1296 = 9EC1			X	= DATAORIGIN+$001C
  1297 = 9EC5			SC	= DATAORIGIN+$0020
  1298 = 9EC6			RESULT	= DATAORIGIN+$0021
  1299 = 9ECA			I	= DATAORIGIN+$0025
  1300
  1301 = 9EC1			@VarData	= X
  1302 = 0006			@VarDataSize	= 6
  1303
  1304 3279 60				rts						; ret
  1305 				.endl
  1306
  1307 327A			.local	SIN						; FUNCTION | OVERLOAD
  1308 327A			.local	@01018F000
  1309
  1310 				; optimize OK (SYSTEM), line = 1949
  1311
  1312 327A AD CB 9E			lda X
  1313 327D 8D C1 9E			sta FSINCOS.X
  1314 3280 AD CC 9E			lda X+1
  1315 3283 8D C2 9E			sta FSINCOS.X+1
  1316 3286 AD CD 9E			lda X+2
  1317 3289 8D C3 9E			sta FSINCOS.X+2
  1318 328C AD CE 9E			lda X+3
  1319 328F 8D C4 9E			sta FSINCOS.X+3
  1320 3292 A9 00			lda #$00
  1321 3294 8D C5 9E			sta FSINCOS.SC
  1322 3297 20 40 2F			jsr FSINCOS
  1323 329A AD C6 9E			lda FSINCOS.RESULT
  1324 329D 8D CF 9E			sta RESULT
  1325 32A0 AD C7 9E			lda FSINCOS.RESULT+1
  1326 32A3 8D D0 9E			sta RESULT+1
  1327 32A6 AD C8 9E			lda FSINCOS.RESULT+2
  1328 32A9 8D D1 9E			sta RESULT+2
  1329 32AC AD C9 9E			lda FSINCOS.RESULT+3
  1330 32AF 8D D2 9E			sta RESULT+3
  1331 32B2			@exit
  1332
  1333 				; ------------------------------------------------------------
  1334
  1335 = 9ECB			X	= DATAORIGIN+$0026
  1336 = 9ECF			RESULT	= DATAORIGIN+$002A
  1337
  1338 = 9ECB			@VarData	= X
  1339 = 0004			@VarDataSize	= 4
  1340
  1341 32B2 60				rts						; ret
  1342 				.endl
  1343 				.endl							; overload
  1344
  1345 32B3			.local	COS						; FUNCTION | OVERLOAD
  1346 32B3			.local	@01018F000
  1347
  1348 				; optimize OK (SYSTEM), line = 1963
  1349
  1350 32B3 AD D3 9E			lda X
  1351 32B6 8D C1 9E			sta FSINCOS.X
  1352 32B9 AD D4 9E			lda X+1
  1353 32BC 8D C2 9E			sta FSINCOS.X+1
  1354 32BF AD D5 9E			lda X+2
  1355 32C2 8D C3 9E			sta FSINCOS.X+2
  1356 32C5 AD D6 9E			lda X+3
  1357 32C8 8D C4 9E			sta FSINCOS.X+3
  1358 32CB A9 01			lda #$01
  1359 32CD 8D C5 9E			sta FSINCOS.SC
  1360 32D0 20 40 2F			jsr FSINCOS
  1361 32D3 AD C6 9E			lda FSINCOS.RESULT
  1362 32D6 8D D7 9E			sta RESULT
  1363 32D9 AD C7 9E			lda FSINCOS.RESULT+1
  1364 32DC 8D D8 9E			sta RESULT+1
  1365 32DF AD C8 9E			lda FSINCOS.RESULT+2
  1366 32E2 8D D9 9E			sta RESULT+2
  1367 32E5 AD C9 9E			lda FSINCOS.RESULT+3
  1368 32E8 8D DA 9E			sta RESULT+3
  1369 32EB			@exit
  1370
  1371 				; ------------------------------------------------------------
  1372
  1373 = 9ED3			X	= DATAORIGIN+$002E
  1374 = 9ED7			RESULT	= DATAORIGIN+$0032
  1375
  1376 = 9ED3			@VarData	= X
  1377 = 0004			@VarDataSize	= 4
  1378
  1379 32EB 60				rts						; ret
  1380 				.endl
  1381 				.endl							; overload
  1382
  1383 32EC			.local	PAUSE						; PROCEDURE | ASSEMBLER | OVERLOAD
  1384 32EC			.local	@00
  1385
  1386 				; -------------------  ASM Block 00000043  -------------------
  1387
  1388 32EC 2C 0B D4			bit VCOUNT
  1389 32EF 30 FB			bmi *-3
  1390 32F1 2C 0B D4			bit VCOUNT
  1391 32F4 10 FB			bpl *-3
  1392
  1393 32F6			@exit
  1394 					.ifdef @new
  1395 					lda <@VarData
  1396 					sta :ztmp
  1397 					lda >@VarData
  1398 					ldy #@VarDataSize-1
  1399 					jmp @FreeMem
  1400 					els
  1401 32F6 60				rts						; ret
  1402 					eif
  1403 				.endl
  1404 				.endl							; overload
  1405
  1406 32F7			.local	RANDOMIZE					; PROCEDURE | ASSEMBLER
  1407
  1408 				; -------------------  ASM Block 00000045  -------------------
  1409
  1410
  1411 32F7 AD 0A D2 8D AE 9E	  mva $d20a RndSeed
  1412 32FD A9 00 8D AF 9E	  mva #$00  RndSeed+1
  1413
  1414
  1415 3302			@exit
  1416 					.ifdef @new
  1417 					lda <@VarData
  1418 					sta :ztmp
  1419 					lda >@VarData
  1420 					ldy #@VarDataSize-1
  1421 					jmp @FreeMem
  1422 					els
  1423 3302 60				rts						; ret
  1424 					eif
  1425 				.endl
  1426
  1427 3303			.local	RANDOM						; FUNCTION | ASSEMBLER | OVERLOAD
  1428 3303			.local	@010180000
  1429 3303 8D DB 9E			sta RANGE
  1430
  1431 				; -------------------  ASM Block 00000049  -------------------
  1432
  1433
  1434 				;BYTE FUNC Rand(BYTE range)
  1435 				; returns random number between 0 and
  1436 				; range-1.  If range=0, then a random
  1437 				; number between 0 and 255 is returned
  1438
  1439 3306 AC 0A D2		  ldy $d20a   ; RANDOM
  1440
  1441 3309 AD DB 9E		  lda range
  1442 330C F0 08		  beq stop
  1443
  1444 330E 85 8E		  sta :ecx
  1445 3310 84 86		  sty :eax
  1446
  1447 3312 20 BF 22		  jsr imulCL
  1448 3315 A8			  tay
  1449
  1450 3316 8C DC 9E		stop  sty Result
  1451
  1452
  1453 3319			@exit
  1454
  1455 				; ------------------------------------------------------------
  1456
  1457 = 9EDB			RANGE	= DATAORIGIN+$0036
  1458 = 9EDC			RESULT	= DATAORIGIN+$0037
  1459
  1460 = 9EDB			@VarData	= RANGE
  1461 = 0001			@VarDataSize	= 1
  1462
  1463 3319 60				rts						; ret
  1464 				.endl
  1465 				.endl							; overload
  1466
  1467 331A			.local	RANDOM						; FUNCTION | OVERLOAD
  1468 331A			.local	@010184000
  1469
  1470 				; optimize OK (system_atari.inc), line = 179
  1471
  1472 331A AD DE 9E			lda RANGE+1
  1473 331D 0D DD 9E			ora RANGE
  1474 3320 D0 0B			jne l_0265
  1475
  1476 				; optimize OK (system_atari.inc), line = 180
  1477
  1478 3322 A9 00			lda #$00
  1479 3324 8D DF 9E			sta RESULT
  1480 3327 8D E0 9E			sta RESULT+1
  1481 332A 4C 8F 33			jmp l_0273
  1482 332D			l_0265
  1483
  1484 				; optimize OK (system_atari.inc), line = 183
  1485
  1486 332D AD AE 9E			lda RNDSEED
  1487 3330 85 8E			sta :ecx
  1488 3332 AD AF 9E			lda RNDSEED+1
  1489 3335 85 8F			sta :ecx+1
  1490 3337 A9 95			lda #$95
  1491 3339 85 86			sta :eax
  1492 333B A9 45			lda #$45
  1493 333D 85 87			sta :eax+1
  1494 					.ifdef fmulinit
  1495 					fmulu_16
  1496 					els
  1497 333F 20 0B 23			imulCX
  1498 					eif
  1499 3342 A5 86			lda :eax
  1500 3344 8D AE 9E			sta RNDSEED
  1501 3347 A5 87			lda :eax+1
  1502 3349 8D AF 9E			sta RNDSEED+1
  1503
  1504 				; optimize OK (system_atari.inc), line = 184
  1505
  1506 334C AD DD 9E			lda RANGE
  1507 334F 85 8E			sta @SMALLINT.MOD.B
  1508 3351 AD DE 9E			lda RANGE+1
  1509 3354 85 8F			sta @SMALLINT.MOD.B+1
  1510 3356 AD AE 9E			lda RNDSEED
  1511 3359 85 86			sta @SMALLINT.MOD.A
  1512 335B AD AF 9E			lda RNDSEED+1
  1513 335E 85 87			sta @SMALLINT.MOD.A+1
  1514 3360 20 50 22			jsr @SMALLINT.MOD
  1515 3363 A5 92			lda @SMALLINT.MOD.RESULT
  1516 3365 8D DF 9E			sta RESULT
  1517 3368 A5 93			lda @SMALLINT.MOD.RESULT+1
  1518 336A 8D E0 9E			sta RESULT+1
  1519
  1520 				; -------------------  ASM Block 00000050  -------------------
  1521
  1522 336D AD DE 9E			lda range+1
  1523 3370 10 07			bpl plus
  1524
  1525 3372 AD E0 9E			lda Result+1
  1526 3375 30 18			bmi ok
  1527 3377 10 05			bpl sign
  1528
  1529 3379 AD E0 9E		plus	lda Result+1
  1530 337C 10 11			bpl ok
  1531
  1532 337E A9 00		sign 	lda #0
  1533 3380 38 ED DF 9E			sub Result
  1534 3384 8D DF 9E			sta Result
  1535
  1536 3387 A9 00			lda #0
  1537 3389 ED E0 9E			sbc Result+1
  1538 338C 8D E0 9E			sta Result+1
  1539 338F			ok
  1540
  1541 338F			l_0273
  1542 338F			@exit
  1543
  1544 				; ------------------------------------------------------------
  1545
  1546 = 9EDD			RANGE	= DATAORIGIN+$0038
  1547 = 9EDF			RESULT	= DATAORIGIN+$003A
  1548
  1549 = 9EDD			@VarData	= RANGE
  1550 = 0002			@VarDataSize	= 2
  1551
  1552 338F 60				rts						; ret
  1553 				.endl
  1554 				.endl							; overload
  1555
  1556 				; ------------------------------------------------------------
  1557 				; ------------------------------------------------------------
  1558 3390			@UnitInit
  1559
  1560 				; -------------------  ASM Block 00000060  -------------------
  1561
  1562 					.ifdef @CmdLine
  1563
  1564 					ldx #$0F
  1565 					mva:rpl $340,x IOCB@COPY,x-
  1566 					rts
  1567
  1568 				IOCB@COPY	:16 brk
  1569 					eif
  1570
  1571
  1572 3390 60				rts
  1573
  1574 				; ------------------------------------------------------------
  1575
  1576 = 0648			M_PI_2	= $0648
  1577 = 0192			D_PI_2	= $0192
  1578 = 0004			D_PI_180	= $04
  1579 = 0101			__PORTB_BANKS	= $0101
  1580 = 0000			MGTIA	= $00
  1581 = 0080			MVBXE	= $80
  1582 = 0000			VBXE_XDLADR	= $00
  1583 = 00E0			VBXE_BCBTMP	= $E0
  1584 = 0100			VBXE_BCBADR	= $0100
  1585 = 1000			VBXE_MAPADR	= $1000
  1586 = 1000			VBXE_CHBASE	= $1000
  1587 = 5000			VBXE_OVRADR	= $5000
  1588 = B000			VBXE_WINDOW	= $B000
  1589 = 0000			IDLI	= $00
  1590 = 0001			IVBL	= $01
  1591 = 0001			IVBLD	= $01
  1592 = 0002			IVBLI	= $02
  1593 = 0003			ITIM1	= $03
  1594 = 0004			ITIM2	= $04
  1595 = 0005			ITIM4	= $05
  1596 = 00FE			CH_DELCHR	= $FE
  1597 = 009B			CH_ENTER	= $9B
  1598 = 001B			CH_ESC	= $1B
  1599 = 001C			CH_CURS_UP	= $1C
  1600 = 001D			CH_CURS_DOWN	= $1D
  1601 = 001E			CH_CURS_LEFT	= $1E
  1602 = 001F			CH_CURS_RIGHT	= $1F
  1603 = 007F			CH_TAB	= $7F
  1604 = 009B			CH_EOL	= $9B
  1605 = 007D			CH_CLR	= $7D
  1606 = 00FD			CH_BELL	= $FD
  1607 = 007E			CH_DEL	= $7E
  1608 = 009C			CH_DELLINE	= $9C
  1609 = 009D			CH_INSLINE	= $9D
  1610 = 0000			PAL_PMCOLOR0	= $00
  1611 = 0001			PAL_PMCOLOR1	= $01
  1612 = 0002			PAL_PMCOLOR2	= $02
  1613 = 0003			PAL_PMCOLOR3	= $03
  1614 = 0004			PAL_COLOR0	= $04
  1615 = 0005			PAL_COLOR1	= $05
  1616 = 0006			PAL_COLOR2	= $06
  1617 = 0007			PAL_COLOR3	= $07
  1618 = 0008			PAL_COLBAK	= $08
  1619 = 0000			COLOR_BLACK	= $00
  1620 = 000E			COLOR_WHITE	= $0E
  1621 = 0032			COLOR_RED	= $32
  1622 = 0096			COLOR_CYAN	= $96
  1623 = 0068			COLOR_VIOLET	= $68
  1624 = 00C4			COLOR_GREEN	= $C4
  1625 = 0074			COLOR_BLUE	= $74
  1626 = 00EE			COLOR_YELLOW	= $EE
  1627 = 0028			COLOR_ORANGE	= $28
  1628 = 00E4			COLOR_BROWN	= $E4
  1629 = 003C			COLOR_LIGHTRED	= $3C
  1630 = 0004			COLOR_GRAY1	= $04
  1631 = 0006			COLOR_GRAY2	= $06
  1632 = 000A			COLOR_GRAY3	= $0A
  1633 = 00CC			COLOR_LIGHTGREEN	= $CC
  1634 = 007C			COLOR_LIGHTBLUE	= $7C
  1635 = 0004			FMOPENREAD	= $04
  1636 = 0008			FMOPENWRITE	= $08
  1637 = 0009			FMOPENAPPEND	= $09
  1638 = 000C			FMOPENREADWRITE	= $0C
  1639 = 9EA5			DATESEPARATOR	= DATAORIGIN+$0000
  1640 = D20A			RND	= $D20A
  1641 = 02C0			adr.PALETTE	= $02C0
  1642 3391			.var PALETTE	= adr.PALETTE .word
  1643 = D012			adr.HPALETTE	= $D012
  1644 3391			.var HPALETTE	= adr.HPALETTE .word
  1645 = 9EA6			FILEMODE	= DATAORIGIN+$0001
  1646 = 9EA7			GRAPHMODE	= DATAORIGIN+$0002
  1647 = 9EA8			IORESULT	= DATAORIGIN+$0003
  1648 = 9EA9			EOLN	= DATAORIGIN+$0004
  1649 = 9EAA			SCREENWIDTH	= DATAORIGIN+$0005
  1650 = 9EAC			SCREENHEIGHT	= DATAORIGIN+$0007
  1651 = 0000			adr.MEM	= $00
  1652 3391			.var MEM	= adr.MEM .word
  1653 = 9EAE			RNDSEED	= DATAORIGIN+$0009
  1654
  1655 = 3391 C0 02		PALETTE
  1655 = 3393 12 D0		HPALETTE
  1655 = 3395 00 00		MEM
  1655 				.endl							; UNIT SYSTEM
  1656
  1657 				; ------------------------------------------------------------
  1658
  1659 3397			.local	ATARI						; UNIT
  1660
  1661 				; ------------------------------------------------------------
  1662
  1663 = 0000			DL_BLANK1	= $00
  1664 = 0010			DL_BLANK2	= $10
  1665 = 0020			DL_BLANK3	= $20
  1666 = 0030			DL_BLANK4	= $30
  1667 = 0040			DL_BLANK5	= $40
  1668 = 0050			DL_BLANK6	= $50
  1669 = 0060			DL_BLANK7	= $60
  1670 = 0070			DL_BLANK8	= $70
  1671 = 0080			DL_DLI	= $80
  1672 = 0040			DL_LMS	= $40
  1673 = 0020			DL_VSCROLL	= $20
  1674 = 0010			DL_HSCROLL	= $10
  1675 = 0001			DL_JMP	= $01
  1676 = 0041			DL_JVB	= $41
  1677 = 0002			DL_MODE_2	= $02
  1678 = 0003			DL_MODE_3	= $03
  1679 = 0004			DL_MODE_4	= $04
  1680 = 0005			DL_MODE_5	= $05
  1681 = 000E			DL_MODE_E	= $0E
  1682 = 000F			DL_MODE_F	= $0F
  1683 = 0010			IRQENS	= $10
  1684 = 0012			RTCLOK	= $12
  1685 = 0012			RTCLOK1	= $12
  1686 = 0013			RTCLOK2	= $13
  1687 = 0014			RTCLOK3	= $14
  1688 = 004D			ATRACT	= $4D
  1689 = 0052			LMARGIN	= $52
  1690 = 0053			RMARGIN	= $53
  1691 = 0054			ROWCRS	= $54
  1692 = 0055			COLCRS	= $55
  1693 = 0057			DINDEX	= $57
  1694 = 0058			SAVMSC	= $58
  1695 = 0062			PALNTS	= $62
  1696 = 006A			RAMTOP	= $6A
  1697 = 0200			VDSLST	= $0200
  1698 = 0230			SDLSTL	= $0230
  1699 = 0290			TXTROW	= $0290
  1700 = 0291			TXTCOL	= $0291
  1701 = 0293			TINDEX	= $0293
  1702 = 0294			TXTMSC	= $0294
  1703 = 022F			SDMCTL	= $022F
  1704 = 026F			GPRIOR	= $026F
  1705 = 02F0			CRSINH	= $02F0
  1706 = 02F3			CHACT	= $02F3
  1707 = 02F4			CHBAS	= $02F4
  1708 = 02FC			CH	= $02FC
  1709 = 02FD			FILDAT	= $02FD
  1710 = 02C0			PCOLR0	= $02C0
  1711 = 02C1			PCOLR1	= $02C1
  1712 = 02C2			PCOLR2	= $02C2
  1713 = 02C3			PCOLR3	= $02C3
  1714 = 02C4			COLOR0	= $02C4
  1715 = 02C5			COLOR1	= $02C5
  1716 = 02C6			COLOR2	= $02C6
  1717 = 02C7			COLOR3	= $02C7
  1718 = 02C8			COLOR4	= $02C8
  1719 = 02C8			COLBAKS	= $02C8
  1720 = D000			HPOSP0	= $D000
  1721 = D001			HPOSP1	= $D001
  1722 = D002			HPOSP2	= $D002
  1723 = D003			HPOSP3	= $D003
  1724 = D004			HPOSM0	= $D004
  1725 = D005			HPOSM1	= $D005
  1726 = D006			HPOSM2	= $D006
  1727 = D007			HPOSM3	= $D007
  1728 = D008			SIZEP0	= $D008
  1729 = D009			SIZEP1	= $D009
  1730 = D00A			SIZEP2	= $D00A
  1731 = D00B			SIZEP3	= $D00B
  1732 = D00C			SIZEM	= $D00C
  1733 = D00D			GRAFP0	= $D00D
  1734 = D00E			GRAFP1	= $D00E
  1735 = D00F			GRAFP2	= $D00F
  1736 = D010			GRAFP3	= $D010
  1737 = D011			GRAFM	= $D011
  1738 = D004			P0PF	= $D004
  1739 = D014			PAL	= $D014
  1740 = D013			TRIG3	= $D013
  1741 = D012			COLPM0	= $D012
  1742 = D013			COLPM1	= $D013
  1743 = D014			COLPM2	= $D014
  1744 = D015			COLPM3	= $D015
  1745 = D016			COLPF0	= $D016
  1746 = D017			COLPF1	= $D017
  1747 = D018			COLPF2	= $D018
  1748 = D019			COLPF3	= $D019
  1749 = D01A			COLBAK	= $D01A
  1750 = D01A			COLBK	= $D01A
  1751 = D01B			PRIOR	= $D01B
  1752 = D01D			GRACTL	= $D01D
  1753 = D01D			PMCNTL	= $D01D
  1754 = D01E			HITCLR	= $D01E
  1755 = D01F			CONSOL	= $D01F
  1756 = D200			AUDF1	= $D200
  1757 = D201			AUDC1	= $D201
  1758 = D202			AUDF2	= $D202
  1759 = D203			AUDC2	= $D203
  1760 = D204			AUDF3	= $D204
  1761 = D205			AUDC3	= $D205
  1762 = D206			AUDF4	= $D206
  1763 = D207			AUDC4	= $D207
  1764 = D208			AUDCTL	= $D208
  1765 = D209			KBCODE	= $D209
  1766 = D20E			IRQEN	= $D20E
  1767 = D20F			SKSTAT	= $D20F
  1768 = D300			PORTA	= $D300
  1769 = D301			PORTB	= $D301
  1770 = D302			PACTL	= $D302
  1771 = D400			DMACTL	= $D400
  1772 = D401			CHACTL	= $D401
  1773 = D402			DLISTL	= $D402
  1774 = D404			HSCROL	= $D404
  1775 = D405			VSCROL	= $D405
  1776 = D407			PMBASE	= $D407
  1777 = D409			CHBASE	= $D409
  1778 = D40A			WSYNC	= $D40A
  1779 = D40B			VCOUNT	= $D40B
  1780 = D40C			PENH	= $D40C
  1781 = D40D			PENV	= $D40D
  1782 = D40E			NMIEN	= $D40E
  1783 = FFFA			NMIVEC	= $FFFA
  1784 = FFFC			RESETVEC	= $FFFC
  1785 = FFFE			IRQVEC	= $FFFE
  1786
  1787 				.endl							; UNIT ATARI
  1788
  1789 				; ------------------------------------------------------------
  1790
  1791 3397			.local	CRT						; UNIT
  1792
  1793 				; ------------------------------------------------------------
  1794
  1795 = 9EE1			TEXTATTR	= DATAORIGIN+$003C
  1796 = D01F			CONSOL	= $D01F
  1797 = 0000			CN_START_SELECT_OPTION	= $00
  1798 = 0001			CN_SELECT_OPTION	= $01
  1799 = 0002			CN_START_OPTION	= $02
  1800 = 0003			CN_OPTION	= $03
  1801 = 0004			CN_START_SELECT	= $04
  1802 = 0005			CN_SELECT	= $05
  1803 = 0006			CN_START	= $06
  1804 = 0007			CN_NONE	= $07
  1805 = 0000			BLACK	= $00
  1806 = 000F			WHITE	= $0F
  1807 = 0026			RED	= $26
  1808 = 00AC			CYAN	= $AC
  1809 = 0048			PURPLE	= $48
  1810 = 00B6			GREEN	= $B6
  1811 = 0086			BLUE	= $86
  1812 = 00DC			YELLOW	= $DC
  1813 = 0018			ORANGE	= $18
  1814 = 00F4			BROWN	= $F4
  1815 = 002A			LIGHT_RED	= $2A
  1816 = 0004			DARK_GREY	= $04
  1817 = 0008			GREY	= $08
  1818 = 00BC			LIGHT_GREEN	= $BC
  1819 = 009A			LIGHT_BLUE	= $9A
  1820 = 000C			LIGHT_GREY	= $0C
  1821 = 0000			BW40	= $00
  1822 = 0001			CO40	= $01
  1823 = 0002			BW80	= $02
  1824 = 0003			CO80	= $03
  1825 = 0007			MONO	= $07
  1826 = 0001			C40	= $01
  1827 = 0003			C80	= $03
  1828 = 0080			BLINK	= $80
  1829
  1830 				.endl							; UNIT CRT
  1831
  1832 				; ------------------------------------------------------------
  1833
  1834 3397			.local	TYPES						; UNIT
  1835
  1836 				; ------------------------------------------------------------
  1837
  1838 				.endl							; UNIT TYPES
  1839
  1840 				; ------------------------------------------------------------
  1841
  1842 3397			.local	GRAPH						; UNIT
  1843
  1844 				; ------------------------------------------------------------
  1845
  1846 = 0080			CURRENTDRIVER	= $80
  1847 = 0000			DETECT	= $00
  1848 = 0001			CGA	= $01
  1849 = 0002			MCGA	= $02
  1850 = 0003			EGA	= $03
  1851 = 0004			EGA64	= $04
  1852 = 0005			EGAMONO	= $05
  1853 = 0006			LOWRES	= $06
  1854 = 0007			HERCMONO	= $07
  1855 = 0009			VGA	= $09
  1856 = 000A			VESA	= $0A
  1857 = 000B			D1BIT	= $0B
  1858 = 000C			D2BIT	= $0C
  1859 = 000D			D4BIT	= $0D
  1860 = 000E			D6BIT	= $0E
  1861 = 000F			D8BIT	= $0F
  1862 = 0010			D12BIT	= $10
  1863 = 0018			M640X400	= $18
  1864 = 0018			M640X480	= $18
  1865 = 0001			GROK	= $01
  1866 = 00FF			GRNOINITGRAPH	= $FF
  1867 = 00FE			GRNOTDETECTED	= $FE
  1868 = 00FD			GRFILENOTFOUND	= $FD
  1869 = 00FC			GRINVALIDDRIVER	= $FC
  1870 = 00FB			GRNOLOADMEM	= $FB
  1871 = 00FA			GRNOSCANMEM	= $FA
  1872 = 00F9			GRNOFLOODMEM	= $F9
  1873 = 00F8			GRFONTNOTFOUND	= $F8
  1874 = 00F7			GRNOFONTMEM	= $F7
  1875 = 00F6			GRINVALIDMODE	= $F6
  1876 = 00F5			GRERROR	= $F5
  1877 = 00F4			GRIOERROR	= $F4
  1878 = 00F3			GRINVALIDFONT	= $F3
  1879 = 00F2			GRINVALIDFONTNUM	= $F2
  1880 = 00EE			GRINVALIDVERSION	= $EE
  1881 = 0000			CGAC0	= $00
  1882 = 0001			CGAC1	= $01
  1883 = 0002			CGAC2	= $02
  1884 = 0003			CGAC3	= $03
  1885 = 0004			CGAHI	= $04
  1886 = 0000			MCGAC0	= $00
  1887 = 0001			MCGAC1	= $01
  1888 = 0002			MCGAC2	= $02
  1889 = 0003			MCGAC3	= $03
  1890 = 0004			MCGAMED	= $04
  1891 = 0005			MCGAHI	= $05
  1892 = 0000			EGALO	= $00
  1893 = 0001			EGAHI	= $01
  1894 = 0000			EGA64LO	= $00
  1895 = 0001			EGA64HI	= $01
  1896 = 0003			EGAMONOHI	= $03
  1897 = 000A			VGALO	= $0A
  1898 = 001F			VGAMED	= $1F
  1899 = 0018			VGAHI	= $18
  1900 = 9EE2			GRAPHRESULT	= DATAORIGIN+$003D
  1901 = 9EE3			GETCOLOR	= DATAORIGIN+$003E
  1902 = 9EE4			VIDEORAM	= DATAORIGIN+$003F
  1903 = 9EE6			adr.LASTARCCOORDS	= DATAORIGIN+$0041	; [12] RECORD
  1904 3397			.var LASTARCCOORDS	= adr.LASTARCCOORDS .word
  1905 = 9EE6			LASTARCCOORDS.X	= DATAORIGIN+$0041
  1906 = 9EE8			LASTARCCOORDS.Y	= DATAORIGIN+$0043
  1907 = 9EEA			LASTARCCOORDS.XSTART	= DATAORIGIN+$0045
  1908 = 9EEC			LASTARCCOORDS.YSTART	= DATAORIGIN+$0047
  1909 = 9EEE			LASTARCCOORDS.XEND	= DATAORIGIN+$0049
  1910 = 9EF0			LASTARCCOORDS.YEND	= DATAORIGIN+$004B
  1911 = 9EF2			WIN_LEFT	= DATAORIGIN+$004D
  1912 = 9EF4			WIN_RIGHT	= DATAORIGIN+$004F
  1913 = 9EF6			WIN_TOP	= DATAORIGIN+$0051
  1914 = 9EF8			WIN_BOTTOM	= DATAORIGIN+$0053
  1915 = 9EFA			SCANLINE_WIDTH	= DATAORIGIN+$0055
  1916 = 9EFB			CURRENTX	= DATAORIGIN+$0056
  1917 = 9EFD			CURRENTY	= DATAORIGIN+$0058
  1918
  1919 = 3397 E6 9E		LASTARCCOORDS
  1919 				.endl							; UNIT GRAPH
  1920
  1921 				; ------------------------------------------------------------
  1922
  1923 3399			.local	VBXE						; UNIT
  1924
  1925 3399			.local	SETTOPBORDER					; PROCEDURE | ASSEMBLER | REGISTER
  1926 3399 85 8A			sta A
  1927
  1928 				; -------------------  ASM Block 00000100  -------------------
  1929
  1930 339B				fxs FX_MEMS #$80+MAIN.SYSTEM.VBXE_XDLADR/$1000
Macro: FXS [Source: vbxe.hea]
     2 339B A9 80		        lda     #$80+MAIN.SYSTEM.VBXE_XDLADR/$1000
     3 339D A0 5F		        ldy     #FX_MEMS
     4 339F 91 80		        sta     (fxptr),y
  1931
  1932 33A1 A5 8A			lda a
  1933 33A3 38 E9 01			sub #1
  1934
  1935 33A6 A0 02			ldy #s@xdl.RPTL_
  1936 33A8 99 00 B0			sta MAIN.SYSTEM.VBXE_WINDOW,y
  1937
  1938 33AB				fxs FX_MEMS #$00
Macro: FXS [Source: vbxe.hea]
     2 33AB A9 00		        lda     #$00
     3 33AD A0 5F		        ldy     #FX_MEMS
     4 33AF 91 80		        sta     (fxptr),y
  1939
  1940 				; ------------------------------------------------------------
  1941
  1942 = 008A			A	= :EDX
  1943
  1944 33B1			@exit
  1945 					.ifdef @new
  1946 					lda <@VarData
  1947 					sta :ztmp
  1948 					lda >@VarData
  1949 					ldy #@VarDataSize-1
  1950 					jmp @FreeMem
  1951 					els
  1952 33B1 60				rts						; ret
  1953 					eif
  1954 				.endl
  1955
  1956 33B2			.local	SETXDLHEIGHT					; PROCEDURE | ASSEMBLER | REGISTER
  1957 33B2 85 8A			sta A
  1958
  1959 				; -------------------  ASM Block 00000101  -------------------
  1960
  1961 33B4				fxs FX_MEMS #$80+MAIN.SYSTEM.VBXE_XDLADR/$1000
Macro: FXS [Source: vbxe.hea]
     2 33B4 A9 80		        lda     #$80+MAIN.SYSTEM.VBXE_XDLADR/$1000
     3 33B6 A0 5F		        ldy     #FX_MEMS
     4 33B8 91 80		        sta     (fxptr),y
  1962
  1963 33BA A5 8A			lda a
  1964 33BC 38 E9 01			sub #1
  1965
  1966 33BF A0 05			ldy #s@xdl.RPTL
  1967 33C1 99 00 B0			sta MAIN.SYSTEM.VBXE_WINDOW,y
  1968
  1969 33C4				fxs FX_MEMS #$00
Macro: FXS [Source: vbxe.hea]
     2 33C4 A9 00		        lda     #$00
     3 33C6 A0 5F		        ldy     #FX_MEMS
     4 33C8 91 80		        sta     (fxptr),y
  1970
  1971 				; ------------------------------------------------------------
  1972
  1973 = 008A			A	= :EDX
  1974
  1975 33CA			@exit
  1976 					.ifdef @new
  1977 					lda <@VarData
  1978 					sta :ztmp
  1979 					lda >@VarData
  1980 					ldy #@VarDataSize-1
  1981 					jmp @FreeMem
  1982 					els
  1983 33CA 60				rts						; ret
  1984 					eif
  1985 				.endl
  1986
  1987 33CB			.local	VBXEMEMORYBANK					; PROCEDURE | ASSEMBLER
  1988 33CB 8D 13 9F			sta B
  1989
  1990 				; -------------------  ASM Block 00000113  -------------------
  1991
  1992 33CE				fxs FX_MEMS b
Macro: FXS [Source: vbxe.hea]
     2 33CE AD 13 9F		        lda     B
     3 33D1 A0 5F		        ldy     #FX_MEMS
     4 33D3 91 80		        sta     (fxptr),y
  1993
  1994 				; ------------------------------------------------------------
  1995
  1996 = 9F13			B	= DATAORIGIN+$006E
  1997
  1998 = 9F13			@VarData	= B
  1999 = 0001			@VarDataSize	= 1
  2000
  2001 33D5			@exit
  2002 					.ifdef @new
  2003 					lda <@VarData
  2004 					sta :ztmp
  2005 					lda >@VarData
  2006 					ldy #@VarDataSize-1
  2007 					jmp @FreeMem
  2008 					els
  2009 33D5 60				rts						; ret
  2010 					eif
  2011 				.endl
  2012
  2013 33D6			.local	READVBXEMEMORYBYTE				; FUNCTION
  2014
  2015 				; optimize OK (vbxe_memorystream.inc), line = 20
  2016
  2017 33D6 AC 14 9F 84 84 AC + 	mwy POSITION :bp2
  2018 33E0 A0 02			ldy #$02
  2019 33E2 B1 84			lda (:bp2),y
  2020 33E4 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  2021 33E6 88				dey
  2022 33E7 B1 84			lda (:bp2),y
  2023 33E9 46 AF			lsr :STACKORIGIN+STACKWIDTH+9
  2024 33EB 6A				ror @
  2025 33EC 46 AF			lsr :STACKORIGIN+STACKWIDTH+9
  2026 33EE 6A				ror @
  2027 33EF 46 AF			lsr :STACKORIGIN+STACKWIDTH+9
  2028 33F1 6A				ror @
  2029 33F2 46 AF			lsr :STACKORIGIN+STACKWIDTH+9
  2030 33F4 6A				ror @
  2031 33F5 09 80			ora #$80
  2032 33F7 8D 17 9F			sta BNK
  2033
  2034 				; optimize OK (vbxe_memorystream.inc), line = 21
  2035
  2036 33FA 88				dey
  2037 33FB B1 84			lda (:bp2),y
  2038 33FD 8D 18 9F			sta ADR
  2039 3400 C8				iny
  2040 3401 B1 84			lda (:bp2),y
  2041 3403 29 0F			and #$0F
  2042 3405 09 B0			ora #$B0
  2043 3407 8D 19 9F			sta ADR+1
  2044
  2045 				; optimize OK (vbxe_memorystream.inc), line = 23
  2046
  2047 340A AD 17 9F			lda BNK
  2048 340D 20 CB 33			jsr VBXEMEMORYBANK
  2049
  2050 				; optimize OK (vbxe_memorystream.inc), line = 25
  2051
  2052 3410 AC 19 9F			ldy ADR+1
  2053 3413 84 83			sty :bp+1
  2054 3415 AC 18 9F			ldy ADR
  2055 3418 B1 82			lda (:bp),y
  2056 341A 8D 16 9F			sta RESULT
  2057
  2058 				; optimize OK (vbxe_memorystream.inc), line = 27
  2059
  2060 341D AC 14 9F 84 84 AC + 	mwy POSITION :bp2
  2061 3427 A0 00			ldy #$00
  2062 3429 B1 84			lda (:bp2),y
  2063 342B 18 69 01			add #$01
  2064 342E 91 84			sta (:bp2),y
  2065 3430 C8				iny
  2066 3431 B1 84			lda (:bp2),y
  2067 3433 69 00			adc #$00
  2068 3435 91 84			sta (:bp2),y
  2069 3437 C8				iny
  2070 3438 B1 84			lda (:bp2),y
  2071 343A 69 00			adc #$00
  2072 343C 91 84			sta (:bp2),y
  2073 343E C8				iny
  2074 343F B1 84			lda (:bp2),y
  2075 3441 69 00			adc #$00
  2076 3443 91 84			sta (:bp2),y
  2077 3445			@exit
  2078
  2079 				; ------------------------------------------------------------
  2080
  2081 = 9F14			POSITION	= DATAORIGIN+$006F
  2082 = 9F16			RESULT	= DATAORIGIN+$0071
  2083 = 9F17			BNK	= DATAORIGIN+$0072
  2084 = 9F18			ADR	= DATAORIGIN+$0073
  2085
  2086 = 9F14			@VarData	= POSITION
  2087 = 0005			@VarDataSize	= 5
  2088
  2089 3445 60				rts						; ret
  2090 				.endl
  2091
  2092 3446			.local	WRITEVBXEMEMORYBYTE				; PROCEDURE
  2093
  2094 				; optimize OK (vbxe_memorystream.inc), line = 39
  2095
  2096 3446 AC 1A 9F 84 84 AC + 	mwy POSITION :bp2
  2097 3450 A0 02			ldy #$02
  2098 3452 B1 84			lda (:bp2),y
  2099 3454 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  2100 3456 88				dey
  2101 3457 B1 84			lda (:bp2),y
  2102 3459 46 AF			lsr :STACKORIGIN+STACKWIDTH+9
  2103 345B 6A				ror @
  2104 345C 46 AF			lsr :STACKORIGIN+STACKWIDTH+9
  2105 345E 6A				ror @
  2106 345F 46 AF			lsr :STACKORIGIN+STACKWIDTH+9
  2107 3461 6A				ror @
  2108 3462 46 AF			lsr :STACKORIGIN+STACKWIDTH+9
  2109 3464 6A				ror @
  2110 3465 09 80			ora #$80
  2111 3467 8D 1D 9F			sta BNK
  2112
  2113 				; optimize OK (vbxe_memorystream.inc), line = 40
  2114
  2115 346A 88				dey
  2116 346B B1 84			lda (:bp2),y
  2117 346D 8D 1E 9F			sta ADR
  2118 3470 C8				iny
  2119 3471 B1 84			lda (:bp2),y
  2120 3473 29 0F			and #$0F
  2121 3475 09 B0			ora #$B0
  2122 3477 8D 1F 9F			sta ADR+1
  2123
  2124 				; optimize OK (vbxe_memorystream.inc), line = 42
  2125
  2126 347A AD 1D 9F			lda BNK
  2127 347D 20 CB 33			jsr VBXEMEMORYBANK
  2128
  2129 				; optimize OK (vbxe_memorystream.inc), line = 44
  2130
  2131 3480 AC 1F 9F			ldy ADR+1
  2132 3483 84 83			sty :bp+1
  2133 3485 AC 1E 9F			ldy ADR
  2134 3488 AD 1C 9F			lda A
  2135 348B 91 82			sta (:bp),y
  2136
  2137 				; optimize OK (vbxe_memorystream.inc), line = 46
  2138
  2139 348D AC 1A 9F 84 84 AC + 	mwy POSITION :bp2
  2140 3497 A0 00			ldy #$00
  2141 3499 B1 84			lda (:bp2),y
  2142 349B 18 69 01			add #$01
  2143 349E 91 84			sta (:bp2),y
  2144 34A0 C8				iny
  2145 34A1 B1 84			lda (:bp2),y
  2146 34A3 69 00			adc #$00
  2147 34A5 91 84			sta (:bp2),y
  2148 34A7 C8				iny
  2149 34A8 B1 84			lda (:bp2),y
  2150 34AA 69 00			adc #$00
  2151 34AC 91 84			sta (:bp2),y
  2152 34AE C8				iny
  2153 34AF B1 84			lda (:bp2),y
  2154 34B1 69 00			adc #$00
  2155 34B3 91 84			sta (:bp2),y
  2156
  2157 				; ------------------------------------------------------------
  2158
  2159 = 9F1A			POSITION	= DATAORIGIN+$0075
  2160 = 9F1C			A	= DATAORIGIN+$0077
  2161 = 9F1D			BNK	= DATAORIGIN+$0078
  2162 = 9F1E			ADR	= DATAORIGIN+$0079
  2163
  2164 = 9F1A			@VarData	= POSITION
  2165 = 0006			@VarDataSize	= 6
  2166
  2167 34B5			@exit
  2168 					.ifdef @new
  2169 					lda <@VarData
  2170 					sta :ztmp
  2171 					lda >@VarData
  2172 					ldy #@VarDataSize-1
  2173 					jmp @FreeMem
  2174 					els
  2175 34B5 60				rts						; ret
  2176 					eif
  2177 				.endl
  2178
  2179 34B6			.local	TVBXEMEMORYSTREAM.WRITEBUFFER			; PROCEDURE
  2180 34B6 8D 2C 9F			sta TVBXEMEMORYSTREAM
  2181 34B9 8C 2D 9F			sty TVBXEMEMORYSTREAM+1
  2182 34BC 8D 32 9F			sta POSITION
  2183 34BF 8C 33 9F			sty POSITION+1
  2184 34C2 18 69 04			add #4
  2185 34C5 90 01			scc
  2186 34C7 C8				iny
  2187 34C8 8D 34 9F			sta SIZE
  2188 34CB 8C 35 9F			sty SIZE+1
  2189
  2190 				; optimize OK (vbxe_memorystream.inc), line = 124
  2191
  2192 34CE AC 32 9F 84 84 AC + 	mwy POSITION :bp2
  2193 34D8 A0 02			ldy #$02
  2194 34DA B1 84			lda (:bp2),y
  2195 34DC 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  2196 34DE 88				dey
  2197 34DF B1 84			lda (:bp2),y
  2198 34E1 46 AF			lsr :STACKORIGIN+STACKWIDTH+9
  2199 34E3 6A				ror @
  2200 34E4 46 AF			lsr :STACKORIGIN+STACKWIDTH+9
  2201 34E6 6A				ror @
  2202 34E7 46 AF			lsr :STACKORIGIN+STACKWIDTH+9
  2203 34E9 6A				ror @
  2204 34EA 46 AF			lsr :STACKORIGIN+STACKWIDTH+9
  2205 34EC 6A				ror @
  2206 34ED 09 80			ora #$80
  2207 34EF 8D 36 9F			sta BNK
  2208
  2209 				; optimize OK (vbxe_memorystream.inc), line = 125
  2210
  2211 34F2 88				dey
  2212 34F3 B1 84			lda (:bp2),y
  2213 34F5 8D 37 9F			sta ADR
  2214 34F8 C8				iny
  2215 34F9 B1 84			lda (:bp2),y
  2216 34FB 29 0F			and #$0F
  2217 34FD 09 B0			ora #$B0
  2218 34FF 8D 38 9F			sta ADR+1
  2219
  2220 				; optimize OK (vbxe_memorystream.inc), line = 127
  2221
  2222 3502 AD 36 9F			lda BNK
  2223 3505 20 CB 33			jsr VBXEMEMORYBANK
  2224
  2225 				; optimize OK (vbxe_memorystream.inc), line = 129
  2226
  2227 3508 AD 2E 9F			lda BUFFER
  2228 350B 8D 3B 9F			sta SRC
  2229 350E AD 2F 9F			lda BUFFER+1
  2230 3511 8D 3C 9F			sta SRC+1
  2231
  2232 				; optimize OK (vbxe_memorystream.inc), line = 131
  2233
  2234 3514 A9 00			lda #$00
  2235 3516 8D 39 9F			sta I
  2236 3519 8D 3A 9F			sta I+1
  2237 351C AD 30 9F			lda COUNT
  2238 351F 38 E9 01			sub #$01
  2239 3522 8D 35 35			sta @FORTMP_0394_0
  2240 3525 AD 31 9F			lda COUNT+1
  2241 3528 E9 00			sbc #$00
  2242 352A 8D 2E 35			sta @FORTMP_0394_1
  2243
  2244 352D			l_0397
  2245 				; --- ForToDoCondition
  2246 352D A9 00			lda @FORTMP_0394_1::#$00
  2247 352F CD 3A 9F			cmp I+1
  2248 3532 D0 05			bne @+
  2249 3534 A9 00			lda @FORTMP_0394_0::#$00
  2250 3536 CD 39 9F			cmp I
  2251 				@
  2252 3539 90 53			jcc l_03A3
  2253
  2254 				; optimize OK (vbxe_memorystream.inc), line = 133
  2255
  2256 353B AC 3B 9F 84 84 AC + 	mwy SRC :bp2
  2257 3545 A0 00			ldy #$00
  2258 3547 B1 84			lda (:bp2),y
  2259 3549 AC 38 9F			ldy ADR+1
  2260 354C 84 83			sty :bp+1
  2261 354E AC 37 9F			ldy ADR
  2262 3551 91 82			sta (:bp),y
  2263
  2264 				; optimize FAIL (0, vbxe_memorystream.inc), line = 135
  2265
  2266 3553 EE 37 9F			inc ADR
  2267 3556 D0 03			sne
  2268 3558 EE 38 9F			inc ADR+1
  2269
  2270 				; optimize FAIL (0, vbxe_memorystream.inc), line = 136
  2271
  2272 355B EE 3B 9F			inc SRC
  2273 355E D0 03			sne
  2274 3560 EE 3C 9F			inc SRC+1
  2275
  2276 				; optimize OK (vbxe_memorystream.inc), line = 138
  2277
  2278 3563 AD 38 9F			lda ADR+1
  2279 3566 C9 C0			cmp #$C0
  2280 3568 90 1A			jcc l_03C2
  2281 356A D0 05			bne @+
  2282 356C AD 37 9F			lda ADR
  2283 356F 90 13			jcc l_03C2
  2284 				@
  2285
  2286 				; optimize FAIL (0, vbxe_memorystream.inc), line = 139
  2287
  2288 3571 EE 36 9F			inc BNK
  2289
  2290 				; optimize OK (vbxe_memorystream.inc), line = 140
  2291
  2292 3574 AD 36 9F			lda BNK
  2293 3577 20 CB 33			jsr VBXEMEMORYBANK
  2294
  2295 				; optimize OK (vbxe_memorystream.inc), line = 141
  2296
  2297 357A A9 00			lda #$00
  2298 357C 8D 37 9F			sta ADR
  2299 357F A9 B0			lda #$B0
  2300 3581 8D 38 9F			sta ADR+1
  2301 3584			l_03C2
  2302
  2303 				; --- ForToDoEpilog
  2304 3584 EE 39 9F			inc I
  2305 3587 D0 A4			jne l_0397
  2306 3589 EE 3A 9F			inc I+1
  2307 358C D0 9F			jne l_0397
  2308 358E			l_03A3
  2309
  2310 				; optimize OK (vbxe_memorystream.inc), line = 146
  2311
  2312 358E A9 00			lda #$00
  2313 3590 20 CB 33			jsr VBXEMEMORYBANK
  2314
  2315 				; optimize OK (vbxe_memorystream.inc), line = 148
  2316
  2317 3593 AC 32 9F 84 84 AC + 	mwy POSITION :bp2
  2318 359D A0 00			ldy #$00
  2319 359F B1 84			lda (:bp2),y
  2320 35A1 18 6D 30 9F			add COUNT
  2321 35A5 91 84			sta (:bp2),y
  2322 35A7 C8				iny
  2323 35A8 B1 84			lda (:bp2),y
  2324 35AA 6D 31 9F			adc COUNT+1
  2325 35AD 91 84			sta (:bp2),y
  2326 35AF C8				iny
  2327 35B0 B1 84			lda (:bp2),y
  2328 35B2 69 00			adc #$00
  2329 35B4 91 84			sta (:bp2),y
  2330 35B6 C8				iny
  2331 35B7 B1 84			lda (:bp2),y
  2332 35B9 69 00			adc #$00
  2333 35BB 91 84			sta (:bp2),y
  2334
  2335 				; ------------------------------------------------------------
  2336
  2337 = 9F2C			TVBXEMEMORYSTREAM	= DATAORIGIN+$0087
  2338 = 9F2E			BUFFER	= DATAORIGIN+$0089
  2339 = 9F30			COUNT	= DATAORIGIN+$008B
  2340 = 9F32			POSITION	= DATAORIGIN+$008D
  2341 = 9F34			SIZE	= DATAORIGIN+$008F
  2342 = 9F36			BNK	= DATAORIGIN+$0091
  2343 = 9F37			ADR	= DATAORIGIN+$0092
  2344 = 9F39			I	= DATAORIGIN+$0094
  2345 = 9F3B			SRC	= DATAORIGIN+$0096
  2346
  2347 = 9F2C			@VarData	= TVBXEMEMORYSTREAM
  2348 = 0011			@VarDataSize	= 17
  2349
  2350 35BD			@exit
  2351 					.ifdef @new
  2352 					lda <@VarData
  2353 					sta :ztmp
  2354 					lda >@VarData
  2355 					ldy #@VarDataSize-1
  2356 					jmp @FreeMem
  2357 					els
  2358 35BD 60				rts						; ret
  2359 					eif
  2360 				.endl
  2361
  2362 35BE			.local	TVBXEMEMORYSTREAM.READBYTE			; FUNCTION
  2363 35BE 8D 3F 9F			sta TVBXEMEMORYSTREAM
  2364 35C1 8C 40 9F			sty TVBXEMEMORYSTREAM+1
  2365 35C4 8D 42 9F			sta POSITION
  2366 35C7 8C 43 9F			sty POSITION+1
  2367 35CA 18 69 04			add #4
  2368 35CD 90 01			scc
  2369 35CF C8				iny
  2370 35D0 8D 44 9F			sta SIZE
  2371 35D3 8C 45 9F			sty SIZE+1
  2372
  2373 				; optimize OK (vbxe_memorystream.inc), line = 158
  2374
  2375 35D6 AD 42 9F			lda POSITION
  2376 35D9 8D 14 9F			sta READVBXEMEMORYBYTE.POSITION
  2377 35DC AD 43 9F			lda POSITION+1
  2378 35DF 8D 15 9F			sta READVBXEMEMORYBYTE.POSITION+1
  2379 35E2 20 D6 33			jsr READVBXEMEMORYBYTE
  2380 35E5 AD 16 9F			lda READVBXEMEMORYBYTE.RESULT
  2381 35E8 8D 41 9F			sta RESULT
  2382
  2383 				; optimize OK (vbxe_memorystream.inc), line = 160
  2384
  2385 35EB A9 00			lda #$00
  2386 35ED 20 CB 33			jsr VBXEMEMORYBANK
  2387 35F0			@exit
  2388
  2389 				; ------------------------------------------------------------
  2390
  2391 = 9F3F			TVBXEMEMORYSTREAM	= DATAORIGIN+$009A
  2392 = 9F41			RESULT	= DATAORIGIN+$009C
  2393 = 9F42			POSITION	= DATAORIGIN+$009D
  2394 = 9F44			SIZE	= DATAORIGIN+$009F
  2395
  2396 = 9F3F			@VarData	= TVBXEMEMORYSTREAM
  2397 = 0006			@VarDataSize	= 6
  2398
  2399 35F0 60				rts						; ret
  2400 				.endl
  2401
  2402 35F1			.local	TVBXEMEMORYSTREAM.WRITEBYTE			; PROCEDURE
  2403 35F1 8D 4E 9F			sta TVBXEMEMORYSTREAM
  2404 35F4 8C 4F 9F			sty TVBXEMEMORYSTREAM+1
  2405 35F7 8D 51 9F			sta POSITION
  2406 35FA 8C 52 9F			sty POSITION+1
  2407 35FD 18 69 04			add #4
  2408 3600 90 01			scc
  2409 3602 C8				iny
  2410 3603 8D 53 9F			sta SIZE
  2411 3606 8C 54 9F			sty SIZE+1
  2412
  2413 				; optimize OK (vbxe_memorystream.inc), line = 198
  2414
  2415 3609 AD 51 9F			lda POSITION
  2416 360C 8D 1A 9F			sta WRITEVBXEMEMORYBYTE.POSITION
  2417 360F AD 52 9F			lda POSITION+1
  2418 3612 8D 1B 9F			sta WRITEVBXEMEMORYBYTE.POSITION+1
  2419 3615 AD 50 9F			lda B
  2420 3618 8D 1C 9F			sta WRITEVBXEMEMORYBYTE.A
  2421 361B 20 46 34			jsr WRITEVBXEMEMORYBYTE
  2422
  2423 				; optimize OK (vbxe_memorystream.inc), line = 200
  2424
  2425 361E A9 00			lda #$00
  2426 3620 20 CB 33			jsr VBXEMEMORYBANK
  2427
  2428 				; ------------------------------------------------------------
  2429
  2430 = 9F4E			TVBXEMEMORYSTREAM	= DATAORIGIN+$00A9
  2431 = 9F50			B	= DATAORIGIN+$00AB
  2432 = 9F51			POSITION	= DATAORIGIN+$00AC
  2433 = 9F53			SIZE	= DATAORIGIN+$00AE
  2434
  2435 = 9F4E			@VarData	= TVBXEMEMORYSTREAM
  2436 = 0007			@VarDataSize	= 7
  2437
  2438 3623			@exit
  2439 					.ifdef @new
  2440 					lda <@VarData
  2441 					sta :ztmp
  2442 					lda >@VarData
  2443 					ldy #@VarDataSize-1
  2444 					jmp @FreeMem
  2445 					els
  2446 3623 60				rts						; ret
  2447 					eif
  2448 				.endl
  2449
  2450 3624			.local	TVBXEMEMORYSTREAM.CLEAR				; PROCEDURE
  2451 3624 8D 5D 9F			sta TVBXEMEMORYSTREAM
  2452 3627 8C 5E 9F			sty TVBXEMEMORYSTREAM+1
  2453 362A 8D 5F 9F			sta POSITION
  2454 362D 8C 60 9F			sty POSITION+1
  2455 3630 18 69 04			add #4
  2456 3633 90 01			scc
  2457 3635 C8				iny
  2458 3636 8D 61 9F			sta SIZE
  2459 3639 8C 62 9F			sty SIZE+1
  2460
  2461 				; optimize OK (vbxe_memorystream.inc), line = 239
  2462
  2463 363C AC 5F 9F 84 84 AC + 	mwy POSITION :bp2
  2464 3646 A0 00			ldy #$00
  2465 3648 B1 84			lda (:bp2),y
  2466 364A 8D 63 9F			sta ADR
  2467 364D C8				iny
  2468 364E B1 84			lda (:bp2),y
  2469 3650 8D 64 9F			sta ADR+1
  2470 3653 C8				iny
  2471 3654 B1 84			lda (:bp2),y
  2472 3656 8D 65 9F			sta ADR+2
  2473 3659 C8				iny
  2474 365A B1 84			lda (:bp2),y
  2475 365C 8D 66 9F			sta ADR+3
  2476
  2477 				; optimize OK (vbxe_memorystream.inc), line = 240
  2478
  2479 365F AC 61 9F 84 84 AC + 	mwy SIZE :bp2
  2480 3669 A0 00			ldy #$00
  2481 366B B1 84			lda (:bp2),y
  2482 366D 8D 67 9F			sta SIZ
  2483 3670 C8				iny
  2484 3671 B1 84			lda (:bp2),y
  2485 3673 8D 68 9F			sta SIZ+1
  2486 3676 C8				iny
  2487 3677 B1 84			lda (:bp2),y
  2488 3679 8D 69 9F			sta SIZ+2
  2489 367C C8				iny
  2490 367D B1 84			lda (:bp2),y
  2491 367F 8D 6A 9F			sta SIZ+3
  2492
  2493 				; -------------------  ASM Block 00000114  -------------------
  2494
  2495 3682 8A 48			txa:pha
  2496
  2497 3684 AD 63 9F 8D F2 36		mva adr _adr
  2498 368A AD 64 9F 8D F3 36		mva adr+1 _adr+1
  2499 3690 AD 65 9F 8D F4 36		mva adr+2 _adr+2
  2500
  2501 3696				fxs FX_MEMS #$80+MAIN.SYSTEM.VBXE_XDLADR/$1000
Macro: FXS [Source: vbxe.hea]
     2 3696 A9 80		        lda     #$80+MAIN.SYSTEM.VBXE_XDLADR/$1000
     3 3698 A0 5F		        ldy     #FX_MEMS
     4 369A 91 80		        sta     (fxptr),y
  2502
  2503 369C AD F4 36 CD 69 9F + loop	cpw _adr+1 siz+1
  2504 36AA B0 37			bcs skp
  2505
  2506 36AC A0 14			ldy #20
  2507 36AE B9 EC 36 99 E0 B0 + 	mva:rpl bltClr,y MAIN.SYSTEM.VBXE_WINDOW+MAIN.SYSTEM.VBXE_BCBTMP,y-
  2508
  2509 36B7				fxs FX_BL_ADR0 #MAIN.SYSTEM.VBXE_BCBTMP	; program blittera od adresu MAIN.SYSTEM.VBXE_BCBTMP
Macro: FXS [Source: vbxe.hea]
     2 36B7 A9 E0		        lda     #MAIN.SYSTEM.VBXE_BCBTMP
     3 36B9 A0 50		        ldy     #FX_BL_ADR0
     4 36BB 91 80		        sta     (fxptr),y
  2510 36BD				fxs FX_BL_ADR1 #$00			; zaraz za programem VBXE Display List
Macro: FXS [Source: vbxe.hea]
     2 36BD A9 00		        lda     #$00
     3 36BF A0 51		        ldy     #FX_BL_ADR1
     4 36C1 91 80		        sta     (fxptr),y
  2511 36C3				fxsa FX_BL_ADR2
Macro: FXSA [Source: vbxe.hea]
     2 36C3 A0 52		        ldy     #FX_BL_ADR2
     3 36C5 91 80		        sta     (fxptr),y
  2512
  2513 36C7				fxs FX_BLITTER_START #$01	; !!! start gdy 1 !!!
Macro: FXS [Source: vbxe.hea]
     2 36C7 A9 01		        lda     #$01
     3 36C9 A0 53		        ldy     #FX_BLITTER_START
     4 36CB 91 80		        sta     (fxptr),y
  2514
  2515 36CD			wait	fxla FX_BLITTER_BUSY
Macro: FXLA [Source: vbxe.hea]
     2 36CD A0 53		        ldy     #FX_BLITTER_BUSY
     3 36CF B1 80		        lda     (fxptr),y
  2516 36D1 D0 FA			bne wait
  2517
  2518 36D3 A9 00			lda #$00
  2519 36D5 8D F2 36			sta _adr
  2520 36D8 EE F3 36 D0 03 EE + 	inw _adr+1
  2521
  2522 36E0 4C 9C 36			jmp loop
  2523
  2524 36E3			skp	fxs FX_MEMS #$00		; disable VBXE bank
Macro: FXS [Source: vbxe.hea]
     2 36E3 A9 00		        lda     #$00
     3 36E5 A0 5F		        ldy     #FX_MEMS
     4 36E7 91 80		        sta     (fxptr),y
  2525
  2526 36E9 4C 01 37			jmp stop
  2527
  2528 36EC 00 00 00		bltClr	.long 0x00	; source address
  2529 36EF 00 00			.word 0x00	; source step y
  2530 36F1 00				.byte 0x00	; source step x
  2531 36F2 00 00 00		_adr	.long 0x00	; destination address
  2532 36F5 00 01			.word 0x0100	; destination step y
  2533 36F7 01				.byte 0x01	; destination step x
  2534 36F8 FF 00		_siz	.word 0xff	; width
  2535 36FA 00				.byte 0x00	; height
  2536 36FB 00				dta 0x00	; and mask (and mask equal to 0, memory will be filled with xor mask)
  2537 36FC 00				dta 0x00	; xor mask
  2538 36FD 00				dta 0x00	; collision and mask
  2539 36FE 00				dta 0x00	; zoom
  2540 36FF 00				dta 0x00	; pattern feature
  2541 3700 00				dta 0x00	; control
  2542
  2543 3701 68 AA		stop	pla:tax
  2544
  2545 				; optimize OK (vbxe_memorystream.inc), line = 292
  2546
  2547 3703 AC 5F 9F 84 84 AC + 	mwy POSITION :bp2
  2548 370D A0 00			ldy #$00
  2549 370F 98				tya
  2550 3710 91 84			sta (:bp2),y
  2551 3712 C8				iny
  2552 3713 91 84			sta (:bp2),y
  2553 3715 C8				iny
  2554 3716 91 84			sta (:bp2),y
  2555 3718 C8				iny
  2556 3719 91 84			sta (:bp2),y
  2557
  2558 				; optimize OK (vbxe_memorystream.inc), line = 293
  2559
  2560 371B AC 61 9F 84 84 AC + 	mwy SIZE :bp2
  2561 3725 A0 00			ldy #$00
  2562 3727 91 84			sta (:bp2),y
  2563 3729 C8				iny
  2564 372A 91 84			sta (:bp2),y
  2565 372C C8				iny
  2566 372D A9 08			lda #$08
  2567 372F 91 84			sta (:bp2),y
  2568 3731 C8				iny
  2569 3732 A9 00			lda #$00
  2570 3734 91 84			sta (:bp2),y
  2571
  2572 				; ------------------------------------------------------------
  2573
  2574 = 9F5D			TVBXEMEMORYSTREAM	= DATAORIGIN+$00B8
  2575 = 9F5F			POSITION	= DATAORIGIN+$00BA
  2576 = 9F61			SIZE	= DATAORIGIN+$00BC
  2577 = 9F63			ADR	= DATAORIGIN+$00BE
  2578 = 9F67			SIZ	= DATAORIGIN+$00C2
  2579
  2580 = 9F5D			@VarData	= TVBXEMEMORYSTREAM
  2581 = 000E			@VarDataSize	= 14
  2582
  2583 3736			@exit
  2584 					.ifdef @new
  2585 					lda <@VarData
  2586 					sta :ztmp
  2587 					lda >@VarData
  2588 					ldy #@VarDataSize-1
  2589 					jmp @FreeMem
  2590 					els
  2591 3736 60				rts						; ret
  2592 					eif
  2593 				.endl
  2594
  2595 3737			.local	COLORMAPOFF					; PROCEDURE | ASSEMBLER
  2596
  2597 				; -------------------  ASM Block 00000123  -------------------
  2598
  2599 					@setxdl #e@xdl.mapoff
  2599 				 LDA# E@XDL.MAPOFF\ JSR @SETXDL
  2599 3737 A9 05		 LDA# E@XDL.MAPOFF
  2599 3739 20 66 29		 JSR @SETXDL
  2600
  2601 373C			@exit
  2602 					.ifdef @new
  2603 					lda <@VarData
  2604 					sta :ztmp
  2605 					lda >@VarData
  2606 					ldy #@VarDataSize-1
  2607 					jmp @FreeMem
  2608 					els
  2609 373C 60				rts						; ret
  2610 					eif
  2611 				.endl
  2612
  2613 373D			.local	SETHORIZONTALRES				; PROCEDURE | OVERLOAD
  2614 373D			.local	@0201810000180000
  2615
  2616 				; optimize OK (VBXE), line = 643
  2617
  2618 373D AD 6B 9F			lda A
  2619 3740 8D A7 9E			sta SYSTEM.GRAPHMODE
  2620
  2621 				; optimize OK (VBXE), line = 645
  2622
  2623 3743 A9 C0			lda #$C0
  2624 3745 8D AC 9E			sta SYSTEM.SCREENHEIGHT
  2625 3748 A9 00			lda #$00
  2626 374A 8D AD 9E			sta SYSTEM.SCREENHEIGHT+1
  2627
  2628 				; optimize OK (VBXE), line = 647
  2629
  2630 374D AD 6B 9F			lda A
  2631 3750 8D 6E 9F			sta @CASETMP_0005
  2632 3753 C9 0A			cmp #$0A
  2633 3755 D0 12			jne l_0439
  2634 				@
  2635
  2636 				; optimize OK (VBXE), line = 648
  2637
  2638 3757 A9 A0			lda #$A0
  2639 3759 8D AA 9E			sta SYSTEM.SCREENWIDTH
  2640 375C A9 00			lda #$00
  2641 375E 8D AB 9E			sta SYSTEM.SCREENWIDTH+1
  2642 3761 A9 01			lda #$01
  2643 3763 8D 6B 9F			sta A
  2644 3766 4C AE 37			jmp a_0005
  2645 3769			l_0439
  2646 3769 C9 1F			cmp #$1F
  2647 376B D0 12			jne l_0448
  2648
  2649 				; optimize OK (VBXE), line = 649
  2650
  2651 376D A9 40			lda #$40
  2652 376F 8D AA 9E			sta SYSTEM.SCREENWIDTH
  2653 3772 A9 01			lda #$01
  2654 3774 8D AB 9E			sta SYSTEM.SCREENWIDTH+1
  2655 3777 A9 02			lda #$02
  2656 3779 8D 6B 9F			sta A
  2657 377C 4C AE 37			jmp a_0005
  2658 377F			l_0448
  2659 377F C9 18			cmp #$18
  2660 3781 D0 12			jne l_0457
  2661
  2662 				; optimize OK (VBXE), line = 650
  2663
  2664 3783 A9 80			lda #$80
  2665 3785 8D AA 9E			sta SYSTEM.SCREENWIDTH
  2666 3788 A9 02			lda #$02
  2667 378A 8D AB 9E			sta SYSTEM.SCREENWIDTH+1
  2668 378D A9 03			lda #$03
  2669 378F 8D 6B 9F			sta A
  2670 3792 4C AE 37			jmp a_0005
  2671 3795			l_0457
  2672
  2673 				; optimize OK (VBXE), line = 654
  2674
  2675 3795 A9 50			lda #$50
  2676 3797 8D AA 9E			sta SYSTEM.SCREENWIDTH
  2677 379A A9 00			lda #$00
  2678 379C 8D AB 9E			sta SYSTEM.SCREENWIDTH+1
  2679
  2680 				; optimize OK (VBXE), line = 655
  2681
  2682 379F A9 18			lda #$18
  2683 37A1 8D AC 9E			sta SYSTEM.SCREENHEIGHT
  2684 37A4 A9 00			lda #$00
  2685 37A6 8D AD 9E			sta SYSTEM.SCREENHEIGHT+1
  2686
  2687 				; optimize OK (VBXE), line = 656
  2688
  2689 37A9 A9 02			lda #$02
  2690 37AB 8D 6B 9F			sta A
  2691 37AE			a_0005
  2692
  2693 				; -------------------  ASM Block 00000124  -------------------
  2694
  2695 37AE 8A 48			txa:pha
  2696
  2697 37B0 AD AA 9E			lda MAIN.SYSTEM.ScreenWidth
  2698 37B3 AE AB 9E			ldx MAIN.SYSTEM.ScreenWidth+1
  2699
  2700 37B6 AC AC 9E			ldy MAIN.SYSTEM.ScreenHeight
  2701
  2702 37B9 20 5D 21			@SCREENSIZE
  2703
  2704 					@setxdl a
  2704 				 LDA A\ JSR @SETXDL
  2704 37BC AD 6B 9F		 LDA A
  2704 37BF 20 66 29		 JSR @SETXDL
  2705
  2706 37C2				fxs FX_MEMS #$80+MAIN.SYSTEM.VBXE_XDLADR/$1000
Macro: FXS [Source: vbxe.hea]
     2 37C2 A9 80		        lda     #$80+MAIN.SYSTEM.VBXE_XDLADR/$1000
     3 37C4 A0 5F		        ldy     #FX_MEMS
     4 37C6 91 80		        sta     (fxptr),y
Source: arkanoid_vbxe.a65
  2707
  2708 37C8 A0 09			ldy #s@xdl.ovstep
  2709
  2710 37CA AD 6C 9F			lda s
  2711 37CD 99 00 B0			sta MAIN.SYSTEM.VBXE_WINDOW,y
  2712
  2713 37D0 AD 6D 9F			lda s+1
  2714 37D3 99 01 B0			sta MAIN.SYSTEM.VBXE_WINDOW+1,y
  2715
  2716 37D6				fxs FX_MEMS #$00
Macro: FXS [Source: vbxe.hea]
     2 37D6 A9 00		        lda     #$00
     3 37D8 A0 5F		        ldy     #FX_MEMS
     4 37DA 91 80		        sta     (fxptr),y
Source: arkanoid_vbxe.a65
  2717
  2718 37DC 68 AA			pla:tax
  2719
  2720 				; ------------------------------------------------------------
  2721
  2722 = 9F6B			A	= DATAORIGIN+$00C6
  2723 = 9F6C			S	= DATAORIGIN+$00C7
  2724 = 9F6E			@CASETMP_0005	= DATAORIGIN+$00C9
  2725
  2726 = 9F6B			@VarData	= A
  2727 = 0004			@VarDataSize	= 4
  2728
  2729 37DE			@exit
  2730 					.ifdef @new
  2731 					lda <@VarData
  2732 					sta :ztmp
  2733 					lda >@VarData
  2734 					ldy #@VarDataSize-1
  2735 					jmp @FreeMem
  2736 					els
  2737 37DE 60				rts						; ret
  2738 					eif
  2739 				.endl
  2740 				.endl							; overload
  2741
  2742 37DF			.local	SETHORIZONTALRES				; PROCEDURE | OVERLOAD
  2743 37DF			.local	@010180000
  2744 37DF 8D 6F 9F			sta A
  2745
  2746 				; optimize OK (VBXE), line = 698
  2747
  2748 37E2 8D 6B 9F			sta SETHORIZONTALRES.@0201810000180000.A
  2749 37E5 A9 40			lda #$40
  2750 37E7 8D 6C 9F			sta SETHORIZONTALRES.@0201810000180000.S
  2751 37EA A9 01			lda #$01
  2752 37EC 8D 6D 9F			sta SETHORIZONTALRES.@0201810000180000.S+1
  2753 37EF 20 3D 37			jsr SETHORIZONTALRES.@0201810000180000
  2754
  2755 				; ------------------------------------------------------------
  2756
  2757 = 9F6F			A	= DATAORIGIN+$00CA
  2758
  2759 = 9F6F			@VarData	= A
  2760 = 0001			@VarDataSize	= 1
  2761
  2762 37F2			@exit
  2763 					.ifdef @new
  2764 					lda <@VarData
  2765 					sta :ztmp
  2766 					lda >@VarData
  2767 					ldy #@VarDataSize-1
  2768 					jmp @FreeMem
  2769 					els
  2770 37F2 60				rts						; ret
  2771 					eif
  2772 				.endl
  2773 				.endl							; overload
  2774
  2775 37F3			.local	RUNBCB						; PROCEDURE | ASSEMBLER
  2776
  2777 				; -------------------  ASM Block 00000126  -------------------
  2778
  2779 37F3				fxs	FX_BL_ADR0	a
Macro: FXS [Source: vbxe.hea]
     2 37F3 AD 70 9F		        lda     A
     3 37F6 A0 50		        ldy     #FX_BL_ADR0
     4 37F8 91 80		        sta     (fxptr),y
Source: arkanoid_vbxe.a65
  2780 37FA AD 71 9F			lda	a+1
  2781 37FD 29 0F			and	#$0f
  2782 37FF				fxsa	FX_BL_ADR1
Macro: FXSA [Source: vbxe.hea]
     2 37FF A0 51		        ldy     #FX_BL_ADR1
     3 3801 91 80		        sta     (fxptr),y
Source: arkanoid_vbxe.a65
  2783 3803				fxs	FX_BL_ADR2	#$00
Macro: FXS [Source: vbxe.hea]
     2 3803 A9 00		        lda     #$00
     3 3805 A0 52		        ldy     #FX_BL_ADR2
     4 3807 91 80		        sta     (fxptr),y
Source: arkanoid_vbxe.a65
  2784
  2785 3809				fxs	FX_BLITTER_START #$01		; !!! start gdy 1 !!!
Macro: FXS [Source: vbxe.hea]
     2 3809 A9 01		        lda     #$01
     3 380B A0 53		        ldy     #FX_BLITTER_START
     4 380D 91 80		        sta     (fxptr),y
Source: arkanoid_vbxe.a65
  2786
  2787 				;wait	fxla	FX_BLITTER_BUSY
  2788 				;	bne	wait
  2789
  2790 				; ------------------------------------------------------------
  2791
  2792 = 9F70			A	= DATAORIGIN+$00CB
  2793 = 9EA5			A.SRC_ADR	= DATAORIGIN+$0000
  2794 = 9EA5			A.SRC_ADR.BYTE0	= DATAORIGIN+$0000
  2795 = 9EA6			A.SRC_ADR.BYTE1	= DATAORIGIN+$0001
  2796 = 9EA7			A.SRC_ADR.BYTE2	= DATAORIGIN+$0002
  2797 = 9EA8			A.SRC_STEP_Y	= DATAORIGIN+$0003
  2798 = 9EAA			A.SRC_STEP_X	= DATAORIGIN+$0005
  2799 = 9EAB			A.DST_ADR	= DATAORIGIN+$0006
  2800 = 9EAB			A.DST_ADR.BYTE0	= DATAORIGIN+$0006
  2801 = 9EAC			A.DST_ADR.BYTE1	= DATAORIGIN+$0007
  2802 = 9EAD			A.DST_ADR.BYTE2	= DATAORIGIN+$0008
  2803 = 9EAE			A.DST_STEP_Y	= DATAORIGIN+$0009
  2804 = 9EB0			A.DST_STEP_X	= DATAORIGIN+$000B
  2805 = 9EB1			A.BLT_WIDTH	= DATAORIGIN+$000C
  2806 = 9EB3			A.BLT_HEIGHT	= DATAORIGIN+$000E
  2807 = 9EB4			A.BLT_AND_MASK	= DATAORIGIN+$000F
  2808 = 9EB5			A.BLT_XOR_MASK	= DATAORIGIN+$0010
  2809 = 9EB6			A.BLT_COLLISION_MASK	= DATAORIGIN+$0011
  2810 = 9EB7			A.BLT_ZOOM	= DATAORIGIN+$0012
  2811 = 9EB8			A.PATTERN_FEATURE	= DATAORIGIN+$0013
  2812 = 9EB9			A.BLT_CONTROL	= DATAORIGIN+$0014
  2813
  2814 = 9F70			@VarData	= A
  2815 = 0002			@VarDataSize	= 2
  2816
  2817 380F			@exit
  2818 					.ifdef @new
  2819 					lda <@VarData
  2820 					sta :ztmp
  2821 					lda >@VarData
  2822 					ldy #@VarDataSize-1
  2823 					jmp @FreeMem
  2824 					els
  2825 380F 60				rts						; ret
  2826 					eif
  2827 				.endl
  2828
  2829 3810			.local	VBXECONTROL					; PROCEDURE | ASSEMBLER
  2830 3810 8D 74 9F			sta A
  2831
  2832 				; -------------------  ASM Block 00000130  -------------------
  2833
  2834 3813				fxs FX_VIDEO_CONTROL a
Macro: FXS [Source: vbxe.hea]
     2 3813 AD 74 9F		        lda     A
     3 3816 A0 40		        ldy     #FX_VIDEO_CONTROL
     4 3818 91 80		        sta     (fxptr),y
Source: arkanoid_vbxe.a65
  2835
  2836 				; ------------------------------------------------------------
  2837
  2838 = 9F74			A	= DATAORIGIN+$00CF
  2839
  2840 = 9F74			@VarData	= A
  2841 = 0001			@VarDataSize	= 1
  2842
  2843 381A			@exit
  2844 					.ifdef @new
  2845 					lda <@VarData
  2846 					sta :ztmp
  2847 					lda >@VarData
  2848 					ldy #@VarDataSize-1
  2849 					jmp @FreeMem
  2850 					els
  2851 381A 60				rts						; ret
  2852 					eif
  2853 				.endl
  2854
  2855 				; ------------------------------------------------------------
  2856 				; ------------------------------------------------------------
  2857 381B			@UnitInit
  2858
  2859 				; -------------------  ASM Block 00000138  -------------------
  2860
  2861 381B 8A 48			txa:pha
  2862
  2863 381D 20 1A 28			jsr @vbxe_detect
  2864 3820 90 04			bcc ok
  2865
  2866 3822 A2 FF			ldx #MAIN.GRAPH.grNoInitGraph
  2867 3824 D0 05			bne status
  2868
  2869 3826 20 70 28		ok	jsr @vbxe_init
  2870
  2871 3829 A2 01			ldx #MAIN.GRAPH.grOK
  2872 382B 8E E2 9E		status	stx MAIN.GRAPH.GraphResult
  2873
  2874 382E 68 AA			pla:tax
  2875
  2876 3830 60				rts
  2877
  2878 				; ------------------------------------------------------------
  2879
  2880 = 0001			VC_XDL	= $01
  2881 = 0002			VC_XCOLOR	= $02
  2882 = 0004			VC_NO_TRANS	= $04
  2883 = 0008			VC_TRANS15	= $08
  2884 = 0000			TCBLACK	= $00
  2885 = 0001			TCRED	= $01
  2886 = 0002			TCGREEN	= $02
  2887 = 0003			TCYELLOW	= $03
  2888 = 0004			TCBLUE	= $04
  2889 = 0005			TCMAGENTA	= $05
  2890 = 0006			TCCYAN	= $06
  2891 = 0007			TCWHITE	= $07
  2892 = 0008			TCBRIGHTBLACK	= $08
  2893 = 0009			TCBRIGHTRED	= $09
  2894 = 000A			TCBRIGHTGREEN	= $0A
  2895 = 000B			TCBRIGHTYELLOW	= $0B
  2896 = 000C			TCBRIGHTBLUE	= $0C
  2897 = 000D			TCBRIGHTMAGENTA	= $0D
  2898 = 000E			TCBRIGHTCYAN	= $0E
  2899 = 000F			TCBRIGHTWHITE	= $0F
  2900 = 0080			TBBLACK	= $80
  2901 = 0090			TBRED	= $90
  2902 = 00A0			TBGREEN	= $A0
  2903 = 00B0			TBYELLOW	= $B0
  2904 = 00C0			TBBLUE	= $C0
  2905 = 00D0			TBMAGENTA	= $D0
  2906 = 00E0			TBCYAN	= $E0
  2907 = 00F0			TBWHITE	= $F0
  2908 = 9F0B			adr.VRAM	= DATAORIGIN+$0066	; [8] OBJECT
  2909 3831			.var VRAM	= adr.VRAM .word
  2910 = 9F0B			VRAM.POSITION	= DATAORIGIN+$0066
  2911 = 9F0F			VRAM.SIZE	= DATAORIGIN+$006A
  2912 = 0063			SCROLLBACK_FILL	= $63
  2913 = 295C			COLORMAPCONTROL = @VBXE_CMAP.CONFIG
  2914 = 0400			adr.SCROLLBACK_BUFFER	= $0400
  2915 3831			.var SCROLLBACK_BUFFER	= adr.SCROLLBACK_BUFFER .word
  2916 = 02FD			FILDAT	= $02FD
  2917 = 0054			ROWCRS	= $54
  2918 = 0055			COLCRS	= $55
  2919 = 0068			CRSADR	= $68
  2920
  2921 = 3831 0B 9F		VRAM
  2921 = 3833 00 04		SCROLLBACK_BUFFER
  2921 				.endl							; UNIT VBXE
  2922
  2923 				; ------------------------------------------------------------
  2924
  2925 3835			.local	JOYSTICK					; UNIT
  2926
  2927 				; ------------------------------------------------------------
  2928
  2929 = 000F			JOY_NONE	= $0F
  2930 = 000E			JOY_UP	= $0E
  2931 = 000D			JOY_DOWN	= $0D
  2932 = 000B			JOY_LEFT	= $0B
  2933 = 000A			JOY_LEFT_UP	= $0A
  2934 = 0009			JOY_LEFT_DOWN	= $09
  2935 = 0007			JOY_RIGHT	= $07
  2936 = 0006			JOY_RIGHT_UP	= $06
  2937 = 0005			JOY_RIGHT_DOWN	= $05
  2938 = 0278			JOY_1	= $0278
  2939 = 0279			JOY_2	= $0279
  2940 = 0278			adr.STICK	= $0278
  2941 3835			.var STICK	= adr.STICK .word
  2942 = 0278			STICK0	= $0278
  2943 = 0279			STICK1	= $0279
  2944 = 0284			adr.STRIG	= $0284
  2945 3835			.var STRIG	= adr.STRIG .word
  2946 = 0284			STRIG0	= $0284
  2947 = 0285			STRIG1	= $0285
  2948 = 0270			adr.PADDL	= $0270
  2949 3835			.var PADDL	= adr.PADDL .word
  2950 = 0270			PADDL0	= $0270
  2951 = 0271			PADDL1	= $0271
  2952 = 0272			PADDL2	= $0272
  2953 = 0273			PADDL3	= $0273
  2954 = 0274			PADDL4	= $0274
  2955 = 0275			PADDL5	= $0275
  2956 = 0276			PADDL6	= $0276
  2957 = 0277			PADDL7	= $0277
  2958 = 027C			adr.PTRIG	= $027C
  2959 3835			.var PTRIG	= adr.PTRIG .word
  2960 = 027C			PTRIG0	= $027C
  2961 = 027D			PTRIG1	= $027D
  2962 = 027E			PTRIG2	= $027E
  2963 = 027F			PTRIG3	= $027F
  2964 = 0280			PTRIG4	= $0280
  2965 = 0281			PTRIG5	= $0281
  2966 = 0282			PTRIG6	= $0282
  2967 = 0283			PTRIG7	= $0283
  2968 = D010			TRIG0	= $D010
  2969 = D011			TRIG1	= $D011
  2970 = D200			POT0	= $D200
  2971 = D208			ALLPOT	= $D208
  2972 = D20B			POTGO	= $D20B
  2973
  2974 = 3835 78 02		STICK
  2974 = 3837 84 02		STRIG
  2974 = 3839 70 02		PADDL
  2974 = 383B 7C 02		PTRIG
  2974 				.endl							; UNIT JOYSTICK
  2975
  2976 383D			.local	START_LEVEL					; PROCEDURE
  2977
  2978 383D			@exit
  2979 					.ifdef @new
  2980 					lda <@VarData
  2981 					sta :ztmp
  2982 					lda >@VarData
  2983 					ldy #@VarDataSize-1
  2984 					jmp @FreeMem
  2985 					els
  2986 383D 60				rts						; ret
  2987 					eif
  2988 				.endl
  2989
  2990 383E			.local	DEATH_SOUND					; PROCEDURE
  2991
  2992 				; ------------------------------------------------------------
  2993
  2994 = 9F7D			A	= DATAORIGIN+$00D8
  2995
  2996 = 9F7D			@VarData	= A
  2997 = 0002			@VarDataSize	= 2
  2998
  2999 383E			@exit
  3000 					.ifdef @new
  3001 					lda <@VarData
  3002 					sta :ztmp
  3003 					lda >@VarData
  3004 					ldy #@VarDataSize-1
  3005 					jmp @FreeMem
  3006 					els
  3007 383E 60				rts						; ret
  3008 					eif
  3009 				.endl
  3010
  3011 383F			.local	BALL_BLOCK_SOUND				; PROCEDURE
  3012
  3013 				; ------------------------------------------------------------
  3014
  3015 = 9F7F			A	= DATAORIGIN+$00DA
  3016 = 9F81			B	= DATAORIGIN+$00DC
  3017
  3018 = 9F7F			@VarData	= A
  3019 = 0004			@VarDataSize	= 4
  3020
  3021 383F			@exit
  3022 					.ifdef @new
  3023 					lda <@VarData
  3024 					sta :ztmp
  3025 					lda >@VarData
  3026 					ldy #@VarDataSize-1
  3027 					jmp @FreeMem
  3028 					els
  3029 383F 60				rts						; ret
  3030 					eif
  3031 				.endl
  3032
  3033 3840			.local	SQRT32						; FUNCTION
  3034
  3035 				; optimize OK (arkanoid_vbxe.pas), line = 91
  3036
  3037 3840 AD 83 9F			lda V
  3038 3843 8D 91 9F			sta R
  3039 3846 AD 84 9F			lda V+1
  3040 3849 8D 92 9F			sta R+1
  3041 384C AD 85 9F			lda V+2
  3042 384F 8D 93 9F			sta R+2
  3043 3852 AD 86 9F			lda V+3
  3044 3855 8D 94 9F			sta R+3
  3045
  3046 				; optimize OK (arkanoid_vbxe.pas), line = 92
  3047
  3048 3858 A9 00			lda #$00
  3049 385A 8D 8D 9F			sta Q
  3050 385D 8D 8E 9F			sta Q+1
  3051 3860 8D 8F 9F			sta Q+2
  3052 3863 8D 90 9F			sta Q+3
  3053
  3054 				; optimize OK (arkanoid_vbxe.pas), line = 93
  3055
  3056 3866 8D 89 9F			sta B
  3057 3869 8D 8A 9F			sta B+1
  3058 386C 8D 8B 9F			sta B+2
  3059 386F A9 40			lda #$40
  3060
  3061 				; --- WhileProlog
  3062 3871 4C A9 38			jmp l_049E
  3063 3874			l_049F
  3064
  3065 				; optimize OK (arkanoid_vbxe.pas), line = 95
  3066
  3067 3874 AD 89 9F			lda B
  3068 3877 85 9F			sta :STACKORIGIN+9
  3069 3879 AD 8A 9F			lda B+1
  3070 387C 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  3071 387E AD 8B 9F			lda B+2
  3072 3881 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
  3073 3883 AD 8C 9F			lda B+3
  3074 3886 85 CF			sta :STACKORIGIN+STACKWIDTH*3+9
  3075 3888 46 CF			lsr :STACKORIGIN+STACKWIDTH*3+9
  3076 388A 66 BF			ror :STACKORIGIN+STACKWIDTH*2+9
  3077 388C 66 AF			ror :STACKORIGIN+STACKWIDTH+9
  3078 388E 66 9F			ror :STACKORIGIN+9
  3079 3890 46 CF			lsr :STACKORIGIN+STACKWIDTH*3+9
  3080 3892 66 BF			ror :STACKORIGIN+STACKWIDTH*2+9
  3081 3894 66 AF			ror :STACKORIGIN+STACKWIDTH+9
  3082 3896 66 9F			ror :STACKORIGIN+9
  3083 3898 A5 9F			lda :STACKORIGIN+9
  3084 389A 8D 89 9F			sta B
  3085 389D A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  3086 389F 8D 8A 9F			sta B+1
  3087 38A2 A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
  3088 38A4 8D 8B 9F			sta B+2
  3089 38A7 A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
  3090 38A9			l_049E
  3091 38A9 8D 8C 9F			sta B+3
  3092 38AC CD 94 9F			cmp R+3
  3093 38AF D0 16			bne @+
  3094 38B1 AD 8B 9F			lda B+2
  3095 38B4 CD 93 9F			cmp R+2
  3096 38B7 D0 0E			bne @+
  3097 38B9 AD 8A 9F			lda B+1
  3098 38BC CD 92 9F			cmp R+1
  3099 38BF D0 06			bne @+
  3100 38C1 AD 89 9F			lda B
  3101 38C4 CD 91 9F			cmp R
  3102 				@
  3103 38C7 F0 02			beq @+
  3104 38C9 B0 A9			jcs l_049F
  3105 				@
  3106
  3107 				; --- WhileProlog
  3108 38CB 4C A0 39			jmp l_04B3
  3109 38CE			l_04B4
  3110
  3111 				; optimize OK (arkanoid_vbxe.pas), line = 98
  3112
  3113 38CE AD 8D 9F			lda Q
  3114 38D1 18 6D 89 9F			add B
  3115 38D5 8D 95 9F			sta T
  3116 38D8 AD 8E 9F			lda Q+1
  3117 38DB 6D 8A 9F			adc B+1
  3118 38DE 8D 96 9F			sta T+1
  3119 38E1 AD 8F 9F			lda Q+2
  3120 38E4 6D 8B 9F			adc B+2
  3121 38E7 8D 97 9F			sta T+2
  3122 38EA AD 90 9F			lda Q+3
  3123 38ED 6D 8C 9F			adc B+3
  3124 38F0 8D 98 9F			sta T+3
  3125
  3126 				; optimize OK (arkanoid_vbxe.pas), line = 100
  3127
  3128 38F3 4E 90 9F			lsr Q+3
  3129 38F6 6E 8F 9F			ror Q+2
  3130 38F9 6E 8E 9F			ror Q+1
  3131 38FC 6E 8D 9F			ror Q
  3132
  3133 				; optimize OK (arkanoid_vbxe.pas), line = 102
  3134
  3135 38FF AD 94 9F			lda R+3
  3136 3902 CD 98 9F			cmp T+3
  3137 3905 D0 16			bne @+
  3138 3907 AD 93 9F			lda R+2
  3139 390A CD 97 9F			cmp T+2
  3140 390D D0 0E			bne @+
  3141 390F AD 92 9F			lda R+1
  3142 3912 CD 96 9F			cmp T+1
  3143 3915 D0 06			bne @+
  3144 3917 AD 91 9F			lda R
  3145 391A CD 95 9F			cmp T
  3146 				@
  3147 391D 90 49			jcc l_04D4
  3148
  3149 				; optimize OK (arkanoid_vbxe.pas), line = 103
  3150
  3151 391F AD 91 9F			lda R
  3152 3922 ED 95 9F			sbc T
  3153 3925 8D 91 9F			sta R
  3154 3928 AD 92 9F			lda R+1
  3155 392B ED 96 9F			sbc T+1
  3156 392E 8D 92 9F			sta R+1
  3157 3931 AD 93 9F			lda R+2
  3158 3934 ED 97 9F			sbc T+2
  3159 3937 8D 93 9F			sta R+2
  3160 393A AD 94 9F			lda R+3
  3161 393D ED 98 9F			sbc T+3
  3162 3940 8D 94 9F			sta R+3
  3163
  3164 				; optimize OK (arkanoid_vbxe.pas), line = 104
  3165
  3166 3943 AD 8D 9F			lda Q
  3167 3946 18 6D 89 9F			add B
  3168 394A 8D 8D 9F			sta Q
  3169 394D AD 8E 9F			lda Q+1
  3170 3950 6D 8A 9F			adc B+1
  3171 3953 8D 8E 9F			sta Q+1
  3172 3956 AD 8F 9F			lda Q+2
  3173 3959 6D 8B 9F			adc B+2
  3174 395C 8D 8F 9F			sta Q+2
  3175 395F AD 90 9F			lda Q+3
  3176 3962 6D 8C 9F			adc B+3
  3177 3965 8D 90 9F			sta Q+3
  3178 3968			l_04D4
  3179
  3180 				; optimize OK (arkanoid_vbxe.pas), line = 107
  3181
  3182 3968 AD 89 9F			lda B
  3183 396B 85 9F			sta :STACKORIGIN+9
  3184 396D AD 8A 9F			lda B+1
  3185 3970 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  3186 3972 AD 8B 9F			lda B+2
  3187 3975 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
  3188 3977 AD 8C 9F			lda B+3
  3189 397A 85 CF			sta :STACKORIGIN+STACKWIDTH*3+9
  3190 397C 46 CF			lsr :STACKORIGIN+STACKWIDTH*3+9
  3191 397E 66 BF			ror :STACKORIGIN+STACKWIDTH*2+9
  3192 3980 66 AF			ror :STACKORIGIN+STACKWIDTH+9
  3193 3982 66 9F			ror :STACKORIGIN+9
  3194 3984 46 CF			lsr :STACKORIGIN+STACKWIDTH*3+9
  3195 3986 66 BF			ror :STACKORIGIN+STACKWIDTH*2+9
  3196 3988 66 AF			ror :STACKORIGIN+STACKWIDTH+9
  3197 398A 66 9F			ror :STACKORIGIN+9
  3198 398C A5 9F			lda :STACKORIGIN+9
  3199 398E 8D 89 9F			sta B
  3200 3991 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  3201 3993 8D 8A 9F			sta B+1
  3202 3996 A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
  3203 3998 8D 8B 9F			sta B+2
  3204 399B A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
  3205 399D 8D 8C 9F			sta B+3
  3206 39A0			l_04B3
  3207
  3208 				; optimize OK (arkanoid_vbxe.pas), line = 97
  3209
  3210 39A0 AD 8C 9F			lda B+3
  3211 39A3 C9 00			cmp #$00
  3212 39A5 D0 13			bne @+
  3213 39A7 AD 8B 9F			lda B+2
  3214 39AA C9 00			cmp #$00
  3215 39AC D0 0C			bne @+
  3216 39AE AD 8A 9F			lda B+1
  3217 39B1 C9 00			cmp #$00
  3218 39B3 D0 05			bne @+
  3219 39B5 AD 89 9F			lda B
  3220 39B8 C9 00			cmp #$00
  3221 				@
  3222 39BA F0 05			beq @+
  3223 39BC 90 03 4C CE 38		jcs l_04B4
  3224 				@
  3225
  3226 				; optimize OK (arkanoid_vbxe.pas), line = 111
  3227
  3228 39C1 AD 8D 9F			lda Q
  3229 39C4 8D 87 9F			sta RESULT
  3230 39C7 AD 8E 9F			lda Q+1
  3231 39CA 8D 88 9F			sta RESULT+1
  3232 39CD			@exit
  3233
  3234 				; ------------------------------------------------------------
  3235
  3236 = 9F83			V	= DATAORIGIN+$00DE
  3237 = 9F87			RESULT	= DATAORIGIN+$00E2
  3238 = 9F89			B	= DATAORIGIN+$00E4
  3239 = 9F8D			Q	= DATAORIGIN+$00E8
  3240 = 9F91			R	= DATAORIGIN+$00EC
  3241 = 9F95			T	= DATAORIGIN+$00F0
  3242
  3243 = 9F83			@VarData	= V
  3244 = 0014			@VarDataSize	= 20
  3245
  3246 39CD 60				rts						; ret
  3247 				.endl
  3248
  3249 39CE			.local	MOUSECOORDS					; PROCEDURE
  3250
  3251 				; optimize OK (service.pas), line = 296
  3252
  3253 39CE AD 00 D3			lda ATARI.PORTA
  3254 39D1 29 0F			and #$0F
  3255 39D3 8D A0 A0			sta A
  3256
  3257 				; optimize OK (service.pas), line = 298
  3258
  3259 39D6 8D A1 A0			sta @CASETMP_0007
  3260 39D9 C9 0B			cmp #$0B
  3261 39DB D0 38			jne l_0516
  3262 				@
  3263
  3264 				; optimize OK (service.pas), line = 299
  3265
  3266 39DD AC 9E A0 84 84 AC + 	mwy X :bp2
  3267 39E7 A0 00			ldy #$00
  3268 39E9 B1 84			lda (:bp2),y
  3269 39EB C8				iny
  3270 39EC C9 0B			cmp #$0B
  3271 39EE B1 84			lda (:bp2),y
  3272 39F0 E9 00			sbc #$00
  3273 39F2 50 02			svc
  3274 39F4 49 80			eor #$80
  3275 39F6 30 1A			jmi l_0527
  3276 39F8 AC 9E A0 84 84 AC + 	mwy X :bp2
  3277 3A02 A0 00			ldy #$00
  3278 3A04 B1 84			lda (:bp2),y
  3279 3A06 38 E9 04			sub #$04
  3280 3A09 91 84			sta (:bp2),y
  3281 3A0B C8				iny
  3282 3A0C B1 84			lda (:bp2),y
  3283 3A0E E9 00			sbc #$00
  3284 3A10 91 84			sta (:bp2),y
  3285 3A12			l_0527
  3286 3A12 4C 4E 3A			jmp a_0007
  3287 3A15			l_0516
  3288 3A15 C9 07			cmp #$07
  3289 3A17 D0 35			jne l_0532
  3290
  3291 				; optimize OK (service.pas), line = 300
  3292
  3293 3A19 AC 9E A0 84 84 AC + 	mwy X :bp2
  3294 3A23 A0 00			ldy #$00
  3295 3A25 B1 84			lda (:bp2),y
  3296 3A27 C8				iny
  3297 3A28 C9 D8			cmp #$D8
  3298 3A2A B1 84			lda (:bp2),y
  3299 3A2C E9 00			sbc #$00
  3300 3A2E 50 02			svc
  3301 3A30 49 80			eor #$80
  3302 3A32 10 1A			jpl l_0543
  3303 3A34 AC 9E A0 84 84 AC + 	mwy X :bp2
  3304 3A3E A0 00			ldy #$00
  3305 3A40 B1 84			lda (:bp2),y
  3306 3A42 18 69 04			add #$04
  3307 3A45 91 84			sta (:bp2),y
  3308 3A47 C8				iny
  3309 3A48 B1 84			lda (:bp2),y
  3310 3A4A 69 00			adc #$00
  3311 3A4C 91 84			sta (:bp2),y
  3312 3A4E			l_0543
  3313 3A4E			l_0532
  3314 3A4E			a_0007
  3315
  3316 				; ------------------------------------------------------------
  3317
  3318 = A09E			X	= DATAORIGIN+$01F9
  3319 = A0A0			A	= DATAORIGIN+$01FB
  3320 = A0A1			@CASETMP_0007	= DATAORIGIN+$01FC
  3321
  3322 = A09E			@VarData	= X
  3323 = 0004			@VarDataSize	= 4
  3324
  3325 3A4E			@exit
  3326 					.ifdef @new
  3327 					lda <@VarData
  3328 					sta :ztmp
  3329 					lda >@VarData
  3330 					ldy #@VarDataSize-1
  3331 					jmp @FreeMem
  3332 					els
  3333 3A4E 60				rts						; ret
  3334 					eif
  3335 				.endl
  3336
  3337 3A4F			.local	MOUSECLICK					; FUNCTION
  3338
  3339 				; optimize OK (service.pas), line = 310
  3340
  3341 3A4F			?volatile:
  3342 3A4F AD 10 D0			lda JOYSTICK.TRIG0
  3343 3A52 49 01			eor #$01
  3344 3A54 8D A2 A0			sta RESULT
  3345 3A57			@exit
  3346
  3347 				; ------------------------------------------------------------
  3348
  3349 = A0A2			RESULT	= DATAORIGIN+$01FD
  3350
  3351 3A57 60				rts						; ret
  3352 				.endl
  3353
  3354 3A58			.local	BLITBOX						; PROCEDURE
  3355
  3356 				; -------------------  ASM Block 00000141  -------------------
  3357
  3358 3A58				  fxs FX_MEMS #$80
Macro: FXS [Source: vbxe.hea]
     2 3A58 A9 80		        lda     #$80
     3 3A5A A0 5F		        ldy     #FX_MEMS
     4 3A5C 91 80		        sta     (fxptr),y
Source: arkanoid_vbxe.a65
  3359 					
  3360 				; optimize OK (service.pas), line = 323
  3361
  3362 3A5E AD A5 A0			lda SRC+2
  3363 3A61 8D 02 B1			sta BLT.SRC_ADR.BYTE2
  3364
  3365 				; optimize OK (service.pas), line = 324
  3366
  3367 3A64 AD A4 A0			lda SRC+1
  3368 3A67 8D 01 B1			sta BLT.SRC_ADR.BYTE1
  3369
  3370 				; optimize OK (service.pas), line = 325
  3371
  3372 3A6A AD A3 A0			lda SRC
  3373 3A6D 8D 00 B1			sta BLT.SRC_ADR.BYTE0
  3374
  3375 				; optimize OK (service.pas), line = 327
  3376
  3377 3A70 AD A9 A0			lda DST+2
  3378 3A73 8D 08 B1			sta BLT.DST_ADR.BYTE2
  3379
  3380 				; optimize OK (service.pas), line = 328
  3381
  3382 3A76 AD A8 A0			lda DST+1
  3383 3A79 8D 07 B1			sta BLT.DST_ADR.BYTE1
  3384
  3385 				; optimize OK (service.pas), line = 329
  3386
  3387 3A7C AD A7 A0			lda DST
  3388 3A7F 8D 06 B1			sta BLT.DST_ADR.BYTE0
  3389
  3390 				; optimize OK (service.pas), line = 331
  3391
  3392 3A82 A9 01			lda #$01
  3393 3A84 8D 05 B1			sta BLT.SRC_STEP_X
  3394
  3395 				; optimize OK (service.pas), line = 332
  3396
  3397 3A87 8D 0B B1			sta BLT.DST_STEP_X
  3398
  3399 				; optimize OK (service.pas), line = 334
  3400
  3401 3A8A A9 40			lda #$40
  3402 3A8C 8D 09 B1			sta BLT.DST_STEP_Y
  3403 3A8F A9 01			lda #$01
  3404 3A91 8D 0A B1			sta BLT.DST_STEP_Y+1
  3405
  3406 				; optimize OK (service.pas), line = 335
  3407
  3408 3A94 A9 40			lda #$40
  3409 3A96 8D 03 B1			sta BLT.SRC_STEP_Y
  3410 3A99 A9 01			lda #$01
  3411 3A9B 8D 04 B1			sta BLT.SRC_STEP_Y+1
  3412
  3413 				; optimize OK (service.pas), line = 337
  3414
  3415 3A9E AD AB A0			lda W
  3416 3AA1 38 E9 01			sub #$01
  3417 3AA4 8D 0C B1			sta BLT.BLT_WIDTH
  3418 3AA7 AD AC A0			lda W+1
  3419 3AAA E9 00			sbc #$00
  3420 3AAC 8D 0D B1			sta BLT.BLT_WIDTH+1
  3421
  3422 				; optimize OK (service.pas), line = 338
  3423
  3424 3AAF AC AD A0			ldy H
  3425 3AB2 88				dey
  3426 3AB3 8C 0E B1			sty BLT.BLT_HEIGHT
  3427
  3428 				; optimize OK (service.pas), line = 340
  3429
  3430 3AB6 A9 FF			lda #$FF
  3431 3AB8 8D 0F B1			sta BLT.BLT_AND_MASK
  3432
  3433 				; optimize OK (service.pas), line = 342
  3434
  3435 3ABB A9 00			lda #$00
  3436 3ABD 8D 12 B1			sta BLT.BLT_ZOOM
  3437
  3438 				; optimize OK (service.pas), line = 344
  3439
  3440 3AC0 8D 14 B1			sta BLT.BLT_CONTROL
  3441
  3442 				; -------------------  ASM Block 00000142  -------------------
  3443
  3444 3AC3				  fxs FX_MEMS #$00
Macro: FXS [Source: vbxe.hea]
     2 3AC3 A9 00		        lda     #$00
     3 3AC5 A0 5F		        ldy     #FX_MEMS
     4 3AC7 91 80		        sta     (fxptr),y
Source: arkanoid_vbxe.a65
  3445 					
  3446 				; optimize OK (service.pas), line = 350
  3447
  3448 3AC9 AD 35 9E			lda BLT
  3449 3ACC 8D 70 9F			sta VBXE.RUNBCB.A
  3450 3ACF AD 36 9E			lda BLT+1
  3451 3AD2 8D 71 9F			sta VBXE.RUNBCB.A+1
  3452 3AD5 20 F3 37			jsr VBXE.RUNBCB
  3453
  3454 				; ------------------------------------------------------------
  3455
  3456 = A0A3			SRC	= DATAORIGIN+$01FE
  3457 = A0A7			DST	= DATAORIGIN+$0202
  3458 = A0AB			W	= DATAORIGIN+$0206
  3459 = A0AD			H	= DATAORIGIN+$0208
  3460
  3461 = A0A3			@VarData	= SRC
  3462 = 000B			@VarDataSize	= 11
  3463
  3464 3AD8			@exit
  3465 					.ifdef @new
  3466 					lda <@VarData
  3467 					sta :ztmp
  3468 					lda >@VarData
  3469 					ldy #@VarDataSize-1
  3470 					jmp @FreeMem
  3471 					els
  3472 3AD8 60				rts						; ret
  3473 					eif
  3474 				.endl
  3475
  3476 3AD9			.local	BLITZERO					; PROCEDURE
  3477
  3478 				; -------------------  ASM Block 00000143  -------------------
  3479
  3480 3AD9				  fxs FX_MEMS #$80
Macro: FXS [Source: vbxe.hea]
     2 3AD9 A9 80		        lda     #$80
     3 3ADB A0 5F		        ldy     #FX_MEMS
     4 3ADD 91 80		        sta     (fxptr),y
Source: arkanoid_vbxe.a65
  3481 					
  3482 				; optimize OK (service.pas), line = 366
  3483
  3484 3ADF AD B0 A0			lda SRC+2
  3485 3AE2 8D 02 B1			sta BLT.SRC_ADR.BYTE2
  3486
  3487 				; optimize OK (service.pas), line = 367
  3488
  3489 3AE5 AD AF A0			lda SRC+1
  3490 3AE8 8D 01 B1			sta BLT.SRC_ADR.BYTE1
  3491
  3492 				; optimize OK (service.pas), line = 368
  3493
  3494 3AEB AD AE A0			lda SRC
  3495 3AEE 8D 00 B1			sta BLT.SRC_ADR.BYTE0
  3496
  3497 				; optimize OK (service.pas), line = 370
  3498
  3499 3AF1 AD B4 A0			lda DST+2
  3500 3AF4 8D 08 B1			sta BLT.DST_ADR.BYTE2
  3501
  3502 				; optimize OK (service.pas), line = 371
  3503
  3504 3AF7 AD B3 A0			lda DST+1
  3505 3AFA 8D 07 B1			sta BLT.DST_ADR.BYTE1
  3506
  3507 				; optimize OK (service.pas), line = 372
  3508
  3509 3AFD AD B2 A0			lda DST
  3510 3B00 8D 06 B1			sta BLT.DST_ADR.BYTE0
  3511
  3512 				; optimize OK (service.pas), line = 374
  3513
  3514 3B03 A9 01			lda #$01
  3515 3B05 8D 05 B1			sta BLT.SRC_STEP_X
  3516
  3517 				; optimize OK (service.pas), line = 375
  3518
  3519 3B08 8D 0B B1			sta BLT.DST_STEP_X
  3520
  3521 				; optimize OK (service.pas), line = 377
  3522
  3523 3B0B 8D 14 B1			sta BLT.BLT_CONTROL
  3524
  3525 				; optimize OK (service.pas), line = 379
  3526
  3527 3B0E A9 40			lda #$40
  3528 3B10 8D 09 B1			sta BLT.DST_STEP_Y
  3529 3B13 A9 01			lda #$01
  3530 3B15 8D 0A B1			sta BLT.DST_STEP_Y+1
  3531
  3532 				; optimize OK (service.pas), line = 380
  3533
  3534 3B18 AD B6 A0			lda W
  3535 3B1B 8D 03 B1			sta BLT.SRC_STEP_Y
  3536 3B1E AD B7 A0			lda W+1
  3537 3B21 8D 04 B1			sta BLT.SRC_STEP_Y+1
  3538
  3539 				; optimize OK (service.pas), line = 382
  3540
  3541 3B24 AC B8 A0			ldy H
  3542 3B27 88				dey
  3543 3B28 8C 0E B1			sty BLT.BLT_HEIGHT
  3544
  3545 				; optimize OK (service.pas), line = 384
  3546
  3547 3B2B AD B6 A0			lda W
  3548 3B2E 38 E9 01			sub #$01
  3549 3B31 8D 0C B1			sta BLT.BLT_WIDTH
  3550 3B34 AD B7 A0			lda W+1
  3551 3B37 E9 00			sbc #$00
  3552 3B39 8D 0D B1			sta BLT.BLT_WIDTH+1
  3553
  3554 				; optimize OK (service.pas), line = 386
  3555
  3556 3B3C A9 FF			lda #$FF
  3557 3B3E 8D 0F B1			sta BLT.BLT_AND_MASK
  3558
  3559 				; -------------------  ASM Block 00000144  -------------------
  3560
  3561 3B41				  fxs FX_MEMS #$00
Macro: FXS [Source: vbxe.hea]
     2 3B41 A9 00		        lda     #$00
     3 3B43 A0 5F		        ldy     #FX_MEMS
     4 3B45 91 80		        sta     (fxptr),y
Source: arkanoid_vbxe.a65
  3562 					
  3563 				; optimize OK (service.pas), line = 393
  3564
  3565 3B47 AD 35 9E			lda BLT
  3566 3B4A 8D 70 9F			sta VBXE.RUNBCB.A
  3567 3B4D AD 36 9E			lda BLT+1
  3568 3B50 8D 71 9F			sta VBXE.RUNBCB.A+1
  3569 3B53 20 F3 37			jsr VBXE.RUNBCB
  3570
  3571 				; ------------------------------------------------------------
  3572
  3573 = A0AE			SRC	= DATAORIGIN+$0209
  3574 = A0B2			DST	= DATAORIGIN+$020D
  3575 = A0B6			W	= DATAORIGIN+$0211
  3576 = A0B8			H	= DATAORIGIN+$0213
  3577
  3578 = A0AE			@VarData	= SRC
  3579 = 000B			@VarDataSize	= 11
  3580
  3581 3B56			@exit
  3582 					.ifdef @new
  3583 					lda <@VarData
  3584 					sta :ztmp
  3585 					lda >@VarData
  3586 					ldy #@VarDataSize-1
  3587 					jmp @FreeMem
  3588 					els
  3589 3B56 60				rts						; ret
  3590 					eif
  3591 				.endl
  3592
  3593 3B57			.local	BLITTMP						; PROCEDURE
  3594
  3595 				; optimize OK (service.pas), line = 405
  3596
  3597 3B57 AD B9 A0			lda DST
  3598 3B5A 8D 75 9F			sta VBXE_RAM.POSITION
  3599 3B5D AD BA A0			lda DST+1
  3600 3B60 8D 76 9F			sta VBXE_RAM.POSITION+1
  3601 3B63 AD BB A0			lda DST+2
  3602 3B66 8D 77 9F			sta VBXE_RAM.POSITION+2
  3603 3B69 AD BC A0			lda DST+3
  3604 3B6C 8D 78 9F			sta VBXE_RAM.POSITION+3
  3605
  3606 				; optimize OK (service.pas), line = 407
  3607
  3608 3B6F AD 8D 9E			lda TMP
  3609 3B72 8D 2E 9F			sta VBXE.TVBXEMEMORYSTREAM.WRITEBUFFER.BUFFER
  3610 3B75 AD 8E 9E			lda TMP+1
  3611 3B78 8D 2F 9F			sta VBXE.TVBXEMEMORYSTREAM.WRITEBUFFER.BUFFER+1
  3612 3B7B AD BD A0			lda SIZE
  3613 3B7E 8D 30 9F			sta VBXE.TVBXEMEMORYSTREAM.WRITEBUFFER.COUNT
  3614 3B81 A9 00			lda #$00
  3615 3B83 8D 31 9F			sta VBXE.TVBXEMEMORYSTREAM.WRITEBUFFER.COUNT+1
  3616 3B86 AD 3B 9E			lda VBXE_RAM
  3617 3B89 AC 3C 9E			ldy VBXE_RAM+1
  3618 3B8C 20 B6 34			jsr VBXE.TVBXEMEMORYSTREAM.WRITEBUFFER
  3619
  3620 				; ------------------------------------------------------------
  3621
  3622 = A0B9			DST	= DATAORIGIN+$0214
  3623 = A0BD			SIZE	= DATAORIGIN+$0218
  3624
  3625 = A0B9			@VarData	= DST
  3626 = 0005			@VarDataSize	= 5
  3627
  3628 3B8F			@exit
  3629 					.ifdef @new
  3630 					lda <@VarData
  3631 					sta :ztmp
  3632 					lda >@VarData
  3633 					ldy #@VarDataSize-1
  3634 					jmp @FreeMem
  3635 					els
  3636 3B8F 60				rts						; ret
  3637 					eif
  3638 				.endl
  3639
  3640 3B90			.local	BLITROW						; PROCEDURE
  3641
  3642 				; -------------------  ASM Block 00000145  -------------------
  3643
  3644 3B90				  fxs FX_MEMS #$80
Macro: FXS [Source: vbxe.hea]
     2 3B90 A9 80		        lda     #$80
     3 3B92 A0 5F		        ldy     #FX_MEMS
     4 3B94 91 80		        sta     (fxptr),y
Source: arkanoid_vbxe.a65
  3645 					
  3646 				; optimize OK (service.pas), line = 423
  3647
  3648 3B96 AD C0 A0			lda SRC+2
  3649 3B99 8D 02 B1			sta BLT.SRC_ADR.BYTE2
  3650
  3651 				; optimize OK (service.pas), line = 424
  3652
  3653 3B9C AD BF A0			lda SRC+1
  3654 3B9F 8D 01 B1			sta BLT.SRC_ADR.BYTE1
  3655
  3656 				; optimize OK (service.pas), line = 425
  3657
  3658 3BA2 AD BE A0			lda SRC
  3659 3BA5 8D 00 B1			sta BLT.SRC_ADR.BYTE0
  3660
  3661 				; optimize OK (service.pas), line = 427
  3662
  3663 3BA8 AD C4 A0			lda DST+2
  3664 3BAB 8D 08 B1			sta BLT.DST_ADR.BYTE2
  3665
  3666 				; optimize OK (service.pas), line = 428
  3667
  3668 3BAE AD C3 A0			lda DST+1
  3669 3BB1 8D 07 B1			sta BLT.DST_ADR.BYTE1
  3670
  3671 				; optimize OK (service.pas), line = 429
  3672
  3673 3BB4 AD C2 A0			lda DST
  3674 3BB7 8D 06 B1			sta BLT.DST_ADR.BYTE0
  3675
  3676 				; optimize OK (service.pas), line = 431
  3677
  3678 3BBA A9 01			lda #$01
  3679 3BBC 8D 05 B1			sta BLT.SRC_STEP_X
  3680
  3681 				; optimize OK (service.pas), line = 432
  3682
  3683 3BBF 8D 0B B1			sta BLT.DST_STEP_X
  3684
  3685 				; optimize OK (service.pas), line = 434
  3686
  3687 3BC2 A9 00			lda #$00
  3688 3BC4 8D 03 B1			sta BLT.SRC_STEP_Y
  3689 3BC7 8D 04 B1			sta BLT.SRC_STEP_Y+1
  3690
  3691 				; optimize OK (service.pas), line = 435
  3692
  3693 3BCA 8D 09 B1			sta BLT.DST_STEP_Y
  3694 3BCD 8D 0A B1			sta BLT.DST_STEP_Y+1
  3695
  3696 				; optimize OK (service.pas), line = 437
  3697
  3698 3BD0 8D 0E B1			sta BLT.BLT_HEIGHT
  3699
  3700 				; optimize OK (service.pas), line = 438
  3701
  3702 3BD3 8D 14 B1			sta BLT.BLT_CONTROL
  3703
  3704 				; optimize OK (service.pas), line = 440
  3705
  3706 3BD6 AD C6 A0			lda SIZE
  3707 3BD9 38 E9 01			sub #$01
  3708 3BDC 8D 0C B1			sta BLT.BLT_WIDTH
  3709 3BDF AD C7 A0			lda SIZE+1
  3710 3BE2 E9 00			sbc #$00
  3711 3BE4 8D 0D B1			sta BLT.BLT_WIDTH+1
  3712
  3713 				; optimize OK (service.pas), line = 442
  3714
  3715 3BE7 A9 FF			lda #$FF
  3716 3BE9 8D 0F B1			sta BLT.BLT_AND_MASK
  3717
  3718 				; -------------------  ASM Block 00000146  -------------------
  3719
  3720 3BEC				  fxs FX_MEMS #$00
Macro: FXS [Source: vbxe.hea]
     2 3BEC A9 00		        lda     #$00
     3 3BEE A0 5F		        ldy     #FX_MEMS
     4 3BF0 91 80		        sta     (fxptr),y
Source: arkanoid_vbxe.a65
  3721 					
  3722 				; optimize OK (service.pas), line = 448
  3723
  3724 3BF2 AD 35 9E			lda BLT
  3725 3BF5 8D 70 9F			sta VBXE.RUNBCB.A
  3726 3BF8 AD 36 9E			lda BLT+1
  3727 3BFB 8D 71 9F			sta VBXE.RUNBCB.A+1
  3728 3BFE 20 F3 37			jsr VBXE.RUNBCB
  3729
  3730 				; ------------------------------------------------------------
  3731
  3732 = A0BE			SRC	= DATAORIGIN+$0219
  3733 = A0C2			DST	= DATAORIGIN+$021D
  3734 = A0C6			SIZE	= DATAORIGIN+$0221
  3735
  3736 = A0BE			@VarData	= SRC
  3737 = 000A			@VarDataSize	= 10
  3738
  3739 3C01			@exit
  3740 					.ifdef @new
  3741 					lda <@VarData
  3742 					sta :ztmp
  3743 					lda >@VarData
  3744 					ldy #@VarDataSize-1
  3745 					jmp @FreeMem
  3746 					els
  3747 3C01 60				rts						; ret
  3748 					eif
  3749 				.endl
  3750
  3751 3C02			.local	PUTBYTE						; PROCEDURE
  3752
  3753 				; optimize OK (service.pas), line = 475
  3754
  3755 3C02 AD C8 A0			lda DST
  3756 3C05 8D 75 9F			sta VBXE_RAM.POSITION
  3757 3C08 AD C9 A0			lda DST+1
  3758 3C0B 8D 76 9F			sta VBXE_RAM.POSITION+1
  3759 3C0E AD CA A0			lda DST+2
  3760 3C11 8D 77 9F			sta VBXE_RAM.POSITION+2
  3761 3C14 AD CB A0			lda DST+3
  3762 3C17 8D 78 9F			sta VBXE_RAM.POSITION+3
  3763
  3764 				; optimize OK (service.pas), line = 476
  3765
  3766 3C1A AD CC A0			lda V
  3767 3C1D 8D 50 9F			sta VBXE.TVBXEMEMORYSTREAM.WRITEBYTE.B
  3768 3C20 AD 3B 9E			lda VBXE_RAM
  3769 3C23 AC 3C 9E			ldy VBXE_RAM+1
  3770 3C26 20 F1 35			jsr VBXE.TVBXEMEMORYSTREAM.WRITEBYTE
  3771
  3772 				; ------------------------------------------------------------
  3773
  3774 = A0C8			DST	= DATAORIGIN+$0223
  3775 = A0CC			V	= DATAORIGIN+$0227
  3776
  3777 = A0C8			@VarData	= DST
  3778 = 0005			@VarDataSize	= 5
  3779
  3780 3C29			@exit
  3781 					.ifdef @new
  3782 					lda <@VarData
  3783 					sta :ztmp
  3784 					lda >@VarData
  3785 					ldy #@VarDataSize-1
  3786 					jmp @FreeMem
  3787 					els
  3788 3C29 60				rts						; ret
  3789 					eif
  3790 				.endl
  3791
  3792 3C2A			.local	GETBYTE						; FUNCTION
  3793
  3794 				; optimize OK (service.pas), line = 486
  3795
  3796 3C2A AD CD A0			lda SRC
  3797 3C2D 8D 75 9F			sta VBXE_RAM.POSITION
  3798 3C30 AD CE A0			lda SRC+1
  3799 3C33 8D 76 9F			sta VBXE_RAM.POSITION+1
  3800 3C36 AD CF A0			lda SRC+2
  3801 3C39 8D 77 9F			sta VBXE_RAM.POSITION+2
  3802 3C3C AD D0 A0			lda SRC+3
  3803 3C3F 8D 78 9F			sta VBXE_RAM.POSITION+3
  3804
  3805 				; optimize FAIL ('VBXE.TVBXEMEMORYSTREAM.READBYTE', service.pas), line = 487
  3806
  3807 3C42 AD 3B 9E			lda VBXE_RAM
  3808 3C45 AC 3C 9E			ldy VBXE_RAM+1
  3809 3C48 20 BE 35			jsr VBXE.TVBXEMEMORYSTREAM.READBYTE
  3810 3C4B AD 41 9F			lda VBXE.TVBXEMEMORYSTREAM.READBYTE.RESULT
  3811 3C4E 8D D1 A0			sta RESULT
  3812 3C51			@exit
  3813
  3814 				; ------------------------------------------------------------
  3815
  3816 = A0CD			SRC	= DATAORIGIN+$0228
  3817 = A0D1			RESULT	= DATAORIGIN+$022C
  3818
  3819 = A0CD			@VarData	= SRC
  3820 = 0004			@VarDataSize	= 4
  3821
  3822 3C51 60				rts						; ret
  3823 				.endl
  3824
  3825 3C52			.local	NOSOUND						; PROCEDURE
  3826
  3827 3C52			@exit
  3828 					.ifdef @new
  3829 					lda <@VarData
  3830 					sta :ztmp
  3831 					lda >@VarData
  3832 					ldy #@VarDataSize-1
  3833 					jmp @FreeMem
  3834 					els
  3835 3C52 60				rts						; ret
  3836 					eif
  3837 				.endl
  3838
  3839 3C53			.local	MYDELAY						; PROCEDURE
  3840
  3841 				; ------------------------------------------------------------
  3842
  3843 = A0D2			A	= DATAORIGIN+$022D
  3844
  3845 = A0D2			@VarData	= A
  3846 = 0002			@VarDataSize	= 2
  3847
  3848 3C53			@exit
  3849 					.ifdef @new
  3850 					lda <@VarData
  3851 					sta :ztmp
  3852 					lda >@VarData
  3853 					ldy #@VarDataSize-1
  3854 					jmp @FreeMem
  3855 					els
  3856 3C53 60				rts						; ret
  3857 					eif
  3858 				.endl
  3859
  3860 3C54			.local	MAX						; FUNCTION
  3861
  3862 				; optimize OK (service.pas), line = 613
  3863
  3864 3C54 AD D6 A0			lda B
  3865 3C57 CD D4 A0			cmp A
  3866 3C5A AD D7 A0			lda B+1
  3867 3C5D ED D5 A0			sbc A+1
  3868 3C60 50 02			svc
  3869 3C62 49 80			eor #$80
  3870 3C64 10 0C			jpl l_06AA
  3871 3C66 AD D4 A0			lda A
  3872 3C69 8D D8 A0			sta RESULT
  3873 3C6C AD D5 A0			lda A+1
  3874 3C6F 4C 7B 3C			jmp l_06B9
  3875 3C72			l_06AA
  3876
  3877 				; optimize OK (service.pas), line = 614
  3878
  3879 3C72 AD D6 A0			lda B
  3880 3C75 8D D8 A0			sta RESULT
  3881 3C78 AD D7 A0			lda B+1
  3882 3C7B			l_06B9
  3883 3C7B 8D D9 A0			sta RESULT+1
  3884 3C7E			@exit
  3885
  3886 				; ------------------------------------------------------------
  3887
  3888 = A0D4			A	= DATAORIGIN+$022F
  3889 = A0D6			B	= DATAORIGIN+$0231
  3890 = A0D8			RESULT	= DATAORIGIN+$0233
  3891
  3892 = A0D4			@VarData	= A
  3893 = 0004			@VarDataSize	= 4
  3894
  3895 3C7E 60				rts						; ret
  3896 				.endl
  3897
  3898 3C7F			.local	MIN						; FUNCTION
  3899
  3900 				; optimize OK (service.pas), line = 620
  3901
  3902 3C7F AD DA A0			lda A
  3903 3C82 CD DC A0			cmp B
  3904 3C85 AD DB A0			lda A+1
  3905 3C88 ED DD A0			sbc B+1
  3906 3C8B 50 02			svc
  3907 3C8D 49 80			eor #$80
  3908 3C8F 10 0C			jpl l_06D4
  3909 3C91 AD DA A0			lda A
  3910 3C94 8D DE A0			sta RESULT
  3911 3C97 AD DB A0			lda A+1
  3912 3C9A 4C A6 3C			jmp l_06E3
  3913 3C9D			l_06D4
  3914
  3915 				; optimize OK (service.pas), line = 621
  3916
  3917 3C9D AD DC A0			lda B
  3918 3CA0 8D DE A0			sta RESULT
  3919 3CA3 AD DD A0			lda B+1
  3920 3CA6			l_06E3
  3921 3CA6 8D DF A0			sta RESULT+1
  3922 3CA9			@exit
  3923
  3924 				; ------------------------------------------------------------
  3925
  3926 = A0DA			A	= DATAORIGIN+$0235
  3927 = A0DC			B	= DATAORIGIN+$0237
  3928 = A0DE			RESULT	= DATAORIGIN+$0239
  3929
  3930 = A0DA			@VarData	= A
  3931 = 0004			@VarDataSize	= 4
  3932
  3933 3CA9 60				rts						; ret
  3934 				.endl
  3935
  3936 3CAA			.local	FATAL_ERROR					; PROCEDURE
  3937 3CAA 8D E0 A0			sta ERR_TYPE
  3938
  3939 				; optimize OK (service.pas), line = 630
  3940
  3941 3CAD 8D 56 A0			sta STATUS
  3942
  3943 				; -------------------  ASM Block 00000147  -------------------
  3944
  3945 3CB0 8D 00 01		      sta $100
  3946 				      
  3947 3CB3 AD 0A D2		      kk: lda $d20a
  3948 3CB6 8D 1A D0		      sta $d01a
  3949 3CB9 4C B3 3C		      jmp kk
  3950 				    
  3951 				    
  3952 				; ------------------------------------------------------------
  3953
  3954 = A0E0			ERR_TYPE	= DATAORIGIN+$023B
  3955
  3956 = A0E0			@VarData	= ERR_TYPE
  3957 = 0001			@VarDataSize	= 1
  3958
  3959 3CBC			@exit
  3960 					.ifdef @new
  3961 					lda <@VarData
  3962 					sta :ztmp
  3963 					lda >@VarData
  3964 					ldy #@VarDataSize-1
  3965 					jmp @FreeMem
  3966 					els
  3967 3CBC 60				rts						; ret
  3968 					eif
  3969 				.endl
  3970
  3971 3CBD			.local	INITROWARRAY					; PROCEDURE
  3972
  3973 				; optimize OK (service.pas), line = 678
  3974
  3975 3CBD A9 00			lda #$00
  3976 3CBF 8D 98 A0			sta HLP
  3977 3CC2 8D 99 A0			sta HLP+1
  3978
  3979 				; optimize OK (service.pas), line = 680
  3980
  3981 3CC5 8D E1 A0			sta Y
  3982
  3983 3CC8			l_0703
  3984 				; --- ForToDoCondition
  3985 3CC8 AC E1 A0			ldy Y
  3986 3CCB C0 C8			cpy #$C8
  3987 3CCD 90 0A			jcc l_0723
  3988
  3989 				; optimize OK (service.pas), line = 683
  3990
  3991 3CCF A9 00			lda #$00
  3992 3CD1 99 00 C0			sta adr.ROW,y
  3993 3CD4 A9 FA			lda #$FA
  3994 3CD6 4C E5 3C			jmp l_0734
  3995 3CD9			l_0723
  3996
  3997 				; optimize OK (service.pas), line = 685
  3998
  3999 3CD9 AC E1 A0			ldy Y
  4000 3CDC AD 98 A0			lda HLP
  4001 3CDF 99 00 C0			sta adr.ROW,y
  4002 3CE2 AD 99 A0			lda HLP+1
  4003 3CE5			l_0734
  4004 3CE5 99 00 C1			sta adr.ROW+256,y
  4005
  4006 				; optimize OK (service.pas), line = 687
  4007
  4008 3CE8 AD 98 A0			lda HLP
  4009 3CEB 18 69 40			add #$40
  4010 3CEE 8D 98 A0			sta HLP
  4011 3CF1 AD 99 A0			lda HLP+1
  4012 3CF4 69 01			adc #$01
  4013 3CF6 8D 99 A0			sta HLP+1
  4014
  4015 				; --- ForToDoEpilog
  4016 3CF9 EE E1 A0			inc Y
  4017 3CFC D0 CA			jne l_0703
  4018 3CFE			l_0711
  4019
  4020 				; ------------------------------------------------------------
  4021
  4022 = A0E1			Y	= DATAORIGIN+$023C
  4023
  4024 = A0E1			@VarData	= Y
  4025 = 0001			@VarDataSize	= 1
  4026
  4027 3CFE			@exit
  4028 					.ifdef @new
  4029 					lda <@VarData
  4030 					sta :ztmp
  4031 					lda >@VarData
  4032 					ldy #@VarDataSize-1
  4033 					jmp @FreeMem
  4034 					els
  4035 3CFE 60				rts						; ret
  4036 					eif
  4037 				.endl
  4038
  4039 3CFF			.local	INITSVGA					; PROCEDURE
  4040
  4041 				; optimize OK (service.pas), line = 703
  4042
  4043 3CFF AD E2 9E			lda GRAPH.GRAPHRESULT
  4044 3D02 C9 01			cmp #$01
  4045 3D04 F0 0F			jeq l_0758
  4046
  4047 				; optimize FAIL ('@print', service.pas), line = 704
  4048
  4049 					@printSTRING #CODEORIGIN+$0000
  4049 				 LDY> CODEORIGIN+$0000\ LDA< CODEORIGIN+$0000\ JSR @PRINTSTRING
  4049 3D06 A0 20		 LDY> CODEORIGIN+$0000
  4049 3D08 A9 00		 LDA< CODEORIGIN+$0000
  4049 3D0A 20 D0 27		 JSR @PRINTSTRING
  4050 3D0D 20 BA 27			@printEOL
  4051 3D10 A9 00			lda #$00
  4052 3D12 4C 2C 9E			jmp @halt
  4053 3D15			l_0758
  4054
  4055 				; optimize OK (service.pas), line = 708
  4056
  4057 3D15 A9 1F			lda #$1F
  4058 3D17 20 DF 37			jsr VBXE.SETHORIZONTALRES.@010180000
  4059
  4060 				; optimize FAIL ('VBXE.COLORMAPOFF', service.pas), line = 709
  4061
  4062 3D1A 20 37 37			jsr VBXE.COLORMAPOFF
  4063
  4064 				; optimize OK (service.pas), line = 711
  4065
  4066 3D1D A9 07			lda #$07
  4067 3D1F 20 10 38			jsr VBXE.VBXECONTROL
  4068
  4069 				; optimize OK (service.pas), line = 713
  4070
  4071 3D22 A9 14			lda #$14
  4072 3D24 20 99 33			jsr VBXE.SETTOPBORDER
  4073
  4074 				; optimize OK (service.pas), line = 714
  4075
  4076 3D27 A9 C8			lda #$C8
  4077 3D29 20 B2 33			jsr VBXE.SETXDLHEIGHT
  4078
  4079 				; optimize OK (service.pas), line = 716
  4080
  4081 3D2C A9 00			lda #$00
  4082 3D2E 8D 75 9F			sta VBXE_RAM.POSITION
  4083 3D31 A9 50			lda #$50
  4084 3D33 8D 76 9F			sta VBXE_RAM.POSITION+1
  4085 3D36 A9 00			lda #$00
  4086 3D38 8D 77 9F			sta VBXE_RAM.POSITION+2
  4087 3D3B 8D 78 9F			sta VBXE_RAM.POSITION+3
  4088
  4089 				; optimize OK (service.pas), line = 717
  4090
  4091 3D3E 8D 79 9F			sta VBXE_RAM.SIZE
  4092 3D41 A9 FA			lda #$FA
  4093 3D43 8D 7A 9F			sta VBXE_RAM.SIZE+1
  4094 3D46 A9 00			lda #$00
  4095 3D48 8D 7B 9F			sta VBXE_RAM.SIZE+2
  4096 3D4B 8D 7C 9F			sta VBXE_RAM.SIZE+3
  4097
  4098 				; optimize FAIL ('VBXE.TVBXEMEMORYSTREAM.CLEAR', service.pas), line = 718
  4099
  4100 3D4E AD 3B 9E			lda VBXE_RAM
  4101 3D51 AC 3C 9E			ldy VBXE_RAM+1
  4102 3D54 20 24 36			jsr VBXE.TVBXEMEMORYSTREAM.CLEAR
  4103
  4104 				; optimize OK (service.pas), line = 720
  4105
  4106 3D57 A9 00			lda #$00
  4107 3D59 8D 00 D4			sta ATARI.DMACTL
  4108
  4109 				; -------------------  ASM Block 00000148  -------------------
  4110
  4111 3D5C				  fxs FX_MEMS #$80
Macro: FXS [Source: vbxe.hea]
     2 3D5C A9 80		        lda     #$80
     3 3D5E A0 5F		        ldy     #FX_MEMS
     4 3D60 91 80		        sta     (fxptr),y
Source: arkanoid_vbxe.a65
  4112 					
  4113 				; optimize OK (service.pas), line = 726
  4114
  4115 3D62 AD 35 9E			lda BLT
  4116 3D65 85 84			sta :bp2
  4117 3D67 AD 36 9E			lda BLT+1
  4118 3D6A 85 85			sta :bp2+1
  4119 3D6C A9 00			lda #$00
  4120 3D6E A0 14			ldy #$14
  4121 3D70 91 84 88 10 FB		sta:rpl (:bp2),y-
  4122
  4123 				; -------------------  ASM Block 00000149  -------------------
  4124
  4125 3D75				  fxs FX_MEMS #$00
Macro: FXS [Source: vbxe.hea]
     2 3D75 A9 00		        lda     #$00
     3 3D77 A0 5F		        ldy     #FX_MEMS
     4 3D79 91 80		        sta     (fxptr),y
Source: arkanoid_vbxe.a65
  4126 					
  4127 3D7B			@exit
  4128 					.ifdef @new
  4129 					lda <@VarData
  4130 					sta :ztmp
  4131 					lda >@VarData
  4132 					ldy #@VarDataSize-1
  4133 					jmp @FreeMem
  4134 					els
  4135 3D7B 60				rts						; ret
  4136 					eif
  4137 				.endl
  4138
  4139 3D7C			.local	SHINE_BLOCK					; PROCEDURE
  4140
  4141 				; optimize OK (service.pas), line = 770
  4142
  4143 3D7C AD 76 A0			lda SHINEREC.XB
  4144 3D7F 8D E2 A0			sta XB
  4145 3D82 A9 00			lda #$00
  4146 3D84 8D E3 A0			sta XB+1
  4147
  4148 				; optimize OK (service.pas), line = 771
  4149
  4150 3D87 AD 77 A0			lda SHINEREC.YB
  4151 3D8A 8D E4 A0			sta YB
  4152 3D8D A9 00			lda #$00
  4153 3D8F 8D E5 A0			sta YB+1
  4154
  4155 				; optimize OK (service.pas), line = 773
  4156
  4157 3D92 AD E4 A0			lda YB
  4158 3D95 0A				asl @
  4159 3D96 0A				asl @
  4160 3D97 0A				asl @
  4161 3D98 0A				asl @
  4162 3D99 18 6D E2 A0			add XB
  4163 3D9D 8D F1 A0			sta I
  4164
  4165 				; optimize OK (service.pas), line = 775
  4166
  4167 3DA0 A8				tay
  4168 3DA1 B9 00 DB			lda adr.WALL,y
  4169 3DA4 C9 09			cmp #$09
  4170 3DA6 B0 03 4C F9 3E		jcc l_07AB
  4171
  4172 				; optimize OK (service.pas), line = 777
  4173
  4174 3DAB AD 78 A0			lda SHINEREC.FRAME
  4175 3DAE 4A				lsr @
  4176 3DAF 8D E6 A0			sta FRAME
  4177 3DB2 A9 00			lda #$00
  4178 3DB4 8D E7 A0			sta FRAME+1
  4179
  4180 				; optimize OK (service.pas), line = 778
  4181
  4182 3DB7 B9 00 DB			lda adr.WALL,y
  4183 3DBA C9 0A			cmp #$0A
  4184 3DBC F0 0E			jeq l_07CB
  4185 3DBE AD E6 A0			lda FRAME
  4186 3DC1 18 69 05			add #$05
  4187 3DC4 8D E6 A0			sta FRAME
  4188 3DC7 90 03			scc
  4189 3DC9 EE E7 A0			inc FRAME+1
  4190 3DCC			l_07CB
  4191
  4192 				; optimize OK (service.pas), line = 780
  4193
  4194 3DCC AD E2 A0			lda XB
  4195 3DCF 85 A0			sta :STACKORIGIN+10
  4196 3DD1 AD E3 A0			lda XB+1
  4197 3DD4 85 B0			sta :STACKORIGIN+STACKWIDTH+10
  4198 3DD6 06 A0			asl :STACKORIGIN+10
  4199 3DD8 26 B0			rol :STACKORIGIN+STACKWIDTH+10
  4200 3DDA 06 A0			asl :STACKORIGIN+10
  4201 3DDC 26 B0			rol :STACKORIGIN+STACKWIDTH+10
  4202 3DDE 06 A0			asl :STACKORIGIN+10
  4203 3DE0 26 B0			rol :STACKORIGIN+STACKWIDTH+10
  4204 3DE2 06 A0			asl :STACKORIGIN+10
  4205 3DE4 26 B0			rol :STACKORIGIN+STACKWIDTH+10
  4206 3DE6 A9 09			lda #$09
  4207 3DE8 18 65 A0			add :STACKORIGIN+10
  4208 3DEB 8D E8 A0			sta XF
  4209 3DEE A9 00			lda #$00
  4210 3DF0 65 B0			adc :STACKORIGIN+STACKWIDTH+10
  4211 3DF2 8D E9 A0			sta XF+1
  4212
  4213 				; optimize OK (service.pas), line = 781
  4214
  4215 3DF5 AD E4 A0			lda YB
  4216 3DF8 85 A0			sta :STACKORIGIN+10
  4217 3DFA AD E5 A0			lda YB+1
  4218 3DFD 85 B0			sta :STACKORIGIN+STACKWIDTH+10
  4219 3DFF 06 A0			asl :STACKORIGIN+10
  4220 3E01 26 B0			rol :STACKORIGIN+STACKWIDTH+10
  4221 3E03 06 A0			asl :STACKORIGIN+10
  4222 3E05 26 B0			rol :STACKORIGIN+STACKWIDTH+10
  4223 3E07 06 A0			asl :STACKORIGIN+10
  4224 3E09 26 B0			rol :STACKORIGIN+STACKWIDTH+10
  4225 3E0B A9 16			lda #$16
  4226 3E0D 18 65 A0			add :STACKORIGIN+10
  4227 3E10 8D EA A0			sta YF
  4228 3E13 A9 00			lda #$00
  4229 3E15 65 B0			adc :STACKORIGIN+STACKWIDTH+10
  4230 3E17 8D EB A0			sta YF+1
  4231
  4232 				; optimize OK (service.pas), line = 782
  4233
  4234 3E1A AD E6 A0			lda FRAME
  4235 3E1D 85 9F			sta :STACKORIGIN+9
  4236 3E1F AD E7 A0			lda FRAME+1
  4237 3E22 06 9F			asl :STACKORIGIN+9
  4238 3E24 2A				rol @
  4239 3E25 06 9F			asl :STACKORIGIN+9
  4240 3E27 2A				rol @
  4241 3E28 06 9F			asl :STACKORIGIN+9
  4242 3E2A 2A				rol @
  4243 3E2B 06 9F			asl :STACKORIGIN+9
  4244 3E2D 2A				rol @
  4245 3E2E 06 9F			asl :STACKORIGIN+9
  4246 3E30 2A				rol @
  4247 3E31 06 9F			asl :STACKORIGIN+9
  4248 3E33 2A				rol @
  4249 3E34 06 9F			asl :STACKORIGIN+9
  4250 3E36 2A				rol @
  4251 3E37 8D ED A0			sta FR+1
  4252 3E3A A5 9F			lda :STACKORIGIN+9
  4253 3E3C 8D EC A0			sta FR
  4254
  4255 				; optimize OK (service.pas), line = 784
  4256
  4257 3E3F A9 00			lda #$00
  4258 3E41 8D F0 A0			sta Y
  4259
  4260 3E44			l_07FB
  4261 				; --- ForToDoCondition
  4262 3E44 AD F0 A0			lda Y
  4263 3E47 C9 08			cmp #$08
  4264 3E49 90 03 4C F9 3E		jcs l_0809
  4265
  4266 				; optimize OK (service.pas), line = 786
  4267
  4268 3E4E 85 9F			sta :STACKORIGIN+9
  4269 3E50 A9 00			lda #$00
  4270 3E52 06 9F			asl :STACKORIGIN+9
  4271 3E54 2A				rol @
  4272 3E55 06 9F			asl :STACKORIGIN+9
  4273 3E57 2A				rol @
  4274 3E58 06 9F			asl :STACKORIGIN+9
  4275 3E5A 2A				rol @
  4276 3E5B 06 9F			asl :STACKORIGIN+9
  4277 3E5D 2A				rol @
  4278 3E5E 8D EF A0			sta OG+1
  4279 3E61 A5 9F			lda :STACKORIGIN+9
  4280 3E63 8D EE A0			sta OG
  4281
  4282 				; optimize OK (service.pas), line = 789
  4283
  4284 3E66 AD E8 A0			lda XF
  4285 3E69 85 A0			sta :STACKORIGIN+10
  4286 3E6B A9 50			lda #$50
  4287 3E6D 18 6D E9 A0			add XF+1
  4288 3E71 85 B0			sta :STACKORIGIN+STACKWIDTH+10
  4289 3E73 A9 00			lda #$00
  4290 3E75 69 00			adc #$00
  4291 3E77 85 C0			sta :STACKORIGIN+STACKWIDTH*2+10
  4292 3E79 A9 00			lda #$00
  4293 3E7B 69 00			adc #$00
  4294 3E7D 85 D0			sta :STACKORIGIN+STACKWIDTH*3+10
  4295 3E7F AD EA A0			lda YF
  4296 3E82 18 6D F0 A0			add Y
  4297 3E86 A8				tay
  4298 3E87 A5 A0			lda :STACKORIGIN+10
  4299 3E89 18 79 00 C0			add adr.ROW,y
  4300 3E8D 8D C2 A0			sta BLITROW.DST
  4301 3E90 A5 B0			lda :STACKORIGIN+STACKWIDTH+10
  4302 3E92 79 00 C1			adc adr.ROW+256,y
  4303 3E95 8D C3 A0			sta BLITROW.DST+1
  4304 3E98 A5 C0			lda :STACKORIGIN+STACKWIDTH*2+10
  4305 3E9A 69 00			adc #$00
  4306 3E9C 8D C4 A0			sta BLITROW.DST+2
  4307 3E9F A5 D0			lda :STACKORIGIN+STACKWIDTH*3+10
  4308 3EA1 69 00			adc #$00
  4309 3EA3 8D C5 A0			sta BLITROW.DST+3
  4310 3EA6 AD ED 9F			lda SHINEWALL.OFS
  4311 3EA9 18 6D EC A0			add FR
  4312 3EAD 85 A1			sta :STACKORIGIN+11
  4313 3EAF AD EE 9F			lda SHINEWALL.OFS+1
  4314 3EB2 6D ED A0			adc FR+1
  4315 3EB5 85 B1			sta :STACKORIGIN+STACKWIDTH+11
  4316 3EB7 AD EF 9F			lda SHINEWALL.OFS+2
  4317 3EBA 69 00			adc #$00
  4318 3EBC 85 C1			sta :STACKORIGIN+STACKWIDTH*2+11
  4319 3EBE AD F0 9F			lda SHINEWALL.OFS+3
  4320 3EC1 69 00			adc #$00
  4321 3EC3 85 D1			sta :STACKORIGIN+STACKWIDTH*3+11
  4322 3EC5 A5 A1			lda :STACKORIGIN+11
  4323 3EC7 18 6D EE A0			add OG
  4324 3ECB 8D BE A0			sta BLITROW.SRC
  4325 3ECE A5 B1			lda :STACKORIGIN+STACKWIDTH+11
  4326 3ED0 6D EF A0			adc OG+1
  4327 3ED3 8D BF A0			sta BLITROW.SRC+1
  4328 3ED6 A5 C1			lda :STACKORIGIN+STACKWIDTH*2+11
  4329 3ED8 69 00			adc #$00
  4330 3EDA 8D C0 A0			sta BLITROW.SRC+2
  4331 3EDD A5 D1			lda :STACKORIGIN+STACKWIDTH*3+11
  4332 3EDF 69 00			adc #$00
  4333 3EE1 8D C1 A0			sta BLITROW.SRC+3
  4334 3EE4 A9 10			lda #$10
  4335 3EE6 8D C6 A0			sta BLITROW.SIZE
  4336 3EE9 A9 00			lda #$00
  4337 3EEB 8D C7 A0			sta BLITROW.SIZE+1
  4338 3EEE 20 90 3B			jsr BLITROW
  4339
  4340 				; --- ForToDoEpilog
  4341 3EF1 EE F0 A0			inc Y
  4342 3EF4 F0 03 4C 44 3E		jne l_07FB
  4343 3EF9			l_0809
  4344 3EF9			l_07AB
  4345
  4346 				; optimize FAIL (0, service.pas), line = 793
  4347
  4348 3EF9 EE 78 A0			inc SHINEREC.FRAME
  4349
  4350 				; optimize OK (service.pas), line = 794
  4351
  4352 3EFC AD 78 A0			lda SHINEREC.FRAME
  4353 3EFF C9 0A			cmp #$0A
  4354 3F01 D0 05			jne l_0850
  4355 3F03 A9 00			lda #$00
  4356 3F05 8D 7A A0			sta SHINEREC.ACTIVE
  4357 3F08			l_0850
  4358
  4359 				; ------------------------------------------------------------
  4360
  4361 = A0E2			XB	= DATAORIGIN+$023D
  4362 = A0E4			YB	= DATAORIGIN+$023F
  4363 = A0E6			FRAME	= DATAORIGIN+$0241
  4364 = A0E8			XF	= DATAORIGIN+$0243
  4365 = A0EA			YF	= DATAORIGIN+$0245
  4366 = A0EC			FR	= DATAORIGIN+$0247
  4367 = A0EE			OG	= DATAORIGIN+$0249
  4368 = A0F0			Y	= DATAORIGIN+$024B
  4369 = A0F1			I	= DATAORIGIN+$024C
  4370
  4371 = A0E2			@VarData	= XB
  4372 = 0010			@VarDataSize	= 16
  4373
  4374 3F08			@exit
  4375 					.ifdef @new
  4376 					lda <@VarData
  4377 					sta :ztmp
  4378 					lda >@VarData
  4379 					ldy #@VarDataSize-1
  4380 					jmp @FreeMem
  4381 					els
  4382 3F08 60				rts						; ret
  4383 					eif
  4384 				.endl
  4385
  4386 3F09			.local	UNSHINE_BLOCK					; PROCEDURE
  4387
  4388 				; optimize OK (service.pas), line = 803
  4389
  4390 3F09 A9 09			lda #$09
  4391 3F0B 8D 78 A0			sta SHINEREC.FRAME
  4392
  4393 				; optimize FAIL ('SHINE_BLOCK', service.pas), line = 804
  4394
  4395 3F0E 20 7C 3D			jsr SHINE_BLOCK
  4396
  4397 3F11			@exit
  4398 					.ifdef @new
  4399 					lda <@VarData
  4400 					sta :ztmp
  4401 					lda >@VarData
  4402 					ldy #@VarDataSize-1
  4403 					jmp @FreeMem
  4404 					els
  4405 3F11 60				rts						; ret
  4406 					eif
  4407 				.endl
  4408
  4409 3F12			.local	SHINE						; PROCEDURE
  4410
  4411 				; optimize OK (service.pas), line = 811
  4412
  4413 3F12 AD 7A A0			lda SHINEREC.ACTIVE
  4414 3F15 F0 03			jeq l_0870
  4415 3F17 20 09 3F			jsr UNSHINE_BLOCK
  4416 3F1A			l_0870
  4417
  4418 				; optimize OK (service.pas), line = 813
  4419
  4420 3F1A AD F2 A0			lda XB
  4421 3F1D 8D 76 A0			sta SHINEREC.XB
  4422
  4423 				; optimize OK (service.pas), line = 814
  4424
  4425 3F20 AD F3 A0			lda YB
  4426 3F23 8D 77 A0			sta SHINEREC.YB
  4427
  4428 				; optimize OK (service.pas), line = 815
  4429
  4430 3F26 A9 00			lda #$00
  4431 3F28 8D 78 A0			sta SHINEREC.FRAME
  4432
  4433 				; optimize OK (service.pas), line = 816
  4434
  4435 3F2B A9 01			lda #$01
  4436 3F2D 8D 7A A0			sta SHINEREC.ACTIVE
  4437
  4438 				; optimize OK (service.pas), line = 817
  4439
  4440 3F30 AD F3 A0			lda YB
  4441 3F33 0A				asl @
  4442 3F34 0A				asl @
  4443 3F35 0A				asl @
  4444 3F36 0A				asl @
  4445 3F37 18 6D F2 A0			add XB
  4446 3F3B A8				tay
  4447 3F3C B9 00 DB			lda adr.WALL,y
  4448 3F3F 8D 79 A0			sta SHINEREC.BLOCK
  4449
  4450 				; ------------------------------------------------------------
  4451
  4452 = A0F2			XB	= DATAORIGIN+$024D
  4453 = A0F3			YB	= DATAORIGIN+$024E
  4454
  4455 = A0F2			@VarData	= XB
  4456 = 0002			@VarDataSize	= 2
  4457
  4458 3F42			@exit
  4459 					.ifdef @new
  4460 					lda <@VarData
  4461 					sta :ztmp
  4462 					lda >@VarData
  4463 					ldy #@VarDataSize-1
  4464 					jmp @FreeMem
  4465 					els
  4466 3F42 60				rts						; ret
  4467 					eif
  4468 				.endl
  4469
  4470 3F43			.local	CHECKSHINE					; PROCEDURE
  4471
  4472 				; optimize OK (service.pas), line = 823
  4473
  4474 3F43 AD 7A A0			lda SHINEREC.ACTIVE
  4475 3F46 C9 01			cmp #$01
  4476 3F48 D0 03			jne l_08B1
  4477 3F4A 20 7C 3D			jsr SHINE_BLOCK
  4478 3F4D			l_08B1
  4479
  4480 3F4D			@exit
  4481 					.ifdef @new
  4482 					lda <@VarData
  4483 					sta :ztmp
  4484 					lda >@VarData
  4485 					ldy #@VarDataSize-1
  4486 					jmp @FreeMem
  4487 					els
  4488 3F4D 60				rts						; ret
  4489 					eif
  4490 				.endl
  4491
  4492 3F4E			.local	RANDOM_LETTER_DROP				; FUNCTION
  4493
  4494 				; --- RepeatUntilProlog
  4495 3F4E			l_08BA
  4496
  4497 				; optimize OK (service.pas), line = 831
  4498
  4499 3F4E A9 64			lda #$64
  4500 3F50 20 03 33			jsr SYSTEM.RANDOM.@010180000
  4501 3F53 AD DC 9E			lda SYSTEM.RANDOM.@010180000.RESULT
  4502 3F56 8D F6 A0			sta RN
  4503 3F59 A9 00			lda #$00
  4504 3F5B 8D F7 A0			sta RN+1
  4505
  4506 				; optimize OK (service.pas), line = 832
  4507
  4508 3F5E A9 00			lda #$00
  4509 3F60 8D F8 A0			sta SUM
  4510 3F63 8D F9 A0			sta SUM+1
  4511
  4512 				; optimize OK (service.pas), line = 833
  4513
  4514 3F66 8D FA A0			sta LETTER
  4515 3F69 8D FB A0			sta LETTER+1
  4516
  4517 				; --- RepeatUntilProlog
  4518 3F6C			l_08C8
  4519
  4520 				; optimize FAIL (0, service.pas), line = 838
  4521
  4522 3F6C EE FA A0			inc LETTER
  4523 3F6F D0 03			sne
  4524 3F71 EE FB A0			inc LETTER+1
  4525
  4526 				; optimize OK (service.pas), line = 839
  4527
  4528 3F74 AC FA A0			ldy LETTER
  4529 3F77 B9 AD 20			lda adr.LETTER_DIS,y
  4530 3F7A 18 6D F8 A0			add SUM
  4531 3F7E 8D F8 A0			sta SUM
  4532 3F81 AD F9 A0			lda SUM+1
  4533 3F84 69 00			adc #$00
  4534 3F86 8D F9 A0			sta SUM+1
  4535
  4536 				; optimize OK (service.pas), line = 842
  4537
  4538 3F89 AD F7 A0			lda RN+1
  4539 3F8C CD F9 A0			cmp SUM+1
  4540 3F8F D0 06			bne @+
  4541 3F91 AD F6 A0			lda RN
  4542 3F94 CD F8 A0			cmp SUM
  4543 				@
  4544 3F97 B0 D3			jcs l_08C8
  4545
  4546 				; optimize OK (service.pas), line = 846
  4547
  4548 3F99 AD FA A0			lda LETTER
  4549 3F9C 38 E9 01			sub #$01
  4550 3F9F 85 9F			sta :STACKORIGIN+9
  4551 3FA1 AD FB A0			lda LETTER+1
  4552 3FA4 E9 00			sbc #$00
  4553 3FA6 CD 8E A0			cmp LETT.LAST+1
  4554 3FA9 D0 05			bne @+
  4555 3FAB A5 9F			lda :STACKORIGIN+9
  4556 3FAD CD 8D A0			cmp LETT.LAST
  4557 				@
  4558 3FB0 F0 9C			jeq l_08BA
  4559
  4560 				; optimize OK (service.pas), line = 848
  4561
  4562 3FB2 AD FA A0			lda LETTER
  4563 3FB5 38 E9 01			sub #$01
  4564 3FB8 8D F4 A0			sta RESULT
  4565 3FBB AD FB A0			lda LETTER+1
  4566 3FBE E9 00			sbc #$00
  4567 3FC0 8D F5 A0			sta RESULT+1
  4568 3FC3			@exit
  4569
  4570 				; ------------------------------------------------------------
  4571
  4572 = A0F4			RESULT	= DATAORIGIN+$024F
  4573 = A0F6			RN	= DATAORIGIN+$0251
  4574 = A0F8			SUM	= DATAORIGIN+$0253
  4575 = A0FA			LETTER	= DATAORIGIN+$0255
  4576
  4577 = A0F6			@VarData	= RN
  4578 = 0006			@VarDataSize	= 6
  4579
  4580 3FC3 60				rts						; ret
  4581 				.endl
  4582
  4583 3FC4			.local	PUT_LETTER					; PROCEDURE
  4584
  4585 				; optimize OK (service.pas), line = 857
  4586
  4587 3FC4 A9 00			lda #$00
  4588 3FC6 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
  4589 3FC8 AD 81 A0			lda LETT.TYP+1
  4590 3FCB 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  4591 3FCD AD 80 A0			lda LETT.TYP
  4592 3FD0 0A				asl @
  4593 3FD1 26 AF			rol :STACKORIGIN+STACKWIDTH+9
  4594 3FD3 26 BF			rol :STACKORIGIN+STACKWIDTH*2+9
  4595 3FD5 0A				asl @
  4596 3FD6 26 AF			rol :STACKORIGIN+STACKWIDTH+9
  4597 3FD8 26 BF			rol :STACKORIGIN+STACKWIDTH*2+9
  4598 3FDA 85 9F			sta :STACKORIGIN+9
  4599 3FDC A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  4600 3FDE 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
  4601 3FE0 A5 9F			lda :STACKORIGIN+9
  4602 3FE2 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  4603 3FE4 AD 82 A0			lda LETT.FRAME
  4604 3FE7 85 A0			sta :STACKORIGIN+10
  4605 3FE9 A9 00			lda #$00
  4606 3FEB 06 A0			asl :STACKORIGIN+10
  4607 3FED 2A				rol @
  4608 3FEE 06 A0			asl :STACKORIGIN+10
  4609 3FF0 2A				rol @
  4610 3FF1 06 A0			asl :STACKORIGIN+10
  4611 3FF3 2A				rol @
  4612 3FF4 06 A0			asl :STACKORIGIN+10
  4613 3FF6 2A				rol @
  4614 3FF7 18 65 AF			add :STACKORIGIN+STACKWIDTH+9
  4615 3FFA 8D FD A0			sta FL+1
  4616 3FFD A5 A0			lda :STACKORIGIN+10
  4617 3FFF 8D FC A0			sta FL
  4618
  4619 				; optimize OK (service.pas), line = 859
  4620
  4621 4002 A9 00			lda #$00
  4622 4004 8D 00 A1			sta YL
  4623
  4624 4007			l_0918
  4625 				; --- ForToDoCondition
  4626 4007 AD 00 A1			lda YL
  4627 400A C9 08			cmp #$08
  4628 400C 90 03 4C B2 40		jcs l_0926
  4629
  4630 				; optimize OK (service.pas), line = 861
  4631
  4632 4011 85 9F			sta :STACKORIGIN+9
  4633 4013 A9 00			lda #$00
  4634 4015 06 9F			asl :STACKORIGIN+9
  4635 4017 2A				rol @
  4636 4018 06 9F			asl :STACKORIGIN+9
  4637 401A 2A				rol @
  4638 401B 06 9F			asl :STACKORIGIN+9
  4639 401D 2A				rol @
  4640 401E 06 9F			asl :STACKORIGIN+9
  4641 4020 2A				rol @
  4642 4021 06 9F			asl :STACKORIGIN+9
  4643 4023 2A				rol @
  4644 4024 06 9F			asl :STACKORIGIN+9
  4645 4026 2A				rol @
  4646 4027 06 9F			asl :STACKORIGIN+9
  4647 4029 2A				rol @
  4648 402A 8D FF A0			sta FW+1
  4649 402D A5 9F			lda :STACKORIGIN+9
  4650 402F 8D FE A0			sta FW
  4651
  4652 				; optimize OK (service.pas), line = 863
  4653
  4654 4032 AD 7F A0			lda LETT.Y
  4655 4035 18 6D 00 A1			add YL
  4656 4039 A8				tay
  4657 403A AD 7E A0			lda LETT.X
  4658 403D 18 79 00 C0			add adr.ROW,y
  4659 4041 8D B2 A0			sta BLITZERO.DST
  4660 4044 A9 50			lda #$50
  4661 4046 79 00 C1			adc adr.ROW+256,y
  4662 4049 8D B3 A0			sta BLITZERO.DST+1
  4663 404C A9 00			lda #$00
  4664 404E 69 00			adc #$00
  4665 4050 8D B4 A0			sta BLITZERO.DST+2
  4666 4053 A9 00			lda #$00
  4667 4055 69 00			adc #$00
  4668 4057 8D B5 A0			sta BLITZERO.DST+3
  4669 405A AD 05 A0			lda LETTERS.OFS
  4670 405D 18 6D FE A0			add FW
  4671 4061 85 A2			sta :STACKORIGIN+12
  4672 4063 AD 06 A0			lda LETTERS.OFS+1
  4673 4066 6D FF A0			adc FW+1
  4674 4069 85 B2			sta :STACKORIGIN+STACKWIDTH+12
  4675 406B AD 07 A0			lda LETTERS.OFS+2
  4676 406E 69 00			adc #$00
  4677 4070 85 C2			sta :STACKORIGIN+STACKWIDTH*2+12
  4678 4072 AD 08 A0			lda LETTERS.OFS+3
  4679 4075 69 00			adc #$00
  4680 4077 85 D2			sta :STACKORIGIN+STACKWIDTH*3+12
  4681 4079 A5 A2			lda :STACKORIGIN+12
  4682 407B 18 6D FC A0			add FL
  4683 407F 8D AE A0			sta BLITZERO.SRC
  4684 4082 A5 B2			lda :STACKORIGIN+STACKWIDTH+12
  4685 4084 6D FD A0			adc FL+1
  4686 4087 8D AF A0			sta BLITZERO.SRC+1
  4687 408A A5 C2			lda :STACKORIGIN+STACKWIDTH*2+12
  4688 408C 69 00			adc #$00
  4689 408E 8D B0 A0			sta BLITZERO.SRC+2
  4690 4091 A5 D2			lda :STACKORIGIN+STACKWIDTH*3+12
  4691 4093 69 00			adc #$00
  4692 4095 8D B1 A0			sta BLITZERO.SRC+3
  4693 4098 A9 10			lda #$10
  4694 409A 8D B6 A0			sta BLITZERO.W
  4695 409D A9 00			lda #$00
  4696 409F 8D B7 A0			sta BLITZERO.W+1
  4697 40A2 A9 01			lda #$01
  4698 40A4 8D B8 A0			sta BLITZERO.H
  4699 40A7 20 D9 3A			jsr BLITZERO
  4700
  4701 				; --- ForToDoEpilog
  4702 40AA EE 00 A1			inc YL
  4703 40AD F0 03 4C 07 40		jne l_0918
  4704 40B2			l_0926
  4705
  4706 				; ------------------------------------------------------------
  4707
  4708 = A0FC			FL	= DATAORIGIN+$0257
  4709 = A0FE			FW	= DATAORIGIN+$0259
  4710 = A100			YL	= DATAORIGIN+$025B
  4711
  4712 = A0FC			@VarData	= FL
  4713 = 0005			@VarDataSize	= 5
  4714
  4715 40B2			@exit
  4716 					.ifdef @new
  4717 					lda <@VarData
  4718 					sta :ztmp
  4719 					lda >@VarData
  4720 					ldy #@VarDataSize-1
  4721 					jmp @FreeMem
  4722 					els
  4723 40B2 60				rts						; ret
  4724 					eif
  4725 				.endl
  4726
  4727 40B3			.local	REMOVE_LETTER					; PROCEDURE
  4728
  4729 				; optimize OK (service.pas), line = 875
  4730
  4731 40B3 AC 7F A0			ldy LETT.Y
  4732 40B6 AD 7E A0			lda LETT.X
  4733 40B9 18 79 00 C0			add adr.ROW,y
  4734 40BD 8D 98 A0			sta HLP
  4735 40C0 A9 00			lda #$00
  4736 40C2 79 00 C1			adc adr.ROW+256,y
  4737 40C5 8D 99 A0			sta HLP+1
  4738
  4739 				; optimize OK (service.pas), line = 877
  4740
  4741 40C8 AD 7F A0			lda LETT.Y
  4742 40CB C9 C8			cmp #$C8
  4743 40CD B0 52			jcs l_097C
  4744
  4745 				; optimize OK (service.pas), line = 878
  4746
  4747 40CF AD 98 A0			lda HLP
  4748 40D2 8D A7 A0			sta BLITBOX.DST
  4749 40D5 A9 50			lda #$50
  4750 40D7 18 6D 99 A0			add HLP+1
  4751 40DB 8D A8 A0			sta BLITBOX.DST+1
  4752 40DE A9 00			lda #$00
  4753 40E0 69 00			adc #$00
  4754 40E2 8D A9 A0			sta BLITBOX.DST+2
  4755 40E5 A9 00			lda #$00
  4756 40E7 69 00			adc #$00
  4757 40E9 8D AA A0			sta BLITBOX.DST+3
  4758 40EC AD A5 9F			lda PLAYSCREEN.OFS
  4759 40EF 18 6D 98 A0			add HLP
  4760 40F3 8D A3 A0			sta BLITBOX.SRC
  4761 40F6 AD A6 9F			lda PLAYSCREEN.OFS+1
  4762 40F9 6D 99 A0			adc HLP+1
  4763 40FC 8D A4 A0			sta BLITBOX.SRC+1
  4764 40FF AD A7 9F			lda PLAYSCREEN.OFS+2
  4765 4102 69 00			adc #$00
  4766 4104 8D A5 A0			sta BLITBOX.SRC+2
  4767 4107 AD A8 9F			lda PLAYSCREEN.OFS+3
  4768 410A 69 00			adc #$00
  4769 410C 8D A6 A0			sta BLITBOX.SRC+3
  4770 410F A9 10			lda #$10
  4771 4111 8D AB A0			sta BLITBOX.W
  4772 4114 A9 00			lda #$00
  4773 4116 8D AC A0			sta BLITBOX.W+1
  4774 4119 A9 08			lda #$08
  4775 411B 8D AD A0			sta BLITBOX.H
  4776 411E 20 58 3A			jsr BLITBOX
  4777 4121			l_097C
  4778
  4779 				; ------------------------------------------------------------
  4780
  4781 = A101			YL	= DATAORIGIN+$025C
  4782
  4783 = A101			@VarData	= YL
  4784 = 0001			@VarDataSize	= 1
  4785
  4786 4121			@exit
  4787 					.ifdef @new
  4788 					lda <@VarData
  4789 					sta :ztmp
  4790 					lda >@VarData
  4791 					ldy #@VarDataSize-1
  4792 					jmp @FreeMem
  4793 					els
  4794 4121 60				rts						; ret
  4795 					eif
  4796 				.endl
  4797
  4798 4122			.local	DISABLE_LETTER					; PROCEDURE
  4799
  4800 				; optimize FAIL ('REMOVE_LETTER', service.pas), line = 896
  4801
  4802 4122 20 B3 40			jsr REMOVE_LETTER
  4803
  4804 				; optimize OK (service.pas), line = 897
  4805
  4806 4125 A9 00			lda #$00
  4807 4127 8D 84 A0			sta LETT.ACTIVE
  4808
  4809 412A			@exit
  4810 					.ifdef @new
  4811 					lda <@VarData
  4812 					sta :ztmp
  4813 					lda >@VarData
  4814 					ldy #@VarDataSize-1
  4815 					jmp @FreeMem
  4816 					els
  4817 412A 60				rts						; ret
  4818 					eif
  4819 				.endl
  4820
  4821 412B			.local	START_LETTER					; PROCEDURE
  4822
  4823 				; optimize OK (service.pas), line = 903
  4824
  4825 412B AD 84 A0			lda LETT.ACTIVE
  4826 412E F0 03			jeq l_09A7
  4827 4130 20 22 41			jsr DISABLE_LETTER
  4828 4133			l_09A7
  4829
  4830 				; optimize OK (service.pas), line = 905
  4831
  4832 4133 AD 02 A1			lda XL
  4833 4136 8D 7E A0			sta LETT.X
  4834
  4835 				; optimize OK (service.pas), line = 906
  4836
  4837 4139 AD 04 A1			lda YL
  4838 413C 8D 7F A0			sta LETT.Y
  4839
  4840 				; optimize OK (service.pas), line = 907
  4841
  4842 413F AD 06 A1			lda LETTER
  4843 4142 8D 80 A0			sta LETT.TYP
  4844 4145 AD 07 A1			lda LETTER+1
  4845 4148 8D 81 A0			sta LETT.TYP+1
  4846
  4847 				; optimize OK (service.pas), line = 908
  4848
  4849 414B A9 00			lda #$00
  4850 414D 8D 82 A0			sta LETT.FRAME
  4851
  4852 				; optimize OK (service.pas), line = 909
  4853
  4854 4150 8D 83 A0			sta LETT.SUBFRAME
  4855
  4856 				; optimize OK (service.pas), line = 910
  4857
  4858 4153 A9 01			lda #$01
  4859 4155 8D 84 A0			sta LETT.ACTIVE
  4860
  4861 				; ------------------------------------------------------------
  4862
  4863 = A102			XL	= DATAORIGIN+$025D
  4864 = A104			YL	= DATAORIGIN+$025F
  4865 = A106			LETTER	= DATAORIGIN+$0261
  4866
  4867 = A102			@VarData	= XL
  4868 = 0006			@VarDataSize	= 6
  4869
  4870 4158			@exit
  4871 					.ifdef @new
  4872 					lda <@VarData
  4873 					sta :ztmp
  4874 					lda >@VarData
  4875 					ldy #@VarDataSize-1
  4876 					jmp @FreeMem
  4877 					els
  4878 4158 60				rts						; ret
  4879 					eif
  4880 				.endl
  4881
  4882 4159			.local	CHECK_LETTER					; PROCEDURE
  4883
  4884 				; optimize OK (service.pas), line = 916
  4885
  4886 4159 AD 84 A0			lda LETT.ACTIVE
  4887 415C D0 03 4C 58 42		jeq l_09D6
  4888
  4889 				; optimize FAIL ('REMOVE_LETTER', service.pas), line = 918
  4890
  4891 4161 20 B3 40			jsr REMOVE_LETTER
  4892
  4893 				; optimize FAIL (0, service.pas), line = 919
  4894
  4895 4164 EE 7F A0			inc LETT.Y
  4896
  4897 				; optimize OK (service.pas), line = 920
  4898
  4899 4167 AD 7F A0			lda LETT.Y
  4900 416A C9 C8			cmp #$C8
  4901 416C 90 03			jcc l_09EE
  4902 				; optimize FAIL ('DISABLE_LETTER', service.pas), line = 921
  4903 416E 4C 4A 42			jmp l_09F9
  4904 4171			l_09EE
  4905
  4906 				; optimize FAIL ('PUT_LETTER', service.pas), line = 923
  4907
  4908 4171 20 C4 3F			jsr PUT_LETTER
  4909
  4910 				; optimize FAIL (0, service.pas), line = 924
  4911
  4912 4174 EE 83 A0			inc LETT.SUBFRAME
  4913
  4914 				; optimize OK (service.pas), line = 925
  4915
  4916 4177 AD 83 A0			lda LETT.SUBFRAME
  4917 417A C9 05			cmp #$05
  4918 417C D0 08			jne l_0A10
  4919
  4920 				; optimize OK (service.pas), line = 927
  4921
  4922 417E A9 00			lda #$00
  4923 4180 8D 83 A0			sta LETT.SUBFRAME
  4924
  4925 				; optimize FAIL (0, service.pas), line = 928
  4926
  4927 4183 EE 82 A0			inc LETT.FRAME
  4928 4186			l_0A10
  4929
  4930 				; optimize OK (service.pas), line = 931
  4931
  4932 4186 AD 82 A0			lda LETT.FRAME
  4933 4189 C9 08			cmp #$08
  4934 418B D0 05			jne l_0A2D
  4935 418D A9 00			lda #$00
  4936 418F 8D 82 A0			sta LETT.FRAME
  4937 4192			l_0A2D
  4938
  4939 				; optimize OK (service.pas), line = 933
  4940
  4941 4192 AD 7E A0			lda LETT.X
  4942 4195 18 69 10			add #$10
  4943 4198 85 A0			sta :STACKORIGIN+10
  4944 419A A9 00			lda #$00
  4945 419C 69 00			adc #$00
  4946 419E 85 B0			sta :STACKORIGIN+STACKWIDTH+10
  4947 41A0 A9 00			lda #$00
  4948 41A2 C5 B0			cmp :STACKORIGIN+STACKWIDTH+10
  4949 41A4 D0 05			bne @+
  4950 41A6 AD 19 A0			lda VAUS.X
  4951 41A9 C5 A0			cmp :STACKORIGIN+10
  4952 				@
  4953 41AB 90 03 4C 4D 42		jcs l_0A86
  4954 				@
  4955 41B0 AD 19 A0			lda VAUS.X
  4956 41B3 18 6D 21 A0			add VAUS.WIDTH
  4957 41B7 85 A0			sta :STACKORIGIN+10
  4958 41B9 A9 00			lda #$00
  4959 41BB 69 00			adc #$00
  4960 41BD C9 00			cmp #$00
  4961 41BF D0 05			bne @+
  4962 41C1 A5 A0			lda :STACKORIGIN+10
  4963 41C3 CD 7E A0			cmp LETT.X
  4964 				@
  4965 41C6 B0 03 4C 4D 42		jcc l_0A86
  4966 41CB D0 03 4C 4D 42		jeq l_0A86
  4967 				@
  4968 41D0 AD 7F A0			lda LETT.Y
  4969 41D3 18 69 08			add #$08
  4970 41D6 85 A1			sta :STACKORIGIN+11
  4971 41D8 A9 00			lda #$00
  4972 41DA 69 00			adc #$00
  4973 41DC 85 B1			sta :STACKORIGIN+STACKWIDTH+11
  4974 41DE A9 00			lda #$00
  4975 41E0 C5 B1			cmp :STACKORIGIN+STACKWIDTH+11
  4976 41E2 D0 05			bne @+
  4977 41E4 AD 1A A0			lda VAUS.Y
  4978 41E7 C5 A1			cmp :STACKORIGIN+11
  4979 				@
  4980 41E9 B0 62			jcs l_0A86
  4981 				@
  4982 41EB AD 1A A0			lda VAUS.Y
  4983 41EE 18 6D 22 A0			add VAUS.HEIGHT
  4984 41F2 85 A0			sta :STACKORIGIN+10
  4985 41F4 A9 00			lda #$00
  4986 41F6 69 00			adc #$00
  4987 41F8 C9 00			cmp #$00
  4988 41FA D0 05			bne @+
  4989 41FC A5 A0			lda :STACKORIGIN+10
  4990 41FE CD 7F A0			cmp LETT.Y
  4991 				@
  4992 4201 90 4A			jcc l_0A86
  4993 4203 F0 48			jeq l_0A86
  4994 				@
  4995
  4996 				; optimize OK (service.pas), line = 936
  4997
  4998 4205 A9 64			lda #$64
  4999 4207 8D 7F 9F			sta BALL_BLOCK_SOUND.A
  5000 420A A9 00			lda #$00
  5001 420C 8D 80 9F			sta BALL_BLOCK_SOUND.A+1
  5002 420F A9 0A			lda #$0A
  5003 4211 8D 81 9F			sta BALL_BLOCK_SOUND.B
  5004 4214 A9 00			lda #$00
  5005 4216 8D 82 9F			sta BALL_BLOCK_SOUND.B+1
  5006 4219 20 3F 38			jsr BALL_BLOCK_SOUND
  5007
  5008 				; optimize OK (service.pas), line = 937
  5009
  5010 421C AC 80 A0			ldy LETT.TYP
  5011 421F C8				iny
  5012 4220 8C 25 A0			sty VAUS.LETTER
  5013
  5014 				; optimize OK (service.pas), line = 938
  5015
  5016 4223 AD 75 A0			lda CUR_PLAYER
  5017 4226 0A				asl @
  5018 4227 0A				asl @
  5019 4228 A8				tay
  5020 4229 B9 5A A0			lda adr.SCORE.PLAYER,y
  5021 422C 18 69 E8			add #$E8
  5022 422F 99 5A A0			sta adr.SCORE.PLAYER,y
  5023 4232 B9 5B A0			lda adr.SCORE.PLAYER+1,y
  5024 4235 69 03			adc #$03
  5025 4237 99 5B A0			sta adr.SCORE.PLAYER+1,y
  5026 423A B9 5C A0			lda adr.SCORE.PLAYER+2,y
  5027 423D 69 00			adc #$00
  5028 423F 99 5C A0			sta adr.SCORE.PLAYER+2,y
  5029 4242 B9 5D A0			lda adr.SCORE.PLAYER+3,y
  5030 4245 69 00			adc #$00
  5031 4247 99 5D A0			sta adr.SCORE.PLAYER+3,y
  5032 424A			l_09F9
  5033
  5034 				; optimize FAIL ('DISABLE_LETTER', service.pas), line = 939
  5035
  5036 424A 20 22 41			jsr DISABLE_LETTER
  5037 424D			l_0A86
  5038
  5039 				; optimize OK (service.pas), line = 943
  5040
  5041 424D A9 00			lda #$00
  5042 424F 8D 85 A0			sta LETT.INCOMING
  5043 4252 8D 86 A0			sta LETT.INCOMING+1
  5044 4255 4C 8F 42			jmp l_0AA7
  5045 4258			l_09D6
  5046
  5047 				; optimize OK (service.pas), line = 945
  5048
  5049 4258 AD 85 A0			lda LETT.INCOMING
  5050 425B C9 E9			cmp #$E9
  5051 425D AD 86 A0			lda LETT.INCOMING+1
  5052 4260 E9 03			sbc #$03
  5053 4262 50 02			svc
  5054 4264 49 80			eor #$80
  5055 4266 30 27			jmi l_0AB8
  5056
  5057 				; optimize OK (service.pas), line = 946
  5058
  5059 4268 AD 87 A0			lda LETT.NEXTX
  5060 426B 8D 02 A1			sta START_LETTER.XL
  5061 426E AD 88 A0			lda LETT.NEXTX+1
  5062 4271 8D 03 A1			sta START_LETTER.XL+1
  5063 4274 AD 89 A0			lda LETT.NEXTY
  5064 4277 8D 04 A1			sta START_LETTER.YL
  5065 427A AD 8A A0			lda LETT.NEXTY+1
  5066 427D 8D 05 A1			sta START_LETTER.YL+1
  5067 4280 AD 8B A0			lda LETT.NEXTTYPE
  5068 4283 8D 06 A1			sta START_LETTER.LETTER
  5069 4286 AD 8C A0			lda LETT.NEXTTYPE+1
  5070 4289 8D 07 A1			sta START_LETTER.LETTER+1
  5071 428C 20 2B 41			jsr START_LETTER
  5072 428F			l_0AA7
  5073 428F			l_0AB8
  5074
  5075 428F			@exit
  5076 					.ifdef @new
  5077 					lda <@VarData
  5078 					sta :ztmp
  5079 					lda >@VarData
  5080 					ldy #@VarDataSize-1
  5081 					jmp @FreeMem
  5082 					els
  5083 428F 60				rts						; ret
  5084 					eif
  5085 				.endl
  5086
  5087 4290			.local	SHOWBTMPICTURE					; PROCEDURE
  5088
  5089 				; ------------------------------------------------------------
  5090
  5091 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
  5092 				; as Pointer
  5093 4290 B5 96			lda :STACKORIGIN,x
  5094 4292 85 84			sta :bp2
  5095 4294 B5 A6			lda :STACKORIGIN+STACKWIDTH,x
  5096 4296 85 85			sta :bp2+1
  5097 4298 A0 07			ldy #$07
  5098 429A B1 84 99 08 A1 88 + 	mva:rpl (:bp2),y adr.BTM,y-
  5099 42A2 CA				dex
  5100 42A3			@main
  5101
  5102 				; optimize OK (service.pas), line = 956
  5103
  5104 42A3 AD 0C A1			lda BTM.OFS
  5105 42A6 8D A3 A0			sta BLITBOX.SRC
  5106 42A9 AD 0D A1			lda BTM.OFS+1
  5107 42AC 8D A4 A0			sta BLITBOX.SRC+1
  5108 42AF AD 0E A1			lda BTM.OFS+2
  5109 42B2 8D A5 A0			sta BLITBOX.SRC+2
  5110 42B5 AD 0F A1			lda BTM.OFS+3
  5111 42B8 8D A6 A0			sta BLITBOX.SRC+3
  5112 42BB A9 00			lda #$00
  5113 42BD 8D A7 A0			sta BLITBOX.DST
  5114 42C0 A9 50			lda #$50
  5115 42C2 8D A8 A0			sta BLITBOX.DST+1
  5116 42C5 A9 00			lda #$00
  5117 42C7 8D A9 A0			sta BLITBOX.DST+2
  5118 42CA 8D AA A0			sta BLITBOX.DST+3
  5119 42CD AD 08 A1			lda BTM.WIDTH
  5120 42D0 8D AB A0			sta BLITBOX.W
  5121 42D3 AD 09 A1			lda BTM.WIDTH+1
  5122 42D6 8D AC A0			sta BLITBOX.W+1
  5123 42D9 AD 0A A1			lda BTM.HEIGHT
  5124 42DC 8D AD A0			sta BLITBOX.H
  5125 42DF 20 58 3A			jsr BLITBOX
  5126
  5127 				; ------------------------------------------------------------
  5128
  5129 = A108			adr.BTM	= DATAORIGIN+$0263	; [8] RECORD
  5130 42E2			.var BTM	= adr.BTM .word
  5131 = A108			BTM.WIDTH	= DATAORIGIN+$0263
  5132 = A10A			BTM.HEIGHT	= DATAORIGIN+$0265
  5133 = A10C			BTM.OFS	= DATAORIGIN+$0267
  5134
  5135 = A108			@VarData	= BTM.WIDTH
  5136 = 0008			@VarDataSize	= 8
  5137
  5138 42E2			@exit
  5139 					.ifdef @new
  5140 					lda <@VarData
  5141 					sta :ztmp
  5142 					lda >@VarData
  5143 					ldy #@VarDataSize-1
  5144 					jmp @FreeMem
  5145 					els
  5146 42E2 60				rts						; ret
  5147 					eif
  5148 = 42E3 08 A1		BTM
  5148 				.endl
  5149
  5150 42E5			.local	PLACE_BALL					; PROCEDURE
  5151
  5152 				; optimize OK (service.pas), line = 977
  5153
  5154 42E5 AC 10 A1 84 84 AC + 	mwy BALL :bp2
  5155 42EF A0 00			ldy #BALL.X-DATAORIGIN
  5156 42F1 B1 84			lda (:bp2),y
  5157 42F3 38 E9 03			sub #$03
  5158 42F6 85 9F			sta :STACKORIGIN+9
  5159 42F8 C8				iny
  5160 42F9 B1 84			lda (:bp2),y
  5161 42FB E9 00			sbc #$00
  5162 42FD 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  5163 42FF A0 02			ldy #BALL.Y-DATAORIGIN
  5164 4301 B1 84			lda (:bp2),y
  5165 4303 38 E9 03			sub #$03
  5166 4306 A8				tay
  5167 4307 A5 9F			lda :STACKORIGIN+9
  5168 4309 18 79 00 C0			add adr.ROW,y
  5169 430D 8D 98 A0			sta HLP
  5170 4310 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  5171 4312 79 00 C1			adc adr.ROW+256,y
  5172 4315 8D 99 A0			sta HLP+1
  5173
  5174 				; optimize OK (service.pas), line = 979
  5175
  5176 4318 AD 98 A0			lda HLP
  5177 431B 8D B2 A0			sta BLITZERO.DST
  5178 431E A9 50			lda #$50
  5179 4320 18 6D 99 A0			add HLP+1
  5180 4324 8D B3 A0			sta BLITZERO.DST+1
  5181 4327 A9 00			lda #$00
  5182 4329 69 00			adc #$00
  5183 432B 8D B4 A0			sta BLITZERO.DST+2
  5184 432E A9 00			lda #$00
  5185 4330 69 00			adc #$00
  5186 4332 8D B5 A0			sta BLITZERO.DST+3
  5187 4335 AD 9D 9F			lda BALLDATA.OFS
  5188 4338 8D AE A0			sta BLITZERO.SRC
  5189 433B AD 9E 9F			lda BALLDATA.OFS+1
  5190 433E 8D AF A0			sta BLITZERO.SRC+1
  5191 4341 AD 9F 9F			lda BALLDATA.OFS+2
  5192 4344 8D B0 A0			sta BLITZERO.SRC+2
  5193 4347 AD A0 9F			lda BALLDATA.OFS+3
  5194 434A 8D B1 A0			sta BLITZERO.SRC+3
  5195 434D A9 05			lda #$05
  5196 434F 8D B6 A0			sta BLITZERO.W
  5197 4352 A9 00			lda #$00
  5198 4354 8D B7 A0			sta BLITZERO.W+1
  5199 4357 A9 05			lda #$05
  5200 4359 8D B8 A0			sta BLITZERO.H
  5201 435C 20 D9 3A			jsr BLITZERO
  5202
  5203 				; ------------------------------------------------------------
  5204
  5205 = A110			BALL	= DATAORIGIN+$026B
  5206 = 9EA5			BALL.X	= DATAORIGIN+$0000
  5207 = 9EA7			BALL.Y	= DATAORIGIN+$0002
  5208 = 9EA9			BALL.FINEX	= DATAORIGIN+$0004
  5209 = 9EAB			BALL.FINEY	= DATAORIGIN+$0006
  5210 = 9EAD			BALL.OLDX	= DATAORIGIN+$0008
  5211 = 9EAF			BALL.OLDY	= DATAORIGIN+$000A
  5212 = 9EB1			BALL.SPEED	= DATAORIGIN+$000C
  5213 = 9EB3			BALL.FINESPEED	= DATAORIGIN+$000E
  5214 = 9EB5			BALL.SPEEDX	= DATAORIGIN+$0010
  5215 = 9EB7			BALL.SPEEDY	= DATAORIGIN+$0012
  5216 = 9EB9			BALL.SBD	= DATAORIGIN+$0014
  5217 = 9EBB			BALL.BRWHIT	= DATAORIGIN+$0016
  5218 = 9EBC			BALL.INPLAY	= DATAORIGIN+$0017
  5219 = 9EBD			BALL.LAUNCH	= DATAORIGIN+$0018
  5220 = 9EBE			BALL.ONVAUS	= DATAORIGIN+$0019
  5221 = 9EC0			BALL.STM	= DATAORIGIN+$001B
  5222
  5223 = A110			@VarData	= BALL
  5224 = 0002			@VarDataSize	= 2
  5225
  5226 435F			@exit
  5227 					.ifdef @new
  5228 					lda <@VarData
  5229 					sta :ztmp
  5230 					lda >@VarData
  5231 					ldy #@VarDataSize-1
  5232 					jmp @FreeMem
  5233 					els
  5234 435F 60				rts						; ret
  5235 					eif
  5236 				.endl
  5237
  5238 4360			.local	REMOVE_BALL					; PROCEDURE
  5239
  5240 				; optimize OK (service.pas), line = 1006
  5241
  5242 4360 AC 14 A1 84 84 AC + 	mwy BALL :bp2
  5243 436A A0 08			ldy #BALL.OLDX-DATAORIGIN
  5244 436C B1 84			lda (:bp2),y
  5245 436E 38 E9 03			sub #$03
  5246 4371 85 9F			sta :STACKORIGIN+9
  5247 4373 C8				iny
  5248 4374 B1 84			lda (:bp2),y
  5249 4376 E9 00			sbc #$00
  5250 4378 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  5251 437A A0 0A			ldy #BALL.OLDY-DATAORIGIN
  5252 437C B1 84			lda (:bp2),y
  5253 437E 38 E9 03			sub #$03
  5254 4381 A8				tay
  5255 4382 A5 9F			lda :STACKORIGIN+9
  5256 4384 18 79 00 C0			add adr.ROW,y
  5257 4388 8D 98 A0			sta HLP
  5258 438B A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  5259 438D 79 00 C1			adc adr.ROW+256,y
  5260 4390 8D 99 A0			sta HLP+1
  5261
  5262 				; optimize OK (service.pas), line = 1008
  5263
  5264 4393 AD 98 A0			lda HLP
  5265 4396 8D A7 A0			sta BLITBOX.DST
  5266 4399 A9 50			lda #$50
  5267 439B 18 6D 99 A0			add HLP+1
  5268 439F 8D A8 A0			sta BLITBOX.DST+1
  5269 43A2 A9 00			lda #$00
  5270 43A4 69 00			adc #$00
  5271 43A6 8D A9 A0			sta BLITBOX.DST+2
  5272 43A9 A9 00			lda #$00
  5273 43AB 69 00			adc #$00
  5274 43AD 8D AA A0			sta BLITBOX.DST+3
  5275 43B0 AD A5 9F			lda PLAYSCREEN.OFS
  5276 43B3 18 6D 98 A0			add HLP
  5277 43B7 8D A3 A0			sta BLITBOX.SRC
  5278 43BA AD A6 9F			lda PLAYSCREEN.OFS+1
  5279 43BD 6D 99 A0			adc HLP+1
  5280 43C0 8D A4 A0			sta BLITBOX.SRC+1
  5281 43C3 AD A7 9F			lda PLAYSCREEN.OFS+2
  5282 43C6 69 00			adc #$00
  5283 43C8 8D A5 A0			sta BLITBOX.SRC+2
  5284 43CB AD A8 9F			lda PLAYSCREEN.OFS+3
  5285 43CE 69 00			adc #$00
  5286 43D0 8D A6 A0			sta BLITBOX.SRC+3
  5287 43D3 A9 05			lda #$05
  5288 43D5 8D AB A0			sta BLITBOX.W
  5289 43D8 A9 00			lda #$00
  5290 43DA 8D AC A0			sta BLITBOX.W+1
  5291 43DD A9 05			lda #$05
  5292 43DF 8D AD A0			sta BLITBOX.H
  5293 43E2 20 58 3A			jsr BLITBOX
  5294
  5295 				; ------------------------------------------------------------
  5296
  5297 = A114			BALL	= DATAORIGIN+$026F
  5298 = 9EA5			BALL.X	= DATAORIGIN+$0000
  5299 = 9EA7			BALL.Y	= DATAORIGIN+$0002
  5300 = 9EA9			BALL.FINEX	= DATAORIGIN+$0004
  5301 = 9EAB			BALL.FINEY	= DATAORIGIN+$0006
  5302 = 9EAD			BALL.OLDX	= DATAORIGIN+$0008
  5303 = 9EAF			BALL.OLDY	= DATAORIGIN+$000A
  5304 = 9EB1			BALL.SPEED	= DATAORIGIN+$000C
  5305 = 9EB3			BALL.FINESPEED	= DATAORIGIN+$000E
  5306 = 9EB5			BALL.SPEEDX	= DATAORIGIN+$0010
  5307 = 9EB7			BALL.SPEEDY	= DATAORIGIN+$0012
  5308 = 9EB9			BALL.SBD	= DATAORIGIN+$0014
  5309 = 9EBB			BALL.BRWHIT	= DATAORIGIN+$0016
  5310 = 9EBC			BALL.INPLAY	= DATAORIGIN+$0017
  5311 = 9EBD			BALL.LAUNCH	= DATAORIGIN+$0018
  5312 = 9EBE			BALL.ONVAUS	= DATAORIGIN+$0019
  5313 = 9EC0			BALL.STM	= DATAORIGIN+$001B
  5314
  5315 = A114			@VarData	= BALL
  5316 = 0002			@VarDataSize	= 2
  5317
  5318 43E5			@exit
  5319 					.ifdef @new
  5320 					lda <@VarData
  5321 					sta :ztmp
  5322 					lda >@VarData
  5323 					ldy #@VarDataSize-1
  5324 					jmp @FreeMem
  5325 					els
  5326 43E5 60				rts						; ret
  5327 					eif
  5328 				.endl
  5329
  5330 43E6			.local	WAIT_VBL					; PROCEDURE
  5331
  5332 				; optimize FAIL ('SYSTEM.PAUSE.@00', service.pas), line = 1042
  5333
  5334 43E6 20 EC 32			jsr SYSTEM.PAUSE.@00
  5335
  5336 43E9			@exit
  5337 					.ifdef @new
  5338 					lda <@VarData
  5339 					sta :ztmp
  5340 					lda >@VarData
  5341 					ldy #@VarDataSize-1
  5342 					jmp @FreeMem
  5343 					els
  5344 43E9 60				rts						; ret
  5345 					eif
  5346 				.endl
  5347
  5348 43EA			.local	SET_BALL					; PROCEDURE
  5349
  5350 				; optimize OK (service.pas), line = 1054
  5351
  5352 43EA AC 18 A1 84 84 AC + 	mwy BALL :bp2
  5353 43F4 A0 09			ldy #BALL.OLDX-DATAORIGIN+$01
  5354 43F6 B1 84			lda (:bp2),y
  5355 43F8 C9 FF			cmp #$FF
  5356 43FA D0 05			bne @+
  5357 43FC 88				dey
  5358 43FD B1 84			lda (:bp2),y
  5359 43FF C9 FF			cmp #$FF
  5360 				@
  5361 4401 F0 13			jeq l_0B38s
  5362 4403 A0 0B			ldy #BALL.OLDY-DATAORIGIN+$01
  5363 4405 B1 84			lda (:bp2),y
  5364 4407 C9 FF			cmp #$FF
  5365 4409 D0 05			bne @+
  5366 440B 88				dey
  5367 440C B1 84			lda (:bp2),y
  5368 440E C9 FF			cmp #$FF
  5369 				@
  5370 4410 F0 04			jeq l_0B38s
  5371 4412 A9 01 D0 02			lda:sne #$01
  5372 4416 A9 00		l_0B38s	lda #$00
  5373 4418 8D 1C A1			sta B0
  5374
  5375 				; optimize OK (service.pas), line = 1055
  5376
  5377 441B AC 18 A1 84 84 AC + 	mwy BALL :bp2
  5378 4425 A0 08			ldy #BALL.OLDX-DATAORIGIN
  5379 4427 B1 84			lda (:bp2),y
  5380 4429 85 9F			sta :STACKORIGIN+9
  5381 442B C8				iny
  5382 442C B1 84			lda (:bp2),y
  5383 442E A0 01			ldy #BALL.X-DATAORIGIN+$01
  5384 4430 D1 84			cmp (:bp2),y
  5385 4432 D0 05			bne @+
  5386 4434 88				dey
  5387 4435 A5 9F			lda :STACKORIGIN+9
  5388 4437 D1 84			cmp (:bp2),y
  5389 				@
  5390 4439 D0 03			bne @+
  5391 443B 4C 41 44			jmp *+6
  5392 				@\	jmp l_0B50s
  5392 				@
  5392 443E 4C 61 44			JMP L_0B50S
  5393 4441 A0 0A			ldy #BALL.OLDY-DATAORIGIN
  5394 4443 B1 84			lda (:bp2),y
  5395 4445 85 A0			sta :STACKORIGIN+10
  5396 4447 C8				iny
  5397 4448 B1 84			lda (:bp2),y
  5398 444A A0 03			ldy #BALL.Y-DATAORIGIN+$01
  5399 444C D1 84			cmp (:bp2),y
  5400 444E D0 05			bne @+
  5401 4450 88				dey
  5402 4451 A5 A0			lda :STACKORIGIN+10
  5403 4453 D1 84			cmp (:bp2),y
  5404 				@
  5405 4455 D0 03			bne @+
  5406 4457 4C 5D 44			jmp *+6
  5407 				@\	jmp l_0B50s
  5407 				@
  5407 445A 4C 61 44			JMP L_0B50S
  5408 445D A9 00 F0 02			lda:seq #$00
  5409 4461 A9 01		l_0B50s	lda #$01
  5410 4463 8D 1D A1			sta B1
  5411
  5412 				; optimize OK (service.pas), line = 1057
  5413
  5414 4466 AD 1C A1			lda B0
  5415 4469 2D 1D A1			and B1
  5416 446C F0 0F			jeq l_0B62
  5417
  5418 				; optimize OK (service.pas), line = 1058
  5419
  5420 446E AD 18 A1			lda BALL
  5421 4471 8D 14 A1			sta REMOVE_BALL.BALL
  5422 4474 AD 19 A1			lda BALL+1
  5423 4477 8D 15 A1			sta REMOVE_BALL.BALL+1
  5424 447A 20 60 43			jsr REMOVE_BALL
  5425 447D			l_0B62
  5426
  5427 				; optimize OK (service.pas), line = 1060
  5428
  5429 447D AD 18 A1			lda BALL
  5430 4480 8D 10 A1			sta PLACE_BALL.BALL
  5431 4483 AD 19 A1			lda BALL+1
  5432 4486 8D 11 A1			sta PLACE_BALL.BALL+1
  5433 4489 20 E5 42			jsr PLACE_BALL
  5434
  5435 				; optimize OK (service.pas), line = 1062
  5436
  5437 448C AC 18 A1 84 84 AC + 	mwy BALL :bp2
  5438 4496 A0 00			ldy #BALL.X-DATAORIGIN
  5439 4498 B1 84			lda (:bp2),y
  5440 449A 85 9F			sta :STACKORIGIN+9
  5441 449C C8				iny
  5442 449D B1 84			lda (:bp2),y
  5443 449F 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  5444 44A1 A0 08			ldy #BALL.OLDX-DATAORIGIN
  5445 44A3 A5 9F			lda :STACKORIGIN+9
  5446 44A5 91 84			sta (:bp2),y
  5447 44A7 C8				iny
  5448 44A8 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  5449 44AA 91 84			sta (:bp2),y
  5450
  5451 				; optimize OK (service.pas), line = 1063
  5452
  5453 44AC A0 02			ldy #BALL.Y-DATAORIGIN
  5454 44AE B1 84			lda (:bp2),y
  5455 44B0 85 9F			sta :STACKORIGIN+9
  5456 44B2 C8				iny
  5457 44B3 B1 84			lda (:bp2),y
  5458 44B5 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  5459 44B7 A0 0A			ldy #BALL.OLDY-DATAORIGIN
  5460 44B9 A5 9F			lda :STACKORIGIN+9
  5461 44BB 91 84			sta (:bp2),y
  5462 44BD C8				iny
  5463 44BE A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  5464 44C0 91 84			sta (:bp2),y
  5465
  5466 				; ------------------------------------------------------------
  5467
  5468 = A118			BALL	= DATAORIGIN+$0273
  5469 = 9EA5			BALL.X	= DATAORIGIN+$0000
  5470 = 9EA7			BALL.Y	= DATAORIGIN+$0002
  5471 = 9EA9			BALL.FINEX	= DATAORIGIN+$0004
  5472 = 9EAB			BALL.FINEY	= DATAORIGIN+$0006
  5473 = 9EAD			BALL.OLDX	= DATAORIGIN+$0008
  5474 = 9EAF			BALL.OLDY	= DATAORIGIN+$000A
  5475 = 9EB1			BALL.SPEED	= DATAORIGIN+$000C
  5476 = 9EB3			BALL.FINESPEED	= DATAORIGIN+$000E
  5477 = 9EB5			BALL.SPEEDX	= DATAORIGIN+$0010
  5478 = 9EB7			BALL.SPEEDY	= DATAORIGIN+$0012
  5479 = 9EB9			BALL.SBD	= DATAORIGIN+$0014
  5480 = 9EBB			BALL.BRWHIT	= DATAORIGIN+$0016
  5481 = 9EBC			BALL.INPLAY	= DATAORIGIN+$0017
  5482 = 9EBD			BALL.LAUNCH	= DATAORIGIN+$0018
  5483 = 9EBE			BALL.ONVAUS	= DATAORIGIN+$0019
  5484 = 9EC0			BALL.STM	= DATAORIGIN+$001B
  5485 = A11C			B0	= DATAORIGIN+$0277
  5486 = A11D			B1	= DATAORIGIN+$0278
  5487
  5488 = A118			@VarData	= BALL
  5489 = 0004			@VarDataSize	= 4
  5490
  5491 44C2			@exit
  5492 					.ifdef @new
  5493 					lda <@VarData
  5494 					sta :ztmp
  5495 					lda >@VarData
  5496 					ldy #@VarDataSize-1
  5497 					jmp @FreeMem
  5498 					els
  5499 44C2 60				rts						; ret
  5500 					eif
  5501 				.endl
  5502
  5503 44C3			.local	SET_BALL_SPEED					; PROCEDURE
  5504
  5505 				; optimize OK (service.pas), line = 1076
  5506
  5507 44C3 AC 1E A1 84 84 AC + 	mwy BALL :bp2
  5508 44CD A0 10			ldy #BALL.SPEEDX-DATAORIGIN
  5509 44CF B1 84			lda (:bp2),y
  5510 44D1 8D 24 A1			sta SX
  5511 44D4 C8				iny
  5512 44D5 B1 84			lda (:bp2),y
  5513 44D7 8D 25 A1			sta SX+1
  5514
  5515 				; optimize OK (service.pas), line = 1077
  5516
  5517 44DA A0 12			ldy #BALL.SPEEDY-DATAORIGIN
  5518 44DC B1 84			lda (:bp2),y
  5519 44DE 8D 26 A1			sta SY
  5520 44E1 C8				iny
  5521 44E2 B1 84			lda (:bp2),y
  5522 44E4 8D 27 A1			sta SY+1
  5523
  5524 				; optimize OK (service.pas), line = 1079
  5525
  5526 44E7 AD 24 A1			lda SX
  5527 44EA 85 8A			sta SYSTEM.ABS.@010184000.X
  5528 44EC AD 25 A1			lda SX+1
  5529 44EF 85 8B			sta SYSTEM.ABS.@010184000.X+1
  5530 44F1 20 D1 2A			jsr SYSTEM.ABS.@010184000
  5531 44F4 A5 92			lda SYSTEM.ABS.@010184000.RESULT
  5532 44F6 8D 30 A1			sta A
  5533 44F9 A5 93			lda SYSTEM.ABS.@010184000.RESULT+1
  5534 44FB 8D 31 A1			sta A+1
  5535
  5536 				; optimize OK (service.pas), line = 1080
  5537
  5538 44FE AD 26 A1			lda SY
  5539 4501 85 8A			sta SYSTEM.ABS.@010184000.X
  5540 4503 AD 27 A1			lda SY+1
  5541 4506 85 8B			sta SYSTEM.ABS.@010184000.X+1
  5542 4508 20 D1 2A			jsr SYSTEM.ABS.@010184000
  5543 450B A5 92			lda SYSTEM.ABS.@010184000.RESULT
  5544 450D 8D 32 A1			sta B
  5545 4510 A5 93			lda SYSTEM.ABS.@010184000.RESULT+1
  5546 4512 8D 33 A1			sta B+1
  5547
  5548 				; optimize OK (service.pas), line = 1082
  5549
  5550 4515 AD 30 A1			lda A
  5551 4518 85 8E			sta :ecx
  5552 451A 85 86			sta :eax
  5553 451C AD 31 A1			lda A+1
  5554 451F 85 8F			sta :ecx+1
  5555 4521 85 87			sta :eax+1
  5556 					.ifdef fmulinit
  5557 					fmulu_16
  5558 					els
  5559 4523 20 0B 23			imulCX
  5560 					eif
  5561 4526 A5 86			lda :eax
  5562 4528 85 9F			sta :STACKORIGIN+9
  5563 452A A5 87			lda :eax+1
  5564 452C 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  5565 452E A5 88			lda :eax+2
  5566 4530 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
  5567 4532 A5 89			lda :eax+3
  5568 4534 85 CF			sta :STACKORIGIN+STACKWIDTH*3+9
  5569 4536 AD 32 A1			lda B
  5570 4539 85 8E			sta :ecx
  5571 453B 85 86			sta :eax
  5572 453D AD 33 A1			lda B+1
  5573 4540 85 8F			sta :ecx+1
  5574 4542 85 87			sta :eax+1
  5575 					.ifdef fmulinit
  5576 					fmulu_16
  5577 					els
  5578 4544 20 0B 23			imulCX
  5579 					eif
  5580 4547 A5 9F			lda :STACKORIGIN+9
  5581 4549 18 65 86			add :eax
  5582 454C 8D 2C A1			sta I
  5583 454F A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  5584 4551 65 87			adc :eax+1
  5585 4553 8D 2D A1			sta I+1
  5586 4556 A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
  5587 4558 65 88			adc :eax+2
  5588 455A 8D 2E A1			sta I+2
  5589 455D A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
  5590 455F 65 89			adc :eax+3
  5591 4561 8D 2F A1			sta I+3
  5592
  5593 				; optimize OK (service.pas), line = 1084
  5594
  5595 4564 AD 2C A1			lda I
  5596 4567 8D 83 9F			sta SQRT32.V
  5597 456A AD 2D A1			lda I+1
  5598 456D 8D 84 9F			sta SQRT32.V+1
  5599 4570 AD 2E A1			lda I+2
  5600 4573 8D 85 9F			sta SQRT32.V+2
  5601 4576 AD 2F A1			lda I+3
  5602 4579 8D 86 9F			sta SQRT32.V+3
  5603 457C 20 40 38			jsr SQRT32
  5604 457F AD 87 9F			lda SQRT32.RESULT
  5605 4582 8D 98 A0			sta HLP
  5606 4585 AD 88 9F			lda SQRT32.RESULT+1
  5607 4588 8D 99 A0			sta HLP+1
  5608
  5609 				; optimize OK (service.pas), line = 1086
  5610
  5611 458B AD 98 A0			lda HLP
  5612 458E 85 8E			sta :FPMAN0
  5613 4590 AD 99 A0			lda HLP+1
  5614 4593 85 8F			sta :FPMAN1
  5615 4595 A9 00			lda #$00
  5616 4597 85 90			sta :FPMAN2
  5617 4599 85 91			sta :FPMAN3
  5618 459B 20 A4 27			jsr @I2F
  5619 459E A5 8E			lda :FPMAN0
  5620 45A0 85 A0			sta :STACKORIGIN+10
  5621 45A2 A5 8F			lda :FPMAN1
  5622 45A4 85 B0			sta :STACKORIGIN+STACKWIDTH+10
  5623 45A6 A5 90			lda :FPMAN2
  5624 45A8 85 C0			sta :STACKORIGIN+STACKWIDTH*2+10
  5625 45AA A5 91			lda :FPMAN3
  5626 45AC 85 D0			sta :STACKORIGIN+STACKWIDTH*3+10
  5627 45AE AD 22 A1			lda SPEED
  5628 45B1 85 8E			sta :FPMAN0
  5629 45B3 A0 00			ldy #$00
  5630 45B5 AD 23 A1			lda SPEED+1
  5631 45B8 10 01			spl
  5632 45BA 88				dey
  5633 45BB 85 8F			sta :FPMAN1
  5634 45BD 84 90			sty :FPMAN2
  5635 45BF 84 91			sty :FPMAN3
  5636 45C1 20 A4 27			jsr @I2F
  5637 45C4 A5 8E			lda :FPMAN0
  5638 45C6 85 86			sta :FP1MAN0
  5639 45C8 A5 8F			lda :FPMAN1
  5640 45CA 85 87			sta :FP1MAN1
  5641 45CC A5 90			lda :FPMAN2
  5642 45CE 85 88			sta :FP1MAN2
  5643 45D0 A5 91			lda :FPMAN3
  5644 45D2 85 89			sta :FP1MAN3
  5645 45D4 A5 A0			lda :STACKORIGIN+10
  5646 45D6 85 8A			sta :FP2MAN0
  5647 45D8 A5 B0			lda :STACKORIGIN+STACKWIDTH+10
  5648 45DA 85 8B			sta :FP2MAN1
  5649 45DC A5 C0			lda :STACKORIGIN+STACKWIDTH*2+10
  5650 45DE 85 8C			sta :FP2MAN2
  5651 45E0 A5 D0			lda :STACKORIGIN+STACKWIDTH*3+10
  5652 45E2 85 8D			sta :FP2MAN3
  5653 45E4 20 6B 26			jsr @FDIV
  5654 45E7 A5 8E			lda :FPMAN0
  5655 45E9 8D 28 A1			sta VM
  5656 45EC A5 8F			lda :FPMAN1
  5657 45EE 8D 29 A1			sta VM+1
  5658 45F1 A5 90			lda :FPMAN2
  5659 45F3 8D 2A A1			sta VM+2
  5660 45F6 A5 91			lda :FPMAN3
  5661 45F8 8D 2B A1			sta VM+3
  5662
  5663 				; optimize OK (service.pas), line = 1091
  5664
  5665 45FB AD 24 A1			lda SX
  5666 45FE 85 8E			sta :FPMAN0
  5667 4600 A0 00			ldy #$00
  5668 4602 AD 25 A1			lda SX+1
  5669 4605 10 01			spl
  5670 4607 88				dey
  5671 4608 85 8F			sta :FPMAN1
  5672 460A 84 90			sty :FPMAN2
  5673 460C 84 91			sty :FPMAN3
  5674 460E 20 A4 27			jsr @I2F
  5675 4611 A5 8E			lda :FPMAN0
  5676 4613 85 86			sta :FP1MAN0
  5677 4615 A5 8F			lda :FPMAN1
  5678 4617 85 87			sta :FP1MAN1
  5679 4619 A5 90			lda :FPMAN2
  5680 461B 85 88			sta :FP1MAN2
  5681 461D A5 91			lda :FPMAN3
  5682 461F 85 89			sta :FP1MAN3
  5683 4621 AD 28 A1			lda VM
  5684 4624 85 8A			sta :FP2MAN0
  5685 4626 AD 29 A1			lda VM+1
  5686 4629 85 8B			sta :FP2MAN1
  5687 462B AD 2A A1			lda VM+2
  5688 462E 85 8C			sta :FP2MAN2
  5689 4630 AD 2B A1			lda VM+3
  5690 4633 85 8D			sta :FP2MAN3
  5691 4635 20 CA 25			jsr @FMUL
  5692 4638 20 33 27			jsr @F2I
  5693 463B AC 1E A1 84 84 AC + 	mwy BALL :bp2
  5694 4645 A0 10			ldy #BALL.SPEEDX-DATAORIGIN
  5695 4647 A5 8E			lda :FPMAN0
  5696 4649 91 84			sta (:bp2),y
  5697 464B C8				iny
  5698 464C A5 8F			lda :FPMAN1
  5699 464E 91 84			sta (:bp2),y
  5700
  5701 				; optimize OK (service.pas), line = 1092
  5702
  5703 4650 AD 26 A1			lda SY
  5704 4653 85 8E			sta :FPMAN0
  5705 4655 A0 00			ldy #$00
  5706 4657 AD 27 A1			lda SY+1
  5707 465A 10 01			spl
  5708 465C 88				dey
  5709 465D 85 8F			sta :FPMAN1
  5710 465F 84 90			sty :FPMAN2
  5711 4661 84 91			sty :FPMAN3
  5712 4663 20 A4 27			jsr @I2F
  5713 4666 A5 8E			lda :FPMAN0
  5714 4668 85 86			sta :FP1MAN0
  5715 466A A5 8F			lda :FPMAN1
  5716 466C 85 87			sta :FP1MAN1
  5717 466E A5 90			lda :FPMAN2
  5718 4670 85 88			sta :FP1MAN2
  5719 4672 A5 91			lda :FPMAN3
  5720 4674 85 89			sta :FP1MAN3
  5721 4676 AD 28 A1			lda VM
  5722 4679 85 8A			sta :FP2MAN0
  5723 467B AD 29 A1			lda VM+1
  5724 467E 85 8B			sta :FP2MAN1
  5725 4680 AD 2A A1			lda VM+2
  5726 4683 85 8C			sta :FP2MAN2
  5727 4685 AD 2B A1			lda VM+3
  5728 4688 85 8D			sta :FP2MAN3
  5729 468A 20 CA 25			jsr @FMUL
  5730 468D 20 33 27			jsr @F2I
  5731 4690 AC 1E A1 84 84 AC + 	mwy BALL :bp2
  5732 469A A0 12			ldy #BALL.SPEEDY-DATAORIGIN
  5733 469C A5 8E			lda :FPMAN0
  5734 469E 91 84			sta (:bp2),y
  5735 46A0 C8				iny
  5736 46A1 A5 8F			lda :FPMAN1
  5737 46A3 91 84			sta (:bp2),y
  5738
  5739 				; ------------------------------------------------------------
  5740
  5741 = A11E			BALL	= DATAORIGIN+$0279
  5742 = 9EA5			BALL.X	= DATAORIGIN+$0000
  5743 = 9EA7			BALL.Y	= DATAORIGIN+$0002
  5744 = 9EA9			BALL.FINEX	= DATAORIGIN+$0004
  5745 = 9EAB			BALL.FINEY	= DATAORIGIN+$0006
  5746 = 9EAD			BALL.OLDX	= DATAORIGIN+$0008
  5747 = 9EAF			BALL.OLDY	= DATAORIGIN+$000A
  5748 = 9EB1			BALL.SPEED	= DATAORIGIN+$000C
  5749 = 9EB3			BALL.FINESPEED	= DATAORIGIN+$000E
  5750 = 9EB5			BALL.SPEEDX	= DATAORIGIN+$0010
  5751 = 9EB7			BALL.SPEEDY	= DATAORIGIN+$0012
  5752 = 9EB9			BALL.SBD	= DATAORIGIN+$0014
  5753 = 9EBB			BALL.BRWHIT	= DATAORIGIN+$0016
  5754 = 9EBC			BALL.INPLAY	= DATAORIGIN+$0017
  5755 = 9EBD			BALL.LAUNCH	= DATAORIGIN+$0018
  5756 = 9EBE			BALL.ONVAUS	= DATAORIGIN+$0019
  5757 = 9EC0			BALL.STM	= DATAORIGIN+$001B
  5758 = A122			SPEED	= DATAORIGIN+$027D
  5759 = A124			SX	= DATAORIGIN+$027F
  5760 = A126			SY	= DATAORIGIN+$0281
  5761 = A128			VM	= DATAORIGIN+$0283
  5762 = A12C			I	= DATAORIGIN+$0287
  5763 = A130			A	= DATAORIGIN+$028B
  5764 = A132			B	= DATAORIGIN+$028D
  5765
  5766 = A11E			@VarData	= BALL
  5767 = 0014			@VarDataSize	= 20
  5768
  5769 46A5			@exit
  5770 					.ifdef @new
  5771 					lda <@VarData
  5772 					sta :ztmp
  5773 					lda >@VarData
  5774 					ldy #@VarDataSize-1
  5775 					jmp @FreeMem
  5776 					els
  5777 46A5 60				rts						; ret
  5778 					eif
  5779 				.endl
  5780
  5781 46A6			.local	SET_BALL_DIRECTION				; PROCEDURE
  5782
  5783 				; optimize OK (service.pas), line = 1100
  5784
  5785 46A6 AD 38 A1			lda ANGLE
  5786 46A9 85 8E			sta :FPMAN0
  5787 46AB A0 00			ldy #$00
  5788 46AD AD 39 A1			lda ANGLE+1
  5789 46B0 10 01			spl
  5790 46B2 88				dey
  5791 46B3 85 8F			sta :FPMAN1
  5792 46B5 84 90			sty :FPMAN2
  5793 46B7 84 91			sty :FPMAN3
  5794 46B9 20 A4 27			jsr @I2F
  5795 46BC A5 8E			lda :FPMAN0
  5796 46BE 85 86			sta :FP1MAN0
  5797 46C0 A5 8F			lda :FPMAN1
  5798 46C2 85 87			sta :FP1MAN1
  5799 46C4 A5 90			lda :FPMAN2
  5800 46C6 85 88			sta :FP1MAN2
  5801 46C8 A5 91			lda :FPMAN3
  5802 46CA 85 89			sta :FP1MAN3
  5803 46CC A9 35			lda #$35
  5804 46CE 85 8A			sta :FP2MAN0
  5805 46D0 A9 FA			lda #$FA
  5806 46D2 85 8B			sta :FP2MAN1
  5807 46D4 A9 8E			lda #$8E
  5808 46D6 85 8C			sta :FP2MAN2
  5809 46D8 A9 3C			lda #$3C
  5810 46DA 85 8D			sta :FP2MAN3
  5811 46DC 20 CA 25			jsr @FMUL
  5812 46DF A5 8E			lda :FPMAN0
  5813 46E1 8D 3A A1			sta W
  5814 46E4 A5 8F			lda :FPMAN1
  5815 46E6 8D 3B A1			sta W+1
  5816 46E9 A5 90			lda :FPMAN2
  5817 46EB 8D 3C A1			sta W+2
  5818 46EE A5 91			lda :FPMAN3
  5819 46F0 8D 3D A1			sta W+3
  5820
  5821 				; optimize FAIL (1, service.pas), line = 1102
  5822
  5823 46F3 E8				inx
  5824 46F4 A9 00 95 96			mva #$00 :STACKORIGIN,x
  5825 46F8 A9 01 95 A6			mva #$01 :STACKORIGIN+STACKWIDTH,x
  5826 46FC AD 3A A1			lda W
  5827 46FF 8D D3 9E			sta SYSTEM.COS.@01018F000.X
  5828 4702 AD 3B A1			lda W+1
  5829 4705 8D D4 9E			sta SYSTEM.COS.@01018F000.X+1
  5830 4708 AD 3C A1			lda W+2
  5831 470B 8D D5 9E			sta SYSTEM.COS.@01018F000.X+2
  5832 470E AD 3D A1			lda W+3
  5833 4711 8D D6 9E			sta SYSTEM.COS.@01018F000.X+3
  5834 4714 20 B3 32			jsr SYSTEM.COS.@01018F000
  5835 4717 E8				inx
  5836 4718 AD D7 9E 95 96		mva SYSTEM.COS.@01018F000.RESULT :STACKORIGIN,x
  5837 471D AD D8 9E 95 A6		mva SYSTEM.COS.@01018F000.RESULT+1 :STACKORIGIN+STACKWIDTH,x
  5838 4722 AD D9 9E 95 B6		mva SYSTEM.COS.@01018F000.RESULT+2 :STACKORIGIN+STACKWIDTH*2,x
  5839 4727 AD DA 9E 95 C6		mva SYSTEM.COS.@01018F000.RESULT+3 :STACKORIGIN+STACKWIDTH*3,x
  5840 472C A9 00 95 B5			mva #$00 :STACKORIGIN-1+STACKWIDTH*2,x
  5841 4730 95 C5			sta :STACKORIGIN-1+STACKWIDTH*3,x
  5842 4732 B5 95			lda :STACKORIGIN-1,x
  5843 4734 85 8E			sta :FPMAN0
  5844 4736 B5 A5			lda :STACKORIGIN-1+STACKWIDTH,x
  5845 4738 85 8F			sta :FPMAN1
  5846 473A B5 B5			lda :STACKORIGIN-1+STACKWIDTH*2,x
  5847 473C 85 90			sta :FPMAN2
  5848 473E B5 C5			lda :STACKORIGIN-1+STACKWIDTH*3,x
  5849 4740 85 91			sta :FPMAN3
  5850 4742 20 A4 27			jsr @I2F
  5851 4745 A5 8E			lda :FPMAN0
  5852 4747 95 95			sta :STACKORIGIN-1,x
  5853 4749 A5 8F			lda :FPMAN1
  5854 474B 95 A5			sta :STACKORIGIN-1+STACKWIDTH,x
  5855 474D A5 90			lda :FPMAN2
  5856 474F 95 B5			sta :STACKORIGIN-1+STACKWIDTH*2,x
  5857 4751 A5 91			lda :FPMAN3
  5858 4753 95 C5			sta :STACKORIGIN-1+STACKWIDTH*3,x
  5859 4755 B5 96			lda :STACKORIGIN,x
  5860 4757 85 8A			sta :FP2MAN0
  5861 4759 B5 A6			lda :STACKORIGIN+STACKWIDTH,x
  5862 475B 85 8B			sta :FP2MAN1
  5863 475D B5 B6			lda :STACKORIGIN+STACKWIDTH*2,x
  5864 475F 85 8C			sta :FP2MAN2
  5865 4761 B5 C6			lda :STACKORIGIN+STACKWIDTH*3,x
  5866 4763 85 8D			sta :FP2MAN3
  5867 4765 B5 95			lda :STACKORIGIN-1,x
  5868 4767 85 86			sta :FP1MAN0
  5869 4769 B5 A5			lda :STACKORIGIN-1+STACKWIDTH,x
  5870 476B 85 87			sta :FP1MAN1
  5871 476D B5 B5			lda :STACKORIGIN-1+STACKWIDTH*2,x
  5872 476F 85 88			sta :FP1MAN2
  5873 4771 B5 C5			lda :STACKORIGIN-1+STACKWIDTH*3,x
  5874 4773 85 89			sta :FP1MAN3
  5875 4775 20 CA 25			jsr @FMUL
  5876 4778 CA				dex
  5877 4779 A5 8E			lda :FPMAN0
  5878 477B 85 8E			sta :FPMAN0
  5879 477D A5 8F			lda :FPMAN1
  5880 477F 85 8F			sta :FPMAN1
  5881 4781 A5 90			lda :FPMAN2
  5882 4783 85 90			sta :FPMAN2
  5883 4785 A5 91			lda :FPMAN3
  5884 4787 85 91			sta :FPMAN3
  5885 4789 20 33 27			jsr @F2I
  5886 478C A5 8E			lda :FPMAN0
  5887 478E 95 96			sta :STACKORIGIN,x
  5888 4790 A5 8F			lda :FPMAN1
  5889 4792 95 A6			sta :STACKORIGIN+STACKWIDTH,x
  5890 4794 A5 90			lda :FPMAN2
  5891 4796 95 B6			sta :STACKORIGIN+STACKWIDTH*2,x
  5892 4798 A5 91			lda :FPMAN3
  5893 479A 95 C6			sta :STACKORIGIN+STACKWIDTH*3,x
  5894 479C AC 34 A1 84 84 AC + 	mwy BALL :bp2
  5895 47A6 A0 10			ldy #BALL.SPEEDX-DATAORIGIN
  5896 47A8 B5 96			lda :STACKORIGIN,x
  5897 47AA 91 84			sta (:bp2),y
  5898 47AC C8				iny
  5899 47AD B5 A6			lda :STACKORIGIN+STACKWIDTH,x
  5900 47AF 91 84			sta (:bp2),y
  5901
  5902 				; optimize FAIL (1, service.pas), line = 1103
  5903
  5904 47B1 A9 00 95 96			mva #$00 :STACKORIGIN,x
  5905 47B5 A9 01 95 A6			mva #$01 :STACKORIGIN+STACKWIDTH,x
  5906 47B9 AD 3A A1			lda W
  5907 47BC 8D CB 9E			sta SYSTEM.SIN.@01018F000.X
  5908 47BF AD 3B A1			lda W+1
  5909 47C2 8D CC 9E			sta SYSTEM.SIN.@01018F000.X+1
  5910 47C5 AD 3C A1			lda W+2
  5911 47C8 8D CD 9E			sta SYSTEM.SIN.@01018F000.X+2
  5912 47CB AD 3D A1			lda W+3
  5913 47CE 8D CE 9E			sta SYSTEM.SIN.@01018F000.X+3
  5914 47D1 20 7A 32			jsr SYSTEM.SIN.@01018F000
  5915 47D4 E8				inx
  5916 47D5 AD CF 9E 95 96		mva SYSTEM.SIN.@01018F000.RESULT :STACKORIGIN,x
  5917 47DA AD D0 9E 95 A6		mva SYSTEM.SIN.@01018F000.RESULT+1 :STACKORIGIN+STACKWIDTH,x
  5918 47DF AD D1 9E 95 B6		mva SYSTEM.SIN.@01018F000.RESULT+2 :STACKORIGIN+STACKWIDTH*2,x
  5919 47E4 AD D2 9E 95 C6		mva SYSTEM.SIN.@01018F000.RESULT+3 :STACKORIGIN+STACKWIDTH*3,x
  5920 47E9 A9 00 95 B5			mva #$00 :STACKORIGIN-1+STACKWIDTH*2,x
  5921 47ED 95 C5			sta :STACKORIGIN-1+STACKWIDTH*3,x
  5922 47EF B5 95			lda :STACKORIGIN-1,x
  5923 47F1 85 8E			sta :FPMAN0
  5924 47F3 B5 A5			lda :STACKORIGIN-1+STACKWIDTH,x
  5925 47F5 85 8F			sta :FPMAN1
  5926 47F7 B5 B5			lda :STACKORIGIN-1+STACKWIDTH*2,x
  5927 47F9 85 90			sta :FPMAN2
  5928 47FB B5 C5			lda :STACKORIGIN-1+STACKWIDTH*3,x
  5929 47FD 85 91			sta :FPMAN3
  5930 47FF 20 A4 27			jsr @I2F
  5931 4802 A5 8E			lda :FPMAN0
  5932 4804 95 95			sta :STACKORIGIN-1,x
  5933 4806 A5 8F			lda :FPMAN1
  5934 4808 95 A5			sta :STACKORIGIN-1+STACKWIDTH,x
  5935 480A A5 90			lda :FPMAN2
  5936 480C 95 B5			sta :STACKORIGIN-1+STACKWIDTH*2,x
  5937 480E A5 91			lda :FPMAN3
  5938 4810 95 C5			sta :STACKORIGIN-1+STACKWIDTH*3,x
  5939 4812 B5 96			lda :STACKORIGIN,x
  5940 4814 85 8A			sta :FP2MAN0
  5941 4816 B5 A6			lda :STACKORIGIN+STACKWIDTH,x
  5942 4818 85 8B			sta :FP2MAN1
  5943 481A B5 B6			lda :STACKORIGIN+STACKWIDTH*2,x
  5944 481C 85 8C			sta :FP2MAN2
  5945 481E B5 C6			lda :STACKORIGIN+STACKWIDTH*3,x
  5946 4820 85 8D			sta :FP2MAN3
  5947 4822 B5 95			lda :STACKORIGIN-1,x
  5948 4824 85 86			sta :FP1MAN0
  5949 4826 B5 A5			lda :STACKORIGIN-1+STACKWIDTH,x
  5950 4828 85 87			sta :FP1MAN1
  5951 482A B5 B5			lda :STACKORIGIN-1+STACKWIDTH*2,x
  5952 482C 85 88			sta :FP1MAN2
  5953 482E B5 C5			lda :STACKORIGIN-1+STACKWIDTH*3,x
  5954 4830 85 89			sta :FP1MAN3
  5955 4832 20 CA 25			jsr @FMUL
  5956 4835 CA				dex
  5957 4836 A5 8E			lda :FPMAN0
  5958 4838 85 8E			sta :FPMAN0
  5959 483A A5 8F			lda :FPMAN1
  5960 483C 85 8F			sta :FPMAN1
  5961 483E A5 90			lda :FPMAN2
  5962 4840 85 90			sta :FPMAN2
  5963 4842 A5 91			lda :FPMAN3
  5964 4844 85 91			sta :FPMAN3
  5965 4846 20 33 27			jsr @F2I
  5966 4849 A5 8E			lda :FPMAN0
  5967 484B 95 96			sta :STACKORIGIN,x
  5968 484D A5 8F			lda :FPMAN1
  5969 484F 95 A6			sta :STACKORIGIN+STACKWIDTH,x
  5970 4851 A5 90			lda :FPMAN2
  5971 4853 95 B6			sta :STACKORIGIN+STACKWIDTH*2,x
  5972 4855 A5 91			lda :FPMAN3
  5973 4857 95 C6			sta :STACKORIGIN+STACKWIDTH*3,x
  5974 4859 A9 00			lda #$00
  5975 485B 38 F5 96			sub :STACKORIGIN,x
  5976 485E 95 96			sta :STACKORIGIN,x
  5977 4860 A9 00			lda #$00
  5978 4862 F5 A6			sbc :STACKORIGIN+STACKWIDTH,x
  5979 4864 95 A6			sta :STACKORIGIN+STACKWIDTH,x
  5980 4866 A9 00			lda #$00
  5981 4868 F5 B6			sbc :STACKORIGIN+STACKWIDTH*2,x
  5982 486A 95 B6			sta :STACKORIGIN+STACKWIDTH*2,x
  5983 486C A9 00			lda #$00
  5984 486E F5 C6			sbc :STACKORIGIN+STACKWIDTH*3,x
  5985 4870 95 C6			sta :STACKORIGIN+STACKWIDTH*3,x
  5986 4872 AC 34 A1 84 84 AC + 	mwy BALL :bp2
  5987 487C A0 12			ldy #BALL.SPEEDY-DATAORIGIN
  5988 487E B5 96			lda :STACKORIGIN,x
  5989 4880 91 84			sta (:bp2),y
  5990 4882 C8				iny
  5991 4883 B5 A6			lda :STACKORIGIN+STACKWIDTH,x
  5992 4885 91 84			sta (:bp2),y
  5993 4887 CA				dex
  5994
  5995 				; ------------------------------------------------------------
  5996
  5997 = A134			BALL	= DATAORIGIN+$028F
  5998 = 9EA5			BALL.X	= DATAORIGIN+$0000
  5999 = 9EA7			BALL.Y	= DATAORIGIN+$0002
  6000 = 9EA9			BALL.FINEX	= DATAORIGIN+$0004
  6001 = 9EAB			BALL.FINEY	= DATAORIGIN+$0006
  6002 = 9EAD			BALL.OLDX	= DATAORIGIN+$0008
  6003 = 9EAF			BALL.OLDY	= DATAORIGIN+$000A
  6004 = 9EB1			BALL.SPEED	= DATAORIGIN+$000C
  6005 = 9EB3			BALL.FINESPEED	= DATAORIGIN+$000E
  6006 = 9EB5			BALL.SPEEDX	= DATAORIGIN+$0010
  6007 = 9EB7			BALL.SPEEDY	= DATAORIGIN+$0012
  6008 = 9EB9			BALL.SBD	= DATAORIGIN+$0014
  6009 = 9EBB			BALL.BRWHIT	= DATAORIGIN+$0016
  6010 = 9EBC			BALL.INPLAY	= DATAORIGIN+$0017
  6011 = 9EBD			BALL.LAUNCH	= DATAORIGIN+$0018
  6012 = 9EBE			BALL.ONVAUS	= DATAORIGIN+$0019
  6013 = 9EC0			BALL.STM	= DATAORIGIN+$001B
  6014 = A138			ANGLE	= DATAORIGIN+$0293
  6015 = A13A			W	= DATAORIGIN+$0295
  6016
  6017 = A134			@VarData	= BALL
  6018 = 0008			@VarDataSize	= 8
  6019
  6020 4888			@exit
  6021 					.ifdef @new
  6022 					lda <@VarData
  6023 					sta :ztmp
  6024 					lda >@VarData
  6025 					ldy #@VarDataSize-1
  6026 					jmp @FreeMem
  6027 					els
  6028 4888 60				rts						; ret
  6029 					eif
  6030 				.endl
  6031
  6032 4889			.local	GET_BALL_DIRECTION				; FUNCTION
  6033
  6034 				; optimize OK (service.pas), line = 1111
  6035
  6036 4889 AC 3E A1 84 84 AC + 	mwy BALL :bp2
  6037 4893 A0 11			ldy #BALL.SPEEDX-DATAORIGIN+$01
  6038 4895 B1 84			lda (:bp2),y
  6039 4897 88				dey
  6040 4898 11 84			ora (:bp2),y
  6041 489A D0 75			jne l_0BFB
  6042 489C E8				inx
  6043 489D A9 5A 95 96			mva #$5A :STACKORIGIN,x
  6044 48A1 E8				inx
  6045 48A2 AC 3E A1 84 84 AC + 	mwy BALL :bp2
  6046 48AC A0 12			ldy #BALL.SPEEDY-DATAORIGIN
  6047 48AE B1 84 95 96			mva (:bp2),y :STACKORIGIN,x
  6048 48B2 C8				iny
  6049 48B3 B1 84 95 A6			mva (:bp2),y :STACKORIGIN+STACKWIDTH,x
  6050 48B7 A0 12			ldy #BALL.SPEEDY-DATAORIGIN
  6051 48B9 B1 84			lda (:bp2),y
  6052 48BB 85 8A			sta SYSTEM.ABS.@010184000.X
  6053 48BD C8				iny
  6054 48BE B1 84			lda (:bp2),y
  6055 48C0 85 8B			sta SYSTEM.ABS.@010184000.X+1
  6056 48C2 20 D1 2A			jsr SYSTEM.ABS.@010184000
  6057 48C5 E8				inx
  6058 48C6 A5 92			lda SYSTEM.ABS.@010184000.RESULT
  6059 48C8 85 8E			sta @SMALLINT.DIV.B
  6060 48CA A5 93			lda SYSTEM.ABS.@010184000.RESULT+1
  6061 48CC 85 8F			sta @SMALLINT.DIV.B+1
  6062 48CE B5 95			lda :STACKORIGIN-1,x
  6063 48D0 85 86			sta @SMALLINT.DIV.A
  6064 48D2 B5 A5			lda :STACKORIGIN-1+STACKWIDTH,x
  6065 48D4 85 87			sta @SMALLINT.DIV.A+1
  6066 48D6 20 33 22			jsr @SMALLINT.DIV
  6067 48D9 A5 86			lda :eax
  6068 48DB 95 95			sta :STACKORIGIN-1,x
  6069 48DD A5 87			lda :eax+1
  6070 48DF 95 A5			sta :STACKORIGIN-1+STACKWIDTH,x
  6071 48E1 CA				dex
  6072 48E2 A9 00 95 A5			mva #$00 :STACKORIGIN-1+STACKWIDTH,x
  6073 48E6 20 0B 22			jsr mulSMALLINT
  6074 48E9 CA				dex
  6075 48EA A9 00			lda #$00
  6076 48EC 38 F5 96			sub :STACKORIGIN,x
  6077 48EF 95 96			sta :STACKORIGIN,x
  6078 48F1 A9 00			lda #$00
  6079 48F3 F5 A6			sbc :STACKORIGIN+STACKWIDTH,x
  6080 48F5 95 A6			sta :STACKORIGIN+STACKWIDTH,x
  6081 48F7 A9 00			lda #$00
  6082 48F9 F5 B6			sbc :STACKORIGIN+STACKWIDTH*2,x
  6083 48FB 95 B6			sta :STACKORIGIN+STACKWIDTH*2,x
  6084 48FD A9 00			lda #$00
  6085 48FF F5 C6			sbc :STACKORIGIN+STACKWIDTH*3,x
  6086 4901 95 C6			sta :STACKORIGIN+STACKWIDTH*3,x
  6087 4903 B5 96			lda :STACKORIGIN,x
  6088 4905 8D 44 A1			sta W
  6089 4908 B5 A6			lda :STACKORIGIN+STACKWIDTH,x
  6090 490A 8D 45 A1			sta W+1
  6091 490D CA				dex
  6092 490E 4C 9A 4A			jmp l_0C17
  6093 4911			l_0BFB
  6094
  6095 				; optimize OK (service.pas), line = 1117
  6096
  6097 4911 AC 3E A1 84 84 AC + 	mwy BALL :bp2
  6098 491B A0 12			ldy #BALL.SPEEDY-DATAORIGIN
  6099 491D B1 84			lda (:bp2),y
  6100 491F 85 9F			sta :STACKORIGIN+9
  6101 4921 C8				iny
  6102 4922 B1 84			lda (:bp2),y
  6103 4924 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  6104 4926 A0 10			ldy #BALL.SPEEDX-DATAORIGIN
  6105 4928 B1 84			lda (:bp2),y
  6106 492A 85 8E			sta :FPMAN0
  6107 492C C8				iny
  6108 492D B1 84			lda (:bp2),y
  6109 492F 85 B0			sta :STACKORIGIN+STACKWIDTH+10
  6110 4931 A0 00			ldy #$00
  6111 4933 A5 B0			lda :STACKORIGIN+STACKWIDTH+10
  6112 4935 10 01			spl
  6113 4937 88				dey
  6114 4938 85 8F			sta :FPMAN1
  6115 493A 84 90			sty :FPMAN2
  6116 493C 84 91			sty :FPMAN3
  6117 493E 20 A4 27			jsr @I2F
  6118 4941 A5 8E			lda :FPMAN0
  6119 4943 85 A0			sta :STACKORIGIN+10
  6120 4945 A5 8F			lda :FPMAN1
  6121 4947 85 B0			sta :STACKORIGIN+STACKWIDTH+10
  6122 4949 A5 90			lda :FPMAN2
  6123 494B 85 C0			sta :STACKORIGIN+STACKWIDTH*2+10
  6124 494D A5 91			lda :FPMAN3
  6125 494F 85 D0			sta :STACKORIGIN+STACKWIDTH*3+10
  6126 4951 A0 00			ldy #$00
  6127 4953 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  6128 4955 10 01			spl
  6129 4957 88				dey
  6130 4958 85 8F			sta :FPMAN1
  6131 495A 84 90			sty :FPMAN2
  6132 495C 84 91			sty :FPMAN3
  6133 495E A5 9F			lda :STACKORIGIN+9
  6134 4960 85 8E			sta :FPMAN0
  6135 4962 20 A4 27			jsr @I2F
  6136 4965 A5 8E			lda :FPMAN0
  6137 4967 85 86			sta :FP1MAN0
  6138 4969 A5 8F			lda :FPMAN1
  6139 496B 85 87			sta :FP1MAN1
  6140 496D A5 90			lda :FPMAN2
  6141 496F 85 88			sta :FP1MAN2
  6142 4971 A5 91			lda :FPMAN3
  6143 4973 85 89			sta :FP1MAN3
  6144 4975 A5 A0			lda :STACKORIGIN+10
  6145 4977 85 8A			sta :FP2MAN0
  6146 4979 A5 B0			lda :STACKORIGIN+STACKWIDTH+10
  6147 497B 85 8B			sta :FP2MAN1
  6148 497D A5 C0			lda :STACKORIGIN+STACKWIDTH*2+10
  6149 497F 85 8C			sta :FP2MAN2
  6150 4981 A5 D0			lda :STACKORIGIN+STACKWIDTH*3+10
  6151 4983 85 8D			sta :FP2MAN3
  6152 4985 20 6B 26			jsr @FDIV
  6153 4988 A5 8E			lda :FPMAN0
  6154 498A 8D 9A A0			sta F_HLP
  6155 498D A5 8F			lda :FPMAN1
  6156 498F 8D 9B A0			sta F_HLP+1
  6157 4992 A5 90			lda :FPMAN2
  6158 4994 8D 9C A0			sta F_HLP+2
  6159 4997 A5 91			lda :FPMAN3
  6160 4999 49 80			eor #$80
  6161 499B 8D 9D A0			sta F_HLP+3
  6162
  6163 				; optimize OK (service.pas), line = 1119
  6164
  6165 499E AD 9A A0			lda F_HLP
  6166 49A1 8D B0 9E			sta SYSTEM.ARCTAN.@01018F000.VALUE
  6167 49A4 AD 9B A0			lda F_HLP+1
  6168 49A7 8D B1 9E			sta SYSTEM.ARCTAN.@01018F000.VALUE+1
  6169 49AA AD 9C A0			lda F_HLP+2
  6170 49AD 8D B2 9E			sta SYSTEM.ARCTAN.@01018F000.VALUE+2
  6171 49B0 AD 9D A0			lda F_HLP+3
  6172 49B3 8D B3 9E			sta SYSTEM.ARCTAN.@01018F000.VALUE+3
  6173 49B6 20 FF 2A			jsr SYSTEM.ARCTAN.@01018F000
  6174 49B9 E8				inx
  6175 49BA E8				inx
  6176 49BB A9 00			lda #$00
  6177 49BD 85 8A			sta :FP2MAN0
  6178 49BF A9 00			lda #$00
  6179 49C1 85 8B			sta :FP2MAN1
  6180 49C3 A9 34			lda #$34
  6181 49C5 85 8C			sta :FP2MAN2
  6182 49C7 A9 43			lda #$43
  6183 49C9 85 8D			sta :FP2MAN3
  6184 49CB AD B4 9E			lda SYSTEM.ARCTAN.@01018F000.RESULT
  6185 49CE 85 86			sta :FP1MAN0
  6186 49D0 AD B5 9E			lda SYSTEM.ARCTAN.@01018F000.RESULT+1
  6187 49D3 85 87			sta :FP1MAN1
  6188 49D5 AD B6 9E			lda SYSTEM.ARCTAN.@01018F000.RESULT+2
  6189 49D8 85 88			sta :FP1MAN2
  6190 49DA AD B7 9E			lda SYSTEM.ARCTAN.@01018F000.RESULT+3
  6191 49DD 85 89			sta :FP1MAN3
  6192 49DF 20 CA 25			jsr @FMUL
  6193 49E2 A5 8E			lda :FPMAN0
  6194 49E4 95 95			sta :STACKORIGIN-1,x
  6195 49E6 A5 8F			lda :FPMAN1
  6196 49E8 95 A5			sta :STACKORIGIN-1+STACKWIDTH,x
  6197 49EA A5 90			lda :FPMAN2
  6198 49EC 95 B5			sta :STACKORIGIN-1+STACKWIDTH*2,x
  6199 49EE A5 91			lda :FPMAN3
  6200 49F0 95 C5			sta :STACKORIGIN-1+STACKWIDTH*3,x
  6201 49F2 A9 DB			lda #$DB
  6202 49F4 85 8A			sta :FP2MAN0
  6203 49F6 A9 0F			lda #$0F
  6204 49F8 85 8B			sta :FP2MAN1
  6205 49FA A9 49			lda #$49
  6206 49FC 85 8C			sta :FP2MAN2
  6207 49FE A9 40			lda #$40
  6208 4A00 85 8D			sta :FP2MAN3
  6209 4A02 B5 95			lda :STACKORIGIN-1,x
  6210 4A04 85 86			sta :FP1MAN0
  6211 4A06 B5 A5			lda :STACKORIGIN-1+STACKWIDTH,x
  6212 4A08 85 87			sta :FP1MAN1
  6213 4A0A B5 B5			lda :STACKORIGIN-1+STACKWIDTH*2,x
  6214 4A0C 85 88			sta :FP1MAN2
  6215 4A0E B5 C5			lda :STACKORIGIN-1+STACKWIDTH*3,x
  6216 4A10 85 89			sta :FP1MAN3
  6217 4A12 20 6B 26			jsr @FDIV
  6218 4A15 CA				dex
  6219 4A16 A5 8E			lda :FPMAN0
  6220 4A18 8D 9A A0			sta F_HLP
  6221 4A1B A5 8F			lda :FPMAN1
  6222 4A1D 8D 9B A0			sta F_HLP+1
  6223 4A20 A5 90			lda :FPMAN2
  6224 4A22 8D 9C A0			sta F_HLP+2
  6225 4A25 A5 91			lda :FPMAN3
  6226 4A27 8D 9D A0			sta F_HLP+3
  6227 4A2A CA				dex
  6228
  6229 				; optimize OK (service.pas), line = 1121
  6230
  6231 4A2B AD 9A A0			lda F_HLP
  6232 4A2E 85 8E			sta :FPMAN0
  6233 4A30 AD 9B A0			lda F_HLP+1
  6234 4A33 85 8F			sta :FPMAN1
  6235 4A35 AD 9C A0			lda F_HLP+2
  6236 4A38 85 90			sta :FPMAN2
  6237 4A3A AD 9D A0			lda F_HLP+3
  6238 4A3D 85 91			sta :FPMAN3
  6239 4A3F 20 33 27			jsr @F2I
  6240 4A42 A5 8E			lda :FPMAN0
  6241 4A44 8D 44 A1			sta W
  6242 4A47 A5 8F			lda :FPMAN1
  6243 4A49 8D 45 A1			sta W+1
  6244
  6245 				; optimize OK (service.pas), line = 1123
  6246
  6247 4A4C AC 3E A1 84 84 AC + 	mwy BALL :bp2
  6248 4A56 A0 00			ldy #$00
  6249 4A58 B1 84			lda (:bp2),y
  6250 4A5A 10 0E			jpl l_0C46
  6251 4A5C AD 44 A1			lda W
  6252 4A5F 18 69 B4			add #$B4
  6253 4A62 8D 44 A1			sta W
  6254 4A65 90 03			scc
  6255 4A67 EE 45 A1			inc W+1
  6256 4A6A			l_0C46
  6257
  6258 				; optimize OK (service.pas), line = 1125
  6259
  6260 4A6A AD 44 A1			lda W
  6261 4A6D 18 69 68			add #$68
  6262 4A70 8D 44 A1			sta W
  6263 4A73 AD 45 A1			lda W+1
  6264 4A76 69 01			adc #$01
  6265 4A78 8D 45 A1			sta W+1
  6266
  6267 				; optimize OK (service.pas), line = 1126
  6268
  6269 4A7B A9 68			lda #$68
  6270 4A7D 85 8E			sta @SMALLINT.MOD.B
  6271 4A7F A9 01			lda #$01
  6272 4A81 85 8F			sta @SMALLINT.MOD.B+1
  6273 4A83 AD 44 A1			lda W
  6274 4A86 85 86			sta @SMALLINT.MOD.A
  6275 4A88 AD 45 A1			lda W+1
  6276 4A8B 85 87			sta @SMALLINT.MOD.A+1
  6277 4A8D 20 50 22			jsr @SMALLINT.MOD
  6278 4A90 A5 92			lda @SMALLINT.MOD.RESULT
  6279 4A92 8D 44 A1			sta W
  6280 4A95 A5 93			lda @SMALLINT.MOD.RESULT+1
  6281 4A97 8D 45 A1			sta W+1
  6282 4A9A			l_0C17
  6283
  6284 				; optimize OK (service.pas), line = 1129
  6285
  6286 4A9A AD 44 A1			lda W
  6287 4A9D 8D 42 A1			sta RESULT
  6288 4AA0 AD 45 A1			lda W+1
  6289 4AA3 8D 43 A1			sta RESULT+1
  6290 4AA6			@exit
  6291
  6292 				; ------------------------------------------------------------
  6293
  6294 = A13E			BALL	= DATAORIGIN+$0299
  6295 = 9EA5			BALL.X	= DATAORIGIN+$0000
  6296 = 9EA7			BALL.Y	= DATAORIGIN+$0002
  6297 = 9EA9			BALL.FINEX	= DATAORIGIN+$0004
  6298 = 9EAB			BALL.FINEY	= DATAORIGIN+$0006
  6299 = 9EAD			BALL.OLDX	= DATAORIGIN+$0008
  6300 = 9EAF			BALL.OLDY	= DATAORIGIN+$000A
  6301 = 9EB1			BALL.SPEED	= DATAORIGIN+$000C
  6302 = 9EB3			BALL.FINESPEED	= DATAORIGIN+$000E
  6303 = 9EB5			BALL.SPEEDX	= DATAORIGIN+$0010
  6304 = 9EB7			BALL.SPEEDY	= DATAORIGIN+$0012
  6305 = 9EB9			BALL.SBD	= DATAORIGIN+$0014
  6306 = 9EBB			BALL.BRWHIT	= DATAORIGIN+$0016
  6307 = 9EBC			BALL.INPLAY	= DATAORIGIN+$0017
  6308 = 9EBD			BALL.LAUNCH	= DATAORIGIN+$0018
  6309 = 9EBE			BALL.ONVAUS	= DATAORIGIN+$0019
  6310 = 9EC0			BALL.STM	= DATAORIGIN+$001B
  6311 = A142			RESULT	= DATAORIGIN+$029D
  6312 = A144			W	= DATAORIGIN+$029F
  6313
  6314 = A13E			@VarData	= BALL
  6315 = 0004			@VarDataSize	= 4
  6316
  6317 4AA6 60				rts						; ret
  6318 				.endl
  6319
  6320 4AA7			.local	START_BALL					; PROCEDURE
  6321
  6322 				; optimize OK (service.pas), line = 1138
  6323
  6324 4AA7 AC 46 A1 84 84 AC + 	mwy BALL :bp2
  6325 4AB1 A0 19			ldy #BALL.ONVAUS-DATAORIGIN
  6326 4AB3 AD 19 A0			lda VAUS.X
  6327 4AB6 18 71 84			add (:bp2),y
  6328 4AB9 85 9F			sta :STACKORIGIN+9
  6329 4ABB C8				iny
  6330 4ABC A9 00			lda #$00
  6331 4ABE 71 84			adc (:bp2),y
  6332 4AC0 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  6333 4AC2 A0 00			ldy #BALL.X-DATAORIGIN
  6334 4AC4 A5 9F			lda :STACKORIGIN+9
  6335 4AC6 91 84			sta (:bp2),y
  6336 4AC8 C8				iny
  6337 4AC9 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  6338 4ACB 91 84			sta (:bp2),y
  6339
  6340 				; optimize OK (service.pas), line = 1144
  6341
  6342 4ACD A0 02			ldy #BALL.Y-DATAORIGIN
  6343 4ACF AD 1A A0			lda VAUS.Y
  6344 4AD2 38 E9 03			sub #$03
  6345 4AD5 91 84			sta (:bp2),y
  6346 4AD7 C8				iny
  6347 4AD8 A9 00			lda #$00
  6348 4ADA E9 00			sbc #$00
  6349 4ADC 91 84			sta (:bp2),y
  6350
  6351 				; optimize OK (service.pas), line = 1149
  6352
  6353 4ADE A0 04			ldy #BALL.FINEX-DATAORIGIN
  6354 4AE0 A9 00			lda #$00
  6355 4AE2 91 84			sta (:bp2),y
  6356 4AE4 C8				iny
  6357 4AE5 91 84			sta (:bp2),y
  6358
  6359 				; optimize OK (service.pas), line = 1150
  6360
  6361 4AE7 A0 06			ldy #BALL.FINEY-DATAORIGIN
  6362 4AE9 91 84			sta (:bp2),y
  6363 4AEB C8				iny
  6364 4AEC 91 84			sta (:bp2),y
  6365
  6366 				; optimize OK (service.pas), line = 1152
  6367
  6368 4AEE A0 17			ldy #BALL.INPLAY-DATAORIGIN
  6369 4AF0 A9 01			lda #$01
  6370 4AF2 91 84			sta (:bp2),y
  6371
  6372 				; optimize OK (service.pas), line = 1154
  6373
  6374 4AF4 A0 14			ldy #BALL.SBD-DATAORIGIN
  6375 4AF6 A9 00			lda #$00
  6376 4AF8 91 84			sta (:bp2),y
  6377 4AFA C8				iny
  6378 4AFB 91 84			sta (:bp2),y
  6379
  6380 				; optimize OK (service.pas), line = 1155
  6381
  6382 4AFD A0 16			ldy #BALL.BRWHIT-DATAORIGIN
  6383 4AFF 91 84			sta (:bp2),y
  6384
  6385 				; ------------------------------------------------------------
  6386
  6387 = A146			BALL	= DATAORIGIN+$02A1
  6388 = 9EA5			BALL.X	= DATAORIGIN+$0000
  6389 = 9EA7			BALL.Y	= DATAORIGIN+$0002
  6390 = 9EA9			BALL.FINEX	= DATAORIGIN+$0004
  6391 = 9EAB			BALL.FINEY	= DATAORIGIN+$0006
  6392 = 9EAD			BALL.OLDX	= DATAORIGIN+$0008
  6393 = 9EAF			BALL.OLDY	= DATAORIGIN+$000A
  6394 = 9EB1			BALL.SPEED	= DATAORIGIN+$000C
  6395 = 9EB3			BALL.FINESPEED	= DATAORIGIN+$000E
  6396 = 9EB5			BALL.SPEEDX	= DATAORIGIN+$0010
  6397 = 9EB7			BALL.SPEEDY	= DATAORIGIN+$0012
  6398 = 9EB9			BALL.SBD	= DATAORIGIN+$0014
  6399 = 9EBB			BALL.BRWHIT	= DATAORIGIN+$0016
  6400 = 9EBC			BALL.INPLAY	= DATAORIGIN+$0017
  6401 = 9EBD			BALL.LAUNCH	= DATAORIGIN+$0018
  6402 = 9EBE			BALL.ONVAUS	= DATAORIGIN+$0019
  6403 = 9EC0			BALL.STM	= DATAORIGIN+$001B
  6404
  6405 = A146			@VarData	= BALL
  6406 = 0002			@VarDataSize	= 2
  6407
  6408 4B01			@exit
  6409 					.ifdef @new
  6410 					lda <@VarData
  6411 					sta :ztmp
  6412 					lda >@VarData
  6413 					ldy #@VarDataSize-1
  6414 					jmp @FreeMem
  6415 					els
  6416 4B01 60				rts						; ret
  6417 					eif
  6418 				.endl
  6419
  6420 4B02			.local	BALL_SPEED					; FUNCTION
  6421
  6422 				; ------------------------------------------------------------
  6423
  6424 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
  6425 				; as Pointer
  6426 4B02 B5 96			lda :STACKORIGIN,x
  6427 4B04 85 84			sta :bp2
  6428 4B06 B5 A6			lda :STACKORIGIN+STACKWIDTH,x
  6429 4B08 85 85			sta :bp2+1
  6430 4B0A A0 1B			ldy #$1B
  6431 4B0C B1 84 99 4A A1 88 + 	mva:rpl (:bp2),y adr.BALL,y-
  6432 4B14 CA				dex
  6433 4B15			@main
  6434
  6435 				; optimize OK (service.pas), line = 1166
  6436
  6437 4B15 AD 5A A1			lda BALL.SPEEDX
  6438 4B18 85 8A			sta SYSTEM.ABS.@010184000.X
  6439 4B1A AD 5B A1			lda BALL.SPEEDX+1
  6440 4B1D 85 8B			sta SYSTEM.ABS.@010184000.X+1
  6441 4B1F 20 D1 2A			jsr SYSTEM.ABS.@010184000
  6442 4B22 A5 92			lda SYSTEM.ABS.@010184000.RESULT
  6443 4B24 8D 6C A1			sta A
  6444 4B27 A5 93			lda SYSTEM.ABS.@010184000.RESULT+1
  6445 4B29 8D 6D A1			sta A+1
  6446
  6447 				; optimize OK (service.pas), line = 1167
  6448
  6449 4B2C AD 5C A1			lda BALL.SPEEDY
  6450 4B2F 85 8A			sta SYSTEM.ABS.@010184000.X
  6451 4B31 AD 5D A1			lda BALL.SPEEDY+1
  6452 4B34 85 8B			sta SYSTEM.ABS.@010184000.X+1
  6453 4B36 20 D1 2A			jsr SYSTEM.ABS.@010184000
  6454 4B39 A5 92			lda SYSTEM.ABS.@010184000.RESULT
  6455 4B3B 8D 6E A1			sta B
  6456 4B3E A5 93			lda SYSTEM.ABS.@010184000.RESULT+1
  6457 4B40 8D 6F A1			sta B+1
  6458
  6459 				; optimize OK (service.pas), line = 1169
  6460
  6461 4B43 AD 6C A1			lda A
  6462 4B46 85 8E			sta :ecx
  6463 4B48 85 86			sta :eax
  6464 4B4A AD 6D A1			lda A+1
  6465 4B4D 85 8F			sta :ecx+1
  6466 4B4F 85 87			sta :eax+1
  6467 					.ifdef fmulinit
  6468 					fmulu_16
  6469 					els
  6470 4B51 20 0B 23			imulCX
  6471 					eif
  6472 4B54 A5 86			lda :eax
  6473 4B56 85 9F			sta :STACKORIGIN+9
  6474 4B58 A5 87			lda :eax+1
  6475 4B5A 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  6476 4B5C A5 88			lda :eax+2
  6477 4B5E 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
  6478 4B60 A5 89			lda :eax+3
  6479 4B62 85 CF			sta :STACKORIGIN+STACKWIDTH*3+9
  6480 4B64 AD 6E A1			lda B
  6481 4B67 85 8E			sta :ecx
  6482 4B69 85 86			sta :eax
  6483 4B6B AD 6F A1			lda B+1
  6484 4B6E 85 8F			sta :ecx+1
  6485 4B70 85 87			sta :eax+1
  6486 					.ifdef fmulinit
  6487 					fmulu_16
  6488 					els
  6489 4B72 20 0B 23			imulCX
  6490 					eif
  6491 4B75 A5 9F			lda :STACKORIGIN+9
  6492 4B77 18 65 86			add :eax
  6493 4B7A 8D 68 A1			sta I
  6494 4B7D A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  6495 4B7F 65 87			adc :eax+1
  6496 4B81 8D 69 A1			sta I+1
  6497 4B84 A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
  6498 4B86 65 88			adc :eax+2
  6499 4B88 8D 6A A1			sta I+2
  6500 4B8B A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
  6501 4B8D 65 89			adc :eax+3
  6502 4B8F 8D 6B A1			sta I+3
  6503
  6504 				; optimize OK (service.pas), line = 1171
  6505
  6506 4B92 AD 68 A1			lda I
  6507 4B95 8D 83 9F			sta SQRT32.V
  6508 4B98 AD 69 A1			lda I+1
  6509 4B9B 8D 84 9F			sta SQRT32.V+1
  6510 4B9E AD 6A A1			lda I+2
  6511 4BA1 8D 85 9F			sta SQRT32.V+2
  6512 4BA4 AD 6B A1			lda I+3
  6513 4BA7 8D 86 9F			sta SQRT32.V+3
  6514 4BAA 20 40 38			jsr SQRT32
  6515 4BAD AD 87 9F			lda SQRT32.RESULT
  6516 4BB0 8D 66 A1			sta RESULT
  6517 4BB3 AD 88 9F			lda SQRT32.RESULT+1
  6518 4BB6 8D 67 A1			sta RESULT+1
  6519 4BB9			@exit
  6520
  6521 				; ------------------------------------------------------------
  6522
  6523 = A14A			adr.BALL	= DATAORIGIN+$02A5	; [28] RECORD
  6524 4BB9			.var BALL	= adr.BALL .word
  6525 = A14A			BALL.X	= DATAORIGIN+$02A5
  6526 = A14C			BALL.Y	= DATAORIGIN+$02A7
  6527 = A14E			BALL.FINEX	= DATAORIGIN+$02A9
  6528 = A150			BALL.FINEY	= DATAORIGIN+$02AB
  6529 = A152			BALL.OLDX	= DATAORIGIN+$02AD
  6530 = A154			BALL.OLDY	= DATAORIGIN+$02AF
  6531 = A156			BALL.SPEED	= DATAORIGIN+$02B1
  6532 = A158			BALL.FINESPEED	= DATAORIGIN+$02B3
  6533 = A15A			BALL.SPEEDX	= DATAORIGIN+$02B5
  6534 = A15C			BALL.SPEEDY	= DATAORIGIN+$02B7
  6535 = A15E			BALL.SBD	= DATAORIGIN+$02B9
  6536 = A160			BALL.BRWHIT	= DATAORIGIN+$02BB
  6537 = A161			BALL.INPLAY	= DATAORIGIN+$02BC
  6538 = A162			BALL.LAUNCH	= DATAORIGIN+$02BD
  6539 = A163			BALL.ONVAUS	= DATAORIGIN+$02BE
  6540 = A165			BALL.STM	= DATAORIGIN+$02C0
  6541 = A166			RESULT	= DATAORIGIN+$02C1
  6542 = A168			I	= DATAORIGIN+$02C3
  6543 = A16C			A	= DATAORIGIN+$02C7
  6544 = A16E			B	= DATAORIGIN+$02C9
  6545
  6546 = A14A			@VarData	= BALL.X
  6547 = 0024			@VarDataSize	= 36
  6548
  6549 4BB9 60				rts						; ret
  6550 = 4BBA 4A A1		BALL
  6550 				.endl
  6551
  6552 4BBC			.local	MOVE_BALL					; PROCEDURE
  6553
  6554 				; optimize OK (service.pas), line = 1189
  6555
  6556 4BBC AC 70 A1 84 84 AC + 	mwy BALL :bp2
  6557 4BC6 A0 00			ldy #BALL.X-DATAORIGIN
  6558 4BC8 B1 84			lda (:bp2),y
  6559 4BCA C8				iny
  6560 4BCB 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  6561 4BCD A9 00			lda #$00
  6562 4BCF A0 04			ldy #BALL.FINEX-DATAORIGIN
  6563 4BD1 18 71 84			add (:bp2),y
  6564 4BD4 85 9F			sta :STACKORIGIN+9
  6565 4BD6 C8				iny
  6566 4BD7 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  6567 4BD9 71 84			adc (:bp2),y
  6568 4BDB 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  6569 4BDD A0 10			ldy #BALL.SPEEDX-DATAORIGIN
  6570 4BDF A5 9F			lda :STACKORIGIN+9
  6571 4BE1 18 71 84			add (:bp2),y
  6572 4BE4 8D 77 A1			sta X
  6573 4BE7 C8				iny
  6574 4BE8 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  6575 4BEA 71 84			adc (:bp2),y
  6576 4BEC 8D 78 A1			sta X+1
  6577
  6578 				; optimize OK (service.pas), line = 1190
  6579
  6580 4BEF A0 02			ldy #BALL.Y-DATAORIGIN
  6581 4BF1 B1 84			lda (:bp2),y
  6582 4BF3 C8				iny
  6583 4BF4 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  6584 4BF6 A9 00			lda #$00
  6585 4BF8 A0 06			ldy #BALL.FINEY-DATAORIGIN
  6586 4BFA 18 71 84			add (:bp2),y
  6587 4BFD 85 9F			sta :STACKORIGIN+9
  6588 4BFF C8				iny
  6589 4C00 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  6590 4C02 71 84			adc (:bp2),y
  6591 4C04 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  6592 4C06 A0 12			ldy #BALL.SPEEDY-DATAORIGIN
  6593 4C08 A5 9F			lda :STACKORIGIN+9
  6594 4C0A 18 71 84			add (:bp2),y
  6595 4C0D 8D 79 A1			sta Y
  6596 4C10 C8				iny
  6597 4C11 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  6598 4C13 71 84			adc (:bp2),y
  6599 4C15 8D 7A A1			sta Y+1
  6600
  6601 				; optimize OK (service.pas), line = 1192
  6602
  6603 4C18 A0 00			ldy #BALL.X-DATAORIGIN
  6604 4C1A AD 78 A1			lda X+1
  6605 4C1D 91 84			sta (:bp2),y
  6606 4C1F C8				iny
  6607 4C20 A9 00			lda #$00
  6608 4C22 91 84			sta (:bp2),y
  6609
  6610 				; optimize OK (service.pas), line = 1193
  6611
  6612 4C24 A0 02			ldy #BALL.Y-DATAORIGIN
  6613 4C26 AD 7A A1			lda Y+1
  6614 4C29 91 84			sta (:bp2),y
  6615 4C2B C8				iny
  6616 4C2C A9 00			lda #$00
  6617 4C2E 91 84			sta (:bp2),y
  6618
  6619 				; optimize OK (service.pas), line = 1195
  6620
  6621 4C30 A0 04			ldy #BALL.FINEX-DATAORIGIN
  6622 4C32 AD 77 A1			lda X
  6623 4C35 91 84			sta (:bp2),y
  6624 4C37 C8				iny
  6625 4C38 A9 00			lda #$00
  6626 4C3A 91 84			sta (:bp2),y
  6627
  6628 				; optimize OK (service.pas), line = 1196
  6629
  6630 4C3C A0 06			ldy #BALL.FINEY-DATAORIGIN
  6631 4C3E AD 79 A1			lda Y
  6632 4C41 91 84			sta (:bp2),y
  6633 4C43 C8				iny
  6634 4C44 A9 00			lda #$00
  6635 4C46 91 84			sta (:bp2),y
  6636
  6637 				; optimize OK (service.pas), line = 1201
  6638
  6639 4C48 A0 00			ldy #BALL.X-DATAORIGIN
  6640 4C4A B1 84			lda (:bp2),y
  6641 4C4C C8				iny
  6642 4C4D C9 D9			cmp #$D9
  6643 4C4F B1 84			lda (:bp2),y
  6644 4C51 E9 00			sbc #$00
  6645 4C53 50 02			svc
  6646 4C55 49 80			eor #$80
  6647 4C57 30 67			jmi l_0D11
  6648
  6649 				; optimize OK (service.pas), line = 1203
  6650
  6651 4C59 A0 10			ldy #BALL.SPEEDX-DATAORIGIN
  6652 4C5B A9 00			lda #$00
  6653 4C5D 38 F1 84			sub (:bp2),y
  6654 4C60 85 9F			sta :STACKORIGIN+9
  6655 4C62 C8				iny
  6656 4C63 A9 00			lda #$00
  6657 4C65 F1 84			sbc (:bp2),y
  6658 4C67 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  6659 4C69 A0 10			ldy #BALL.SPEEDX-DATAORIGIN
  6660 4C6B A5 9F			lda :STACKORIGIN+9
  6661 4C6D 91 84			sta (:bp2),y
  6662 4C6F C8				iny
  6663 4C70 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  6664 4C72 91 84			sta (:bp2),y
  6665
  6666 				; optimize OK (service.pas), line = 1204
  6667
  6668 4C74 A0 00			ldy #BALL.X-DATAORIGIN
  6669 4C76 A9 B0			lda #$B0
  6670 4C78 38 F1 84			sub (:bp2),y
  6671 4C7B 85 9F			sta :STACKORIGIN+9
  6672 4C7D C8				iny
  6673 4C7E A9 01			lda #$01
  6674 4C80 F1 84			sbc (:bp2),y
  6675 4C82 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  6676 4C84 A0 00			ldy #BALL.X-DATAORIGIN
  6677 4C86 A5 9F			lda :STACKORIGIN+9
  6678 4C88 91 84			sta (:bp2),y
  6679 4C8A C8				iny
  6680 4C8B A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  6681 4C8D 91 84			sta (:bp2),y
  6682
  6683 				; optimize OK (service.pas), line = 1205
  6684
  6685 4C8F A0 04			ldy #BALL.FINEX-DATAORIGIN
  6686 4C91 A9 FF			lda #$FF
  6687 4C93 51 84			eor (:bp2),y
  6688 4C95 85 9F			sta :STACKORIGIN+9
  6689 4C97 C8				iny
  6690 4C98 A9 00			lda #$00
  6691 4C9A F1 84			sbc (:bp2),y
  6692 4C9C 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  6693 4C9E A0 04			ldy #BALL.FINEX-DATAORIGIN
  6694 4CA0 A5 9F			lda :STACKORIGIN+9
  6695 4CA2 91 84			sta (:bp2),y
  6696 4CA4 C8				iny
  6697 4CA5 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  6698 4CA7 91 84			sta (:bp2),y
  6699
  6700 				; optimize OK (service.pas), line = 1206
  6701
  6702 4CA9 A9 F0			lda #$F0
  6703 4CAB 8D 7F 9F			sta BALL_BLOCK_SOUND.A
  6704 4CAE A9 00			lda #$00
  6705 4CB0 8D 80 9F			sta BALL_BLOCK_SOUND.A+1
  6706 4CB3 A9 05			lda #$05
  6707 4CB5 8D 81 9F			sta BALL_BLOCK_SOUND.B
  6708 4CB8 A9 00			lda #$00
  6709 4CBA 8D 82 9F			sta BALL_BLOCK_SOUND.B+1
  6710 4CBD 20 3F 38			jsr BALL_BLOCK_SOUND
  6711 4CC0			l_0D11
  6712
  6713 				; optimize OK (service.pas), line = 1211
  6714
  6715 4CC0 AC 70 A1 84 84 AC + 	mwy BALL :bp2
  6716 4CCA A0 00			ldy #BALL.X-DATAORIGIN
  6717 4CCC B1 84			lda (:bp2),y
  6718 4CCE C8				iny
  6719 4CCF C9 0A			cmp #$0A
  6720 4CD1 B1 84			lda (:bp2),y
  6721 4CD3 E9 00			sbc #$00
  6722 4CD5 50 02			svc
  6723 4CD7 49 80			eor #$80
  6724 4CD9 10 67			jpl l_0D46
  6725
  6726 				; optimize OK (service.pas), line = 1213
  6727
  6728 4CDB A0 10			ldy #BALL.SPEEDX-DATAORIGIN
  6729 4CDD A9 00			lda #$00
  6730 4CDF 38 F1 84			sub (:bp2),y
  6731 4CE2 85 9F			sta :STACKORIGIN+9
  6732 4CE4 C8				iny
  6733 4CE5 A9 00			lda #$00
  6734 4CE7 F1 84			sbc (:bp2),y
  6735 4CE9 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  6736 4CEB A0 10			ldy #BALL.SPEEDX-DATAORIGIN
  6737 4CED A5 9F			lda :STACKORIGIN+9
  6738 4CEF 91 84			sta (:bp2),y
  6739 4CF1 C8				iny
  6740 4CF2 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  6741 4CF4 91 84			sta (:bp2),y
  6742
  6743 				; optimize OK (service.pas), line = 1214
  6744
  6745 4CF6 A0 00			ldy #BALL.X-DATAORIGIN
  6746 4CF8 A9 14			lda #$14
  6747 4CFA 38 F1 84			sub (:bp2),y
  6748 4CFD 85 9F			sta :STACKORIGIN+9
  6749 4CFF C8				iny
  6750 4D00 A9 00			lda #$00
  6751 4D02 F1 84			sbc (:bp2),y
  6752 4D04 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  6753 4D06 A0 00			ldy #BALL.X-DATAORIGIN
  6754 4D08 A5 9F			lda :STACKORIGIN+9
  6755 4D0A 91 84			sta (:bp2),y
  6756 4D0C C8				iny
  6757 4D0D A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  6758 4D0F 91 84			sta (:bp2),y
  6759
  6760 				; optimize OK (service.pas), line = 1215
  6761
  6762 4D11 A0 04			ldy #BALL.FINEX-DATAORIGIN
  6763 4D13 A9 FF			lda #$FF
  6764 4D15 51 84			eor (:bp2),y
  6765 4D17 85 9F			sta :STACKORIGIN+9
  6766 4D19 C8				iny
  6767 4D1A A9 00			lda #$00
  6768 4D1C F1 84			sbc (:bp2),y
  6769 4D1E 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  6770 4D20 A0 04			ldy #BALL.FINEX-DATAORIGIN
  6771 4D22 A5 9F			lda :STACKORIGIN+9
  6772 4D24 91 84			sta (:bp2),y
  6773 4D26 C8				iny
  6774 4D27 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  6775 4D29 91 84			sta (:bp2),y
  6776
  6777 				; optimize OK (service.pas), line = 1216
  6778
  6779 4D2B A9 F0			lda #$F0
  6780 4D2D 8D 7F 9F			sta BALL_BLOCK_SOUND.A
  6781 4D30 A9 00			lda #$00
  6782 4D32 8D 80 9F			sta BALL_BLOCK_SOUND.A+1
  6783 4D35 A9 05			lda #$05
  6784 4D37 8D 81 9F			sta BALL_BLOCK_SOUND.B
  6785 4D3A A9 00			lda #$00
  6786 4D3C 8D 82 9F			sta BALL_BLOCK_SOUND.B+1
  6787 4D3F 20 3F 38			jsr BALL_BLOCK_SOUND
  6788 4D42			l_0D46
  6789
  6790 				; optimize OK (service.pas), line = 1221
  6791
  6792 4D42 AC 70 A1 84 84 AC + 	mwy BALL :bp2
  6793 4D4C A0 02			ldy #BALL.Y-DATAORIGIN
  6794 4D4E B1 84			lda (:bp2),y
  6795 4D50 C8				iny
  6796 4D51 C9 0C			cmp #$0C
  6797 4D53 B1 84			lda (:bp2),y
  6798 4D55 E9 00			sbc #$00
  6799 4D57 50 02			svc
  6800 4D59 49 80			eor #$80
  6801 4D5B 10 67			jpl l_0D7B
  6802
  6803 				; optimize OK (service.pas), line = 1223
  6804
  6805 4D5D A0 12			ldy #BALL.SPEEDY-DATAORIGIN
  6806 4D5F A9 00			lda #$00
  6807 4D61 38 F1 84			sub (:bp2),y
  6808 4D64 85 9F			sta :STACKORIGIN+9
  6809 4D66 C8				iny
  6810 4D67 A9 00			lda #$00
  6811 4D69 F1 84			sbc (:bp2),y
  6812 4D6B 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  6813 4D6D A0 12			ldy #BALL.SPEEDY-DATAORIGIN
  6814 4D6F A5 9F			lda :STACKORIGIN+9
  6815 4D71 91 84			sta (:bp2),y
  6816 4D73 C8				iny
  6817 4D74 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  6818 4D76 91 84			sta (:bp2),y
  6819
  6820 				; optimize OK (service.pas), line = 1224
  6821
  6822 4D78 A0 02			ldy #BALL.Y-DATAORIGIN
  6823 4D7A A9 18			lda #$18
  6824 4D7C 38 F1 84			sub (:bp2),y
  6825 4D7F 85 9F			sta :STACKORIGIN+9
  6826 4D81 C8				iny
  6827 4D82 A9 00			lda #$00
  6828 4D84 F1 84			sbc (:bp2),y
  6829 4D86 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  6830 4D88 A0 02			ldy #BALL.Y-DATAORIGIN
  6831 4D8A A5 9F			lda :STACKORIGIN+9
  6832 4D8C 91 84			sta (:bp2),y
  6833 4D8E C8				iny
  6834 4D8F A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  6835 4D91 91 84			sta (:bp2),y
  6836
  6837 				; optimize OK (service.pas), line = 1225
  6838
  6839 4D93 A0 06			ldy #BALL.FINEY-DATAORIGIN
  6840 4D95 A9 FF			lda #$FF
  6841 4D97 51 84			eor (:bp2),y
  6842 4D99 85 9F			sta :STACKORIGIN+9
  6843 4D9B C8				iny
  6844 4D9C A9 00			lda #$00
  6845 4D9E F1 84			sbc (:bp2),y
  6846 4DA0 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  6847 4DA2 A0 06			ldy #BALL.FINEY-DATAORIGIN
  6848 4DA4 A5 9F			lda :STACKORIGIN+9
  6849 4DA6 91 84			sta (:bp2),y
  6850 4DA8 C8				iny
  6851 4DA9 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  6852 4DAB 91 84			sta (:bp2),y
  6853
  6854 				; optimize OK (service.pas), line = 1226
  6855
  6856 4DAD A9 F0			lda #$F0
  6857 4DAF 8D 7F 9F			sta BALL_BLOCK_SOUND.A
  6858 4DB2 A9 00			lda #$00
  6859 4DB4 8D 80 9F			sta BALL_BLOCK_SOUND.A+1
  6860 4DB7 A9 05			lda #$05
  6861 4DB9 8D 81 9F			sta BALL_BLOCK_SOUND.B
  6862 4DBC A9 00			lda #$00
  6863 4DBE 8D 82 9F			sta BALL_BLOCK_SOUND.B+1
  6864 4DC1 20 3F 38			jsr BALL_BLOCK_SOUND
  6865 4DC4			l_0D7B
  6866
  6867 				; optimize OK (service.pas), line = 1234
  6868
  6869 4DC4 AC 70 A1 84 84 AC + 	mwy BALL :bp2
  6870 4DCE A0 02			ldy #BALL.Y-DATAORIGIN
  6871 4DD0 B1 84			lda (:bp2),y
  6872 4DD2 18 69 03			add #$03
  6873 4DD5 85 9F			sta :STACKORIGIN+9
  6874 4DD7 C8				iny
  6875 4DD8 B1 84			lda (:bp2),y
  6876 4DDA 69 00			adc #$00
  6877 4DDC 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  6878 4DDE A0 01			ldy #1
  6879 4DE0 A5 9F			lda :STACKORIGIN+9
  6880 4DE2 C9 B9			cmp #$B9
  6881 4DE4 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  6882 4DE6 E9 00			sbc #$00
  6883 4DE8 50 02			svc
  6884 4DEA 49 80			eor #$80
  6885 4DEC 10 01			bpl @+
  6886 4DEE 88				dey
  6887 				@
  6888 4DEF 98				tya
  6889 4DF0 8D 74 A1			sta B0
  6890
  6891 				; optimize OK (service.pas), line = 1235
  6892
  6893 4DF3 A0 12			ldy #BALL.SPEEDY-DATAORIGIN
  6894 4DF5 B1 84			lda (:bp2),y
  6895 4DF7 85 9F			sta :STACKORIGIN+9
  6896 4DF9 C8				iny
  6897 4DFA B1 84			lda (:bp2),y
  6898 4DFC 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  6899 4DFE A0 01			ldy #1
  6900 4E00 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  6901 4E02 30 04			bmi @+
  6902 4E04 05 9F			ora :STACKORIGIN+9
  6903 4E06 D0 01			sne
  6904 				@
  6905 4E08 88				dey
  6906 				@
  6907 4E09 98				tya
  6908 4E0A 8D 75 A1			sta B1
  6909
  6910 				; optimize OK (service.pas), line = 1236
  6911
  6912 4E0D A0 0A			ldy #BALL.OLDY-DATAORIGIN
  6913 4E0F B1 84			lda (:bp2),y
  6914 4E11 85 9F			sta :STACKORIGIN+9
  6915 4E13 C8				iny
  6916 4E14 B1 84			lda (:bp2),y
  6917 4E16 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  6918 4E18 A0 01			ldy #1
  6919 4E1A A5 9F			lda :STACKORIGIN+9
  6920 4E1C C9 B9			cmp #$B9
  6921 4E1E A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  6922 4E20 E9 00			sbc #$00
  6923 4E22 50 02			svc
  6924 4E24 49 80			eor #$80
  6925 4E26 30 01			bmi @+
  6926 4E28 88				dey
  6927 				@
  6928 4E29 98				tya
  6929 4E2A 8D 76 A1			sta B2
  6930
  6931 				; optimize OK (service.pas), line = 1239
  6932
  6933 4E2D AD 74 A1			lda B0
  6934 4E30 2D 75 A1			and B1
  6935 4E33 2D 76 A1			and B2
  6936 4E36 D0 03 4C E4 50		jeq l_0DDC
  6937
  6938 				; optimize OK (service.pas), line = 1243
  6939
  6940 4E3B A0 00			ldy #BALL.X-DATAORIGIN
  6941 4E3D B1 84			lda (:bp2),y
  6942 4E3F 85 9F			sta :STACKORIGIN+9
  6943 4E41 C8				iny
  6944 4E42 AD 19 A0			lda VAUS.X
  6945 4E45 38 E9 03			sub #$03
  6946 4E48 85 A0			sta :STACKORIGIN+10
  6947 4E4A A9 00			lda #$00
  6948 4E4C E9 00			sbc #$00
  6949 4E4E 85 B0			sta :STACKORIGIN+STACKWIDTH+10
  6950 4E50 A5 A0			lda :STACKORIGIN+10
  6951 4E52 C5 9F			cmp :STACKORIGIN+9
  6952 4E54 A5 B0			lda :STACKORIGIN+STACKWIDTH+10
  6953 4E56 F1 84			sbc (:bp2),y
  6954 4E58 50 02			svc
  6955 4E5A 49 80			eor #$80
  6956 4E5C 30 03 4C E4 50		jpl l_0E0B
  6957 4E61 A0 00			ldy #BALL.X-DATAORIGIN
  6958 4E63 B1 84			lda (:bp2),y
  6959 4E65 85 A0			sta :STACKORIGIN+10
  6960 4E67 C8				iny
  6961 4E68 AD 19 A0			lda VAUS.X
  6962 4E6B 18 6D 21 A0			add VAUS.WIDTH
  6963 4E6F 85 A1			sta :STACKORIGIN+11
  6964 4E71 A9 00			lda #$00
  6965 4E73 69 00			adc #$00
  6966 4E75 85 B1			sta :STACKORIGIN+STACKWIDTH+11
  6967 4E77 A5 A1			lda :STACKORIGIN+11
  6968 4E79 18 69 03			add #$03
  6969 4E7C 85 A1			sta :STACKORIGIN+11
  6970 4E7E A5 B1			lda :STACKORIGIN+STACKWIDTH+11
  6971 4E80 69 00			adc #$00
  6972 4E82 85 B1			sta :STACKORIGIN+STACKWIDTH+11
  6973 4E84 A5 A0			lda :STACKORIGIN+10
  6974 4E86 C5 A1			cmp :STACKORIGIN+11
  6975 4E88 B1 84			lda (:bp2),y
  6976 4E8A E5 B1			sbc :STACKORIGIN+STACKWIDTH+11
  6977 4E8C 50 02			svc
  6978 4E8E 49 80			eor #$80
  6979 4E90 30 03 4C E4 50		jpl l_0E0B
  6980
  6981 				; optimize OK (service.pas), line = 1246
  6982
  6983 4E95 A0 12			ldy #BALL.SPEEDY-DATAORIGIN
  6984 4E97 A9 00			lda #$00
  6985 4E99 38 F1 84			sub (:bp2),y
  6986 4E9C 85 9F			sta :STACKORIGIN+9
  6987 4E9E C8				iny
  6988 4E9F A9 00			lda #$00
  6989 4EA1 F1 84			sbc (:bp2),y
  6990 4EA3 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  6991 4EA5 A0 12			ldy #BALL.SPEEDY-DATAORIGIN
  6992 4EA7 A5 9F			lda :STACKORIGIN+9
  6993 4EA9 91 84			sta (:bp2),y
  6994 4EAB C8				iny
  6995 4EAC A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  6996 4EAE 91 84			sta (:bp2),y
  6997
  6998 				; optimize OK (service.pas), line = 1248
  6999
  7000 4EB0 AD 25 A0			lda VAUS.LETTER
  7001 4EB3 C9 06			cmp #$06
  7002 4EB5 D0 2C			jne l_0E2F
  7003 4EB7 A0 18			ldy #BALL.LAUNCH-DATAORIGIN
  7004 4EB9 B1 84			lda (:bp2),y
  7005 4EBB D0 26			jne l_0E2F
  7006
  7007 				; optimize OK (service.pas), line = 1250
  7008
  7009 4EBD A0 1B			ldy #BALL.STM-DATAORIGIN
  7010 4EBF 91 84			sta (:bp2),y
  7011
  7012 				; optimize OK (service.pas), line = 1251
  7013
  7014 4EC1 A0 18			ldy #BALL.LAUNCH-DATAORIGIN
  7015 4EC3 A9 01			lda #$01
  7016 4EC5 91 84			sta (:bp2),y
  7017
  7018 				; optimize OK (service.pas), line = 1252
  7019
  7020 4EC7 A0 00			ldy #BALL.X-DATAORIGIN
  7021 4EC9 B1 84			lda (:bp2),y
  7022 4ECB 38 ED 19 A0			sub VAUS.X
  7023 4ECF 85 9F			sta :STACKORIGIN+9
  7024 4ED1 C8				iny
  7025 4ED2 B1 84			lda (:bp2),y
  7026 4ED4 E9 00			sbc #$00
  7027 4ED6 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  7028 4ED8 A0 19			ldy #BALL.ONVAUS-DATAORIGIN
  7029 4EDA A5 9F			lda :STACKORIGIN+9
  7030 4EDC 91 84			sta (:bp2),y
  7031 4EDE C8				iny
  7032 4EDF A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  7033 4EE1 91 84			sta (:bp2),y
  7034 4EE3			l_0E2F
  7035
  7036 				; optimize OK (service.pas), line = 1255
  7037
  7038 4EE3 A9 2C			lda #$2C
  7039 4EE5 8D 7F 9F			sta BALL_BLOCK_SOUND.A
  7040 4EE8 A9 01			lda #$01
  7041 4EEA 8D 80 9F			sta BALL_BLOCK_SOUND.A+1
  7042 4EED A9 06			lda #$06
  7043 4EEF 8D 81 9F			sta BALL_BLOCK_SOUND.B
  7044 4EF2 A9 00			lda #$00
  7045 4EF4 8D 82 9F			sta BALL_BLOCK_SOUND.B+1
  7046 4EF7 20 3F 38			jsr BALL_BLOCK_SOUND
  7047
  7048 				; optimize OK (service.pas), line = 1259
  7049
  7050 4EFA AC 70 A1 84 84 AC + 	mwy BALL :bp2
  7051 4F04 A0 00			ldy #BALL.X-DATAORIGIN
  7052 4F06 B1 84			lda (:bp2),y
  7053 4F08 85 9F			sta :STACKORIGIN+9
  7054 4F0A C8				iny
  7055 4F0B AD 19 A0			lda VAUS.X
  7056 4F0E 18 69 0A			add #$0A
  7057 4F11 85 A0			sta :STACKORIGIN+10
  7058 4F13 A9 00			lda #$00
  7059 4F15 69 00			adc #$00
  7060 4F17 85 B0			sta :STACKORIGIN+STACKWIDTH+10
  7061 4F19 A5 9F			lda :STACKORIGIN+9
  7062 4F1B C5 A0			cmp :STACKORIGIN+10
  7063 4F1D B1 84			lda (:bp2),y
  7064 4F1F E5 B0			sbc :STACKORIGIN+STACKWIDTH+10
  7065 4F21 50 02			svc
  7066 4F23 49 80			eor #$80
  7067 4F25 30 03 4C E8 4F		jpl l_0E5F
  7068
  7069 				; optimize OK (service.pas), line = 1262
  7070
  7071 4F2A A0 10			ldy #BALL.SPEEDX-DATAORIGIN
  7072 4F2C A9 00			lda #$00
  7073 4F2E 38 F1 84			sub (:bp2),y
  7074 4F31 85 9F			sta :STACKORIGIN+9
  7075 4F33 C8				iny
  7076 4F34 A9 00			lda #$00
  7077 4F36 F1 84			sbc (:bp2),y
  7078 4F38 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  7079 4F3A A0 10			ldy #BALL.SPEEDX-DATAORIGIN
  7080 4F3C A5 9F			lda :STACKORIGIN+9
  7081 4F3E 91 84			sta (:bp2),y
  7082 4F40 C8				iny
  7083 4F41 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  7084 4F43 91 84			sta (:bp2),y
  7085
  7086 				; optimize OK (service.pas), line = 1266
  7087
  7088 4F45 AD 70 A1			lda BALL
  7089 4F48 8D 3E A1			sta GET_BALL_DIRECTION.BALL
  7090 4F4B AD 71 A1			lda BALL+1
  7091 4F4E 8D 3F A1			sta GET_BALL_DIRECTION.BALL+1
  7092 4F51 20 89 48			jsr GET_BALL_DIRECTION
  7093 4F54 E8				inx
  7094 4F55 AD 42 A1 95 96		mva GET_BALL_DIRECTION.RESULT :STACKORIGIN,x
  7095 4F5A AD 43 A1 95 A6		mva GET_BALL_DIRECTION.RESULT+1 :STACKORIGIN+STACKWIDTH,x
  7096 4F5F A9 1E			lda #$1E
  7097 4F61 20 03 33			jsr SYSTEM.RANDOM.@010180000
  7098 4F64 B5 96			lda :STACKORIGIN,x
  7099 4F66 18 6D DC 9E			add SYSTEM.RANDOM.@010180000.RESULT
  7100 4F6A 8D 7B A1			sta ANGLE
  7101 4F6D B5 A6			lda :STACKORIGIN+STACKWIDTH,x
  7102 4F6F 69 00			adc #$00
  7103 4F71 8D 7C A1			sta ANGLE+1
  7104 4F74 CA				dex
  7105
  7106 				; optimize OK (service.pas), line = 1274
  7107
  7108 4F75 A9 A0			lda #$A0
  7109 4F77 8D DA A0			sta MIN.A
  7110 4F7A A9 00			lda #$00
  7111 4F7C 8D DB A0			sta MIN.A+1
  7112 4F7F AD 7B A1			lda ANGLE
  7113 4F82 8D DC A0			sta MIN.B
  7114 4F85 AD 7C A1			lda ANGLE+1
  7115 4F88 8D DD A0			sta MIN.B+1
  7116 4F8B 20 7F 3C			jsr MIN
  7117 4F8E A9 78			lda #$78
  7118 4F90 8D D4 A0			sta MAX.A
  7119 4F93 A9 00			lda #$00
  7120 4F95 8D D5 A0			sta MAX.A+1
  7121 4F98 AD DE A0			lda MIN.RESULT
  7122 4F9B 8D D6 A0			sta MAX.B
  7123 4F9E AD DF A0			lda MIN.RESULT+1
  7124 4FA1 8D D7 A0			sta MAX.B+1
  7125 4FA4 20 54 3C			jsr MAX
  7126 4FA7 AD 70 A1			lda BALL
  7127 4FAA 8D 34 A1			sta SET_BALL_DIRECTION.BALL
  7128 4FAD AD 71 A1			lda BALL+1
  7129 4FB0 8D 35 A1			sta SET_BALL_DIRECTION.BALL+1
  7130 4FB3 AD D8 A0			lda MAX.RESULT
  7131 4FB6 8D 38 A1			sta SET_BALL_DIRECTION.ANGLE
  7132 4FB9 AD D9 A0			lda MAX.RESULT+1
  7133 4FBC 8D 39 A1			sta SET_BALL_DIRECTION.ANGLE+1
  7134 4FBF 20 A6 46			jsr SET_BALL_DIRECTION
  7135
  7136 				; optimize OK (service.pas), line = 1279
  7137
  7138 4FC2 AC 70 A1 84 84 AC + 	mwy BALL :bp2
  7139 4FCC A0 0C			ldy #BALL.SPEED-DATAORIGIN
  7140 4FCE B1 84			lda (:bp2),y
  7141 4FD0 8D 22 A1			sta SET_BALL_SPEED.SPEED
  7142 4FD3 C8				iny
  7143 4FD4 B1 84			lda (:bp2),y
  7144 4FD6 8D 23 A1			sta SET_BALL_SPEED.SPEED+1
  7145 4FD9 AD 70 A1			lda BALL
  7146 4FDC 8D 1E A1			sta SET_BALL_SPEED.BALL
  7147 4FDF AD 71 A1			lda BALL+1
  7148 4FE2 8D 1F A1			sta SET_BALL_SPEED.BALL+1
  7149 4FE5 20 C3 44			jsr SET_BALL_SPEED
  7150 4FE8			l_0E5F
  7151
  7152 				; optimize OK (service.pas), line = 1285
  7153
  7154 4FE8 AC 70 A1 84 84 AC + 	mwy BALL :bp2
  7155 4FF2 A0 00			ldy #BALL.X-DATAORIGIN
  7156 4FF4 B1 84			lda (:bp2),y
  7157 4FF6 85 9F			sta :STACKORIGIN+9
  7158 4FF8 C8				iny
  7159 4FF9 AD 19 A0			lda VAUS.X
  7160 4FFC 18 6D 21 A0			add VAUS.WIDTH
  7161 5000 85 A0			sta :STACKORIGIN+10
  7162 5002 A9 00			lda #$00
  7163 5004 69 00			adc #$00
  7164 5006 85 B0			sta :STACKORIGIN+STACKWIDTH+10
  7165 5008 A5 A0			lda :STACKORIGIN+10
  7166 500A 38 E9 0A			sub #$0A
  7167 500D 85 A0			sta :STACKORIGIN+10
  7168 500F A5 B0			lda :STACKORIGIN+STACKWIDTH+10
  7169 5011 E9 00			sbc #$00
  7170 5013 85 B0			sta :STACKORIGIN+STACKWIDTH+10
  7171 5015 A5 A0			lda :STACKORIGIN+10
  7172 5017 C5 9F			cmp :STACKORIGIN+9
  7173 5019 A5 B0			lda :STACKORIGIN+STACKWIDTH+10
  7174 501B F1 84			sbc (:bp2),y
  7175 501D 50 02			svc
  7176 501F 49 80			eor #$80
  7177 5021 30 03 4C E4 50		jpl l_0EA0
  7178
  7179 				; optimize OK (service.pas), line = 1287
  7180
  7181 5026 A0 10			ldy #BALL.SPEEDX-DATAORIGIN
  7182 5028 A9 00			lda #$00
  7183 502A 38 F1 84			sub (:bp2),y
  7184 502D 85 9F			sta :STACKORIGIN+9
  7185 502F C8				iny
  7186 5030 A9 00			lda #$00
  7187 5032 F1 84			sbc (:bp2),y
  7188 5034 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  7189 5036 A0 10			ldy #BALL.SPEEDX-DATAORIGIN
  7190 5038 A5 9F			lda :STACKORIGIN+9
  7191 503A 91 84			sta (:bp2),y
  7192 503C C8				iny
  7193 503D A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  7194 503F 91 84			sta (:bp2),y
  7195
  7196 				; optimize OK (service.pas), line = 1288
  7197
  7198 5041 AD 70 A1			lda BALL
  7199 5044 8D 3E A1			sta GET_BALL_DIRECTION.BALL
  7200 5047 AD 71 A1			lda BALL+1
  7201 504A 8D 3F A1			sta GET_BALL_DIRECTION.BALL+1
  7202 504D 20 89 48			jsr GET_BALL_DIRECTION
  7203 5050 E8				inx
  7204 5051 AD 42 A1 95 96		mva GET_BALL_DIRECTION.RESULT :STACKORIGIN,x
  7205 5056 AD 43 A1 95 A6		mva GET_BALL_DIRECTION.RESULT+1 :STACKORIGIN+STACKWIDTH,x
  7206 505B A9 1E			lda #$1E
  7207 505D 20 03 33			jsr SYSTEM.RANDOM.@010180000
  7208 5060 B5 96			lda :STACKORIGIN,x
  7209 5062 38 ED DC 9E			sub SYSTEM.RANDOM.@010180000.RESULT
  7210 5066 8D 7B A1			sta ANGLE
  7211 5069 B5 A6			lda :STACKORIGIN+STACKWIDTH,x
  7212 506B E9 00			sbc #$00
  7213 506D 8D 7C A1			sta ANGLE+1
  7214 5070 CA				dex
  7215
  7216 				; optimize OK (service.pas), line = 1289
  7217
  7218 5071 A9 14			lda #$14
  7219 5073 8D D4 A0			sta MAX.A
  7220 5076 A9 00			lda #$00
  7221 5078 8D D5 A0			sta MAX.A+1
  7222 507B AD 7B A1			lda ANGLE
  7223 507E 8D D6 A0			sta MAX.B
  7224 5081 AD 7C A1			lda ANGLE+1
  7225 5084 8D D7 A0			sta MAX.B+1
  7226 5087 20 54 3C			jsr MAX
  7227 508A A9 3C			lda #$3C
  7228 508C 8D DA A0			sta MIN.A
  7229 508F A9 00			lda #$00
  7230 5091 8D DB A0			sta MIN.A+1
  7231 5094 AD D8 A0			lda MAX.RESULT
  7232 5097 8D DC A0			sta MIN.B
  7233 509A AD D9 A0			lda MAX.RESULT+1
  7234 509D 8D DD A0			sta MIN.B+1
  7235 50A0 20 7F 3C			jsr MIN
  7236 50A3 AD 70 A1			lda BALL
  7237 50A6 8D 34 A1			sta SET_BALL_DIRECTION.BALL
  7238 50A9 AD 71 A1			lda BALL+1
  7239 50AC 8D 35 A1			sta SET_BALL_DIRECTION.BALL+1
  7240 50AF AD DE A0			lda MIN.RESULT
  7241 50B2 8D 38 A1			sta SET_BALL_DIRECTION.ANGLE
  7242 50B5 AD DF A0			lda MIN.RESULT+1
  7243 50B8 8D 39 A1			sta SET_BALL_DIRECTION.ANGLE+1
  7244 50BB 20 A6 46			jsr SET_BALL_DIRECTION
  7245
  7246 				; optimize OK (service.pas), line = 1290
  7247
  7248 50BE AC 70 A1 84 84 AC + 	mwy BALL :bp2
  7249 50C8 A0 0C			ldy #BALL.SPEED-DATAORIGIN
  7250 50CA B1 84			lda (:bp2),y
  7251 50CC 8D 22 A1			sta SET_BALL_SPEED.SPEED
  7252 50CF C8				iny
  7253 50D0 B1 84			lda (:bp2),y
  7254 50D2 8D 23 A1			sta SET_BALL_SPEED.SPEED+1
  7255 50D5 AD 70 A1			lda BALL
  7256 50D8 8D 1E A1			sta SET_BALL_SPEED.BALL
  7257 50DB AD 71 A1			lda BALL+1
  7258 50DE 8D 1F A1			sta SET_BALL_SPEED.BALL+1
  7259 50E1 20 C3 44			jsr SET_BALL_SPEED
  7260 50E4			l_0EA0
  7261 50E4			l_0E0B
  7262 50E4			l_0DDC
  7263
  7264 				; optimize OK (service.pas), line = 1302
  7265
  7266 50E4 AC 70 A1 84 84 AC + 	mwy BALL :bp2
  7267 50EE A0 0A			ldy #BALL.OLDY-DATAORIGIN
  7268 50F0 B1 84			lda (:bp2),y
  7269 50F2 85 9F			sta :STACKORIGIN+9
  7270 50F4 C8				iny
  7271 50F5 B1 84			lda (:bp2),y
  7272 50F7 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  7273 50F9 A0 01			ldy #1
  7274 50FB A5 9F			lda :STACKORIGIN+9
  7275 50FD C9 B9			cmp #$B9
  7276 50FF A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  7277 5101 E9 00			sbc #$00
  7278 5103 50 02			svc
  7279 5105 49 80			eor #$80
  7280 5107 10 01			bpl @+
  7281 5109 88				dey
  7282 				@
  7283 510A 84 9F			sty :STACKORIGIN+9
  7284 510C A0 02			ldy #BALL.Y-DATAORIGIN
  7285 510E B1 84			lda (:bp2),y
  7286 5110 85 A0			sta :STACKORIGIN+10
  7287 5112 C8				iny
  7288 5113 B1 84			lda (:bp2),y
  7289 5115 85 B0			sta :STACKORIGIN+STACKWIDTH+10
  7290 5117 A0 01			ldy #1
  7291 5119 A5 A0			lda :STACKORIGIN+10
  7292 511B C9 C9			cmp #$C9
  7293 511D A5 B0			lda :STACKORIGIN+STACKWIDTH+10
  7294 511F E9 00			sbc #$00
  7295 5121 50 02			svc
  7296 5123 49 80			eor #$80
  7297 5125 10 01			bpl @+
  7298 5127 88				dey
  7299 				@
  7300 5128 98				tya
  7301 5129 25 9F			and :STACKORIGIN+9
  7302 512B 85 9F			sta :STACKORIGIN+9
  7303 512D A0 12			ldy #BALL.SPEEDY-DATAORIGIN
  7304 512F B1 84			lda (:bp2),y
  7305 5131 85 A0			sta :STACKORIGIN+10
  7306 5133 C8				iny
  7307 5134 B1 84			lda (:bp2),y
  7308 5136 85 B0			sta :STACKORIGIN+STACKWIDTH+10
  7309 5138 A0 01			ldy #1
  7310 513A A5 B0			lda :STACKORIGIN+STACKWIDTH+10
  7311 513C 30 04			bmi @+
  7312 513E 05 A0			ora :STACKORIGIN+10
  7313 5140 D0 01			sne
  7314 				@
  7315 5142 88				dey
  7316 				@
  7317 5143 98				tya
  7318 5144 25 9F			and :STACKORIGIN+9
  7319 5146 F0 15			jeq l_0EEF
  7320
  7321 				; optimize OK (service.pas), line = 1304
  7322
  7323 5148 A0 17			ldy #BALL.INPLAY-DATAORIGIN
  7324 514A A9 00			lda #$00
  7325 514C 91 84			sta (:bp2),y
  7326
  7327 				; optimize OK (service.pas), line = 1306
  7328
  7329 514E AD 70 A1			lda BALL
  7330 5151 8D 14 A1			sta REMOVE_BALL.BALL
  7331 5154 AD 71 A1			lda BALL+1
  7332 5157 8D 15 A1			sta REMOVE_BALL.BALL+1
  7333 515A 20 60 43			jsr REMOVE_BALL
  7334 515D			l_0EEF
  7335
  7336 				; ------------------------------------------------------------
  7337
  7338 = A170			BALL	= DATAORIGIN+$02CB
  7339 = 9EA5			BALL.X	= DATAORIGIN+$0000
  7340 = 9EA7			BALL.Y	= DATAORIGIN+$0002
  7341 = 9EA9			BALL.FINEX	= DATAORIGIN+$0004
  7342 = 9EAB			BALL.FINEY	= DATAORIGIN+$0006
  7343 = 9EAD			BALL.OLDX	= DATAORIGIN+$0008
  7344 = 9EAF			BALL.OLDY	= DATAORIGIN+$000A
  7345 = 9EB1			BALL.SPEED	= DATAORIGIN+$000C
  7346 = 9EB3			BALL.FINESPEED	= DATAORIGIN+$000E
  7347 = 9EB5			BALL.SPEEDX	= DATAORIGIN+$0010
  7348 = 9EB7			BALL.SPEEDY	= DATAORIGIN+$0012
  7349 = 9EB9			BALL.SBD	= DATAORIGIN+$0014
  7350 = 9EBB			BALL.BRWHIT	= DATAORIGIN+$0016
  7351 = 9EBC			BALL.INPLAY	= DATAORIGIN+$0017
  7352 = 9EBD			BALL.LAUNCH	= DATAORIGIN+$0018
  7353 = 9EBE			BALL.ONVAUS	= DATAORIGIN+$0019
  7354 = 9EC0			BALL.STM	= DATAORIGIN+$001B
  7355 = A174			B0	= DATAORIGIN+$02CF
  7356 = A175			B1	= DATAORIGIN+$02D0
  7357 = A176			B2	= DATAORIGIN+$02D1
  7358 = A177			X	= DATAORIGIN+$02D2
  7359 = A179			Y	= DATAORIGIN+$02D4
  7360 = A17B			ANGLE	= DATAORIGIN+$02D6
  7361
  7362 = A170			@VarData	= BALL
  7363 = 000B			@VarDataSize	= 11
  7364
  7365 515D			@exit
  7366 					.ifdef @new
  7367 					lda <@VarData
  7368 					sta :ztmp
  7369 					lda >@VarData
  7370 					ldy #@VarDataSize-1
  7371 					jmp @FreeMem
  7372 					els
  7373 515D 60				rts						; ret
  7374 					eif
  7375 				.endl
  7376
  7377 515E			.local	MODIFY_VAUS					; PROCEDURE
  7378
  7379 				; optimize OK (service.pas), line = 1313
  7380
  7381 515E AD 21 A0			lda VAUS.WIDTH
  7382 5161 8D 1F A0			sta VAUS.OLDLEN
  7383 5164 A9 00			lda #$00
  7384 5166 8D 20 A0			sta VAUS.OLDLEN+1
  7385
  7386 				; optimize OK (service.pas), line = 1314
  7387
  7388 5169 AD A9 9F			lda PLAYVAUS.WIDTH
  7389 516C 8D 21 A0			sta VAUS.WIDTH
  7390
  7391 				; optimize OK (service.pas), line = 1315
  7392
  7393 516F AD AB 9F			lda PLAYVAUS.HEIGHT
  7394 5172 8D 22 A0			sta VAUS.HEIGHT
  7395
  7396 5175			@exit
  7397 					.ifdef @new
  7398 					lda <@VarData
  7399 					sta :ztmp
  7400 					lda >@VarData
  7401 					ldy #@VarDataSize-1
  7402 					jmp @FreeMem
  7403 					els
  7404 5175 60				rts						; ret
  7405 					eif
  7406 				.endl
  7407
  7408 5176			.local	SET_VAUS					; PROCEDURE
  7409
  7410 				; optimize OK (service.pas), line = 1320
  7411
  7412 5176 A9 5F			lda #$5F
  7413 5178 8D 19 A0			sta VAUS.X
  7414
  7415 				; optimize OK (service.pas), line = 1321
  7416
  7417 517B A9 B8			lda #$B8
  7418 517D 8D 1A A0			sta VAUS.Y
  7419
  7420 				; optimize OK (service.pas), line = 1323
  7421
  7422 5180 A9 FF			lda #$FF
  7423 5182 8D 1B A0			sta VAUS.OLDX
  7424 5185 8D 1C A0			sta VAUS.OLDX+1
  7425
  7426 				; optimize OK (service.pas), line = 1324
  7427
  7428 5188 8D 1D A0			sta VAUS.OLDY
  7429 518B 8D 1E A0			sta VAUS.OLDY+1
  7430
  7431 				; optimize OK (service.pas), line = 1325
  7432
  7433 518E A9 00			lda #$00
  7434 5190 8D 24 A0			sta VAUS.IFLASH
  7435
  7436 				; optimize OK (service.pas), line = 1329
  7437
  7438 5193 8D 23 A0			sta VAUS.FLASH
  7439
  7440 				; optimize OK (service.pas), line = 1333
  7441
  7442 5196 AD A9 9F			lda PLAYVAUS.WIDTH
  7443 5199 8D 21 A0			sta VAUS.WIDTH
  7444
  7445 				; optimize OK (service.pas), line = 1334
  7446
  7447 519C AD AB 9F			lda PLAYVAUS.HEIGHT
  7448 519F 8D 22 A0			sta VAUS.HEIGHT
  7449
  7450 				; optimize OK (service.pas), line = 1335
  7451
  7452 51A2 AD 21 A0			lda VAUS.WIDTH
  7453 51A5 8D 1F A0			sta VAUS.OLDLEN
  7454 51A8 A9 00			lda #$00
  7455 51AA 8D 20 A0			sta VAUS.OLDLEN+1
  7456
  7457 				; optimize OK (service.pas), line = 1336
  7458
  7459 51AD A9 FF			lda #$FF
  7460 51AF 8D 25 A0			sta VAUS.LETTER
  7461
  7462 51B2			@exit
  7463 					.ifdef @new
  7464 					lda <@VarData
  7465 					sta :ztmp
  7466 					lda >@VarData
  7467 					ldy #@VarDataSize-1
  7468 					jmp @FreeMem
  7469 					els
  7470 51B2 60				rts						; ret
  7471 					eif
  7472 				.endl
  7473
  7474 51B3			.local	START_VAUS					; PROCEDURE
  7475
  7476 				; optimize OK (service.pas), line = 1345
  7477
  7478 51B3 A9 5F			lda #$5F
  7479 51B5 8D 19 A0			sta VAUS.X
  7480
  7481 				; optimize OK (service.pas), line = 1346
  7482
  7483 51B8 A9 B8			lda #$B8
  7484 51BA 8D 1A A0			sta VAUS.Y
  7485
  7486 51BD			@exit
  7487 					.ifdef @new
  7488 					lda <@VarData
  7489 					sta :ztmp
  7490 					lda >@VarData
  7491 					ldy #@VarDataSize-1
  7492 					jmp @FreeMem
  7493 					els
  7494 51BD 60				rts						; ret
  7495 					eif
  7496 				.endl
  7497
  7498 51BE			.local	REMOVE_VAUS					; PROCEDURE
  7499
  7500 				; optimize OK (service.pas), line = 1360
  7501
  7502 51BE AC 1D A0			ldy VAUS.OLDY
  7503 51C1 AD 1B A0			lda VAUS.OLDX
  7504 51C4 18 79 00 C0			add adr.ROW,y
  7505 51C8 8D 98 A0			sta HLP
  7506 51CB AD 1C A0			lda VAUS.OLDX+1
  7507 51CE 79 00 C1			adc adr.ROW+256,y
  7508 51D1 8D 99 A0			sta HLP+1
  7509
  7510 				; optimize OK (service.pas), line = 1362
  7511
  7512 51D4 AD 98 A0			lda HLP
  7513 51D7 8D A7 A0			sta BLITBOX.DST
  7514 51DA A9 50			lda #$50
  7515 51DC 18 6D 99 A0			add HLP+1
  7516 51E0 8D A8 A0			sta BLITBOX.DST+1
  7517 51E3 A9 00			lda #$00
  7518 51E5 69 00			adc #$00
  7519 51E7 8D A9 A0			sta BLITBOX.DST+2
  7520 51EA A9 00			lda #$00
  7521 51EC 69 00			adc #$00
  7522 51EE 8D AA A0			sta BLITBOX.DST+3
  7523 51F1 AD A5 9F			lda PLAYSCREEN.OFS
  7524 51F4 18 6D 98 A0			add HLP
  7525 51F8 8D A3 A0			sta BLITBOX.SRC
  7526 51FB AD A6 9F			lda PLAYSCREEN.OFS+1
  7527 51FE 6D 99 A0			adc HLP+1
  7528 5201 8D A4 A0			sta BLITBOX.SRC+1
  7529 5204 AD A7 9F			lda PLAYSCREEN.OFS+2
  7530 5207 69 00			adc #$00
  7531 5209 8D A5 A0			sta BLITBOX.SRC+2
  7532 520C AD A8 9F			lda PLAYSCREEN.OFS+3
  7533 520F 69 00			adc #$00
  7534 5211 8D A6 A0			sta BLITBOX.SRC+3
  7535 5214 AD 1F A0			lda VAUS.OLDLEN
  7536 5217 8D AB A0			sta BLITBOX.W
  7537 521A AD 20 A0			lda VAUS.OLDLEN+1
  7538 521D 8D AC A0			sta BLITBOX.W+1
  7539 5220 AD 22 A0			lda VAUS.HEIGHT
  7540 5223 8D AD A0			sta BLITBOX.H
  7541 5226 20 58 3A			jsr BLITBOX
  7542
  7543 				; optimize OK (service.pas), line = 1370
  7544
  7545 5229 AD 21 A0			lda VAUS.WIDTH
  7546 522C 8D 1F A0			sta VAUS.OLDLEN
  7547 522F A9 00			lda #$00
  7548 5231 8D 20 A0			sta VAUS.OLDLEN+1
  7549
  7550 5234			@exit
  7551 					.ifdef @new
  7552 					lda <@VarData
  7553 					sta :ztmp
  7554 					lda >@VarData
  7555 					ldy #@VarDataSize-1
  7556 					jmp @FreeMem
  7557 					els
  7558 5234 60				rts						; ret
  7559 					eif
  7560 				.endl
  7561
  7562 5235			.local	PLACE_VAUS					; PROCEDURE
  7563
  7564 				; optimize FAIL (0, service.pas), line = 1379
  7565
  7566 5235 EE 24 A0			inc VAUS.IFLASH
  7567
  7568 				; optimize OK (service.pas), line = 1381
  7569
  7570 5238 AD 24 A0			lda VAUS.IFLASH
  7571 523B C9 0B			cmp #$0B
  7572 523D 90 08			jcc l_0F8B
  7573
  7574 				; optimize FAIL (0, service.pas), line = 1383
  7575
  7576 523F EE 23 A0			inc VAUS.FLASH
  7577
  7578 				; optimize OK (service.pas), line = 1384
  7579
  7580 5242 A9 00			lda #$00
  7581 5244 8D 24 A0			sta VAUS.IFLASH
  7582 5247			l_0F8B
  7583
  7584 				; optimize OK (service.pas), line = 1387
  7585
  7586 5247 AD 23 A0			lda VAUS.FLASH
  7587 524A C9 0B			cmp #$0B
  7588 524C 90 05			jcc l_0FA8
  7589 524E A9 00			lda #$00
  7590 5250 8D 23 A0			sta VAUS.FLASH
  7591 5253			l_0FA8
  7592
  7593 				; optimize OK (service.pas), line = 1397
  7594
  7595 5253 A9 00			lda #$00
  7596 5255 8D 98 A0			sta HLP
  7597 5258 8D 99 A0			sta HLP+1
  7598
  7599 				; optimize OK (service.pas), line = 1399
  7600
  7601 525B 8D 7D A1			sta Y
  7602 525E AC 22 A0			ldy VAUS.HEIGHT
  7603 5261 88				dey
  7604 5262 8C 66 52			sty @FORTMP_0FBF_0
  7605
  7606 5265			l_0FC2
  7607 				; --- ForToDoCondition
  7608 5265 A9 00			lda @FORTMP_0FBF_0::#$00
  7609 5267 CD 7D A1			cmp Y
  7610 526A B0 03 4C A8 53		jcc l_0FD0
  7611
  7612 				; optimize OK (service.pas), line = 1405
  7613
  7614 526F AD 7D A1			lda Y
  7615 5272 18 6D 1A A0			add VAUS.Y
  7616 5276 A8				tay
  7617 5277 AD 19 A0			lda VAUS.X
  7618 527A 18 79 00 C0			add adr.ROW,y
  7619 527E 8D B2 A0			sta BLITZERO.DST
  7620 5281 A9 50			lda #$50
  7621 5283 79 00 C1			adc adr.ROW+256,y
  7622 5286 8D B3 A0			sta BLITZERO.DST+1
  7623 5289 A9 00			lda #$00
  7624 528B 69 00			adc #$00
  7625 528D 8D B4 A0			sta BLITZERO.DST+2
  7626 5290 A9 00			lda #$00
  7627 5292 69 00			adc #$00
  7628 5294 8D B5 A0			sta BLITZERO.DST+3
  7629 5297 AD AD 9F			lda PLAYVAUS.OFS
  7630 529A 18 6D 98 A0			add HLP
  7631 529E 8D AE A0			sta BLITZERO.SRC
  7632 52A1 AD AE 9F			lda PLAYVAUS.OFS+1
  7633 52A4 6D 99 A0			adc HLP+1
  7634 52A7 8D AF A0			sta BLITZERO.SRC+1
  7635 52AA AD AF 9F			lda PLAYVAUS.OFS+2
  7636 52AD 69 00			adc #$00
  7637 52AF 8D B0 A0			sta BLITZERO.SRC+2
  7638 52B2 AD B0 9F			lda PLAYVAUS.OFS+3
  7639 52B5 69 00			adc #$00
  7640 52B7 8D B1 A0			sta BLITZERO.SRC+3
  7641 52BA AD 21 A0			lda VAUS.WIDTH
  7642 52BD 8D B6 A0			sta BLITZERO.W
  7643 52C0 A9 00			lda #$00
  7644 52C2 8D B7 A0			sta BLITZERO.W+1
  7645 52C5 A9 01			lda #$01
  7646 52C7 8D B8 A0			sta BLITZERO.H
  7647 52CA 20 D9 3A			jsr BLITZERO
  7648
  7649 				; optimize OK (service.pas), line = 1407
  7650
  7651 52CD AD 7D A1			lda Y
  7652 52D0 C9 02			cmp #$02
  7653 52D2 B0 03 4C 91 53		jcc l_1014
  7654 52D7 AD 22 A0			lda VAUS.HEIGHT
  7655 52DA E9 02			sbc #$02
  7656 52DC 85 A1			sta :STACKORIGIN+11
  7657 52DE A9 00			lda #$00
  7658 52E0 E9 00			sbc #$00
  7659 52E2 85 B1			sta :STACKORIGIN+STACKWIDTH+11
  7660 52E4 AD 7D A1			lda Y
  7661 52E7 C5 A1			cmp :STACKORIGIN+11
  7662 52E9 A9 00			lda #$00
  7663 52EB E5 B1			sbc :STACKORIGIN+STACKWIDTH+11
  7664 52ED 50 02			svc
  7665 52EF 49 80			eor #$80
  7666 52F1 30 03 4C 91 53		jpl l_1014
  7667
  7668 				; optimize OK (service.pas), line = 1410
  7669
  7670 52F6 AC 23 A0			ldy VAUS.FLASH
  7671 52F9 B9 5E 20			lda adr.FLASH,y
  7672 52FC 8D CC A0			sta PUTBYTE.V
  7673 52FF AD 7D A1			lda Y
  7674 5302 18 6D 1A A0			add VAUS.Y
  7675 5306 A8				tay
  7676 5307 AD 19 A0			lda VAUS.X
  7677 530A 18 79 00 C0			add adr.ROW,y
  7678 530E 8D C8 A0			sta PUTBYTE.DST
  7679 5311 A9 50			lda #$50
  7680 5313 79 00 C1			adc adr.ROW+256,y
  7681 5316 8D C9 A0			sta PUTBYTE.DST+1
  7682 5319 A9 00			lda #$00
  7683 531B 69 00			adc #$00
  7684 531D 8D CA A0			sta PUTBYTE.DST+2
  7685 5320 A9 00			lda #$00
  7686 5322 69 00			adc #$00
  7687 5324 8D CB A0			sta PUTBYTE.DST+3
  7688 5327 20 02 3C			jsr PUTBYTE
  7689
  7690 				; optimize OK (service.pas), line = 1413
  7691
  7692 532A AC 23 A0			ldy VAUS.FLASH
  7693 532D B9 5E 20			lda adr.FLASH,y
  7694 5330 8D CC A0			sta PUTBYTE.V
  7695 5333 AD 19 A0			lda VAUS.X
  7696 5336 18 6D 21 A0			add VAUS.WIDTH
  7697 533A 85 A0			sta :STACKORIGIN+10
  7698 533C A9 50			lda #$50
  7699 533E 69 00			adc #$00
  7700 5340 85 B0			sta :STACKORIGIN+STACKWIDTH+10
  7701 5342 A9 00			lda #$00
  7702 5344 69 00			adc #$00
  7703 5346 85 C0			sta :STACKORIGIN+STACKWIDTH*2+10
  7704 5348 A9 00			lda #$00
  7705 534A 69 00			adc #$00
  7706 534C 85 D0			sta :STACKORIGIN+STACKWIDTH*3+10
  7707 534E A5 A0			lda :STACKORIGIN+10
  7708 5350 38 E9 01			sub #$01
  7709 5353 85 A0			sta :STACKORIGIN+10
  7710 5355 A5 B0			lda :STACKORIGIN+STACKWIDTH+10
  7711 5357 E9 00			sbc #$00
  7712 5359 85 B0			sta :STACKORIGIN+STACKWIDTH+10
  7713 535B A5 C0			lda :STACKORIGIN+STACKWIDTH*2+10
  7714 535D E9 00			sbc #$00
  7715 535F 85 C0			sta :STACKORIGIN+STACKWIDTH*2+10
  7716 5361 A5 D0			lda :STACKORIGIN+STACKWIDTH*3+10
  7717 5363 E9 00			sbc #$00
  7718 5365 85 D0			sta :STACKORIGIN+STACKWIDTH*3+10
  7719 5367 AD 7D A1			lda Y
  7720 536A 18 6D 1A A0			add VAUS.Y
  7721 536E A8				tay
  7722 536F A5 A0			lda :STACKORIGIN+10
  7723 5371 18 79 00 C0			add adr.ROW,y
  7724 5375 8D C8 A0			sta PUTBYTE.DST
  7725 5378 A5 B0			lda :STACKORIGIN+STACKWIDTH+10
  7726 537A 79 00 C1			adc adr.ROW+256,y
  7727 537D 8D C9 A0			sta PUTBYTE.DST+1
  7728 5380 A5 C0			lda :STACKORIGIN+STACKWIDTH*2+10
  7729 5382 69 00			adc #$00
  7730 5384 8D CA A0			sta PUTBYTE.DST+2
  7731 5387 A5 D0			lda :STACKORIGIN+STACKWIDTH*3+10
  7732 5389 69 00			adc #$00
  7733 538B 8D CB A0			sta PUTBYTE.DST+3
  7734 538E 20 02 3C			jsr PUTBYTE
  7735 5391			l_1014
  7736
  7737 				; optimize OK (service.pas), line = 1416
  7738
  7739 5391 AD 98 A0			lda HLP
  7740 5394 18 6D 21 A0			add VAUS.WIDTH
  7741 5398 8D 98 A0			sta HLP
  7742 539B 90 03			scc
  7743 539D EE 99 A0			inc HLP+1
  7744
  7745 				; --- ForToDoEpilog
  7746 53A0 EE 7D A1			inc Y
  7747 53A3 F0 03 4C 65 52		jne l_0FC2
  7748 53A8			l_0FD0
  7749
  7750 				; ------------------------------------------------------------
  7751
  7752 = A17D			Y	= DATAORIGIN+$02D8
  7753
  7754 = A17D			@VarData	= Y
  7755 = 0001			@VarDataSize	= 1
  7756
  7757 53A8			@exit
  7758 					.ifdef @new
  7759 					lda <@VarData
  7760 					sta :ztmp
  7761 					lda >@VarData
  7762 					ldy #@VarDataSize-1
  7763 					jmp @FreeMem
  7764 					els
  7765 53A8 60				rts						; ret
  7766 					eif
  7767 				.endl
  7768
  7769 53A9			.local	MOVE_VAUS					; PROCEDURE
  7770
  7771 				; optimize OK (service.pas), line = 1427
  7772
  7773 53A9 A0 01			ldy #1
  7774 53AB AD 1C A0			lda VAUS.OLDX+1
  7775 53AE C9 FF			cmp #$FF
  7776 53B0 D0 05			bne @+
  7777 53B2 AD 1B A0			lda VAUS.OLDX
  7778 53B5 C9 FF			cmp #$FF
  7779 				@
  7780 53B7 D0 01			bne @+
  7781 53B9 88				dey
  7782 				@
  7783 53BA 84 9F			sty :STACKORIGIN+9
  7784 53BC A0 01			ldy #1
  7785 53BE AD 1C A0			lda VAUS.OLDX+1
  7786 53C1 C9 00			cmp #$00
  7787 53C3 D0 06			bne @+
  7788 53C5 AD 1B A0			lda VAUS.OLDX
  7789 53C8 CD 19 A0			cmp VAUS.X
  7790 				@
  7791 53CB D0 01			bne @+
  7792 53CD 88				dey
  7793 				@
  7794 53CE 98				tya
  7795 53CF 25 9F			and :STACKORIGIN+9
  7796 53D1 85 9F			sta :STACKORIGIN+9
  7797 53D3 A0 01			ldy #1
  7798 53D5 A9 00			lda #$00
  7799 53D7 CD 20 A0			cmp VAUS.OLDLEN+1
  7800 53DA D0 06			bne @+
  7801 53DC AD 21 A0			lda VAUS.WIDTH
  7802 53DF CD 1F A0			cmp VAUS.OLDLEN
  7803 				@
  7804 53E2 D0 01			bne @+
  7805 53E4 88				dey
  7806 				@
  7807 53E5 98				tya
  7808 53E6 05 9F			ora :STACKORIGIN+9
  7809 53E8 F0 03			jeq l_1090
  7810
  7811 				; optimize FAIL ('REMOVE_VAUS', service.pas), line = 1428
  7812
  7813 53EA 20 BE 51			jsr REMOVE_VAUS
  7814 53ED			l_1090
  7815
  7816 				; optimize OK (service.pas), line = 1430
  7817
  7818 53ED AD 19 A0			lda VAUS.X
  7819 53F0 8D 1B A0			sta VAUS.OLDX
  7820 53F3 A9 00			lda #$00
  7821 53F5 8D 1C A0			sta VAUS.OLDX+1
  7822
  7823 				; optimize OK (service.pas), line = 1431
  7824
  7825 53F8 AD 1A A0			lda VAUS.Y
  7826 53FB 8D 1D A0			sta VAUS.OLDY
  7827 53FE A9 00			lda #$00
  7828 5400 8D 1E A0			sta VAUS.OLDY+1
  7829
  7830 				; optimize OK (service.pas), line = 1438
  7831
  7832 5403 A9 D8			lda #$D8
  7833 5405 38 ED 21 A0			sub VAUS.WIDTH
  7834 5409 8D DC A0			sta MIN.B
  7835 540C A9 00			lda #$00
  7836 540E E9 00			sbc #$00
  7837 5410 8D DD A0			sta MIN.B+1
  7838 5413 AD 7F A1			lda X
  7839 5416 8D DA A0			sta MIN.A
  7840 5419 AD 80 A1			lda X+1
  7841 541C 8D DB A0			sta MIN.A+1
  7842 541F 20 7F 3C			jsr MIN
  7843 5422 A9 0A			lda #$0A
  7844 5424 8D D4 A0			sta MAX.A
  7845 5427 A9 00			lda #$00
  7846 5429 8D D5 A0			sta MAX.A+1
  7847 542C AD DE A0			lda MIN.RESULT
  7848 542F 8D D6 A0			sta MAX.B
  7849 5432 AD DF A0			lda MIN.RESULT+1
  7850 5435 8D D7 A0			sta MAX.B+1
  7851 5438 20 54 3C			jsr MAX
  7852 543B AD D8 A0			lda MAX.RESULT
  7853 543E 8D 19 A0			sta VAUS.X
  7854
  7855 				; optimize OK (service.pas), line = 1439
  7856
  7857 5441 A9 C8			lda #$C8
  7858 5443 38 ED 22 A0			sub VAUS.HEIGHT
  7859 5447 8D DC A0			sta MIN.B
  7860 544A A9 00			lda #$00
  7861 544C E9 00			sbc #$00
  7862 544E 8D DD A0			sta MIN.B+1
  7863 5451 AD 81 A1			lda Y
  7864 5454 8D DA A0			sta MIN.A
  7865 5457 AD 82 A1			lda Y+1
  7866 545A 8D DB A0			sta MIN.A+1
  7867 545D 20 7F 3C			jsr MIN
  7868 5460 A9 0C			lda #$0C
  7869 5462 8D D4 A0			sta MAX.A
  7870 5465 A9 00			lda #$00
  7871 5467 8D D5 A0			sta MAX.A+1
  7872 546A AD DE A0			lda MIN.RESULT
  7873 546D 8D D6 A0			sta MAX.B
  7874 5470 AD DF A0			lda MIN.RESULT+1
  7875 5473 8D D7 A0			sta MAX.B+1
  7876 5476 20 54 3C			jsr MAX
  7877 5479 AD D8 A0			lda MAX.RESULT
  7878 547C 8D 1A A0			sta VAUS.Y
  7879
  7880 				; optimize FAIL ('PLACE_VAUS', service.pas), line = 1441
  7881
  7882 547F 20 35 52			jsr PLACE_VAUS
  7883
  7884 				; ------------------------------------------------------------
  7885
  7886 = A17F			X	= DATAORIGIN+$02DA
  7887 = A181			Y	= DATAORIGIN+$02DC
  7888
  7889 = A17F			@VarData	= X
  7890 = 0004			@VarDataSize	= 4
  7891
  7892 5482			@exit
  7893 					.ifdef @new
  7894 					lda <@VarData
  7895 					sta :ztmp
  7896 					lda >@VarData
  7897 					ldy #@VarDataSize-1
  7898 					jmp @FreeMem
  7899 					els
  7900 5482 60				rts						; ret
  7901 					eif
  7902 				.endl
  7903
  7904 5483			.local	REMOVE_BLOCK					; PROCEDURE
  7905
  7906 				; optimize OK (service.pas), line = 1456
  7907
  7908 5483 AD 83 A1			lda XA
  7909 5486 85 9F			sta :STACKORIGIN+9
  7910 5488 A9 00			lda #$00
  7911 548A 06 9F			asl :STACKORIGIN+9
  7912 548C 2A				rol @
  7913 548D 06 9F			asl :STACKORIGIN+9
  7914 548F 2A				rol @
  7915 5490 06 9F			asl :STACKORIGIN+9
  7916 5492 2A				rol @
  7917 5493 06 9F			asl :STACKORIGIN+9
  7918 5495 2A				rol @
  7919 5496 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  7920 5498 A5 9F			lda :STACKORIGIN+9
  7921 549A 18 69 09			add #$09
  7922 549D 8D 88 A1			sta XS
  7923 54A0 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  7924 54A2 69 00			adc #$00
  7925 54A4 8D 89 A1			sta XS+1
  7926
  7927 				; optimize OK (service.pas), line = 1457
  7928
  7929 54A7 AD 84 A1			lda YA
  7930 54AA 85 9F			sta :STACKORIGIN+9
  7931 54AC A9 00			lda #$00
  7932 54AE 06 9F			asl :STACKORIGIN+9
  7933 54B0 2A				rol @
  7934 54B1 06 9F			asl :STACKORIGIN+9
  7935 54B3 2A				rol @
  7936 54B4 06 9F			asl :STACKORIGIN+9
  7937 54B6 2A				rol @
  7938 54B7 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  7939 54B9 A5 9F			lda :STACKORIGIN+9
  7940 54BB 18 69 16			add #$16
  7941 54BE 8D 8A A1			sta YS
  7942 54C1 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  7943 54C3 69 00			adc #$00
  7944 54C5 8D 8B A1			sta YS+1
  7945
  7946 				; optimize OK (service.pas), line = 1459
  7947
  7948 54C8 A9 00			lda #$00
  7949 54CA 8D 86 A1			sta Y
  7950
  7951 54CD			l_10E8
  7952 				; --- ForToDoCondition
  7953 54CD AD 86 A1			lda Y
  7954 54D0 C9 08			cmp #$08
  7955 54D2 90 03 4C 4C 56		jcs l_10F6
  7956
  7957 				; optimize OK (service.pas), line = 1461
  7958
  7959 54D7 AD 8A A1			lda YS
  7960 54DA 6D 86 A1			adc Y
  7961 54DD A8				tay
  7962 54DE B9 00 C3			lda adr.MODY,y
  7963 54E1 85 86			sta :eax
  7964 54E3 A9 00			lda #$00
  7965 54E5 85 87			sta :eax+1
  7966 54E7 AD 26 A0			lda PATTERN.WIDTH
  7967 54EA 85 8E			sta :ecx
  7968 54EC AD 27 A0			lda PATTERN.WIDTH+1
  7969 54EF 85 8F			sta :ecx+1
  7970 					.ifdef fmulinit
  7971 					fmulu_16
  7972 					els
  7973 54F1 20 4F 23			imulCX_AL
  7974 					eif
  7975 54F4 A5 86			lda :eax
  7976 54F6 8D 8C A1			sta YH
  7977 54F9 A5 87			lda :eax+1
  7978 54FB 8D 8D A1			sta YH+1
  7979
  7980 				; optimize OK (service.pas), line = 1469
  7981
  7982 54FE AD 86 A1			lda Y
  7983 5501 18 6D 8A A1			add YS
  7984 5505 A8				tay
  7985 5506 AD 88 A1			lda XS
  7986 5509 18 79 00 C0			add adr.ROW,y
  7987 550D 8D 98 A0			sta HLP
  7988 5510 AD 89 A1			lda XS+1
  7989 5513 79 00 C1			adc adr.ROW+256,y
  7990 5516 8D 99 A0			sta HLP+1
  7991
  7992 				; optimize OK (service.pas), line = 1471
  7993
  7994 5519 A9 00			lda #$00
  7995 551B 8D 87 A1			sta I
  7996
  7997 				; optimize OK (service.pas), line = 1473
  7998
  7999 551E 8D 85 A1			sta X
  8000
  8001 5521			l_1128
  8002 				; --- ForToDoCondition
  8003 5521 AD 85 A1			lda X
  8004 5524 C9 10			cmp #$10
  8005 5526 90 03 4C F2 55		jcs l_1136
  8006
  8007 				; optimize OK (service.pas), line = 1474
  8008
  8009 552B 6D 88 A1			adc XS
  8010 552E 85 9F			sta :STACKORIGIN+9
  8011 5530 A9 00			lda #$00
  8012 5532 6D 89 A1			adc XS+1
  8013 5535 C9 00			cmp #$00
  8014 5537 D0 04			bne @+
  8015 5539 A5 9F			lda :STACKORIGIN+9
  8016 553B C9 D8			cmp #$D8
  8017 				@
  8018 553D 90 03 4C EA 55		jcs l_114D
  8019
  8020 				; optimize OK (service.pas), line = 1480
  8021
  8022 5542 AD A5 9F			lda PLAYSCREEN.OFS
  8023 5545 6D 98 A0			adc HLP
  8024 5548 85 9F			sta :STACKORIGIN+9
  8025 554A AD A6 9F			lda PLAYSCREEN.OFS+1
  8026 554D 6D 99 A0			adc HLP+1
  8027 5550 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  8028 5552 AD A7 9F			lda PLAYSCREEN.OFS+2
  8029 5555 69 00			adc #$00
  8030 5557 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
  8031 5559 AD A8 9F			lda PLAYSCREEN.OFS+3
  8032 555C 69 00			adc #$00
  8033 555E 85 CF			sta :STACKORIGIN+STACKWIDTH*3+9
  8034 5560 A5 9F			lda :STACKORIGIN+9
  8035 5562 18 6D 85 A1			add X
  8036 5566 8D CD A0			sta GETBYTE.SRC
  8037 5569 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  8038 556B 69 00			adc #$00
  8039 556D 8D CE A0			sta GETBYTE.SRC+1
  8040 5570 A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
  8041 5572 69 00			adc #$00
  8042 5574 8D CF A0			sta GETBYTE.SRC+2
  8043 5577 A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
  8044 5579 69 00			adc #$00
  8045 557B 8D D0 A0			sta GETBYTE.SRC+3
  8046 557E 20 2A 3C			jsr GETBYTE
  8047 5581 AD D1 A0			lda GETBYTE.RESULT
  8048 5584 29 80			and #$80
  8049 5586 8D 8F A1			sta SHADOW
  8050
  8051 				; optimize OK (service.pas), line = 1484
  8052
  8053 5589 AD 85 A1			lda X
  8054 558C 18 6D 88 A1			add XS
  8055 5590 A8				tay
  8056 5591 B9 00 C4			lda adr.MODX,y
  8057 5594 18 6D 2A A0			add PATTERN.OFS
  8058 5598 85 9F			sta :STACKORIGIN+9
  8059 559A AD 2B A0			lda PATTERN.OFS+1
  8060 559D 69 00			adc #$00
  8061 559F 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  8062 55A1 AD 2C A0			lda PATTERN.OFS+2
  8063 55A4 69 00			adc #$00
  8064 55A6 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
  8065 55A8 AD 2D A0			lda PATTERN.OFS+3
  8066 55AB 69 00			adc #$00
  8067 55AD 85 CF			sta :STACKORIGIN+STACKWIDTH*3+9
  8068 55AF A5 9F			lda :STACKORIGIN+9
  8069 55B1 18 6D 8C A1			add YH
  8070 55B5 8D CD A0			sta GETBYTE.SRC
  8071 55B8 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  8072 55BA 6D 8D A1			adc YH+1
  8073 55BD 8D CE A0			sta GETBYTE.SRC+1
  8074 55C0 A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
  8075 55C2 69 00			adc #$00
  8076 55C4 8D CF A0			sta GETBYTE.SRC+2
  8077 55C7 A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
  8078 55C9 69 00			adc #$00
  8079 55CB 8D D0 A0			sta GETBYTE.SRC+3
  8080 55CE 20 2A 3C			jsr GETBYTE
  8081 55D1 E8				inx
  8082 55D2 AD D1 A0			lda GETBYTE.RESULT
  8083 55D5 29 7F			and #$7F
  8084 55D7 0D 8F A1			ora SHADOW
  8085 55DA 8D 8E A1			sta CL
  8086 55DD CA				dex
  8087
  8088 				; optimize OK (service.pas), line = 1486
  8089
  8090 55DE AC 87 A1			ldy I
  8091 55E1 AD 8E A1			lda CL
  8092 55E4 99 00 C2			sta adr.TMP,y
  8093
  8094 				; optimize FAIL (0, service.pas), line = 1487
  8095
  8096 55E7 EE 87 A1			inc I
  8097 55EA			l_114D
  8098
  8099 				; --- ForToDoEpilog
  8100 55EA EE 85 A1			inc X
  8101 55ED F0 03 4C 21 55		jne l_1128
  8102 55F2			l_1136
  8103
  8104 				; optimize OK (service.pas), line = 1499
  8105
  8106 55F2 AD 98 A0			lda HLP
  8107 55F5 8D B9 A0			sta BLITTMP.DST
  8108 55F8 A9 50			lda #$50
  8109 55FA 18 6D 99 A0			add HLP+1
  8110 55FE 8D BA A0			sta BLITTMP.DST+1
  8111 5601 A9 00			lda #$00
  8112 5603 69 00			adc #$00
  8113 5605 8D BB A0			sta BLITTMP.DST+2
  8114 5608 A9 00			lda #$00
  8115 560A 69 00			adc #$00
  8116 560C 8D BC A0			sta BLITTMP.DST+3
  8117 560F AD 87 A1			lda I
  8118 5612 8D BD A0			sta BLITTMP.SIZE
  8119 5615 20 57 3B			jsr BLITTMP
  8120
  8121 				; optimize OK (service.pas), line = 1500
  8122
  8123 5618 AD A5 9F			lda PLAYSCREEN.OFS
  8124 561B 18 6D 98 A0			add HLP
  8125 561F 8D B9 A0			sta BLITTMP.DST
  8126 5622 AD A6 9F			lda PLAYSCREEN.OFS+1
  8127 5625 6D 99 A0			adc HLP+1
  8128 5628 8D BA A0			sta BLITTMP.DST+1
  8129 562B AD A7 9F			lda PLAYSCREEN.OFS+2
  8130 562E 69 00			adc #$00
  8131 5630 8D BB A0			sta BLITTMP.DST+2
  8132 5633 AD A8 9F			lda PLAYSCREEN.OFS+3
  8133 5636 69 00			adc #$00
  8134 5638 8D BC A0			sta BLITTMP.DST+3
  8135 563B AD 87 A1			lda I
  8136 563E 8D BD A0			sta BLITTMP.SIZE
  8137 5641 20 57 3B			jsr BLITTMP
  8138
  8139 				; --- ForToDoEpilog
  8140 5644 EE 86 A1			inc Y
  8141 5647 F0 03 4C CD 54		jne l_10E8
  8142 564C			l_10F6
  8143
  8144 				; optimize OK (service.pas), line = 1510
  8145
  8146 564C AD 8A A1			lda YS
  8147 564F 18 69 04			add #$04
  8148 5652 8D 86 A1			sta Y
  8149 5655 AD 8A A1			lda YS
  8150 5658 18 69 0C			add #$0C
  8151 565B 8D 5F 56			sta @FORTMP_11C1_0
  8152
  8153 565E			l_11C4
  8154 				; --- ForToDoCondition
  8155 565E A9 00			lda @FORTMP_11C1_0::#$00
  8156 5660 CD 86 A1			cmp Y
  8157 5663 B0 03 4C 6E 57		jcc l_11D2
  8158
  8159 				; optimize OK (service.pas), line = 1512
  8160
  8161 5668 A9 00			lda #$00
  8162 566A 8D 87 A1			sta I
  8163
  8164 				; optimize OK (service.pas), line = 1513
  8165
  8166 566D AC 86 A1			ldy Y
  8167 5670 B9 00 C0			lda adr.ROW,y
  8168 5673 8D 98 A0			sta HLP
  8169 5676 B9 00 C1			lda adr.ROW+256,y
  8170 5679 8D 99 A0			sta HLP+1
  8171
  8172 				; optimize OK (service.pas), line = 1515
  8173
  8174 567C AD 88 A1			lda XS
  8175 567F 18 69 08			add #$08
  8176 5682 8D 85 A1			sta X
  8177 5685 AD 88 A1			lda XS
  8178 5688 18 69 18			add #$18
  8179 568B 8D 8F 56			sta @FORTMP_11EE_0
  8180
  8181 568E			l_11F1
  8182 				; --- ForToDoCondition
  8183 568E A9 00			lda @FORTMP_11EE_0::#$00
  8184 5690 CD 85 A1			cmp X
  8185 5693 90 5F			jcc l_11FF
  8186
  8187 				; optimize OK (service.pas), line = 1531
  8188
  8189 5695 AD 85 A1			lda X
  8190 5698 C9 D8			cmp #$D8
  8191 569A B0 53			jcs l_1211
  8192
  8193 				; optimize OK (service.pas), line = 1535
  8194
  8195 569C AD A5 9F			lda PLAYSCREEN.OFS
  8196 569F 6D 98 A0			adc HLP
  8197 56A2 85 9F			sta :STACKORIGIN+9
  8198 56A4 AD A6 9F			lda PLAYSCREEN.OFS+1
  8199 56A7 6D 99 A0			adc HLP+1
  8200 56AA 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  8201 56AC AD A7 9F			lda PLAYSCREEN.OFS+2
  8202 56AF 69 00			adc #$00
  8203 56B1 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
  8204 56B3 AD A8 9F			lda PLAYSCREEN.OFS+3
  8205 56B6 69 00			adc #$00
  8206 56B8 85 CF			sta :STACKORIGIN+STACKWIDTH*3+9
  8207 56BA A5 9F			lda :STACKORIGIN+9
  8208 56BC 18 6D 85 A1			add X
  8209 56C0 8D CD A0			sta GETBYTE.SRC
  8210 56C3 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  8211 56C5 69 00			adc #$00
  8212 56C7 8D CE A0			sta GETBYTE.SRC+1
  8213 56CA A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
  8214 56CC 69 00			adc #$00
  8215 56CE 8D CF A0			sta GETBYTE.SRC+2
  8216 56D1 A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
  8217 56D3 69 00			adc #$00
  8218 56D5 8D D0 A0			sta GETBYTE.SRC+3
  8219 56D8 20 2A 3C			jsr GETBYTE
  8220 56DB AD D1 A0			lda GETBYTE.RESULT
  8221 56DE 09 80			ora #$80
  8222 56E0 8D 8E A1			sta CL
  8223
  8224 				; optimize OK (service.pas), line = 1537
  8225
  8226 56E3 AC 87 A1			ldy I
  8227 56E6 AD 8E A1			lda CL
  8228 56E9 99 00 C2			sta adr.TMP,y
  8229
  8230 				; optimize FAIL (0, service.pas), line = 1538
  8231
  8232 56EC EE 87 A1			inc I
  8233 56EF			l_1211
  8234
  8235 				; --- ForToDoEpilog
  8236 56EF EE 85 A1			inc X
  8237 56F2 D0 9A			jne l_11F1
  8238 56F4			l_11FF
  8239
  8240 				; optimize OK (service.pas), line = 1550
  8241
  8242 56F4 AD 88 A1			lda XS
  8243 56F7 18 69 08			add #$08
  8244 56FA 85 9F			sta :STACKORIGIN+9
  8245 56FC AD 89 A1			lda XS+1
  8246 56FF 69 00			adc #$00
  8247 5701 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  8248 5703 AD 98 A0			lda HLP
  8249 5706 18 65 9F			add :STACKORIGIN+9
  8250 5709 8D 98 A0			sta HLP
  8251 570C AD 99 A0			lda HLP+1
  8252 570F 65 AF			adc :STACKORIGIN+STACKWIDTH+9
  8253 5711 8D 99 A0			sta HLP+1
  8254
  8255 				; optimize OK (service.pas), line = 1552
  8256
  8257 5714 AD 98 A0			lda HLP
  8258 5717 8D B9 A0			sta BLITTMP.DST
  8259 571A A9 50			lda #$50
  8260 571C 18 6D 99 A0			add HLP+1
  8261 5720 8D BA A0			sta BLITTMP.DST+1
  8262 5723 A9 00			lda #$00
  8263 5725 69 00			adc #$00
  8264 5727 8D BB A0			sta BLITTMP.DST+2
  8265 572A A9 00			lda #$00
  8266 572C 69 00			adc #$00
  8267 572E 8D BC A0			sta BLITTMP.DST+3
  8268 5731 AD 87 A1			lda I
  8269 5734 8D BD A0			sta BLITTMP.SIZE
  8270 5737 20 57 3B			jsr BLITTMP
  8271
  8272 				; optimize OK (service.pas), line = 1553
  8273
  8274 573A AD A5 9F			lda PLAYSCREEN.OFS
  8275 573D 18 6D 98 A0			add HLP
  8276 5741 8D B9 A0			sta BLITTMP.DST
  8277 5744 AD A6 9F			lda PLAYSCREEN.OFS+1
  8278 5747 6D 99 A0			adc HLP+1
  8279 574A 8D BA A0			sta BLITTMP.DST+1
  8280 574D AD A7 9F			lda PLAYSCREEN.OFS+2
  8281 5750 69 00			adc #$00
  8282 5752 8D BB A0			sta BLITTMP.DST+2
  8283 5755 AD A8 9F			lda PLAYSCREEN.OFS+3
  8284 5758 69 00			adc #$00
  8285 575A 8D BC A0			sta BLITTMP.DST+3
  8286 575D AD 87 A1			lda I
  8287 5760 8D BD A0			sta BLITTMP.SIZE
  8288 5763 20 57 3B			jsr BLITTMP
  8289
  8290 				; --- ForToDoEpilog
  8291 5766 EE 86 A1			inc Y
  8292 5769 F0 03 4C 5E 56		jne l_11C4
  8293 576E			l_11D2
  8294
  8295 				; ------------------------------------------------------------
  8296
  8297 = A183			XA	= DATAORIGIN+$02DE
  8298 = A184			YA	= DATAORIGIN+$02DF
  8299 = A185			X	= DATAORIGIN+$02E0
  8300 = A186			Y	= DATAORIGIN+$02E1
  8301 = A187			I	= DATAORIGIN+$02E2
  8302 = A188			XS	= DATAORIGIN+$02E3
  8303 = A18A			YS	= DATAORIGIN+$02E5
  8304 = A18C			YH	= DATAORIGIN+$02E7
  8305 = A18E			CL	= DATAORIGIN+$02E9
  8306 = A18F			SHADOW	= DATAORIGIN+$02EA
  8307
  8308 = A183			@VarData	= XA
  8309 = 000D			@VarDataSize	= 13
  8310
  8311 576E			@exit
  8312 					.ifdef @new
  8313 					lda <@VarData
  8314 					sta :ztmp
  8315 					lda >@VarData
  8316 					ldy #@VarDataSize-1
  8317 					jmp @FreeMem
  8318 					els
  8319 576E 60				rts						; ret
  8320 					eif
  8321 				.endl
  8322
  8323 576F			.local	PLACE_BLOCK					; PROCEDURE
  8324
  8325 				; optimize OK (service.pas), line = 1570
  8326
  8327 576F AD 92 A1			lda XA
  8328 5772 85 9F			sta :STACKORIGIN+9
  8329 5774 A9 00			lda #$00
  8330 5776 06 9F			asl :STACKORIGIN+9
  8331 5778 2A				rol @
  8332 5779 06 9F			asl :STACKORIGIN+9
  8333 577B 2A				rol @
  8334 577C 06 9F			asl :STACKORIGIN+9
  8335 577E 2A				rol @
  8336 577F 06 9F			asl :STACKORIGIN+9
  8337 5781 2A				rol @
  8338 5782 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  8339 5784 A5 9F			lda :STACKORIGIN+9
  8340 5786 18 69 09			add #$09
  8341 5789 8D 98 A1			sta XS
  8342 578C A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  8343 578E 69 00			adc #$00
  8344 5790 8D 99 A1			sta XS+1
  8345
  8346 				; optimize OK (service.pas), line = 1571
  8347
  8348 5793 AD 93 A1			lda YA
  8349 5796 85 9F			sta :STACKORIGIN+9
  8350 5798 A9 00			lda #$00
  8351 579A 06 9F			asl :STACKORIGIN+9
  8352 579C 2A				rol @
  8353 579D 06 9F			asl :STACKORIGIN+9
  8354 579F 2A				rol @
  8355 57A0 06 9F			asl :STACKORIGIN+9
  8356 57A2 2A				rol @
  8357 57A3 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  8358 57A5 A5 9F			lda :STACKORIGIN+9
  8359 57A7 18 69 16			add #$16
  8360 57AA 8D 9A A1			sta YS
  8361 57AD A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  8362 57AF 69 00			adc #$00
  8363 57B1 8D 9B A1			sta YS+1
  8364
  8365 				; optimize OK (service.pas), line = 1573
  8366
  8367 57B4 A9 00			lda #$00
  8368 57B6 8D 96 A1			sta Y
  8369
  8370 57B9			l_1282
  8371 				; --- ForToDoCondition
  8372 57B9 AD 96 A1			lda Y
  8373 57BC C9 08			cmp #$08
  8374 57BE 90 03 4C CC 58		jcs l_1290
  8375
  8376 				; optimize OK (service.pas), line = 1575
  8377
  8378 57C3 AD 9A A1			lda YS
  8379 57C6 6D 96 A1			adc Y
  8380 57C9 A8				tay
  8381 57CA AD 98 A1			lda XS
  8382 57CD 18 79 00 C0			add adr.ROW,y
  8383 57D1 8D 98 A0			sta HLP
  8384 57D4 AD 99 A1			lda XS+1
  8385 57D7 79 00 C1			adc adr.ROW+256,y
  8386 57DA 8D 99 A0			sta HLP+1
  8387
  8388 				; optimize OK (service.pas), line = 1577
  8389
  8390 57DD A9 00			lda #$00
  8391 57DF 8D 95 A1			sta X
  8392
  8393 57E2			l_12AB
  8394 				; --- ForToDoCondition
  8395 57E2 AD 95 A1			lda X
  8396 57E5 C9 10			cmp #$10
  8397 57E7 90 03 4C 74 58		jcs l_12B9
  8398
  8399 				; optimize OK (service.pas), line = 1582
  8400
  8401 57EC AD A5 9F			lda PLAYSCREEN.OFS
  8402 57EF 6D 98 A0			adc HLP
  8403 57F2 85 9F			sta :STACKORIGIN+9
  8404 57F4 AD A6 9F			lda PLAYSCREEN.OFS+1
  8405 57F7 6D 99 A0			adc HLP+1
  8406 57FA 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  8407 57FC AD A7 9F			lda PLAYSCREEN.OFS+2
  8408 57FF 69 00			adc #$00
  8409 5801 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
  8410 5803 AD A8 9F			lda PLAYSCREEN.OFS+3
  8411 5806 69 00			adc #$00
  8412 5808 85 CF			sta :STACKORIGIN+STACKWIDTH*3+9
  8413 580A A5 9F			lda :STACKORIGIN+9
  8414 580C 18 6D 95 A1			add X
  8415 5810 8D CD A0			sta GETBYTE.SRC
  8416 5813 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  8417 5815 69 00			adc #$00
  8418 5817 8D CE A0			sta GETBYTE.SRC+1
  8419 581A A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
  8420 581C 69 00			adc #$00
  8421 581E 8D CF A0			sta GETBYTE.SRC+2
  8422 5821 A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
  8423 5823 69 00			adc #$00
  8424 5825 8D D0 A0			sta GETBYTE.SRC+3
  8425 5828 20 2A 3C			jsr GETBYTE
  8426 582B AD D1 A0			lda GETBYTE.RESULT
  8427 582E 29 80			and #$80
  8428 5830 8D 9E A1			sta SHADOW
  8429
  8430 				; optimize OK (service.pas), line = 1584
  8431
  8432 5833 AD 96 A1			lda Y
  8433 5836 C9 07			cmp #$07
  8434 5838 B0 29			jcs l_12EB
  8435 583A AD 95 A1			lda X
  8436 583D C9 0F			cmp #$0F
  8437 583F B0 22			jcs l_12EB
  8438
  8439 				; optimize OK (service.pas), line = 1589
  8440
  8441 5841 AD 94 A1			lda BLOCK
  8442 5844 38 E9 01			sub #$01
  8443 5847 85 9F			sta :STACKORIGIN+9
  8444 5849 A9 00			lda #$00
  8445 584B E9 00			sbc #$00
  8446 584D A5 9F			lda :STACKORIGIN+9
  8447 584F 29 0F			and #$0F
  8448 5851 A8				tay
  8449 5852 B9 88 20			lda adr.COLORBLOCK,y
  8450 5855 29 7F			and #$7F
  8451 5857 0D 9E A1			ora SHADOW
  8452 585A 8D 9C A1			sta CL
  8453
  8454 				; optimize OK (service.pas), line = 1591
  8455
  8456 585D AC 95 A1			ldy X
  8457 5860 4C 69 58			jmp l_1319
  8458 5863			l_12EB
  8459
  8460 				; optimize OK (service.pas), line = 1604
  8461
  8462 5863 AC 95 A1			ldy X
  8463 5866 AD 9E A1			lda SHADOW
  8464 5869			l_1319
  8465 5869 99 00 C2			sta adr.TMP,y
  8466
  8467 				; --- ForToDoEpilog
  8468 586C EE 95 A1			inc X
  8469 586F F0 03 4C E2 57		jne l_12AB
  8470 5874			l_12B9
  8471
  8472 				; optimize OK (service.pas), line = 1615
  8473
  8474 5874 AD 98 A0			lda HLP
  8475 5877 8D B9 A0			sta BLITTMP.DST
  8476 587A A9 50			lda #$50
  8477 587C 18 6D 99 A0			add HLP+1
  8478 5880 8D BA A0			sta BLITTMP.DST+1
  8479 5883 A9 00			lda #$00
  8480 5885 69 00			adc #$00
  8481 5887 8D BB A0			sta BLITTMP.DST+2
  8482 588A A9 00			lda #$00
  8483 588C 69 00			adc #$00
  8484 588E 8D BC A0			sta BLITTMP.DST+3
  8485 5891 A9 10			lda #$10
  8486 5893 8D BD A0			sta BLITTMP.SIZE
  8487 5896 20 57 3B			jsr BLITTMP
  8488
  8489 				; optimize OK (service.pas), line = 1616
  8490
  8491 5899 AD A5 9F			lda PLAYSCREEN.OFS
  8492 589C 18 6D 98 A0			add HLP
  8493 58A0 8D B9 A0			sta BLITTMP.DST
  8494 58A3 AD A6 9F			lda PLAYSCREEN.OFS+1
  8495 58A6 6D 99 A0			adc HLP+1
  8496 58A9 8D BA A0			sta BLITTMP.DST+1
  8497 58AC AD A7 9F			lda PLAYSCREEN.OFS+2
  8498 58AF 69 00			adc #$00
  8499 58B1 8D BB A0			sta BLITTMP.DST+2
  8500 58B4 AD A8 9F			lda PLAYSCREEN.OFS+3
  8501 58B7 69 00			adc #$00
  8502 58B9 8D BC A0			sta BLITTMP.DST+3
  8503 58BC A9 10			lda #$10
  8504 58BE 8D BD A0			sta BLITTMP.SIZE
  8505 58C1 20 57 3B			jsr BLITTMP
  8506
  8507 				; --- ForToDoEpilog
  8508 58C4 EE 96 A1			inc Y
  8509 58C7 F0 03 4C B9 57		jne l_1282
  8510 58CC			l_1290
  8511
  8512 				; optimize OK (service.pas), line = 1622
  8513
  8514 58CC AD 9A A1			lda YS
  8515 58CF 18 69 04			add #$04
  8516 58D2 8D 96 A1			sta Y
  8517 58D5 AD 9A A1			lda YS
  8518 58D8 18 69 0C			add #$0C
  8519 58DB 8D DF 58			sta @FORTMP_134C_0
  8520
  8521 58DE			l_134F
  8522 				; --- ForToDoCondition
  8523 58DE A9 00			lda @FORTMP_134C_0::#$00
  8524 58E0 CD 96 A1			cmp Y
  8525 58E3 B0 03 4C EE 59		jcc l_135D
  8526
  8527 				; optimize OK (service.pas), line = 1624
  8528
  8529 58E8 A9 00			lda #$00
  8530 58EA 8D 97 A1			sta I
  8531
  8532 				; optimize OK (service.pas), line = 1625
  8533
  8534 58ED AC 96 A1			ldy Y
  8535 58F0 B9 00 C0			lda adr.ROW,y
  8536 58F3 8D 98 A0			sta HLP
  8537 58F6 B9 00 C1			lda adr.ROW+256,y
  8538 58F9 8D 99 A0			sta HLP+1
  8539
  8540 				; optimize OK (service.pas), line = 1627
  8541
  8542 58FC AD 98 A1			lda XS
  8543 58FF 18 69 08			add #$08
  8544 5902 8D 95 A1			sta X
  8545 5905 AD 98 A1			lda XS
  8546 5908 18 69 18			add #$18
  8547 590B 8D 0F 59			sta @FORTMP_1379_0
  8548
  8549 590E			l_137C
  8550 				; --- ForToDoCondition
  8551 590E A9 00			lda @FORTMP_1379_0::#$00
  8552 5910 CD 95 A1			cmp X
  8553 5913 90 5F			jcc l_138A
  8554
  8555 				; optimize OK (service.pas), line = 1628
  8556
  8557 5915 AD 95 A1			lda X
  8558 5918 C9 D8			cmp #$D8
  8559 591A B0 53			jcs l_139C
  8560
  8561 				; optimize OK (service.pas), line = 1636
  8562
  8563 591C AD A5 9F			lda PLAYSCREEN.OFS
  8564 591F 6D 98 A0			adc HLP
  8565 5922 85 9F			sta :STACKORIGIN+9
  8566 5924 AD A6 9F			lda PLAYSCREEN.OFS+1
  8567 5927 6D 99 A0			adc HLP+1
  8568 592A 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  8569 592C AD A7 9F			lda PLAYSCREEN.OFS+2
  8570 592F 69 00			adc #$00
  8571 5931 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
  8572 5933 AD A8 9F			lda PLAYSCREEN.OFS+3
  8573 5936 69 00			adc #$00
  8574 5938 85 CF			sta :STACKORIGIN+STACKWIDTH*3+9
  8575 593A A5 9F			lda :STACKORIGIN+9
  8576 593C 18 6D 95 A1			add X
  8577 5940 8D CD A0			sta GETBYTE.SRC
  8578 5943 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  8579 5945 69 00			adc #$00
  8580 5947 8D CE A0			sta GETBYTE.SRC+1
  8581 594A A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
  8582 594C 69 00			adc #$00
  8583 594E 8D CF A0			sta GETBYTE.SRC+2
  8584 5951 A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
  8585 5953 69 00			adc #$00
  8586 5955 8D D0 A0			sta GETBYTE.SRC+3
  8587 5958 20 2A 3C			jsr GETBYTE
  8588 595B AD D1 A0			lda GETBYTE.RESULT
  8589 595E 29 7F			and #$7F
  8590 5960 8D 9C A1			sta CL
  8591
  8592 				; optimize OK (service.pas), line = 1638
  8593
  8594 5963 AC 97 A1			ldy I
  8595 5966 AD 9C A1			lda CL
  8596 5969 99 00 C2			sta adr.TMP,y
  8597
  8598 				; optimize FAIL (0, service.pas), line = 1640
  8599
  8600 596C EE 97 A1			inc I
  8601 596F			l_139C
  8602
  8603 				; --- ForToDoEpilog
  8604 596F EE 95 A1			inc X
  8605 5972 D0 9A			jne l_137C
  8606 5974			l_138A
  8607
  8608 				; optimize OK (service.pas), line = 1651
  8609
  8610 5974 AD 98 A1			lda XS
  8611 5977 18 69 08			add #$08
  8612 597A 85 9F			sta :STACKORIGIN+9
  8613 597C AD 99 A1			lda XS+1
  8614 597F 69 00			adc #$00
  8615 5981 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  8616 5983 AD 98 A0			lda HLP
  8617 5986 18 65 9F			add :STACKORIGIN+9
  8618 5989 8D 98 A0			sta HLP
  8619 598C AD 99 A0			lda HLP+1
  8620 598F 65 AF			adc :STACKORIGIN+STACKWIDTH+9
  8621 5991 8D 99 A0			sta HLP+1
  8622
  8623 				; optimize OK (service.pas), line = 1653
  8624
  8625 5994 AD 98 A0			lda HLP
  8626 5997 8D B9 A0			sta BLITTMP.DST
  8627 599A A9 50			lda #$50
  8628 599C 18 6D 99 A0			add HLP+1
  8629 59A0 8D BA A0			sta BLITTMP.DST+1
  8630 59A3 A9 00			lda #$00
  8631 59A5 69 00			adc #$00
  8632 59A7 8D BB A0			sta BLITTMP.DST+2
  8633 59AA A9 00			lda #$00
  8634 59AC 69 00			adc #$00
  8635 59AE 8D BC A0			sta BLITTMP.DST+3
  8636 59B1 AD 97 A1			lda I
  8637 59B4 8D BD A0			sta BLITTMP.SIZE
  8638 59B7 20 57 3B			jsr BLITTMP
  8639
  8640 				; optimize OK (service.pas), line = 1654
  8641
  8642 59BA AD A5 9F			lda PLAYSCREEN.OFS
  8643 59BD 18 6D 98 A0			add HLP
  8644 59C1 8D B9 A0			sta BLITTMP.DST
  8645 59C4 AD A6 9F			lda PLAYSCREEN.OFS+1
  8646 59C7 6D 99 A0			adc HLP+1
  8647 59CA 8D BA A0			sta BLITTMP.DST+1
  8648 59CD AD A7 9F			lda PLAYSCREEN.OFS+2
  8649 59D0 69 00			adc #$00
  8650 59D2 8D BB A0			sta BLITTMP.DST+2
  8651 59D5 AD A8 9F			lda PLAYSCREEN.OFS+3
  8652 59D8 69 00			adc #$00
  8653 59DA 8D BC A0			sta BLITTMP.DST+3
  8654 59DD AD 97 A1			lda I
  8655 59E0 8D BD A0			sta BLITTMP.SIZE
  8656 59E3 20 57 3B			jsr BLITTMP
  8657
  8658 				; --- ForToDoEpilog
  8659 59E6 EE 96 A1			inc Y
  8660 59E9 F0 03 4C DE 58		jne l_134F
  8661 59EE			l_135D
  8662
  8663 				; optimize OK (service.pas), line = 1659
  8664
  8665 59EE AD 94 A1			lda BLOCK
  8666 59F1 C9 09			cmp #$09
  8667 59F3 B0 03 4C AC 5B		jcc l_13F6
  8668
  8669 				; optimize OK (service.pas), line = 1661
  8670
  8671 59F8 A9 00			lda #$00
  8672 59FA 8D 9D A1			sta CL2
  8673
  8674 				; optimize OK (service.pas), line = 1662
  8675
  8676 59FD AD 94 A1			lda BLOCK
  8677 5A00 29 0F			and #$0F
  8678 5A02 C9 09			cmp #$09
  8679 5A04 D0 19			jne l_1411
  8680
  8681 				; optimize OK (service.pas), line = 1664
  8682
  8683 5A06 A9 CA			lda #$CA
  8684 5A08 8D 9D A1			sta CL2
  8685
  8686 				; optimize OK (service.pas), line = 1665
  8687
  8688 5A0B AD 93 A1			lda YA
  8689 5A0E 0A				asl @
  8690 5A0F 0A				asl @
  8691 5A10 0A				asl @
  8692 5A11 0A				asl @
  8693 5A12 18 6D 92 A1			add XA
  8694 5A16 A8				tay
  8695 5A17 A9 19			lda #$19
  8696 5A19 99 00 DB			sta adr.WALL,y
  8697 5A1C 4C 2B 5A			jmp l_1430
  8698 5A1F			l_1411
  8699
  8700 				; optimize OK (service.pas), line = 1671
  8701
  8702 5A1F AD 94 A1			lda BLOCK
  8703 5A22 C9 0A			cmp #$0A
  8704 5A24 D0 05			jne l_1442
  8705 5A26 A9 C9			lda #$C9
  8706 5A28 8D 9D A1			sta CL2
  8707 5A2B			l_1430
  8708 5A2B			l_1442
  8709
  8710 				; optimize OK (service.pas), line = 1675
  8711
  8712 5A2B A9 00			lda #$00
  8713 5A2D 8D 96 A1			sta Y
  8714
  8715 5A30			l_1452
  8716 				; --- ForToDoCondition
  8717 5A30 AD 96 A1			lda Y
  8718 5A33 C9 07			cmp #$07
  8719 5A35 90 03 4C E4 5A		jcs l_1460
  8720
  8721 				; optimize OK (service.pas), line = 1678
  8722
  8723 5A3A 6D 9A A1			adc YS
  8724 5A3D A8				tay
  8725 5A3E AD 98 A1			lda XS
  8726 5A41 18 79 00 C0			add adr.ROW,y
  8727 5A45 8D 98 A0			sta HLP
  8728 5A48 AD 99 A1			lda XS+1
  8729 5A4B 79 00 C1			adc adr.ROW+256,y
  8730 5A4E 8D 99 A0			sta HLP+1
  8731
  8732 				; optimize OK (service.pas), line = 1683
  8733
  8734 5A51 AD A5 9F			lda PLAYSCREEN.OFS
  8735 5A54 18 6D 98 A0			add HLP
  8736 5A58 8D CD A0			sta GETBYTE.SRC
  8737 5A5B AD A6 9F			lda PLAYSCREEN.OFS+1
  8738 5A5E 6D 99 A0			adc HLP+1
  8739 5A61 8D CE A0			sta GETBYTE.SRC+1
  8740 5A64 AD A7 9F			lda PLAYSCREEN.OFS+2
  8741 5A67 69 00			adc #$00
  8742 5A69 8D CF A0			sta GETBYTE.SRC+2
  8743 5A6C AD A8 9F			lda PLAYSCREEN.OFS+3
  8744 5A6F 69 00			adc #$00
  8745 5A71 8D D0 A0			sta GETBYTE.SRC+3
  8746 5A74 20 2A 3C			jsr GETBYTE
  8747 5A77 AD D1 A0			lda GETBYTE.RESULT
  8748 5A7A 29 80			and #$80
  8749 5A7C 8D 9C A1			sta CL
  8750
  8751 				; optimize OK (service.pas), line = 1685
  8752
  8753 5A7F AD 9D A1			lda CL2
  8754 5A82 29 7F			and #$7F
  8755 5A84 0D 9C A1			ora CL
  8756 5A87 8D 9D A1			sta CL2
  8757
  8758 				; optimize OK (service.pas), line = 1689
  8759
  8760 5A8A AD 98 A0			lda HLP
  8761 5A8D 8D C8 A0			sta PUTBYTE.DST
  8762 5A90 A9 50			lda #$50
  8763 5A92 18 6D 99 A0			add HLP+1
  8764 5A96 8D C9 A0			sta PUTBYTE.DST+1
  8765 5A99 A9 00			lda #$00
  8766 5A9B 69 00			adc #$00
  8767 5A9D 8D CA A0			sta PUTBYTE.DST+2
  8768 5AA0 A9 00			lda #$00
  8769 5AA2 69 00			adc #$00
  8770 5AA4 8D CB A0			sta PUTBYTE.DST+3
  8771 5AA7 AD 9D A1			lda CL2
  8772 5AAA 8D CC A0			sta PUTBYTE.V
  8773 5AAD 20 02 3C			jsr PUTBYTE
  8774
  8775 				; optimize OK (service.pas), line = 1693
  8776
  8777 5AB0 AD A5 9F			lda PLAYSCREEN.OFS
  8778 5AB3 18 6D 98 A0			add HLP
  8779 5AB7 8D C8 A0			sta PUTBYTE.DST
  8780 5ABA AD A6 9F			lda PLAYSCREEN.OFS+1
  8781 5ABD 6D 99 A0			adc HLP+1
  8782 5AC0 8D C9 A0			sta PUTBYTE.DST+1
  8783 5AC3 AD A7 9F			lda PLAYSCREEN.OFS+2
  8784 5AC6 69 00			adc #$00
  8785 5AC8 8D CA A0			sta PUTBYTE.DST+2
  8786 5ACB AD A8 9F			lda PLAYSCREEN.OFS+3
  8787 5ACE 69 00			adc #$00
  8788 5AD0 8D CB A0			sta PUTBYTE.DST+3
  8789 5AD3 AD 9D A1			lda CL2
  8790 5AD6 8D CC A0			sta PUTBYTE.V
  8791 5AD9 20 02 3C			jsr PUTBYTE
  8792
  8793 				; --- ForToDoEpilog
  8794 5ADC EE 96 A1			inc Y
  8795 5ADF F0 03 4C 30 5A		jne l_1452
  8796 5AE4			l_1460
  8797
  8798 				; optimize OK (service.pas), line = 1696
  8799
  8800 5AE4 AC 9A A1			ldy YS
  8801 5AE7 AD 98 A1			lda XS
  8802 5AEA 18 79 00 C0			add adr.ROW,y
  8803 5AEE 8D 98 A0			sta HLP
  8804 5AF1 AD 99 A1			lda XS+1
  8805 5AF4 79 00 C1			adc adr.ROW+256,y
  8806 5AF7 8D 99 A0			sta HLP+1
  8807
  8808 				; optimize OK (service.pas), line = 1699
  8809
  8810 5AFA A9 00			lda #$00
  8811 5AFC A8				tay
  8812
  8813 5AFD			l_14BE
  8814 				; --- ForToDoCondition
  8815 5AFD 8C 95 A1			sty X
  8816 5B00 C0 0F			cpy #$0F
  8817 5B02 B0 58			jcs l_14CC
  8818
  8819 				; optimize OK (service.pas), line = 1704
  8820
  8821 5B04 AD A5 9F			lda PLAYSCREEN.OFS
  8822 5B07 6D 98 A0			adc HLP
  8823 5B0A 85 9F			sta :STACKORIGIN+9
  8824 5B0C AD A6 9F			lda PLAYSCREEN.OFS+1
  8825 5B0F 6D 99 A0			adc HLP+1
  8826 5B12 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  8827 5B14 AD A7 9F			lda PLAYSCREEN.OFS+2
  8828 5B17 69 00			adc #$00
  8829 5B19 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
  8830 5B1B AD A8 9F			lda PLAYSCREEN.OFS+3
  8831 5B1E 69 00			adc #$00
  8832 5B20 85 CF			sta :STACKORIGIN+STACKWIDTH*3+9
  8833 5B22 A5 9F			lda :STACKORIGIN+9
  8834 5B24 18 6D 95 A1			add X
  8835 5B28 8D CD A0			sta GETBYTE.SRC
  8836 5B2B A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  8837 5B2D 69 00			adc #$00
  8838 5B2F 8D CE A0			sta GETBYTE.SRC+1
  8839 5B32 A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
  8840 5B34 69 00			adc #$00
  8841 5B36 8D CF A0			sta GETBYTE.SRC+2
  8842 5B39 A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
  8843 5B3B 69 00			adc #$00
  8844 5B3D 8D D0 A0			sta GETBYTE.SRC+3
  8845 5B40 20 2A 3C			jsr GETBYTE
  8846 5B43 AD D1 A0			lda GETBYTE.RESULT
  8847 5B46 29 80			and #$80
  8848 5B48 8D 9C A1			sta CL
  8849
  8850 				; optimize OK (service.pas), line = 1706
  8851
  8852 5B4B AD 9D A1			lda CL2
  8853 5B4E 29 7F			and #$7F
  8854 5B50 0D 9C A1			ora CL
  8855 5B53 AC 95 A1			ldy X
  8856 5B56 99 00 C2			sta adr.TMP,y
  8857
  8858 				; --- ForToDoEpilog
  8859 5B59 C8				iny
  8860 5B5A D0 A1			jne l_14BE
  8861 5B5C			l_14CC
  8862
  8863 				; optimize OK (service.pas), line = 1715
  8864
  8865 5B5C AD 98 A0			lda HLP
  8866 5B5F 8D B9 A0			sta BLITTMP.DST
  8867 5B62 A9 50			lda #$50
  8868 5B64 18 6D 99 A0			add HLP+1
  8869 5B68 8D BA A0			sta BLITTMP.DST+1
  8870 5B6B A9 00			lda #$00
  8871 5B6D 69 00			adc #$00
  8872 5B6F 8D BB A0			sta BLITTMP.DST+2
  8873 5B72 A9 00			lda #$00
  8874 5B74 69 00			adc #$00
  8875 5B76 8D BC A0			sta BLITTMP.DST+3
  8876 5B79 A9 0F			lda #$0F
  8877 5B7B 8D BD A0			sta BLITTMP.SIZE
  8878 5B7E 20 57 3B			jsr BLITTMP
  8879
  8880 				; optimize OK (service.pas), line = 1716
  8881
  8882 5B81 AD A5 9F			lda PLAYSCREEN.OFS
  8883 5B84 18 6D 98 A0			add HLP
  8884 5B88 8D B9 A0			sta BLITTMP.DST
  8885 5B8B AD A6 9F			lda PLAYSCREEN.OFS+1
  8886 5B8E 6D 99 A0			adc HLP+1
  8887 5B91 8D BA A0			sta BLITTMP.DST+1
  8888 5B94 AD A7 9F			lda PLAYSCREEN.OFS+2
  8889 5B97 69 00			adc #$00
  8890 5B99 8D BB A0			sta BLITTMP.DST+2
  8891 5B9C AD A8 9F			lda PLAYSCREEN.OFS+3
  8892 5B9F 69 00			adc #$00
  8893 5BA1 8D BC A0			sta BLITTMP.DST+3
  8894 5BA4 A9 0F			lda #$0F
  8895 5BA6 8D BD A0			sta BLITTMP.SIZE
  8896 5BA9 20 57 3B			jsr BLITTMP
  8897 5BAC			l_13F6
  8898
  8899 				; ------------------------------------------------------------
  8900
  8901 = A192			XA	= DATAORIGIN+$02ED
  8902 = A193			YA	= DATAORIGIN+$02EE
  8903 = A194			BLOCK	= DATAORIGIN+$02EF
  8904 = A195			X	= DATAORIGIN+$02F0
  8905 = A196			Y	= DATAORIGIN+$02F1
  8906 = A197			I	= DATAORIGIN+$02F2
  8907 = A198			XS	= DATAORIGIN+$02F3
  8908 = A19A			YS	= DATAORIGIN+$02F5
  8909 = A19C			CL	= DATAORIGIN+$02F7
  8910 = A19D			CL2	= DATAORIGIN+$02F8
  8911 = A19E			SHADOW	= DATAORIGIN+$02F9
  8912
  8913 = A192			@VarData	= XA
  8914 = 000D			@VarDataSize	= 13
  8915
  8916 5BAC			@exit
  8917 					.ifdef @new
  8918 					lda <@VarData
  8919 					sta :ztmp
  8920 					lda >@VarData
  8921 					ldy #@VarDataSize-1
  8922 					jmp @FreeMem
  8923 					els
  8924 5BAC 60				rts						; ret
  8925 					eif
  8926 				.endl
  8927
  8928 5BAD			.local	PUT_WALL					; PROCEDURE
  8929
  8930 				; optimize OK (service.pas), line = 1728
  8931
  8932 5BAD A9 00			lda #$00
  8933 5BAF 8D A2 A1			sta Y
  8934
  8935 5BB2			l_1517
  8936 				; --- ForToDoCondition
  8937 5BB2 AD A2 A1			lda Y
  8938 5BB5 C9 0F			cmp #$0F
  8939 5BB7 B0 48			jcs l_1525
  8940
  8941 				; optimize OK (service.pas), line = 1729
  8942
  8943 5BB9 A9 00			lda #$00
  8944 5BBB 8D A1 A1			sta X
  8945
  8946 5BBE			l_152E
  8947 				; --- ForToDoCondition
  8948 5BBE AD A1 A1			lda X
  8949 5BC1 C9 0D			cmp #$0D
  8950 5BC3 B0 37			jcs l_153C
  8951
  8952 				; optimize OK (service.pas), line = 1730
  8953
  8954 5BC5 AD A2 A1			lda Y
  8955 5BC8 0A				asl @
  8956 5BC9 0A				asl @
  8957 5BCA 0A				asl @
  8958 5BCB 0A				asl @
  8959 5BCC 18 6D A1 A1			add X
  8960 5BD0 A8				tay
  8961 5BD1 B9 00 DB			lda adr.WALL,y
  8962 5BD4 F0 21			jeq l_155B
  8963 5BD6 AD A2 A1			lda Y
  8964 5BD9 0A				asl @
  8965 5BDA 0A				asl @
  8966 5BDB 0A				asl @
  8967 5BDC 0A				asl @
  8968 5BDD 18 6D A1 A1			add X
  8969 5BE1 A8				tay
  8970 5BE2 B9 00 DB			lda adr.WALL,y
  8971 5BE5 8D 94 A1			sta PLACE_BLOCK.BLOCK
  8972 5BE8 AD A1 A1			lda X
  8973 5BEB 8D 92 A1			sta PLACE_BLOCK.XA
  8974 5BEE AD A2 A1			lda Y
  8975 5BF1 8D 93 A1			sta PLACE_BLOCK.YA
  8976 5BF4 20 6F 57			jsr PLACE_BLOCK
  8977 5BF7			l_155B
  8978
  8979 				; --- ForToDoEpilog
  8980 5BF7 EE A1 A1			inc X
  8981 5BFA D0 C2			jne l_152E
  8982 5BFC			l_153C
  8983
  8984 				; --- ForToDoEpilog
  8985 5BFC EE A2 A1			inc Y
  8986 5BFF D0 B1			jne l_1517
  8987 5C01			l_1525
  8988
  8989 				; ------------------------------------------------------------
  8990
  8991 = A1A1			X	= DATAORIGIN+$02FC
  8992 = A1A2			Y	= DATAORIGIN+$02FD
  8993
  8994 = A1A1			@VarData	= X
  8995 = 0002			@VarDataSize	= 2
  8996
  8997 5C01			@exit
  8998 					.ifdef @new
  8999 					lda <@VarData
  9000 					sta :ztmp
  9001 					lda >@VarData
  9002 					ldy #@VarDataSize-1
  9003 					jmp @FreeMem
  9004 					els
  9005 5C01 60				rts						; ret
  9006 					eif
  9007 				.endl
  9008
  9009 5C02			.local	SET_WALL					; PROCEDURE
  9010
  9011 				; optimize OK (service.pas), line = 1739
  9012
  9013 5C02 A9 00			lda #$00
  9014 5C04 8D 58 A0			sta REMAIN_BLK
  9015
  9016 				; optimize OK (service.pas), line = 1740
  9017
  9018 5C07 AC 75 A0			ldy CUR_PLAYER
  9019 5C0A B9 66 A0			lda adr.SCORE.WALL_N,y
  9020 5C0D 8D A5 A1			sta WL
  9021
  9022 				; optimize OK (service.pas), line = 1743
  9023
  9024 5C10 A9 00			lda #$00
  9025 5C12 8D A4 A1			sta Y
  9026
  9027 5C15			l_1599
  9028 				; --- ForToDoCondition
  9029 5C15 AD A4 A1			lda Y
  9030 5C18 C9 0F			cmp #$0F
  9031 5C1A B0 3D			jcs l_15A7
  9032
  9033 				; optimize OK (service.pas), line = 1744
  9034
  9035 5C1C A9 00			lda #$00
  9036 5C1E 8D A3 A1			sta X
  9037
  9038 5C21			l_15B0
  9039 				; --- ForToDoCondition
  9040 5C21 AD A3 A1			lda X
  9041 5C24 C9 0D			cmp #$0D
  9042 5C26 B0 2C			jcs l_15BE
  9043
  9044 				; optimize OK (service.pas), line = 1747
  9045
  9046 5C28 AD A4 A1			lda Y
  9047 5C2B 0A				asl @
  9048 5C2C 0A				asl @
  9049 5C2D 0A				asl @
  9050 5C2E 0A				asl @
  9051 5C2F 18 6D A3 A1			add X
  9052 5C33 A8				tay
  9053 5C34 B9 00 DB			lda adr.WALL,y
  9054 5C37 F0 16			jeq l_15F6
  9055 5C39 AD A4 A1			lda Y
  9056 5C3C 0A				asl @
  9057 5C3D 0A				asl @
  9058 5C3E 0A				asl @
  9059 5C3F 0A				asl @
  9060 5C40 18 6D A3 A1			add X
  9061 5C44 A8				tay
  9062 5C45 B9 00 DB			lda adr.WALL,y
  9063 5C48 C9 0A			cmp #$0A
  9064 5C4A F0 03			jeq l_15F6
  9065 5C4C EE 58 A0			inc REMAIN_BLK
  9066 5C4F			l_15F6
  9067
  9068 				; --- ForToDoEpilog
  9069 5C4F EE A3 A1			inc X
  9070 5C52 D0 CD			jne l_15B0
  9071 5C54			l_15BE
  9072
  9073 				; --- ForToDoEpilog
  9074 5C54 EE A4 A1			inc Y
  9075 5C57 D0 BC			jne l_1599
  9076 5C59			l_15A7
  9077
  9078 				; optimize OK (service.pas), line = 1749
  9079
  9080 5C59 AD A5 A1			lda WL
  9081 5C5C 38 E9 01			sub #$01
  9082 5C5F 85 86			sta @SMALLINT.MOD.A
  9083 5C61 A9 00			lda #$00
  9084 5C63 E9 00			sbc #$00
  9085 5C65 85 87			sta @SMALLINT.MOD.A+1
  9086 5C67 A9 04			lda #$04
  9087 5C69 85 8E			sta @SMALLINT.MOD.B
  9088 5C6B A9 00			lda #$00
  9089 5C6D 85 8F			sta @SMALLINT.MOD.B+1
  9090 5C6F 20 50 22			jsr @SMALLINT.MOD
  9091 5C72 A5 92			lda @SMALLINT.MOD.RESULT
  9092 5C74 8D A5 A1			sta WL
  9093
  9094 				; optimize OK (service.pas), line = 1751
  9095
  9096 5C77 8D A6 A1			sta @CASETMP_0008
  9097 5C7A C9 00			cmp #$00
  9098 5C7C D0 33			jne l_1620
  9099 				@
  9100
  9101 				; optimize OK (service.pas), line = 1752
  9102
  9103 5C7E AD 2E A0 8D 26 A0 + 	:8 mva adr.PATTERN0+# adr.PATTERN+#
  9104 5CAE 4C 8A 5D			jmp a_0008
  9105 5CB1			l_1620
  9106 5CB1 C9 01			cmp #$01
  9107 5CB3 D0 33			jne l_1629
  9108
  9109 				; optimize OK (service.pas), line = 1753
  9110
  9111 5CB5 AD 36 A0 8D 26 A0 + 	:8 mva adr.PATTERN1+# adr.PATTERN+#
  9112 5CE5 4C 8A 5D			jmp a_0008
  9113 5CE8			l_1629
  9114 5CE8 C9 02			cmp #$02
  9115 5CEA D0 33			jne l_1632
  9116
  9117 				; optimize OK (service.pas), line = 1754
  9118
  9119 5CEC AD 3E A0 8D 26 A0 + 	:8 mva adr.PATTERN2+# adr.PATTERN+#
  9120 5D1C 4C 8A 5D			jmp a_0008
  9121 5D1F			l_1632
  9122 5D1F C9 03			cmp #$03
  9123 5D21 D0 33			jne l_163B
  9124
  9125 				; optimize OK (service.pas), line = 1755
  9126
  9127 5D23 AD 46 A0 8D 26 A0 + 	:8 mva adr.PATTERN3+# adr.PATTERN+#
  9128 5D53 4C 8A 5D			jmp a_0008
  9129 5D56			l_163B
  9130 5D56 C9 04			cmp #$04
  9131 5D58 D0 30			jne l_1644
  9132
  9133 				; optimize OK (service.pas), line = 1756
  9134
  9135 5D5A AD 4E A0 8D 26 A0 + 	:8 mva adr.PATTERN4+# adr.PATTERN+#
  9136 5D8A			l_1644
  9137 5D8A			a_0008
  9138
  9139 				; ------------------------------------------------------------
  9140
  9141 = A1A3			X	= DATAORIGIN+$02FE
  9142 = A1A4			Y	= DATAORIGIN+$02FF
  9143 = A1A5			WL	= DATAORIGIN+$0300
  9144 = A1A6			@CASETMP_0008	= DATAORIGIN+$0301
  9145
  9146 = A1A3			@VarData	= X
  9147 = 0004			@VarDataSize	= 4
  9148
  9149 5D8A			@exit
  9150 					.ifdef @new
  9151 					lda <@VarData
  9152 					sta :ztmp
  9153 					lda >@VarData
  9154 					ldy #@VarDataSize-1
  9155 					jmp @FreeMem
  9156 					els
  9157 5D8A 60				rts						; ret
  9158 					eif
  9159 				.endl
  9160
  9161 5D8B			.local	SPLIT_LINE					; FUNCTION
  9162
  9163 				; optimize OK (service.pas), line = 1795
  9164
  9165 5D8B AC A7 A1 84 84 AC + 	mwy X1 :bp2
  9166 5D95 A0 00			ldy #$00
  9167 5D97 B1 84			lda (:bp2),y
  9168 5D99 18 69 10			add #$10
  9169 5D9C 91 84			sta (:bp2),y
  9170 5D9E C8				iny
  9171 5D9F B1 84			lda (:bp2),y
  9172 5DA1 69 00			adc #$00
  9173 5DA3 91 84			sta (:bp2),y
  9174
  9175 				; optimize OK (service.pas), line = 1796
  9176
  9177 5DA5 AC A9 A1 84 84 AC + 	mwy Y1 :bp2
  9178 5DAF A0 00			ldy #$00
  9179 5DB1 B1 84			lda (:bp2),y
  9180 5DB3 18 69 18			add #$18
  9181 5DB6 91 84			sta (:bp2),y
  9182 5DB8 C8				iny
  9183 5DB9 B1 84			lda (:bp2),y
  9184 5DBB 69 00			adc #$00
  9185 5DBD 91 84			sta (:bp2),y
  9186
  9187 				; optimize OK (service.pas), line = 1797
  9188
  9189 5DBF AC AB A1 84 84 AC + 	mwy X2 :bp2
  9190 5DC9 A0 00			ldy #$00
  9191 5DCB B1 84			lda (:bp2),y
  9192 5DCD 18 69 10			add #$10
  9193 5DD0 91 84			sta (:bp2),y
  9194 5DD2 C8				iny
  9195 5DD3 B1 84			lda (:bp2),y
  9196 5DD5 69 00			adc #$00
  9197 5DD7 91 84			sta (:bp2),y
  9198
  9199 				; optimize OK (service.pas), line = 1798
  9200
  9201 5DD9 AC AD A1 84 84 AC + 	mwy Y2 :bp2
  9202 5DE3 A0 00			ldy #$00
  9203 5DE5 B1 84			lda (:bp2),y
  9204 5DE7 18 69 18			add #$18
  9205 5DEA 91 84			sta (:bp2),y
  9206 5DEC C8				iny
  9207 5DED B1 84			lda (:bp2),y
  9208 5DEF 69 00			adc #$00
  9209 5DF1 91 84			sta (:bp2),y
  9210
  9211 				; optimize OK (service.pas), line = 1800
  9212
  9213 5DF3 A9 00			lda #$00
  9214 5DF5 8D D0 A1			sta COLLISION
  9215
  9216 				; optimize OK (service.pas), line = 1802
  9217
  9218 5DF8 AC A7 A1 84 84 AC + 	mwy X1 :bp2
  9219 5E02 A0 00			ldy #$00
  9220 5E04 B1 84			lda (:bp2),y
  9221 5E06 85 9F			sta :STACKORIGIN+9
  9222 5E08 C8				iny
  9223 5E09 B1 84			lda (:bp2),y
  9224 5E0B 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  9225 5E0D A0 00			ldy #$00
  9226 5E0F A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  9227 5E11 10 01			spl
  9228 5E13 88				dey
  9229 5E14 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  9230 5E16 84 BF			sty :STACKORIGIN+STACKWIDTH*2+9
  9231 5E18 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
  9232 5E1A 66 AF			ror :STACKORIGIN+STACKWIDTH+9
  9233 5E1C 66 9F			ror :STACKORIGIN+9
  9234 5E1E 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
  9235 5E20 66 AF			ror :STACKORIGIN+STACKWIDTH+9
  9236 5E22 66 9F			ror :STACKORIGIN+9
  9237 5E24 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
  9238 5E26 66 AF			ror :STACKORIGIN+STACKWIDTH+9
  9239 5E28 66 9F			ror :STACKORIGIN+9
  9240 5E2A 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
  9241 5E2C 66 AF			ror :STACKORIGIN+STACKWIDTH+9
  9242 5E2E 66 9F			ror :STACKORIGIN+9
  9243 5E30 A5 9F			lda :STACKORIGIN+9
  9244 5E32 8D C4 A1			sta XP1
  9245 5E35 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  9246 5E37 8D C5 A1			sta XP1+1
  9247
  9248 				; optimize OK (service.pas), line = 1803
  9249
  9250 5E3A AC A9 A1 84 84 AC + 	mwy Y1 :bp2
  9251 5E44 A0 00			ldy #$00
  9252 5E46 B1 84			lda (:bp2),y
  9253 5E48 85 9F			sta :STACKORIGIN+9
  9254 5E4A C8				iny
  9255 5E4B B1 84			lda (:bp2),y
  9256 5E4D 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  9257 5E4F A0 00			ldy #$00
  9258 5E51 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  9259 5E53 10 01			spl
  9260 5E55 88				dey
  9261 5E56 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  9262 5E58 84 BF			sty :STACKORIGIN+STACKWIDTH*2+9
  9263 5E5A 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
  9264 5E5C 66 AF			ror :STACKORIGIN+STACKWIDTH+9
  9265 5E5E 66 9F			ror :STACKORIGIN+9
  9266 5E60 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
  9267 5E62 66 AF			ror :STACKORIGIN+STACKWIDTH+9
  9268 5E64 66 9F			ror :STACKORIGIN+9
  9269 5E66 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
  9270 5E68 66 AF			ror :STACKORIGIN+STACKWIDTH+9
  9271 5E6A 66 9F			ror :STACKORIGIN+9
  9272 5E6C A5 9F			lda :STACKORIGIN+9
  9273 5E6E 8D C6 A1			sta YP1
  9274 5E71 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  9275 5E73 8D C7 A1			sta YP1+1
  9276
  9277 				; optimize OK (service.pas), line = 1804
  9278
  9279 5E76 AC AB A1 84 84 AC + 	mwy X2 :bp2
  9280 5E80 A0 00			ldy #$00
  9281 5E82 B1 84			lda (:bp2),y
  9282 5E84 85 9F			sta :STACKORIGIN+9
  9283 5E86 C8				iny
  9284 5E87 B1 84			lda (:bp2),y
  9285 5E89 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  9286 5E8B A0 00			ldy #$00
  9287 5E8D A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  9288 5E8F 10 01			spl
  9289 5E91 88				dey
  9290 5E92 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  9291 5E94 84 BF			sty :STACKORIGIN+STACKWIDTH*2+9
  9292 5E96 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
  9293 5E98 66 AF			ror :STACKORIGIN+STACKWIDTH+9
  9294 5E9A 66 9F			ror :STACKORIGIN+9
  9295 5E9C 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
  9296 5E9E 66 AF			ror :STACKORIGIN+STACKWIDTH+9
  9297 5EA0 66 9F			ror :STACKORIGIN+9
  9298 5EA2 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
  9299 5EA4 66 AF			ror :STACKORIGIN+STACKWIDTH+9
  9300 5EA6 66 9F			ror :STACKORIGIN+9
  9301 5EA8 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
  9302 5EAA 66 AF			ror :STACKORIGIN+STACKWIDTH+9
  9303 5EAC 66 9F			ror :STACKORIGIN+9
  9304 5EAE A5 9F			lda :STACKORIGIN+9
  9305 5EB0 8D C8 A1			sta XP2
  9306 5EB3 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  9307 5EB5 8D C9 A1			sta XP2+1
  9308
  9309 				; optimize OK (service.pas), line = 1805
  9310
  9311 5EB8 AC AD A1 84 84 AC + 	mwy Y2 :bp2
  9312 5EC2 A0 00			ldy #$00
  9313 5EC4 B1 84			lda (:bp2),y
  9314 5EC6 85 9F			sta :STACKORIGIN+9
  9315 5EC8 C8				iny
  9316 5EC9 B1 84			lda (:bp2),y
  9317 5ECB 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  9318 5ECD A0 00			ldy #$00
  9319 5ECF A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  9320 5ED1 10 01			spl
  9321 5ED3 88				dey
  9322 5ED4 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  9323 5ED6 84 BF			sty :STACKORIGIN+STACKWIDTH*2+9
  9324 5ED8 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
  9325 5EDA 66 AF			ror :STACKORIGIN+STACKWIDTH+9
  9326 5EDC 66 9F			ror :STACKORIGIN+9
  9327 5EDE 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
  9328 5EE0 66 AF			ror :STACKORIGIN+STACKWIDTH+9
  9329 5EE2 66 9F			ror :STACKORIGIN+9
  9330 5EE4 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
  9331 5EE6 66 AF			ror :STACKORIGIN+STACKWIDTH+9
  9332 5EE8 66 9F			ror :STACKORIGIN+9
  9333 5EEA A5 9F			lda :STACKORIGIN+9
  9334 5EEC 8D CA A1			sta YP2
  9335 5EEF A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  9336 5EF1 8D CB A1			sta YP2+1
  9337
  9338 				; optimize OK (service.pas), line = 1807
  9339
  9340 5EF4 AC A7 A1 84 84 AC + 	mwy X1 :bp2
  9341 5EFE A0 00			ldy #$00
  9342 5F00 B1 84			lda (:bp2),y
  9343 5F02 8D B4 A1			sta XK
  9344 5F05 C8				iny
  9345 5F06 B1 84			lda (:bp2),y
  9346 5F08 8D B5 A1			sta XK+1
  9347
  9348 				; optimize OK (service.pas), line = 1808
  9349
  9350 5F0B AC A9 A1 84 84 AC + 	mwy Y1 :bp2
  9351 5F15 A0 00			ldy #$00
  9352 5F17 B1 84			lda (:bp2),y
  9353 5F19 8D B6 A1			sta YK
  9354 5F1C C8				iny
  9355 5F1D B1 84			lda (:bp2),y
  9356 5F1F 8D B7 A1			sta YK+1
  9357
  9358 				; optimize OK (service.pas), line = 1809
  9359
  9360 5F22 AC AB A1 84 84 AC + 	mwy X2 :bp2
  9361 5F2C A0 00			ldy #$00
  9362 5F2E B1 84			lda (:bp2),y
  9363 5F30 8D B8 A1			sta XJ
  9364 5F33 C8				iny
  9365 5F34 B1 84			lda (:bp2),y
  9366 5F36 8D B9 A1			sta XJ+1
  9367
  9368 				; optimize OK (service.pas), line = 1810
  9369
  9370 5F39 AC AD A1 84 84 AC + 	mwy Y2 :bp2
  9371 5F43 A0 00			ldy #$00
  9372 5F45 B1 84			lda (:bp2),y
  9373 5F47 8D BA A1			sta YJ
  9374 5F4A C8				iny
  9375 5F4B B1 84			lda (:bp2),y
  9376 5F4D 8D BB A1			sta YJ+1
  9377
  9378 				; optimize OK (service.pas), line = 1812
  9379
  9380 5F50 AC A7 A1 84 84 AC + 	mwy X1 :bp2
  9381 5F5A A0 00			ldy #$00
  9382 5F5C B1 84			lda (:bp2),y
  9383 5F5E 8D BC A1			sta XH
  9384 5F61 C8				iny
  9385 5F62 B1 84			lda (:bp2),y
  9386 5F64 8D BD A1			sta XH+1
  9387
  9388 				; optimize OK (service.pas), line = 1813
  9389
  9390 5F67 AC A9 A1 84 84 AC + 	mwy Y1 :bp2
  9391 5F71 A0 00			ldy #$00
  9392 5F73 B1 84			lda (:bp2),y
  9393 5F75 8D BE A1			sta YH
  9394 5F78 C8				iny
  9395 5F79 B1 84			lda (:bp2),y
  9396 5F7B 8D BF A1			sta YH+1
  9397
  9398 				; optimize OK (service.pas), line = 1814
  9399
  9400 5F7E AC AB A1 84 84 AC + 	mwy X2 :bp2
  9401 5F88 A0 00			ldy #$00
  9402 5F8A B1 84			lda (:bp2),y
  9403 5F8C 8D C0 A1			sta XN
  9404 5F8F C8				iny
  9405 5F90 B1 84			lda (:bp2),y
  9406 5F92 8D C1 A1			sta XN+1
  9407
  9408 				; optimize OK (service.pas), line = 1815
  9409
  9410 5F95 AC AD A1 84 84 AC + 	mwy Y2 :bp2
  9411 5F9F A0 00			ldy #$00
  9412 5FA1 B1 84			lda (:bp2),y
  9413 5FA3 8D C2 A1			sta YN
  9414 5FA6 C8				iny
  9415 5FA7 B1 84			lda (:bp2),y
  9416 5FA9 8D C3 A1			sta YN+1
  9417
  9418 				; optimize OK (service.pas), line = 1822
  9419
  9420 5FAC AC A7 A1 84 84 AC + 	mwy X1 :bp2
  9421 5FB6 A0 00			ldy #$00
  9422 5FB8 B1 84			lda (:bp2),y
  9423 5FBA 85 9F			sta :STACKORIGIN+9
  9424 5FBC C8				iny
  9425 5FBD B1 84			lda (:bp2),y
  9426 5FBF 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  9427 5FC1 AC AB A1 84 84 AC + 	mwy X2 :bp2
  9428 5FCB A0 00			ldy #$00
  9429 5FCD B1 84			lda (:bp2),y
  9430 5FCF 85 A0			sta :STACKORIGIN+10
  9431 5FD1 C8				iny
  9432 5FD2 B1 84			lda (:bp2),y
  9433 5FD4 85 B0			sta :STACKORIGIN+STACKWIDTH+10
  9434 5FD6 A0 00			ldy #$00
  9435 5FD8 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  9436 5FDA 10 01			spl
  9437 5FDC 88				dey
  9438 5FDD 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  9439 5FDF 84 BF			sty :STACKORIGIN+STACKWIDTH*2+9
  9440 5FE1 84 CF			sty :STACKORIGIN+STACKWIDTH*3+9
  9441 5FE3 A0 00			ldy #$00
  9442 5FE5 A5 B0			lda :STACKORIGIN+STACKWIDTH+10
  9443 5FE7 10 01			spl
  9444 5FE9 88				dey
  9445 5FEA 85 B0			sta :STACKORIGIN+STACKWIDTH+10
  9446 5FEC 84 C0			sty :STACKORIGIN+STACKWIDTH*2+10
  9447 5FEE 84 D0			sty :STACKORIGIN+STACKWIDTH*3+10
  9448 5FF0 A5 9F			lda :STACKORIGIN+9
  9449 5FF2 38 E5 A0			sub :STACKORIGIN+10
  9450 5FF5 85 8A			sta SYSTEM.ABS.@010185000.X
  9451 5FF7 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  9452 5FF9 E5 B0			sbc :STACKORIGIN+STACKWIDTH+10
  9453 5FFB 85 8B			sta SYSTEM.ABS.@010185000.X+1
  9454 5FFD A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
  9455 5FFF E5 C0			sbc :STACKORIGIN+STACKWIDTH*2+10
  9456 6001 85 8C			sta SYSTEM.ABS.@010185000.X+2
  9457 6003 A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
  9458 6005 E5 D0			sbc :STACKORIGIN+STACKWIDTH*3+10
  9459 6007 85 8D			sta SYSTEM.ABS.@010185000.X+3
  9460 6009 20 E9 2A			jsr SYSTEM.ABS.@010185000
  9461 600C E8				inx
  9462 600D A0 01			ldy #1
  9463 600F				.LOCAL
  9464 600F A5 95			lda SYSTEM.ABS.@010185000.RESULT+3
  9465 6011 38 E9 00			sub #$00
  9466 6014 D0 1C			bne L4
  9467 6016 A5 94			lda SYSTEM.ABS.@010185000.RESULT+2
  9468 6018 C9 00			cmp #$00
  9469 601A D0 0A			bne L1
  9470 601C A5 93			lda SYSTEM.ABS.@010185000.RESULT+1
  9471 601E C9 00			cmp #$00
  9472 6020 D0 04			bne L1
  9473 6022 A5 92			lda SYSTEM.ABS.@010185000.RESULT
  9474 6024 C9 10			cmp #$10
  9475 6026 F0 10		L1	beq L5
  9476 6028 B0 04			bcs L3
  9477 602A A9 FF			lda #$FF
  9478 602C D0 0A			bne L5
  9479 602E A9 01		L3	lda #$01
  9480 6030 D0 06			bne L5
  9481 6032 50 04		L4	bvc L5
  9482 6034 49 FF			eor #$FF
  9483 6036 09 01			ora #$01
  9484 6038			L5
  9485 					.ENDL
  9486 6038 F0 02			seq
  9487 603A 10 01			bpl @+
  9488 603C 88				dey
  9489 				@
  9490 603D 94 96			sty :STACKORIGIN,x
  9491 603F AC AD A1 84 84 AC + 	mwy Y2 :bp2
  9492 6049 A0 00			ldy #$00
  9493 604B B1 84			lda (:bp2),y
  9494 604D 85 9F			sta :STACKORIGIN+9
  9495 604F C8				iny
  9496 6050 B1 84			lda (:bp2),y
  9497 6052 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  9498 6054 AC A9 A1 84 84 AC + 	mwy Y1 :bp2
  9499 605E A0 00			ldy #$00
  9500 6060 B1 84			lda (:bp2),y
  9501 6062 85 A0			sta :STACKORIGIN+10
  9502 6064 C8				iny
  9503 6065 B1 84			lda (:bp2),y
  9504 6067 85 B0			sta :STACKORIGIN+STACKWIDTH+10
  9505 6069 A0 00			ldy #$00
  9506 606B A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  9507 606D 10 01			spl
  9508 606F 88				dey
  9509 6070 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  9510 6072 84 BF			sty :STACKORIGIN+STACKWIDTH*2+9
  9511 6074 84 CF			sty :STACKORIGIN+STACKWIDTH*3+9
  9512 6076 A0 00			ldy #$00
  9513 6078 A5 B0			lda :STACKORIGIN+STACKWIDTH+10
  9514 607A 10 01			spl
  9515 607C 88				dey
  9516 607D 85 B0			sta :STACKORIGIN+STACKWIDTH+10
  9517 607F 84 C0			sty :STACKORIGIN+STACKWIDTH*2+10
  9518 6081 84 D0			sty :STACKORIGIN+STACKWIDTH*3+10
  9519 6083 A5 9F			lda :STACKORIGIN+9
  9520 6085 38 E5 A0			sub :STACKORIGIN+10
  9521 6088 85 8A			sta SYSTEM.ABS.@010185000.X
  9522 608A A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  9523 608C E5 B0			sbc :STACKORIGIN+STACKWIDTH+10
  9524 608E 85 8B			sta SYSTEM.ABS.@010185000.X+1
  9525 6090 A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
  9526 6092 E5 C0			sbc :STACKORIGIN+STACKWIDTH*2+10
  9527 6094 85 8C			sta SYSTEM.ABS.@010185000.X+2
  9528 6096 A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
  9529 6098 E5 D0			sbc :STACKORIGIN+STACKWIDTH*3+10
  9530 609A 85 8D			sta SYSTEM.ABS.@010185000.X+3
  9531 609C 20 E9 2A			jsr SYSTEM.ABS.@010185000
  9532 609F CA				dex
  9533 60A0 A0 01			ldy #1
  9534 60A2				.LOCAL
  9535 60A2 A5 95			lda SYSTEM.ABS.@010185000.RESULT+3
  9536 60A4 38 E9 00			sub #$00
  9537 60A7 D0 1C			bne L4
  9538 60A9 A5 94			lda SYSTEM.ABS.@010185000.RESULT+2
  9539 60AB C9 00			cmp #$00
  9540 60AD D0 0A			bne L1
  9541 60AF A5 93			lda SYSTEM.ABS.@010185000.RESULT+1
  9542 60B1 C9 00			cmp #$00
  9543 60B3 D0 04			bne L1
  9544 60B5 A5 92			lda SYSTEM.ABS.@010185000.RESULT
  9545 60B7 C9 08			cmp #$08
  9546 60B9 F0 10		L1	beq L5
  9547 60BB B0 04			bcs L3
  9548 60BD A9 FF			lda #$FF
  9549 60BF D0 0A			bne L5
  9550 60C1 A9 01		L3	lda #$01
  9551 60C3 D0 06			bne L5
  9552 60C5 50 04		L4	bvc L5
  9553 60C7 49 FF			eor #$FF
  9554 60C9 09 01			ora #$01
  9555 60CB			L5
  9556 					.ENDL
  9557 60CB F0 02			seq
  9558 60CD 10 01			bpl @+
  9559 60CF 88				dey
  9560 				@
  9561 60D0 98				tya
  9562 60D1 15 97			ora :STACKORIGIN+1,x
  9563 60D3 F0 05			jeq l_16CD
  9564
  9565 				; optimize OK (service.pas), line = 1823
  9566
  9567 60D5 A9 01			lda #$01
  9568 60D7 20 AA 3C			jsr FATAL_ERROR
  9569 60DA			l_16CD
  9570
  9571 				; optimize OK (service.pas), line = 1826
  9572
  9573 60DA AD C5 A1			lda XP1+1
  9574 60DD CD C9 A1			cmp XP2+1
  9575 60E0 D0 06			bne @+
  9576 60E2 AD C4 A1			lda XP1
  9577 60E5 CD C8 A1			cmp XP2
  9578 				@
  9579 60E8 D0 13			jne l_16F0x
  9580 60EA AD C7 A1			lda YP1+1
  9581 60ED CD CB A1			cmp YP2+1
  9582 60F0 D0 06			bne @+
  9583 60F2 AD C6 A1			lda YP1
  9584 60F5 CD CA A1			cmp YP2
  9585 				@
  9586 60F8 D0 03 4C 3B 64		jeq l_16F0
  9587 60FD			l_16F0x
  9588
  9589 				; optimize OK (service.pas), line = 1828
  9590
  9591 60FD AD C7 A1			lda YP1+1
  9592 6100 CD CB A1			cmp YP2+1
  9593 6103 D0 06			bne @+
  9594 6105 AD C6 A1			lda YP1
  9595 6108 CD CA A1			cmp YP2
  9596 				@
  9597 610B D0 03 4C 46 62		jeq l_1703
  9598
  9599 				; optimize OK (service.pas), line = 1830
  9600
  9601 6110 AD D0 A1			lda COLLISION
  9602 6113 09 01			ora #$01
  9603 6115 8D D0 A1			sta COLLISION
  9604
  9605 				; --- WhileProlog
  9606 6118 4C 33 62			jmp l_1710
  9607 611B			l_1711
  9608
  9609 				; optimize OK (service.pas), line = 1834
  9610
  9611 611B AD BC A1			lda XH
  9612 611E 85 9F			sta :STACKORIGIN+9
  9613 6120 A0 00			ldy #$00
  9614 6122 AD BD A1			lda XH+1
  9615 6125 10 01			spl
  9616 6127 88				dey
  9617 6128 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  9618 612A 84 BF			sty :STACKORIGIN+STACKWIDTH*2+9
  9619 612C 84 CF			sty :STACKORIGIN+STACKWIDTH*3+9
  9620 612E AD C0 A1			lda XN
  9621 6131 85 A0			sta :STACKORIGIN+10
  9622 6133 A0 00			ldy #$00
  9623 6135 AD C1 A1			lda XN+1
  9624 6138 10 01			spl
  9625 613A 88				dey
  9626 613B 85 B0			sta :STACKORIGIN+STACKWIDTH+10
  9627 613D 84 C0			sty :STACKORIGIN+STACKWIDTH*2+10
  9628 613F 84 D0			sty :STACKORIGIN+STACKWIDTH*3+10
  9629 6141 A5 9F			lda :STACKORIGIN+9
  9630 6143 18 65 A0			add :STACKORIGIN+10
  9631 6146 85 9F			sta :STACKORIGIN+9
  9632 6148 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  9633 614A 65 B0			adc :STACKORIGIN+STACKWIDTH+10
  9634 614C 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  9635 614E A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
  9636 6150 65 C0			adc :STACKORIGIN+STACKWIDTH*2+10
  9637 6152 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
  9638 6154 A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
  9639 6156 65 D0			adc :STACKORIGIN+STACKWIDTH*3+10
  9640 6158 85 CF			sta :STACKORIGIN+STACKWIDTH*3+9
  9641 615A 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
  9642 615C 66 AF			ror :STACKORIGIN+STACKWIDTH+9
  9643 615E 66 9F			ror :STACKORIGIN+9
  9644 6160 A5 9F			lda :STACKORIGIN+9
  9645 6162 8D B0 A1			sta X
  9646 6165 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  9647 6167 8D B1 A1			sta X+1
  9648
  9649 				; optimize OK (service.pas), line = 1835
  9650
  9651 616A AD BE A1			lda YH
  9652 616D 85 9F			sta :STACKORIGIN+9
  9653 616F A0 00			ldy #$00
  9654 6171 AD BF A1			lda YH+1
  9655 6174 10 01			spl
  9656 6176 88				dey
  9657 6177 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  9658 6179 84 BF			sty :STACKORIGIN+STACKWIDTH*2+9
  9659 617B 84 CF			sty :STACKORIGIN+STACKWIDTH*3+9
  9660 617D AD C2 A1			lda YN
  9661 6180 85 A0			sta :STACKORIGIN+10
  9662 6182 A0 00			ldy #$00
  9663 6184 AD C3 A1			lda YN+1
  9664 6187 10 01			spl
  9665 6189 88				dey
  9666 618A 85 B0			sta :STACKORIGIN+STACKWIDTH+10
  9667 618C 84 C0			sty :STACKORIGIN+STACKWIDTH*2+10
  9668 618E 84 D0			sty :STACKORIGIN+STACKWIDTH*3+10
  9669 6190 A5 9F			lda :STACKORIGIN+9
  9670 6192 18 65 A0			add :STACKORIGIN+10
  9671 6195 85 9F			sta :STACKORIGIN+9
  9672 6197 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  9673 6199 65 B0			adc :STACKORIGIN+STACKWIDTH+10
  9674 619B 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  9675 619D A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
  9676 619F 65 C0			adc :STACKORIGIN+STACKWIDTH*2+10
  9677 61A1 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
  9678 61A3 A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
  9679 61A5 65 D0			adc :STACKORIGIN+STACKWIDTH*3+10
  9680 61A7 85 CF			sta :STACKORIGIN+STACKWIDTH*3+9
  9681 61A9 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
  9682 61AB 66 AF			ror :STACKORIGIN+STACKWIDTH+9
  9683 61AD 66 9F			ror :STACKORIGIN+9
  9684 61AF A5 9F			lda :STACKORIGIN+9
  9685 61B1 8D B2 A1			sta Y
  9686 61B4 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  9687 61B6 8D B3 A1			sta Y+1
  9688
  9689 				; optimize OK (service.pas), line = 1837
  9690
  9691 61B9 AD B2 A1			lda Y
  9692 61BC 85 9F			sta :STACKORIGIN+9
  9693 61BE A0 00			ldy #$00
  9694 61C0 AD B3 A1			lda Y+1
  9695 61C3 10 01			spl
  9696 61C5 88				dey
  9697 61C6 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  9698 61C8 84 BF			sty :STACKORIGIN+STACKWIDTH*2+9
  9699 61CA 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
  9700 61CC 66 AF			ror :STACKORIGIN+STACKWIDTH+9
  9701 61CE 66 9F			ror :STACKORIGIN+9
  9702 61D0 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
  9703 61D2 66 AF			ror :STACKORIGIN+STACKWIDTH+9
  9704 61D4 66 9F			ror :STACKORIGIN+9
  9705 61D6 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
  9706 61D8 66 AF			ror :STACKORIGIN+STACKWIDTH+9
  9707 61DA 66 9F			ror :STACKORIGIN+9
  9708 61DC A5 9F			lda :STACKORIGIN+9
  9709 61DE 8D CE A1			sta YP
  9710 61E1 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  9711 61E3 8D CF A1			sta YP+1
  9712
  9713 				; optimize OK (service.pas), line = 1839
  9714
  9715 61E6 CD C7 A1			cmp YP1+1
  9716 61E9 D0 06			bne @+
  9717 61EB AD CE A1			lda YP
  9718 61EE CD C6 A1			cmp YP1
  9719 				@
  9720 61F1 D0 18			jne l_1748
  9721
  9722 				; optimize OK (service.pas), line = 1841
  9723
  9724 61F3 AD B0 A1			lda X
  9725 61F6 8D BC A1			sta XH
  9726 61F9 AD B1 A1			lda X+1
  9727 61FC 8D BD A1			sta XH+1
  9728
  9729 				; optimize OK (service.pas), line = 1842
  9730
  9731 61FF AD B2 A1			lda Y
  9732 6202 8D BE A1			sta YH
  9733 6205 AD B3 A1			lda Y+1
  9734 6208 8D BF A1			sta YH+1
  9735 620B			l_1748
  9736
  9737 				; optimize OK (service.pas), line = 1845
  9738
  9739 620B AD CF A1			lda YP+1
  9740 620E CD CB A1			cmp YP2+1
  9741 6211 D0 06			bne @+
  9742 6213 AD CE A1			lda YP
  9743 6216 CD CA A1			cmp YP2
  9744 				@
  9745 6219 D0 18			jne l_1767
  9746
  9747 				; optimize OK (service.pas), line = 1847
  9748
  9749 621B AD B0 A1			lda X
  9750 621E 8D C0 A1			sta XN
  9751 6221 AD B1 A1			lda X+1
  9752 6224 8D C1 A1			sta XN+1
  9753
  9754 				; optimize OK (service.pas), line = 1848
  9755
  9756 6227 AD B2 A1			lda Y
  9757 622A 8D C2 A1			sta YN
  9758 622D AD B3 A1			lda Y+1
  9759 6230 8D C3 A1			sta YN+1
  9760 6233			l_1767
  9761 6233			l_1710
  9762
  9763 				; optimize OK (service.pas), line = 1832
  9764
  9765 6233 AD C2 A1			lda YN
  9766 6236 29 07			and #$07
  9767 6238 F0 0C			jeq l_1711w
  9768 623A AD C2 A1			lda YN
  9769 623D 29 07			and #$07
  9770 623F C9 07			cmp #$07
  9771 6241 F0 03 4C 1B 61		jne l_1711
  9772 6246			l_1711w
  9773 6246			l_1703
  9774
  9775 				; optimize OK (service.pas), line = 1854
  9776
  9777 6246 AD C5 A1			lda XP1+1
  9778 6249 CD C9 A1			cmp XP2+1
  9779 624C D0 06			bne @+
  9780 624E AD C4 A1			lda XP1
  9781 6251 CD C8 A1			cmp XP2
  9782 				@
  9783 6254 D0 03 4C 95 63		jeq l_17A6
  9784
  9785 				; optimize OK (service.pas), line = 1856
  9786
  9787 6259 AD D0 A1			lda COLLISION
  9788 625C 09 02			ora #$02
  9789 625E 8D D0 A1			sta COLLISION
  9790
  9791 				; --- WhileProlog
  9792 6261 4C 82 63			jmp l_17B3
  9793 6264			l_17B4
  9794
  9795 				; optimize OK (service.pas), line = 1860
  9796
  9797 6264 AD B4 A1			lda XK
  9798 6267 85 9F			sta :STACKORIGIN+9
  9799 6269 A0 00			ldy #$00
  9800 626B AD B5 A1			lda XK+1
  9801 626E 10 01			spl
  9802 6270 88				dey
  9803 6271 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  9804 6273 84 BF			sty :STACKORIGIN+STACKWIDTH*2+9
  9805 6275 84 CF			sty :STACKORIGIN+STACKWIDTH*3+9
  9806 6277 AD B8 A1			lda XJ
  9807 627A 85 A0			sta :STACKORIGIN+10
  9808 627C A0 00			ldy #$00
  9809 627E AD B9 A1			lda XJ+1
  9810 6281 10 01			spl
  9811 6283 88				dey
  9812 6284 85 B0			sta :STACKORIGIN+STACKWIDTH+10
  9813 6286 84 C0			sty :STACKORIGIN+STACKWIDTH*2+10
  9814 6288 84 D0			sty :STACKORIGIN+STACKWIDTH*3+10
  9815 628A A5 9F			lda :STACKORIGIN+9
  9816 628C 18 65 A0			add :STACKORIGIN+10
  9817 628F 85 9F			sta :STACKORIGIN+9
  9818 6291 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  9819 6293 65 B0			adc :STACKORIGIN+STACKWIDTH+10
  9820 6295 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  9821 6297 A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
  9822 6299 65 C0			adc :STACKORIGIN+STACKWIDTH*2+10
  9823 629B 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
  9824 629D A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
  9825 629F 65 D0			adc :STACKORIGIN+STACKWIDTH*3+10
  9826 62A1 85 CF			sta :STACKORIGIN+STACKWIDTH*3+9
  9827 62A3 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
  9828 62A5 66 AF			ror :STACKORIGIN+STACKWIDTH+9
  9829 62A7 66 9F			ror :STACKORIGIN+9
  9830 62A9 A5 9F			lda :STACKORIGIN+9
  9831 62AB 8D B0 A1			sta X
  9832 62AE A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  9833 62B0 8D B1 A1			sta X+1
  9834
  9835 				; optimize OK (service.pas), line = 1861
  9836
  9837 62B3 AD B6 A1			lda YK
  9838 62B6 85 9F			sta :STACKORIGIN+9
  9839 62B8 A0 00			ldy #$00
  9840 62BA AD B7 A1			lda YK+1
  9841 62BD 10 01			spl
  9842 62BF 88				dey
  9843 62C0 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  9844 62C2 84 BF			sty :STACKORIGIN+STACKWIDTH*2+9
  9845 62C4 84 CF			sty :STACKORIGIN+STACKWIDTH*3+9
  9846 62C6 AD BA A1			lda YJ
  9847 62C9 85 A0			sta :STACKORIGIN+10
  9848 62CB A0 00			ldy #$00
  9849 62CD AD BB A1			lda YJ+1
  9850 62D0 10 01			spl
  9851 62D2 88				dey
  9852 62D3 85 B0			sta :STACKORIGIN+STACKWIDTH+10
  9853 62D5 84 C0			sty :STACKORIGIN+STACKWIDTH*2+10
  9854 62D7 84 D0			sty :STACKORIGIN+STACKWIDTH*3+10
  9855 62D9 A5 9F			lda :STACKORIGIN+9
  9856 62DB 18 65 A0			add :STACKORIGIN+10
  9857 62DE 85 9F			sta :STACKORIGIN+9
  9858 62E0 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  9859 62E2 65 B0			adc :STACKORIGIN+STACKWIDTH+10
  9860 62E4 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  9861 62E6 A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
  9862 62E8 65 C0			adc :STACKORIGIN+STACKWIDTH*2+10
  9863 62EA 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
  9864 62EC A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
  9865 62EE 65 D0			adc :STACKORIGIN+STACKWIDTH*3+10
  9866 62F0 85 CF			sta :STACKORIGIN+STACKWIDTH*3+9
  9867 62F2 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
  9868 62F4 66 AF			ror :STACKORIGIN+STACKWIDTH+9
  9869 62F6 66 9F			ror :STACKORIGIN+9
  9870 62F8 A5 9F			lda :STACKORIGIN+9
  9871 62FA 8D B2 A1			sta Y
  9872 62FD A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  9873 62FF 8D B3 A1			sta Y+1
  9874
  9875 				; optimize OK (service.pas), line = 1863
  9876
  9877 6302 AD B0 A1			lda X
  9878 6305 85 9F			sta :STACKORIGIN+9
  9879 6307 A0 00			ldy #$00
  9880 6309 AD B1 A1			lda X+1
  9881 630C 10 01			spl
  9882 630E 88				dey
  9883 630F 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  9884 6311 84 BF			sty :STACKORIGIN+STACKWIDTH*2+9
  9885 6313 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
  9886 6315 66 AF			ror :STACKORIGIN+STACKWIDTH+9
  9887 6317 66 9F			ror :STACKORIGIN+9
  9888 6319 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
  9889 631B 66 AF			ror :STACKORIGIN+STACKWIDTH+9
  9890 631D 66 9F			ror :STACKORIGIN+9
  9891 631F 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
  9892 6321 66 AF			ror :STACKORIGIN+STACKWIDTH+9
  9893 6323 66 9F			ror :STACKORIGIN+9
  9894 6325 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
  9895 6327 66 AF			ror :STACKORIGIN+STACKWIDTH+9
  9896 6329 66 9F			ror :STACKORIGIN+9
  9897 632B A5 9F			lda :STACKORIGIN+9
  9898 632D 8D CC A1			sta XP
  9899 6330 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  9900 6332 8D CD A1			sta XP+1
  9901
  9902 				; optimize OK (service.pas), line = 1865
  9903
  9904 6335 CD C5 A1			cmp XP1+1
  9905 6338 D0 06			bne @+
  9906 633A AD CC A1			lda XP
  9907 633D CD C4 A1			cmp XP1
  9908 				@
  9909 6340 D0 18			jne l_17EB
  9910
  9911 				; optimize OK (service.pas), line = 1867
  9912
  9913 6342 AD B0 A1			lda X
  9914 6345 8D B4 A1			sta XK
  9915 6348 AD B1 A1			lda X+1
  9916 634B 8D B5 A1			sta XK+1
  9917
  9918 				; optimize OK (service.pas), line = 1868
  9919
  9920 634E AD B2 A1			lda Y
  9921 6351 8D B6 A1			sta YK
  9922 6354 AD B3 A1			lda Y+1
  9923 6357 8D B7 A1			sta YK+1
  9924 635A			l_17EB
  9925
  9926 				; optimize OK (service.pas), line = 1871
  9927
  9928 635A AD CD A1			lda XP+1
  9929 635D CD C9 A1			cmp XP2+1
  9930 6360 D0 06			bne @+
  9931 6362 AD CC A1			lda XP
  9932 6365 CD C8 A1			cmp XP2
  9933 				@
  9934 6368 D0 18			jne l_180A
  9935
  9936 				; optimize OK (service.pas), line = 1873
  9937
  9938 636A AD B0 A1			lda X
  9939 636D 8D B8 A1			sta XJ
  9940 6370 AD B1 A1			lda X+1
  9941 6373 8D B9 A1			sta XJ+1
  9942
  9943 				; optimize OK (service.pas), line = 1874
  9944
  9945 6376 AD B2 A1			lda Y
  9946 6379 8D BA A1			sta YJ
  9947 637C AD B3 A1			lda Y+1
  9948 637F 8D BB A1			sta YJ+1
  9949 6382			l_180A
  9950 6382			l_17B3
  9951
  9952 				; optimize OK (service.pas), line = 1858
  9953
  9954 6382 AD B8 A1			lda XJ
  9955 6385 29 0F			and #$0F
  9956 6387 F0 0C			jeq l_17B4w
  9957 6389 AD B8 A1			lda XJ
  9958 638C 29 0F			and #$0F
  9959 638E C9 0F			cmp #$0F
  9960 6390 F0 03 4C 64 62		jne l_17B4
  9961 6395			l_17B4w
  9962 6395			l_17A6
  9963
  9964 				; optimize OK (service.pas), line = 1885
  9965
  9966 6395 AD D0 A1			lda COLLISION
  9967 6398 C9 01			cmp #$01
  9968 639A D0 03			jne l_1849
  9969 				; optimize OK (service.pas), line = 1887
  9970 				; optimize OK (service.pas), line = 1888
  9971 639C 4C 0A 64			jmp l_185D
  9972 639F			l_1849
  9973
  9974 				; optimize OK (service.pas), line = 1890
  9975
  9976 639F AD D0 A1			lda COLLISION
  9977 63A2 C9 02			cmp #$02
  9978 63A4 D0 2F			jne l_186F
  9979
  9980 				; optimize OK (service.pas), line = 1892
  9981
  9982 63A6 AC AB A1 84 84 AC + 	mwy X2 :bp2
  9983 63B0 A0 00			ldy #$00
  9984 63B2 AD B8 A1			lda XJ
  9985 63B5 91 84			sta (:bp2),y
  9986 63B7 C8				iny
  9987 63B8 AD B9 A1			lda XJ+1
  9988 63BB 91 84			sta (:bp2),y
  9989
  9990 				; optimize OK (service.pas), line = 1893
  9991
  9992 63BD AC AD A1 84 84 AC + 	mwy Y2 :bp2
  9993 63C7 A0 00			ldy #$00
  9994 63C9 AD BA A1			lda YJ
  9995 63CC 91 84			sta (:bp2),y
  9996 63CE C8				iny
  9997 63CF AD BB A1			lda YJ+1
  9998 63D2 4C 36 64			jmp l_1883
  9999 63D5			l_186F
 10000
 10001 				; optimize OK (service.pas), line = 1895
 10002
 10003 63D5 AD D0 A1			lda COLLISION
 10004 63D8 C9 03			cmp #$03
 10005 63DA D0 5C			jne l_1895
 10006
 10007 				; optimize OK (service.pas), line = 1897
 10008
 10009 63DC AC A7 A1 84 84 AC + 	mwy X1 :bp2
 10010 63E6 A0 00			ldy #$00
 10011 63E8 AD B8 A1			lda XJ
 10012 63EB 91 84			sta (:bp2),y
 10013 63ED C8				iny
 10014 63EE AD B9 A1			lda XJ+1
 10015 63F1 91 84			sta (:bp2),y
 10016
 10017 				; optimize OK (service.pas), line = 1898
 10018
 10019 63F3 AC A9 A1 84 84 AC + 	mwy Y1 :bp2
 10020 63FD A0 00			ldy #$00
 10021 63FF AD BA A1			lda YJ
 10022 6402 91 84			sta (:bp2),y
 10023 6404 C8				iny
 10024 6405 AD BB A1			lda YJ+1
 10025 6408 91 84			sta (:bp2),y
 10026 640A			l_185D
 10027
 10028 				; optimize OK (service.pas), line = 1899
 10029
 10030 640A AC AB A1 84 84 AC + 	mwy X2 :bp2
 10031 6414 A0 00			ldy #$00
 10032 6416 AD C0 A1			lda XN
 10033 6419 91 84			sta (:bp2),y
 10034 641B C8				iny
 10035 641C AD C1 A1			lda XN+1
 10036 641F 91 84			sta (:bp2),y
 10037
 10038 				; optimize OK (service.pas), line = 1900
 10039
 10040 6421 AC AD A1 84 84 AC + 	mwy Y2 :bp2
 10041 642B A0 00			ldy #$00
 10042 642D AD C2 A1			lda YN
 10043 6430 91 84			sta (:bp2),y
 10044 6432 C8				iny
 10045 6433 AD C3 A1			lda YN+1
 10046 6436			l_1883
 10047 6436 91 84			sta (:bp2),y
 10048 6438			l_1895
 10049 6438 4C 40 64			jmp l_18B5
 10050 643B			l_16F0
 10051
 10052 				; optimize OK (service.pas), line = 1905
 10053
 10054 643B A9 02			lda #$02
 10055 643D 20 AA 3C			jsr FATAL_ERROR
 10056 6440			l_18B5
 10057
 10058 				; optimize OK (service.pas), line = 1908
 10059
 10060 6440 AC A7 A1 84 84 AC + 	mwy X1 :bp2
 10061 644A A0 00			ldy #$00
 10062 644C B1 84			lda (:bp2),y
 10063 644E 38 E9 10			sub #$10
 10064 6451 91 84			sta (:bp2),y
 10065 6453 C8				iny
 10066 6454 B1 84			lda (:bp2),y
 10067 6456 E9 00			sbc #$00
 10068 6458 91 84			sta (:bp2),y
 10069
 10070 				; optimize OK (service.pas), line = 1909
 10071
 10072 645A AC A9 A1 84 84 AC + 	mwy Y1 :bp2
 10073 6464 A0 00			ldy #$00
 10074 6466 B1 84			lda (:bp2),y
 10075 6468 38 E9 18			sub #$18
 10076 646B 91 84			sta (:bp2),y
 10077 646D C8				iny
 10078 646E B1 84			lda (:bp2),y
 10079 6470 E9 00			sbc #$00
 10080 6472 91 84			sta (:bp2),y
 10081
 10082 				; optimize OK (service.pas), line = 1910
 10083
 10084 6474 AC AB A1 84 84 AC + 	mwy X2 :bp2
 10085 647E A0 00			ldy #$00
 10086 6480 B1 84			lda (:bp2),y
 10087 6482 38 E9 10			sub #$10
 10088 6485 91 84			sta (:bp2),y
 10089 6487 C8				iny
 10090 6488 B1 84			lda (:bp2),y
 10091 648A E9 00			sbc #$00
 10092 648C 91 84			sta (:bp2),y
 10093
 10094 				; optimize OK (service.pas), line = 1911
 10095
 10096 648E AC AD A1 84 84 AC + 	mwy Y2 :bp2
 10097 6498 A0 00			ldy #$00
 10098 649A B1 84			lda (:bp2),y
 10099 649C 38 E9 18			sub #$18
 10100 649F 91 84			sta (:bp2),y
 10101 64A1 C8				iny
 10102 64A2 B1 84			lda (:bp2),y
 10103 64A4 E9 00			sbc #$00
 10104 64A6 91 84			sta (:bp2),y
 10105
 10106 				; optimize OK (service.pas), line = 1914
 10107
 10108 64A8 AC A7 A1 84 84 AC + 	mwy X1 :bp2
 10109 64B2 A0 00			ldy #$00
 10110 64B4 B1 84			lda (:bp2),y
 10111 64B6 8D D6 A0			sta MAX.B
 10112 64B9 C8				iny
 10113 64BA B1 84			lda (:bp2),y
 10114 64BC 8D D7 A0			sta MAX.B+1
 10115 64BF A9 00			lda #$00
 10116 64C1 8D D4 A0			sta MAX.A
 10117 64C4 8D D5 A0			sta MAX.A+1
 10118 64C7 20 54 3C			jsr MAX
 10119 64CA A9 CF			lda #$CF
 10120 64CC 8D DA A0			sta MIN.A
 10121 64CF A9 00			lda #$00
 10122 64D1 8D DB A0			sta MIN.A+1
 10123 64D4 AD D8 A0			lda MAX.RESULT
 10124 64D7 8D DC A0			sta MIN.B
 10125 64DA AD D9 A0			lda MAX.RESULT+1
 10126 64DD 8D DD A0			sta MIN.B+1
 10127 64E0 20 7F 3C			jsr MIN
 10128 64E3 AC A7 A1 84 84 AC + 	mwy X1 :bp2
 10129 64ED A0 00			ldy #$00
 10130 64EF AD DE A0			lda MIN.RESULT
 10131 64F2 91 84			sta (:bp2),y
 10132 64F4 C8				iny
 10133 64F5 AD DF A0			lda MIN.RESULT+1
 10134 64F8 91 84			sta (:bp2),y
 10135
 10136 				; optimize OK (service.pas), line = 1915
 10137
 10138 64FA AC AB A1 84 84 AC + 	mwy X2 :bp2
 10139 6504 A0 00			ldy #$00
 10140 6506 B1 84			lda (:bp2),y
 10141 6508 8D D6 A0			sta MAX.B
 10142 650B C8				iny
 10143 650C B1 84			lda (:bp2),y
 10144 650E 8D D7 A0			sta MAX.B+1
 10145 6511 A9 00			lda #$00
 10146 6513 8D D4 A0			sta MAX.A
 10147 6516 8D D5 A0			sta MAX.A+1
 10148 6519 20 54 3C			jsr MAX
 10149 651C A9 CF			lda #$CF
 10150 651E 8D DA A0			sta MIN.A
 10151 6521 A9 00			lda #$00
 10152 6523 8D DB A0			sta MIN.A+1
 10153 6526 AD D8 A0			lda MAX.RESULT
 10154 6529 8D DC A0			sta MIN.B
 10155 652C AD D9 A0			lda MAX.RESULT+1
 10156 652F 8D DD A0			sta MIN.B+1
 10157 6532 20 7F 3C			jsr MIN
 10158 6535 AC AB A1 84 84 AC + 	mwy X2 :bp2
 10159 653F A0 00			ldy #$00
 10160 6541 AD DE A0			lda MIN.RESULT
 10161 6544 91 84			sta (:bp2),y
 10162 6546 C8				iny
 10163 6547 AD DF A0			lda MIN.RESULT+1
 10164 654A 91 84			sta (:bp2),y
 10165
 10166 				; optimize OK (service.pas), line = 1922
 10167
 10168 654C AD D0 A1			lda COLLISION
 10169 654F 8D AF A1			sta RESULT
 10170 6552			@exit
 10171
 10172 				; ------------------------------------------------------------
 10173
 10174 = A1A7			X1	= DATAORIGIN+$0302
 10175 = A1A9			Y1	= DATAORIGIN+$0304
 10176 = A1AB			X2	= DATAORIGIN+$0306
 10177 = A1AD			Y2	= DATAORIGIN+$0308
 10178 = A1AF			RESULT	= DATAORIGIN+$030A
 10179 = A1B0			X	= DATAORIGIN+$030B
 10180 = A1B2			Y	= DATAORIGIN+$030D
 10181 = A1B4			XK	= DATAORIGIN+$030F
 10182 = A1B6			YK	= DATAORIGIN+$0311
 10183 = A1B8			XJ	= DATAORIGIN+$0313
 10184 = A1BA			YJ	= DATAORIGIN+$0315
 10185 = A1BC			XH	= DATAORIGIN+$0317
 10186 = A1BE			YH	= DATAORIGIN+$0319
 10187 = A1C0			XN	= DATAORIGIN+$031B
 10188 = A1C2			YN	= DATAORIGIN+$031D
 10189 = A1C4			XP1	= DATAORIGIN+$031F
 10190 = A1C6			YP1	= DATAORIGIN+$0321
 10191 = A1C8			XP2	= DATAORIGIN+$0323
 10192 = A1CA			YP2	= DATAORIGIN+$0325
 10193 = A1CC			XP	= DATAORIGIN+$0327
 10194 = A1CE			YP	= DATAORIGIN+$0329
 10195 = A1D0			COLLISION	= DATAORIGIN+$032B
 10196
 10197 = A1A7			@VarData	= X1
 10198 = 0029			@VarDataSize	= 41
 10199
 10200 6552 60				rts						; ret
 10201 				.endl
 10202
 10203 6553			.local	SHOOT_BLOCK					; PROCEDURE
 10204
 10205 				; optimize OK (service.pas), line = 1933
 10206
 10207 6553 AD D2 A1			lda XB+1
 10208 6556 10 03 4C 64 67		jmi l_1909
 10209 655B AD D1 A1			lda XB
 10210 655E C9 0D			cmp #$0D
 10211 6560 AD D2 A1			lda XB+1
 10212 6563 E9 00			sbc #$00
 10213 6565 50 02			svc
 10214 6567 49 80			eor #$80
 10215 6569 30 03 4C 64 67		jpl l_1909
 10216 656E AD D4 A1			lda YB+1
 10217 6571 10 03 4C 64 67		jmi l_1909
 10218 6576 AD D3 A1			lda YB
 10219 6579 C9 0F			cmp #$0F
 10220 657B AD D4 A1			lda YB+1
 10221 657E E9 00			sbc #$00
 10222 6580 50 02			svc
 10223 6582 49 80			eor #$80
 10224 6584 30 03 4C 64 67		jpl l_1909
 10225
 10226 				; optimize OK (service.pas), line = 1936
 10227
 10228 6589 AD D3 A1			lda YB
 10229 658C 0A				asl @
 10230 658D 0A				asl @
 10231 658E 0A				asl @
 10232 658F 0A				asl @
 10233 6590 18 6D D1 A1			add XB
 10234 6594 8D D9 A1			sta I
 10235
 10236 				; optimize OK (service.pas), line = 1938
 10237
 10238 6597 A8				tay
 10239 6598 B9 00 DB			lda adr.WALL,y
 10240 659B D0 03 4C 64 67		jeq l_192D
 10241
 10242 				; optimize OK (service.pas), line = 1940
 10243
 10244 65A0 C9 0A			cmp #$0A
 10245 65A2 90 03 4C DA 66		jcs l_1943
 10246
 10247 				; optimize OK (service.pas), line = 1942
 10248
 10249 65A7 AD D1 A1			lda XB
 10250 65AA 8D 83 A1			sta REMOVE_BLOCK.XA
 10251 65AD AD D3 A1			lda YB
 10252 65B0 8D 84 A1			sta REMOVE_BLOCK.YA
 10253 65B3 20 83 54			jsr REMOVE_BLOCK
 10254
 10255 				; optimize FAIL (0, service.pas), line = 1943
 10256
 10257 65B6 CE 58 A0			dec REMAIN_BLK
 10258
 10259 				; optimize OK (service.pas), line = 1947
 10260
 10261 65B9 AD 75 A0			lda CUR_PLAYER
 10262 65BC 0A				asl @
 10263 65BD 0A				asl @
 10264 65BE 85 9F			sta :STACKORIGIN+9
 10265 65C0 AC D9 A1			ldy I
 10266 65C3 B9 00 DB			lda adr.WALL,y
 10267 65C6 0A				asl @
 10268 65C7 A8				tay
 10269 65C8 B9 69 20			lda adr.SCORE_WALL,y
 10270 65CB 85 A0			sta :STACKORIGIN+10
 10271 65CD B9 6A 20			lda adr.SCORE_WALL+1,y
 10272 65D0 85 B0			sta :STACKORIGIN+STACKWIDTH+10
 10273 65D2 A4 9F			ldy :STACKORIGIN+9
 10274 65D4 B9 5A A0			lda adr.SCORE.PLAYER,y
 10275 65D7 18 65 A0			add :STACKORIGIN+10
 10276 65DA 99 5A A0			sta adr.SCORE.PLAYER,y
 10277 65DD B9 5B A0			lda adr.SCORE.PLAYER+1,y
 10278 65E0 65 B0			adc :STACKORIGIN+STACKWIDTH+10
 10279 65E2 99 5B A0			sta adr.SCORE.PLAYER+1,y
 10280 65E5 B9 5C A0			lda adr.SCORE.PLAYER+2,y
 10281 65E8 69 00			adc #$00
 10282 65EA 99 5C A0			sta adr.SCORE.PLAYER+2,y
 10283 65ED B9 5D A0			lda adr.SCORE.PLAYER+3,y
 10284 65F0 69 00			adc #$00
 10285 65F2 99 5D A0			sta adr.SCORE.PLAYER+3,y
 10286
 10287 				; optimize OK (service.pas), line = 1949
 10288
 10289 65F5 A9 2C			lda #$2C
 10290 65F7 8D DD 9E			sta SYSTEM.RANDOM.@010184000.RANGE
 10291 65FA A9 01			lda #$01
 10292 65FC 8D DE 9E			sta SYSTEM.RANDOM.@010184000.RANGE+1
 10293 65FF 20 1A 33			jsr SYSTEM.RANDOM.@010184000
 10294 6602 AD 85 A0			lda LETT.INCOMING
 10295 6605 18 6D DF 9E			add SYSTEM.RANDOM.@010184000.RESULT
 10296 6609 8D 85 A0			sta LETT.INCOMING
 10297 660C AD 86 A0			lda LETT.INCOMING+1
 10298 660F 6D E0 9E			adc SYSTEM.RANDOM.@010184000.RESULT+1
 10299 6612 8D 86 A0			sta LETT.INCOMING+1
 10300
 10301 				; optimize OK (service.pas), line = 1951
 10302
 10303 6615 AD D1 A1			lda XB
 10304 6618 85 9F			sta :STACKORIGIN+9
 10305 661A A0 00			ldy #$00
 10306 661C AD D2 A1			lda XB+1
 10307 661F 10 01			spl
 10308 6621 88				dey
 10309 6622 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 10310 6624 84 BF			sty :STACKORIGIN+STACKWIDTH*2+9
 10311 6626 84 CF			sty :STACKORIGIN+STACKWIDTH*3+9
 10312 6628 06 9F			asl :STACKORIGIN+9
 10313 662A 26 AF			rol :STACKORIGIN+STACKWIDTH+9
 10314 662C 26 BF			rol :STACKORIGIN+STACKWIDTH*2+9
 10315 662E 26 CF			rol :STACKORIGIN+STACKWIDTH*3+9
 10316 6630 06 9F			asl :STACKORIGIN+9
 10317 6632 26 AF			rol :STACKORIGIN+STACKWIDTH+9
 10318 6634 06 9F			asl :STACKORIGIN+9
 10319 6636 26 AF			rol :STACKORIGIN+STACKWIDTH+9
 10320 6638 06 9F			asl :STACKORIGIN+9
 10321 663A 26 AF			rol :STACKORIGIN+STACKWIDTH+9
 10322 663C A5 9F			lda :STACKORIGIN+9
 10323 663E 18 69 09			add #$09
 10324 6641 8D 87 A0			sta LETT.NEXTX
 10325 6644 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 10326 6646 69 00			adc #$00
 10327 6648 8D 88 A0			sta LETT.NEXTX+1
 10328
 10329 				; optimize OK (service.pas), line = 1952
 10330
 10331 664B AD D3 A1			lda YB
 10332 664E 85 9F			sta :STACKORIGIN+9
 10333 6650 A0 00			ldy #$00
 10334 6652 AD D4 A1			lda YB+1
 10335 6655 10 01			spl
 10336 6657 88				dey
 10337 6658 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 10338 665A 84 BF			sty :STACKORIGIN+STACKWIDTH*2+9
 10339 665C 84 CF			sty :STACKORIGIN+STACKWIDTH*3+9
 10340 665E A5 9F			lda :STACKORIGIN+9
 10341 6660 18 69 01			add #$01
 10342 6663 85 9F			sta :STACKORIGIN+9
 10343 6665 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 10344 6667 69 00			adc #$00
 10345 6669 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 10346 666B A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
 10347 666D 69 00			adc #$00
 10348 666F 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
 10349 6671 A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
 10350 6673 69 00			adc #$00
 10351 6675 85 CF			sta :STACKORIGIN+STACKWIDTH*3+9
 10352 6677 06 9F			asl :STACKORIGIN+9
 10353 6679 26 AF			rol :STACKORIGIN+STACKWIDTH+9
 10354 667B 06 9F			asl :STACKORIGIN+9
 10355 667D 26 AF			rol :STACKORIGIN+STACKWIDTH+9
 10356 667F 06 9F			asl :STACKORIGIN+9
 10357 6681 26 AF			rol :STACKORIGIN+STACKWIDTH+9
 10358 6683 A5 9F			lda :STACKORIGIN+9
 10359 6685 18 69 16			add #$16
 10360 6688 8D 89 A0			sta LETT.NEXTY
 10361 668B A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 10362 668D 69 00			adc #$00
 10363 668F 8D 8A A0			sta LETT.NEXTY+1
 10364
 10365 				; optimize FAIL ('RANDOM_LETTER_DROP', service.pas), line = 1953
 10366
 10367 6692 20 4E 3F			jsr RANDOM_LETTER_DROP
 10368 6695 AD F4 A0			lda RANDOM_LETTER_DROP.RESULT
 10369 6698 8D 8B A0			sta LETT.NEXTTYPE
 10370 669B AD F5 A0			lda RANDOM_LETTER_DROP.RESULT+1
 10371 669E 8D 8C A0			sta LETT.NEXTTYPE+1
 10372
 10373 				; optimize OK (service.pas), line = 1955
 10374
 10375 66A1 AC D9 A1			ldy I
 10376 66A4 A9 00			lda #$00
 10377 66A6 99 00 DB			sta adr.WALL,y
 10378
 10379 				; optimize OK (service.pas), line = 1956
 10380
 10381 66A9 A9 B8			lda #$B8
 10382 66AB 8D 7F 9F			sta BALL_BLOCK_SOUND.A
 10383 66AE A9 01			lda #$01
 10384 66B0 8D 80 9F			sta BALL_BLOCK_SOUND.A+1
 10385 66B3 A9 03			lda #$03
 10386 66B5 8D 81 9F			sta BALL_BLOCK_SOUND.B
 10387 66B8 A9 00			lda #$00
 10388 66BA 8D 82 9F			sta BALL_BLOCK_SOUND.B+1
 10389 66BD 20 3F 38			jsr BALL_BLOCK_SOUND
 10390
 10391 				; optimize OK (service.pas), line = 1957
 10392
 10393 66C0 AC D5 A1 84 84 AC + 	mwy BALL :bp2
 10394 66CA A0 14			ldy #BALL.SBD-DATAORIGIN
 10395 66CC A9 00			lda #$00
 10396 66CE 91 84			sta (:bp2),y
 10397 66D0 C8				iny
 10398 66D1 91 84			sta (:bp2),y
 10399
 10400 				; optimize OK (service.pas), line = 1958
 10401
 10402 66D3 A0 16			ldy #BALL.BRWHIT-DATAORIGIN
 10403 66D5 91 84			sta (:bp2),y
 10404 66D7 4C 64 67			jmp l_1997
 10405 66DA			l_1943
 10406
 10407 				; optimize OK (service.pas), line = 1963
 10408
 10409 66DA AC D9 A1			ldy I
 10410 66DD B9 00 DB			lda adr.WALL,y
 10411 66E0 29 0F			and #$0F
 10412 66E2 C9 09			cmp #$09
 10413 66E4 D0 45			jne l_19B0
 10414
 10415 				; optimize OK (service.pas), line = 1965
 10416
 10417 66E6 AC D5 A1 84 84 AC + 	mwy BALL :bp2
 10418 66F0 A0 16			ldy #BALL.BRWHIT-DATAORIGIN
 10419 66F2 A9 00			lda #$00
 10420 66F4 91 84			sta (:bp2),y
 10421
 10422 				; optimize OK (service.pas), line = 1966
 10423
 10424 66F6 AC D9 A1			ldy I
 10425 66F9 B9 00 DB			lda adr.WALL,y
 10426 66FC 38 E9 10			sub #$10
 10427 66FF 99 00 DB			sta adr.WALL,y
 10428
 10429 				; optimize OK (service.pas), line = 1968
 10430
 10431 6702 A9 72			lda #$72
 10432 6704 8D 7F 9F			sta BALL_BLOCK_SOUND.A
 10433 6707 A9 01			lda #$01
 10434 6709 8D 80 9F			sta BALL_BLOCK_SOUND.A+1
 10435 670C A9 04			lda #$04
 10436 670E 8D 81 9F			sta BALL_BLOCK_SOUND.B
 10437 6711 A9 00			lda #$00
 10438 6713 8D 82 9F			sta BALL_BLOCK_SOUND.B+1
 10439 6716 20 3F 38			jsr BALL_BLOCK_SOUND
 10440
 10441 				; optimize OK (service.pas), line = 1969
 10442
 10443 6719 AD D1 A1			lda XB
 10444 671C 8D F2 A0			sta SHINE.XB
 10445 671F AD D3 A1			lda YB
 10446 6722 8D F3 A0			sta SHINE.YB
 10447 6725 20 12 3F			jsr SHINE
 10448 6728 4C 64 67			jmp l_19CA
 10449 672B			l_19B0
 10450
 10451 				; optimize OK (service.pas), line = 1973
 10452
 10453 672B AC D5 A1 84 84 AC + 	mwy BALL :bp2
 10454 6735 A0 16			ldy #BALL.BRWHIT-DATAORIGIN
 10455 6737 B1 84			lda (:bp2),y
 10456 6739 18 69 01			add #$01
 10457 673C 91 84			sta (:bp2),y
 10458
 10459 				; optimize OK (service.pas), line = 1974
 10460
 10461 673E AD D1 A1			lda XB
 10462 6741 8D F2 A0			sta SHINE.XB
 10463 6744 AD D3 A1			lda YB
 10464 6747 8D F3 A0			sta SHINE.YB
 10465 674A 20 12 3F			jsr SHINE
 10466
 10467 				; optimize OK (service.pas), line = 1976
 10468
 10469 674D A9 C8			lda #$C8
 10470 674F 8D 7F 9F			sta BALL_BLOCK_SOUND.A
 10471 6752 A9 00			lda #$00
 10472 6754 8D 80 9F			sta BALL_BLOCK_SOUND.A+1
 10473 6757 A9 07			lda #$07
 10474 6759 8D 81 9F			sta BALL_BLOCK_SOUND.B
 10475 675C A9 00			lda #$00
 10476 675E 8D 82 9F			sta BALL_BLOCK_SOUND.B+1
 10477 6761 20 3F 38			jsr BALL_BLOCK_SOUND
 10478 6764			l_19CA
 10479 6764			l_1997
 10480 6764			l_192D
 10481 6764			l_1909
 10482
 10483 				; ------------------------------------------------------------
 10484
 10485 = A1D1			XB	= DATAORIGIN+$032C
 10486 = A1D3			YB	= DATAORIGIN+$032E
 10487 = A1D5			BALL	= DATAORIGIN+$0330
 10488 = 9EA5			BALL.X	= DATAORIGIN+$0000
 10489 = 9EA7			BALL.Y	= DATAORIGIN+$0002
 10490 = 9EA9			BALL.FINEX	= DATAORIGIN+$0004
 10491 = 9EAB			BALL.FINEY	= DATAORIGIN+$0006
 10492 = 9EAD			BALL.OLDX	= DATAORIGIN+$0008
 10493 = 9EAF			BALL.OLDY	= DATAORIGIN+$000A
 10494 = 9EB1			BALL.SPEED	= DATAORIGIN+$000C
 10495 = 9EB3			BALL.FINESPEED	= DATAORIGIN+$000E
 10496 = 9EB5			BALL.SPEEDX	= DATAORIGIN+$0010
 10497 = 9EB7			BALL.SPEEDY	= DATAORIGIN+$0012
 10498 = 9EB9			BALL.SBD	= DATAORIGIN+$0014
 10499 = 9EBB			BALL.BRWHIT	= DATAORIGIN+$0016
 10500 = 9EBC			BALL.INPLAY	= DATAORIGIN+$0017
 10501 = 9EBD			BALL.LAUNCH	= DATAORIGIN+$0018
 10502 = 9EBE			BALL.ONVAUS	= DATAORIGIN+$0019
 10503 = 9EC0			BALL.STM	= DATAORIGIN+$001B
 10504 = A1D9			I	= DATAORIGIN+$0334
 10505
 10506 = A1D1			@VarData	= XB
 10507 = 0007			@VarDataSize	= 7
 10508
 10509 6764			@exit
 10510 					.ifdef @new
 10511 					lda <@VarData
 10512 					sta :ztmp
 10513 					lda >@VarData
 10514 					ldy #@VarDataSize-1
 10515 					jmp @FreeMem
 10516 					els
 10517 6764 60				rts						; ret
 10518 					eif
 10519 				.endl
 10520
 10521 6765			.local	SHOOT_BLOCK_WITH_FIRE				; PROCEDURE
 10522
 10523 				; optimize OK (service.pas), line = 1987
 10524
 10525 6765 AD DB A1			lda XB+1
 10526 6768 10 03 4C 7F 68		jmi l_1A0D
 10527 676D AD DA A1			lda XB
 10528 6770 C9 0D			cmp #$0D
 10529 6772 AD DB A1			lda XB+1
 10530 6775 E9 00			sbc #$00
 10531 6777 50 02			svc
 10532 6779 49 80			eor #$80
 10533 677B 30 03 4C 7F 68		jpl l_1A0D
 10534 6780 AD DD A1			lda YB+1
 10535 6783 10 03 4C 7F 68		jmi l_1A0D
 10536 6788 AD DC A1			lda YB
 10537 678B C9 0F			cmp #$0F
 10538 678D AD DD A1			lda YB+1
 10539 6790 E9 00			sbc #$00
 10540 6792 50 02			svc
 10541 6794 49 80			eor #$80
 10542 6796 30 03 4C 7F 68		jpl l_1A0D
 10543
 10544 				; optimize OK (service.pas), line = 1990
 10545
 10546 679B AD DC A1			lda YB
 10547 679E 0A				asl @
 10548 679F 0A				asl @
 10549 67A0 0A				asl @
 10550 67A1 0A				asl @
 10551 67A2 18 6D DA A1			add XB
 10552 67A6 8D DE A1			sta I
 10553
 10554 				; optimize OK (service.pas), line = 1992
 10555
 10556 67A9 A8				tay
 10557 67AA B9 00 DB			lda adr.WALL,y
 10558 67AD D0 03 4C 7F 68		jeq l_1A31
 10559
 10560 				; optimize OK (service.pas), line = 1994
 10561
 10562 67B2 C9 0A			cmp #$0A
 10563 67B4 B0 65			jcs l_1A47
 10564
 10565 				; optimize OK (service.pas), line = 1996
 10566
 10567 67B6 AD DA A1			lda XB
 10568 67B9 8D 83 A1			sta REMOVE_BLOCK.XA
 10569 67BC AD DC A1			lda YB
 10570 67BF 8D 84 A1			sta REMOVE_BLOCK.YA
 10571 67C2 20 83 54			jsr REMOVE_BLOCK
 10572
 10573 				; optimize FAIL (0, service.pas), line = 1997
 10574
 10575 67C5 CE 58 A0			dec REMAIN_BLK
 10576
 10577 				; optimize OK (service.pas), line = 1998
 10578
 10579 67C8 AD 75 A0			lda CUR_PLAYER
 10580 67CB 0A				asl @
 10581 67CC 0A				asl @
 10582 67CD 85 9F			sta :STACKORIGIN+9
 10583 67CF AC DE A1			ldy I
 10584 67D2 B9 00 DB			lda adr.WALL,y
 10585 67D5 0A				asl @
 10586 67D6 A8				tay
 10587 67D7 B9 69 20			lda adr.SCORE_WALL,y
 10588 67DA 85 A0			sta :STACKORIGIN+10
 10589 67DC B9 6A 20			lda adr.SCORE_WALL+1,y
 10590 67DF 85 B0			sta :STACKORIGIN+STACKWIDTH+10
 10591 67E1 A4 9F			ldy :STACKORIGIN+9
 10592 67E3 B9 5A A0			lda adr.SCORE.PLAYER,y
 10593 67E6 18 65 A0			add :STACKORIGIN+10
 10594 67E9 99 5A A0			sta adr.SCORE.PLAYER,y
 10595 67EC B9 5B A0			lda adr.SCORE.PLAYER+1,y
 10596 67EF 65 B0			adc :STACKORIGIN+STACKWIDTH+10
 10597 67F1 99 5B A0			sta adr.SCORE.PLAYER+1,y
 10598 67F4 B9 5C A0			lda adr.SCORE.PLAYER+2,y
 10599 67F7 69 00			adc #$00
 10600 67F9 99 5C A0			sta adr.SCORE.PLAYER+2,y
 10601 67FC B9 5D A0			lda adr.SCORE.PLAYER+3,y
 10602 67FF 69 00			adc #$00
 10603 6801 99 5D A0			sta adr.SCORE.PLAYER+3,y
 10604
 10605 				; optimize OK (service.pas), line = 1999
 10606
 10607 6804 AC DE A1			ldy I
 10608 6807 A9 00			lda #$00
 10609 6809 99 00 DB			sta adr.WALL,y
 10610
 10611 				; optimize OK (service.pas), line = 2000
 10612
 10613 680C A9 B8			lda #$B8
 10614 680E 8D 7F 9F			sta BALL_BLOCK_SOUND.A
 10615 6811 A9 01			lda #$01
 10616 6813 8D 80 9F			sta BALL_BLOCK_SOUND.A+1
 10617 6816 A9 03			lda #$03
 10618 6818 4C 74 68			jmp l_1A6F
 10619 681B			l_1A47
 10620
 10621 				; optimize OK (service.pas), line = 2005
 10622
 10623 681B AC DE A1			ldy I
 10624 681E B9 00 DB			lda adr.WALL,y
 10625 6821 29 0F			and #$0F
 10626 6823 C9 09			cmp #$09
 10627 6825 D0 32			jne l_1A88
 10628
 10629 				; optimize OK (service.pas), line = 2007
 10630
 10631 6827 B9 00 DB			lda adr.WALL,y
 10632 682A 38 E9 10			sub #$10
 10633 682D 99 00 DB			sta adr.WALL,y
 10634
 10635 				; optimize OK (service.pas), line = 2008
 10636
 10637 6830 A9 72			lda #$72
 10638 6832 8D 7F 9F			sta BALL_BLOCK_SOUND.A
 10639 6835 A9 01			lda #$01
 10640 6837 8D 80 9F			sta BALL_BLOCK_SOUND.A+1
 10641 683A A9 04			lda #$04
 10642 683C 8D 81 9F			sta BALL_BLOCK_SOUND.B
 10643 683F A9 00			lda #$00
 10644 6841 8D 82 9F			sta BALL_BLOCK_SOUND.B+1
 10645 6844 20 3F 38			jsr BALL_BLOCK_SOUND
 10646
 10647 				; optimize OK (service.pas), line = 2009
 10648
 10649 6847 AD DA A1			lda XB
 10650 684A 8D F2 A0			sta SHINE.XB
 10651 684D AD DC A1			lda YB
 10652 6850 8D F3 A0			sta SHINE.YB
 10653 6853 20 12 3F			jsr SHINE
 10654 6856 4C 7F 68			jmp l_1A9E
 10655 6859			l_1A88
 10656
 10657 				; optimize OK (service.pas), line = 2013
 10658
 10659 6859 AD DA A1			lda XB
 10660 685C 8D F2 A0			sta SHINE.XB
 10661 685F AD DC A1			lda YB
 10662 6862 8D F3 A0			sta SHINE.YB
 10663 6865 20 12 3F			jsr SHINE
 10664
 10665 				; optimize OK (service.pas), line = 2014
 10666
 10667 6868 A9 C8			lda #$C8
 10668 686A 8D 7F 9F			sta BALL_BLOCK_SOUND.A
 10669 686D A9 00			lda #$00
 10670 686F 8D 80 9F			sta BALL_BLOCK_SOUND.A+1
 10671 6872 A9 07			lda #$07
 10672 6874			l_1A6F
 10673 6874 8D 81 9F			sta BALL_BLOCK_SOUND.B
 10674 6877 A9 00			lda #$00
 10675 6879 8D 82 9F			sta BALL_BLOCK_SOUND.B+1
 10676 687C 20 3F 38			jsr BALL_BLOCK_SOUND
 10677 687F			l_1A9E
 10678 687F			l_1A31
 10679 687F			l_1A0D
 10680
 10681 				; ------------------------------------------------------------
 10682
 10683 = A1DA			XB	= DATAORIGIN+$0335
 10684 = A1DC			YB	= DATAORIGIN+$0337
 10685 = A1DE			I	= DATAORIGIN+$0339
 10686
 10687 = A1DA			@VarData	= XB
 10688 = 0005			@VarDataSize	= 5
 10689
 10690 687F			@exit
 10691 					.ifdef @new
 10692 					lda <@VarData
 10693 					sta :ztmp
 10694 					lda >@VarData
 10695 					ldy #@VarDataSize-1
 10696 					jmp @FreeMem
 10697 					els
 10698 687F 60				rts						; ret
 10699 					eif
 10700 				.endl
 10701
 10702 6880			.local	BALL_HIT_BLOCK					; PROCEDURE
 10703
 10704 				; optimize OK (service.pas), line = 2046
 10705
 10706 6880 A9 FF			lda #$FF
 10707 6882 8D FF A1			sta EMERGENCY
 10708
 10709 				; optimize OK (service.pas), line = 2048
 10710
 10711 6885 AC DF A1 84 84 AC + 	mwy BALL :bp2
 10712 688F A0 00			ldy #BALL.X-DATAORIGIN
 10713 6891 B1 84			lda (:bp2),y
 10714 6893 38 E9 09			sub #$09
 10715 6896 8D ED A1			sta NX
 10716 6899 C8				iny
 10717 689A B1 84			lda (:bp2),y
 10718 689C E9 00			sbc #$00
 10719 689E 8D EE A1			sta NX+1
 10720
 10721 				; optimize OK (service.pas), line = 2049
 10722
 10723 68A1 A0 02			ldy #BALL.Y-DATAORIGIN
 10724 68A3 B1 84			lda (:bp2),y
 10725 68A5 38 E9 16			sub #$16
 10726 68A8 8D EF A1			sta NY
 10727 68AB C8				iny
 10728 68AC B1 84			lda (:bp2),y
 10729 68AE E9 00			sbc #$00
 10730 68B0 8D F0 A1			sta NY+1
 10731
 10732 				; optimize OK (service.pas), line = 2052
 10733
 10734 68B3 A0 08			ldy #BALL.OLDX-DATAORIGIN
 10735 68B5 B1 84			lda (:bp2),y
 10736 68B7 38 E9 09			sub #$09
 10737 68BA 8D E9 A1			sta OX
 10738 68BD C8				iny
 10739 68BE B1 84			lda (:bp2),y
 10740 68C0 E9 00			sbc #$00
 10741 68C2 8D EA A1			sta OX+1
 10742
 10743 				; optimize OK (service.pas), line = 2053
 10744
 10745 68C5 A0 0A			ldy #BALL.OLDY-DATAORIGIN
 10746 68C7 B1 84			lda (:bp2),y
 10747 68C9 38 E9 16			sub #$16
 10748 68CC 8D EB A1			sta OY
 10749 68CF C8				iny
 10750 68D0 B1 84			lda (:bp2),y
 10751 68D2 E9 00			sbc #$00
 10752 68D4 8D EC A1			sta OY+1
 10753
 10754 				; optimize OK (service.pas), line = 2055
 10755
 10756 68D7 AD EE A1			lda NX+1
 10757 68DA 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 10758 68DC AD ED A1			lda NX
 10759 68DF 46 AF			lsr :STACKORIGIN+STACKWIDTH+9
 10760 68E1 6A				ror @
 10761 68E2 46 AF			lsr :STACKORIGIN+STACKWIDTH+9
 10762 68E4 6A				ror @
 10763 68E5 46 AF			lsr :STACKORIGIN+STACKWIDTH+9
 10764 68E7 6A				ror @
 10765 68E8 46 AF			lsr :STACKORIGIN+STACKWIDTH+9
 10766 68EA 6A				ror @
 10767 68EB 8D E7 A1			sta XB
 10768
 10769 				; optimize OK (service.pas), line = 2056
 10770
 10771 68EE AD F0 A1			lda NY+1
 10772 68F1 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 10773 68F3 AD EF A1			lda NY
 10774 68F6 46 AF			lsr :STACKORIGIN+STACKWIDTH+9
 10775 68F8 6A				ror @
 10776 68F9 46 AF			lsr :STACKORIGIN+STACKWIDTH+9
 10777 68FB 6A				ror @
 10778 68FC 46 AF			lsr :STACKORIGIN+STACKWIDTH+9
 10779 68FE 6A				ror @
 10780 68FF 8D E8 A1			sta YB
 10781
 10782 				; optimize OK (service.pas), line = 2060
 10783
 10784 6902 A9 10			lda #$10
 10785 6904 85 8E			sta :ecx
 10786 6906 85 92			sta :ztmp8
 10787 6908 AD E8 A1			lda YB
 10788 690B 85 86			sta :eax
 10789 690D 85 94			sta :ztmp10
 10790 					.ifdef fmulinit
 10791 					fmulu_8
 10792 					els
 10793 690F 20 BF 22			imulCL
 10794 					eif
 10795 6912 24 94			bit :ztmp10
 10796 6914 10 03			bpl @+
 10797 6916 38 E5 92			sub :ztmp8
 10798 				@
 10799 6919 24 92			bit :ztmp8
 10800 691B 10 03			bpl @+
 10801 691D 38 E5 94			sub :ztmp10
 10802 				@
 10803 6920 85 87			sta :eax+1
 10804 6922 A5 86			lda :eax
 10805 6924 18 6D E7 A1			add XB
 10806 6928 A8				tay
 10807 6929 B9 00 DB			lda adr.WALL,y
 10808 692C D0 03 4C 59 75		jeq l_1B07
 10809
 10810 				; optimize OK (service.pas), line = 2062
 10811
 10812 6931 A9 E9			lda <OX
 10813 6933 8D A7 A1			sta SPLIT_LINE.X1
 10814 6936 A9 A1			lda >OX
 10815 6938 8D A8 A1			sta SPLIT_LINE.X1+1
 10816 693B A9 EB			lda <OY
 10817 693D 8D A9 A1			sta SPLIT_LINE.Y1
 10818 6940 A9 A1			lda >OY
 10819 6942 8D AA A1			sta SPLIT_LINE.Y1+1
 10820 6945 A9 ED			lda <NX
 10821 6947 8D AB A1			sta SPLIT_LINE.X2
 10822 694A A9 A1			lda >NX
 10823 694C 8D AC A1			sta SPLIT_LINE.X2+1
 10824 694F A9 EF			lda <NY
 10825 6951 8D AD A1			sta SPLIT_LINE.Y2
 10826 6954 A9 A1			lda >NY
 10827 6956 8D AE A1			sta SPLIT_LINE.Y2+1
 10828 6959 20 8B 5D			jsr SPLIT_LINE
 10829 695C AD AF A1			lda SPLIT_LINE.RESULT
 10830 695F 8D 03 A2			sta COLLISION
 10831
 10832 				; optimize OK (service.pas), line = 2068
 10833
 10834 6962 C9 03			cmp #$03
 10835 6964 F0 03 4C 9A 6D		jne l_1B22
 10836
 10837 				; optimize OK (service.pas), line = 2070
 10838
 10839 6969 AC DF A1 84 84 AC + 	mwy BALL :bp2
 10840 6973 A0 08			ldy #BALL.OLDX-DATAORIGIN
 10841 6975 B1 84			lda (:bp2),y
 10842 6977 C8				iny
 10843 6978 38 ED E9 A1			sub OX
 10844 697C 38 E9 09			sub #$09
 10845 697F 8D E5 A1			sta LX
 10846
 10847 				; optimize OK (service.pas), line = 2071
 10848
 10849 6982 A0 0A			ldy #BALL.OLDY-DATAORIGIN
 10850 6984 B1 84			lda (:bp2),y
 10851 6986 C8				iny
 10852 6987 38 ED EB A1			sub OY
 10853 698B 38 E9 16			sub #$16
 10854 698E 8D E6 A1			sta LY
 10855
 10856 				; optimize OK (service.pas), line = 2073
 10857
 10858 6991 A0 08			ldy #BALL.OLDX-DATAORIGIN
 10859 6993 B1 84			lda (:bp2),y
 10860 6995 38 ED ED A1			sub NX
 10861 6999 85 9F			sta :STACKORIGIN+9
 10862 699B C8				iny
 10863 699C B1 84			lda (:bp2),y
 10864 699E ED EE A1			sbc NX+1
 10865 69A1 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 10866 69A3 A5 9F			lda :STACKORIGIN+9
 10867 69A5 38 E9 09			sub #$09
 10868 69A8 8D F1 A1			sta MX
 10869 69AB A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 10870 69AD E9 00			sbc #$00
 10871 69AF 8D F2 A1			sta MX+1
 10872
 10873 				; optimize OK (service.pas), line = 2074
 10874
 10875 69B2 A0 0A			ldy #BALL.OLDY-DATAORIGIN
 10876 69B4 B1 84			lda (:bp2),y
 10877 69B6 38 ED EF A1			sub NY
 10878 69BA 85 9F			sta :STACKORIGIN+9
 10879 69BC C8				iny
 10880 69BD B1 84			lda (:bp2),y
 10881 69BF ED F0 A1			sbc NY+1
 10882 69C2 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 10883 69C4 A5 9F			lda :STACKORIGIN+9
 10884 69C6 38 E9 16			sub #$16
 10885 69C9 8D F3 A1			sta MY
 10886 69CC A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 10887 69CE E9 00			sbc #$00
 10888 69D0 8D F4 A1			sta MY+1
 10889
 10890 				; optimize OK (service.pas), line = 2076
 10891
 10892 69D3 AD E5 A1			lda LX
 10893 69D6 85 8E			sta :ecx
 10894 69D8 85 92			sta :ztmp8
 10895 69DA 85 86			sta :eax
 10896 69DC 85 94			sta :ztmp10
 10897 					.ifdef fmulinit
 10898 					fmulu_8
 10899 					els
 10900 69DE 20 BF 22			imulCL
 10901 					eif
 10902 69E1 24 94			bit :ztmp10
 10903 69E3 10 03			bpl @+
 10904 69E5 38 E5 92			sub :ztmp8
 10905 				@
 10906 69E8 24 92			bit :ztmp8
 10907 69EA 10 03			bpl @+
 10908 69EC 38 E5 94			sub :ztmp10
 10909 				@
 10910 69EF 85 87			sta :eax+1
 10911 69F1 A5 86			lda :eax
 10912 69F3 85 9F			sta :STACKORIGIN+9
 10913 69F5 A5 87			lda :eax+1
 10914 69F7 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 10915 69F9 AD E6 A1			lda LY
 10916 69FC 85 8E			sta :ecx
 10917 69FE 85 92			sta :ztmp8
 10918 6A00 85 86			sta :eax
 10919 6A02 85 94			sta :ztmp10
 10920 					.ifdef fmulinit
 10921 					fmulu_8
 10922 					els
 10923 6A04 20 BF 22			imulCL
 10924 					eif
 10925 6A07 24 94			bit :ztmp10
 10926 6A09 10 03			bpl @+
 10927 6A0B 38 E5 92			sub :ztmp8
 10928 				@
 10929 6A0E 24 92			bit :ztmp8
 10930 6A10 10 03			bpl @+
 10931 6A12 38 E5 94			sub :ztmp10
 10932 				@
 10933 6A15 85 87			sta :eax+1
 10934 6A17 A5 9F			lda :STACKORIGIN+9
 10935 6A19 18 65 86			add :eax
 10936 6A1C 8D F5 A1			sta F1
 10937 6A1F A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 10938 6A21 65 87			adc :eax+1
 10939 6A23 8D F6 A1			sta F1+1
 10940
 10941 				; optimize OK (service.pas), line = 2077
 10942
 10943 6A26 AD F1 A1			lda MX
 10944 6A29 85 8E			sta :ecx
 10945 6A2B 85 86			sta :eax
 10946 6A2D AD F2 A1			lda MX+1
 10947 6A30 85 8F			sta :ecx+1
 10948 6A32 85 87			sta :eax+1
 10949 					.ifdef fmulinit
 10950 					fmulu_16
 10951 					els
 10952 6A34 20 0B 23			imulCX
 10953 					eif
 10954 6A37 A5 86			lda :eax
 10955 6A39 85 9F			sta :STACKORIGIN+9
 10956 6A3B A5 87			lda :eax+1
 10957 6A3D 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 10958 6A3F AD F3 A1			lda MY
 10959 6A42 85 8E			sta :ecx
 10960 6A44 85 86			sta :eax
 10961 6A46 AD F4 A1			lda MY+1
 10962 6A49 85 8F			sta :ecx+1
 10963 6A4B 85 87			sta :eax+1
 10964 					.ifdef fmulinit
 10965 					fmulu_16
 10966 					els
 10967 6A4D 20 0B 23			imulCX
 10968 					eif
 10969 6A50 A5 86			lda :eax
 10970 6A52 18 65 9F			add :STACKORIGIN+9
 10971 6A55 8D F7 A1			sta F2
 10972 6A58 A5 87			lda :eax+1
 10973 6A5A 65 AF			adc :STACKORIGIN+STACKWIDTH+9
 10974 6A5C 8D F8 A1			sta F2+1
 10975
 10976 				; optimize OK (service.pas), line = 2079
 10977
 10978 6A5F AD F5 A1			lda F1
 10979 6A62 CD F7 A1			cmp F2
 10980 6A65 AD F6 A1			lda F1+1
 10981 6A68 ED F8 A1			sbc F2+1
 10982 6A6B 50 02			svc
 10983 6A6D 49 80			eor #$80
 10984 6A6F 30 03 4C 05 6C		jpl l_1B99
 10985
 10986 				; optimize OK (service.pas), line = 2085
 10987
 10988 6A74 AD E9 A1			lda OX
 10989 6A77 85 A0			sta :STACKORIGIN+10
 10990 6A79 A0 00			ldy #$00
 10991 6A7B AD EA A1			lda OX+1
 10992 6A7E 10 01			spl
 10993 6A80 88				dey
 10994 6A81 85 B0			sta :STACKORIGIN+STACKWIDTH+10
 10995 6A83 84 C0			sty :STACKORIGIN+STACKWIDTH*2+10
 10996 6A85 46 C0			lsr :STACKORIGIN+STACKWIDTH*2+10
 10997 6A87 66 B0			ror :STACKORIGIN+STACKWIDTH+10
 10998 6A89 66 A0			ror :STACKORIGIN+10
 10999 6A8B 46 C0			lsr :STACKORIGIN+STACKWIDTH*2+10
 11000 6A8D 66 B0			ror :STACKORIGIN+STACKWIDTH+10
 11001 6A8F 66 A0			ror :STACKORIGIN+10
 11002 6A91 46 C0			lsr :STACKORIGIN+STACKWIDTH*2+10
 11003 6A93 66 B0			ror :STACKORIGIN+STACKWIDTH+10
 11004 6A95 66 A0			ror :STACKORIGIN+10
 11005 6A97 46 C0			lsr :STACKORIGIN+STACKWIDTH*2+10
 11006 6A99 66 B0			ror :STACKORIGIN+STACKWIDTH+10
 11007 6A9B 66 A0			ror :STACKORIGIN+10
 11008 6A9D A5 A0			lda :STACKORIGIN+10
 11009 6A9F 8D D4 A0			sta MAX.A
 11010 6AA2 A5 B0			lda :STACKORIGIN+STACKWIDTH+10
 11011 6AA4 8D D5 A0			sta MAX.A+1
 11012 6AA7 A9 00			lda #$00
 11013 6AA9 8D D6 A0			sta MAX.B
 11014 6AAC 8D D7 A0			sta MAX.B+1
 11015 6AAF 20 54 3C			jsr MAX
 11016 6AB2 A9 0C			lda #$0C
 11017 6AB4 8D DA A0			sta MIN.A
 11018 6AB7 A9 00			lda #$00
 11019 6AB9 8D DB A0			sta MIN.A+1
 11020 6ABC AD D8 A0			lda MAX.RESULT
 11021 6ABF 8D DC A0			sta MIN.B
 11022 6AC2 AD D9 A0			lda MAX.RESULT+1
 11023 6AC5 8D DD A0			sta MIN.B+1
 11024 6AC8 20 7F 3C			jsr MIN
 11025 6ACB AD DE A0			lda MIN.RESULT
 11026 6ACE 8D E7 A1			sta XB
 11027
 11028 				; optimize OK (service.pas), line = 2086
 11029
 11030 6AD1 AD EB A1			lda OY
 11031 6AD4 85 9F			sta :STACKORIGIN+9
 11032 6AD6 A0 00			ldy #$00
 11033 6AD8 AD EC A1			lda OY+1
 11034 6ADB 10 01			spl
 11035 6ADD 88				dey
 11036 6ADE 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 11037 6AE0 84 BF			sty :STACKORIGIN+STACKWIDTH*2+9
 11038 6AE2 84 CF			sty :STACKORIGIN+STACKWIDTH*3+9
 11039 6AE4 A5 9F			lda :STACKORIGIN+9
 11040 6AE6 18 69 18			add #$18
 11041 6AE9 85 9F			sta :STACKORIGIN+9
 11042 6AEB A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 11043 6AED 69 00			adc #$00
 11044 6AEF 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 11045 6AF1 A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
 11046 6AF3 69 00			adc #$00
 11047 6AF5 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
 11048 6AF7 A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
 11049 6AF9 69 00			adc #$00
 11050 6AFB 85 CF			sta :STACKORIGIN+STACKWIDTH*3+9
 11051 6AFD 46 AF			lsr :STACKORIGIN+STACKWIDTH+9
 11052 6AFF 66 9F			ror :STACKORIGIN+9
 11053 6B01 46 AF			lsr :STACKORIGIN+STACKWIDTH+9
 11054 6B03 66 9F			ror :STACKORIGIN+9
 11055 6B05 46 AF			lsr :STACKORIGIN+STACKWIDTH+9
 11056 6B07 66 9F			ror :STACKORIGIN+9
 11057 6B09 A5 9F			lda :STACKORIGIN+9
 11058 6B0B 38 E9 03			sub #$03
 11059 6B0E 8D E8 A1			sta YB
 11060
 11061 				; optimize OK (service.pas), line = 2089
 11062
 11063 6B11 A9 10			lda #$10
 11064 6B13 85 8E			sta :ecx
 11065 6B15 85 92			sta :ztmp8
 11066 6B17 AD E8 A1			lda YB
 11067 6B1A 85 86			sta :eax
 11068 6B1C 85 94			sta :ztmp10
 11069 					.ifdef fmulinit
 11070 					fmulu_8
 11071 					els
 11072 6B1E 20 BF 22			imulCL
 11073 					eif
 11074 6B21 24 94			bit :ztmp10
 11075 6B23 10 03			bpl @+
 11076 6B25 38 E5 92			sub :ztmp8
 11077 				@
 11078 6B28 24 92			bit :ztmp8
 11079 6B2A 10 03			bpl @+
 11080 6B2C 38 E5 94			sub :ztmp10
 11081 				@
 11082 6B2F 85 87			sta :eax+1
 11083 6B31 A5 86			lda :eax
 11084 6B33 18 6D E7 A1			add XB
 11085 6B37 A8				tay
 11086 6B38 B9 00 DB			lda adr.WALL,y
 11087 6B3B F0 03 4C EA 6B		jne l_1BD7
 11088
 11089 				; optimize OK (service.pas), line = 2091
 11090
 11091 6B40 AD ED A1			lda NX
 11092 6B43 85 9F			sta :STACKORIGIN+9
 11093 6B45 A0 00			ldy #$00
 11094 6B47 AD EE A1			lda NX+1
 11095 6B4A 10 01			spl
 11096 6B4C 88				dey
 11097 6B4D 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 11098 6B4F 84 BF			sty :STACKORIGIN+STACKWIDTH*2+9
 11099 6B51 84 CF			sty :STACKORIGIN+STACKWIDTH*3+9
 11100 6B53 46 CF			lsr :STACKORIGIN+STACKWIDTH*3+9
 11101 6B55 66 BF			ror :STACKORIGIN+STACKWIDTH*2+9
 11102 6B57 66 AF			ror :STACKORIGIN+STACKWIDTH+9
 11103 6B59 66 9F			ror :STACKORIGIN+9
 11104 6B5B 46 CF			lsr :STACKORIGIN+STACKWIDTH*3+9
 11105 6B5D 66 BF			ror :STACKORIGIN+STACKWIDTH*2+9
 11106 6B5F 66 AF			ror :STACKORIGIN+STACKWIDTH+9
 11107 6B61 66 9F			ror :STACKORIGIN+9
 11108 6B63 46 CF			lsr :STACKORIGIN+STACKWIDTH*3+9
 11109 6B65 66 BF			ror :STACKORIGIN+STACKWIDTH*2+9
 11110 6B67 66 AF			ror :STACKORIGIN+STACKWIDTH+9
 11111 6B69 66 9F			ror :STACKORIGIN+9
 11112 6B6B 46 CF			lsr :STACKORIGIN+STACKWIDTH*3+9
 11113 6B6D 66 BF			ror :STACKORIGIN+STACKWIDTH*2+9
 11114 6B6F 66 AF			ror :STACKORIGIN+STACKWIDTH+9
 11115 6B71 66 9F			ror :STACKORIGIN+9
 11116 6B73 A9 00			lda #$00
 11117 6B75 8D D4 A0			sta MAX.A
 11118 6B78 8D D5 A0			sta MAX.A+1
 11119 6B7B A5 9F			lda :STACKORIGIN+9
 11120 6B7D 8D D6 A0			sta MAX.B
 11121 6B80 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 11122 6B82 8D D7 A0			sta MAX.B+1
 11123 6B85 20 54 3C			jsr MAX
 11124 6B88 A9 0C			lda #$0C
 11125 6B8A 8D DA A0			sta MIN.A
 11126 6B8D A9 00			lda #$00
 11127 6B8F 8D DB A0			sta MIN.A+1
 11128 6B92 AD D8 A0			lda MAX.RESULT
 11129 6B95 8D DC A0			sta MIN.B
 11130 6B98 AD D9 A0			lda MAX.RESULT+1
 11131 6B9B 8D DD A0			sta MIN.B+1
 11132 6B9E 20 7F 3C			jsr MIN
 11133 6BA1 AD DE A0			lda MIN.RESULT
 11134 6BA4 8D E7 A1			sta XB
 11135
 11136 				; optimize OK (service.pas), line = 2092
 11137
 11138 6BA7 AD EF A1			lda NY
 11139 6BAA 85 9F			sta :STACKORIGIN+9
 11140 6BAC A0 00			ldy #$00
 11141 6BAE AD F0 A1			lda NY+1
 11142 6BB1 10 01			spl
 11143 6BB3 88				dey
 11144 6BB4 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 11145 6BB6 84 BF			sty :STACKORIGIN+STACKWIDTH*2+9
 11146 6BB8 84 CF			sty :STACKORIGIN+STACKWIDTH*3+9
 11147 6BBA A5 9F			lda :STACKORIGIN+9
 11148 6BBC 18 69 18			add #$18
 11149 6BBF 85 9F			sta :STACKORIGIN+9
 11150 6BC1 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 11151 6BC3 69 00			adc #$00
 11152 6BC5 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 11153 6BC7 A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
 11154 6BC9 69 00			adc #$00
 11155 6BCB 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
 11156 6BCD A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
 11157 6BCF 69 00			adc #$00
 11158 6BD1 85 CF			sta :STACKORIGIN+STACKWIDTH*3+9
 11159 6BD3 46 AF			lsr :STACKORIGIN+STACKWIDTH+9
 11160 6BD5 66 9F			ror :STACKORIGIN+9
 11161 6BD7 46 AF			lsr :STACKORIGIN+STACKWIDTH+9
 11162 6BD9 66 9F			ror :STACKORIGIN+9
 11163 6BDB 46 AF			lsr :STACKORIGIN+STACKWIDTH+9
 11164 6BDD 66 9F			ror :STACKORIGIN+9
 11165 6BDF A5 9F			lda :STACKORIGIN+9
 11166 6BE1 38 E9 03			sub #$03
 11167 6BE4 8D E8 A1			sta YB
 11168 6BE7 4C 02 6C			jmp l_1BFF
 11169 6BEA			l_1BD7
 11170
 11171 				; optimize OK (service.pas), line = 2096
 11172
 11173 6BEA AD E9 A1			lda OX
 11174 6BED 8D ED A1			sta NX
 11175 6BF0 AD EA A1			lda OX+1
 11176 6BF3 8D EE A1			sta NX+1
 11177
 11178 				; optimize OK (service.pas), line = 2097
 11179
 11180 6BF6 AD EB A1			lda OY
 11181 6BF9 8D EF A1			sta NY
 11182 6BFC AD EC A1			lda OY+1
 11183 6BFF 8D F0 A1			sta NY+1
 11184 6C02			l_1BFF
 11185 6C02 4C 9A 6D			jmp l_1C12
 11186 6C05			l_1B99
 11187
 11188 				; optimize OK (service.pas), line = 2107
 11189
 11190 6C05 AD ED A1			lda NX
 11191 6C08 85 9F			sta :STACKORIGIN+9
 11192 6C0A A0 00			ldy #$00
 11193 6C0C AD EE A1			lda NX+1
 11194 6C0F 10 01			spl
 11195 6C11 88				dey
 11196 6C12 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 11197 6C14 84 BF			sty :STACKORIGIN+STACKWIDTH*2+9
 11198 6C16 84 CF			sty :STACKORIGIN+STACKWIDTH*3+9
 11199 6C18 46 CF			lsr :STACKORIGIN+STACKWIDTH*3+9
 11200 6C1A 66 BF			ror :STACKORIGIN+STACKWIDTH*2+9
 11201 6C1C 66 AF			ror :STACKORIGIN+STACKWIDTH+9
 11202 6C1E 66 9F			ror :STACKORIGIN+9
 11203 6C20 46 CF			lsr :STACKORIGIN+STACKWIDTH*3+9
 11204 6C22 66 BF			ror :STACKORIGIN+STACKWIDTH*2+9
 11205 6C24 66 AF			ror :STACKORIGIN+STACKWIDTH+9
 11206 6C26 66 9F			ror :STACKORIGIN+9
 11207 6C28 46 CF			lsr :STACKORIGIN+STACKWIDTH*3+9
 11208 6C2A 66 BF			ror :STACKORIGIN+STACKWIDTH*2+9
 11209 6C2C 66 AF			ror :STACKORIGIN+STACKWIDTH+9
 11210 6C2E 66 9F			ror :STACKORIGIN+9
 11211 6C30 46 CF			lsr :STACKORIGIN+STACKWIDTH*3+9
 11212 6C32 66 BF			ror :STACKORIGIN+STACKWIDTH*2+9
 11213 6C34 66 AF			ror :STACKORIGIN+STACKWIDTH+9
 11214 6C36 66 9F			ror :STACKORIGIN+9
 11215 6C38 A9 00			lda #$00
 11216 6C3A 8D D4 A0			sta MAX.A
 11217 6C3D 8D D5 A0			sta MAX.A+1
 11218 6C40 A5 9F			lda :STACKORIGIN+9
 11219 6C42 8D D6 A0			sta MAX.B
 11220 6C45 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 11221 6C47 8D D7 A0			sta MAX.B+1
 11222 6C4A 20 54 3C			jsr MAX
 11223 6C4D A9 0C			lda #$0C
 11224 6C4F 8D DA A0			sta MIN.A
 11225 6C52 A9 00			lda #$00
 11226 6C54 8D DB A0			sta MIN.A+1
 11227 6C57 AD D8 A0			lda MAX.RESULT
 11228 6C5A 8D DC A0			sta MIN.B
 11229 6C5D AD D9 A0			lda MAX.RESULT+1
 11230 6C60 8D DD A0			sta MIN.B+1
 11231 6C63 20 7F 3C			jsr MIN
 11232 6C66 AD DE A0			lda MIN.RESULT
 11233 6C69 8D E7 A1			sta XB
 11234
 11235 				; optimize OK (service.pas), line = 2108
 11236
 11237 6C6C AD EF A1			lda NY
 11238 6C6F 85 9F			sta :STACKORIGIN+9
 11239 6C71 A0 00			ldy #$00
 11240 6C73 AD F0 A1			lda NY+1
 11241 6C76 10 01			spl
 11242 6C78 88				dey
 11243 6C79 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 11244 6C7B 84 BF			sty :STACKORIGIN+STACKWIDTH*2+9
 11245 6C7D 84 CF			sty :STACKORIGIN+STACKWIDTH*3+9
 11246 6C7F A5 9F			lda :STACKORIGIN+9
 11247 6C81 18 69 18			add #$18
 11248 6C84 85 9F			sta :STACKORIGIN+9
 11249 6C86 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 11250 6C88 69 00			adc #$00
 11251 6C8A 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 11252 6C8C A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
 11253 6C8E 69 00			adc #$00
 11254 6C90 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
 11255 6C92 A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
 11256 6C94 69 00			adc #$00
 11257 6C96 85 CF			sta :STACKORIGIN+STACKWIDTH*3+9
 11258 6C98 46 AF			lsr :STACKORIGIN+STACKWIDTH+9
 11259 6C9A 66 9F			ror :STACKORIGIN+9
 11260 6C9C 46 AF			lsr :STACKORIGIN+STACKWIDTH+9
 11261 6C9E 66 9F			ror :STACKORIGIN+9
 11262 6CA0 46 AF			lsr :STACKORIGIN+STACKWIDTH+9
 11263 6CA2 66 9F			ror :STACKORIGIN+9
 11264 6CA4 A5 9F			lda :STACKORIGIN+9
 11265 6CA6 38 E9 03			sub #$03
 11266 6CA9 8D E8 A1			sta YB
 11267
 11268 				; optimize OK (service.pas), line = 2110
 11269
 11270 6CAC A9 10			lda #$10
 11271 6CAE 85 8E			sta :ecx
 11272 6CB0 85 92			sta :ztmp8
 11273 6CB2 AD E8 A1			lda YB
 11274 6CB5 85 86			sta :eax
 11275 6CB7 85 94			sta :ztmp10
 11276 					.ifdef fmulinit
 11277 					fmulu_8
 11278 					els
 11279 6CB9 20 BF 22			imulCL
 11280 					eif
 11281 6CBC 24 94			bit :ztmp10
 11282 6CBE 10 03			bpl @+
 11283 6CC0 38 E5 92			sub :ztmp8
 11284 				@
 11285 6CC3 24 92			bit :ztmp8
 11286 6CC5 10 03			bpl @+
 11287 6CC7 38 E5 94			sub :ztmp10
 11288 				@
 11289 6CCA 85 87			sta :eax+1
 11290 6CCC A5 86			lda :eax
 11291 6CCE 18 6D E7 A1			add XB
 11292 6CD2 A8				tay
 11293 6CD3 B9 00 DB			lda adr.WALL,y
 11294 6CD6 F0 03 4C 9A 6D		jne l_1C4F
 11295
 11296 				; optimize OK (service.pas), line = 2112
 11297
 11298 6CDB AD E9 A1			lda OX
 11299 6CDE 8D ED A1			sta NX
 11300 6CE1 AD EA A1			lda OX+1
 11301 6CE4 8D EE A1			sta NX+1
 11302
 11303 				; optimize OK (service.pas), line = 2113
 11304
 11305 6CE7 AD EB A1			lda OY
 11306 6CEA 8D EF A1			sta NY
 11307 6CED AD EC A1			lda OY+1
 11308 6CF0 8D F0 A1			sta NY+1
 11309
 11310 				; optimize OK (service.pas), line = 2115
 11311
 11312 6CF3 AD ED A1			lda NX
 11313 6CF6 85 9F			sta :STACKORIGIN+9
 11314 6CF8 A0 00			ldy #$00
 11315 6CFA AD EE A1			lda NX+1
 11316 6CFD 10 01			spl
 11317 6CFF 88				dey
 11318 6D00 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 11319 6D02 84 BF			sty :STACKORIGIN+STACKWIDTH*2+9
 11320 6D04 84 CF			sty :STACKORIGIN+STACKWIDTH*3+9
 11321 6D06 46 CF			lsr :STACKORIGIN+STACKWIDTH*3+9
 11322 6D08 66 BF			ror :STACKORIGIN+STACKWIDTH*2+9
 11323 6D0A 66 AF			ror :STACKORIGIN+STACKWIDTH+9
 11324 6D0C 66 9F			ror :STACKORIGIN+9
 11325 6D0E 46 CF			lsr :STACKORIGIN+STACKWIDTH*3+9
 11326 6D10 66 BF			ror :STACKORIGIN+STACKWIDTH*2+9
 11327 6D12 66 AF			ror :STACKORIGIN+STACKWIDTH+9
 11328 6D14 66 9F			ror :STACKORIGIN+9
 11329 6D16 46 CF			lsr :STACKORIGIN+STACKWIDTH*3+9
 11330 6D18 66 BF			ror :STACKORIGIN+STACKWIDTH*2+9
 11331 6D1A 66 AF			ror :STACKORIGIN+STACKWIDTH+9
 11332 6D1C 66 9F			ror :STACKORIGIN+9
 11333 6D1E 46 CF			lsr :STACKORIGIN+STACKWIDTH*3+9
 11334 6D20 66 BF			ror :STACKORIGIN+STACKWIDTH*2+9
 11335 6D22 66 AF			ror :STACKORIGIN+STACKWIDTH+9
 11336 6D24 66 9F			ror :STACKORIGIN+9
 11337 6D26 A9 00			lda #$00
 11338 6D28 8D D4 A0			sta MAX.A
 11339 6D2B 8D D5 A0			sta MAX.A+1
 11340 6D2E A5 9F			lda :STACKORIGIN+9
 11341 6D30 8D D6 A0			sta MAX.B
 11342 6D33 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 11343 6D35 8D D7 A0			sta MAX.B+1
 11344 6D38 20 54 3C			jsr MAX
 11345 6D3B A9 0C			lda #$0C
 11346 6D3D 8D DA A0			sta MIN.A
 11347 6D40 A9 00			lda #$00
 11348 6D42 8D DB A0			sta MIN.A+1
 11349 6D45 AD D8 A0			lda MAX.RESULT
 11350 6D48 8D DC A0			sta MIN.B
 11351 6D4B AD D9 A0			lda MAX.RESULT+1
 11352 6D4E 8D DD A0			sta MIN.B+1
 11353 6D51 20 7F 3C			jsr MIN
 11354 6D54 AD DE A0			lda MIN.RESULT
 11355 6D57 8D E7 A1			sta XB
 11356
 11357 				; optimize OK (service.pas), line = 2116
 11358
 11359 6D5A AD EF A1			lda NY
 11360 6D5D 85 9F			sta :STACKORIGIN+9
 11361 6D5F A0 00			ldy #$00
 11362 6D61 AD F0 A1			lda NY+1
 11363 6D64 10 01			spl
 11364 6D66 88				dey
 11365 6D67 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 11366 6D69 84 BF			sty :STACKORIGIN+STACKWIDTH*2+9
 11367 6D6B 84 CF			sty :STACKORIGIN+STACKWIDTH*3+9
 11368 6D6D A5 9F			lda :STACKORIGIN+9
 11369 6D6F 18 69 18			add #$18
 11370 6D72 85 9F			sta :STACKORIGIN+9
 11371 6D74 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 11372 6D76 69 00			adc #$00
 11373 6D78 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 11374 6D7A A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
 11375 6D7C 69 00			adc #$00
 11376 6D7E 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
 11377 6D80 A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
 11378 6D82 69 00			adc #$00
 11379 6D84 85 CF			sta :STACKORIGIN+STACKWIDTH*3+9
 11380 6D86 46 AF			lsr :STACKORIGIN+STACKWIDTH+9
 11381 6D88 66 9F			ror :STACKORIGIN+9
 11382 6D8A 46 AF			lsr :STACKORIGIN+STACKWIDTH+9
 11383 6D8C 66 9F			ror :STACKORIGIN+9
 11384 6D8E 46 AF			lsr :STACKORIGIN+STACKWIDTH+9
 11385 6D90 66 9F			ror :STACKORIGIN+9
 11386 6D92 A5 9F			lda :STACKORIGIN+9
 11387 6D94 38 E9 03			sub #$03
 11388 6D97 8D E8 A1			sta YB
 11389 6D9A			l_1C4F
 11390 6D9A			l_1C12
 11391 6D9A			l_1B22
 11392
 11393 				; optimize OK (service.pas), line = 2122
 11394
 11395 6D9A AC DF A1 84 84 AC + 	mwy BALL :bp2
 11396 6DA4 A0 00			ldy #BALL.X-DATAORIGIN
 11397 6DA6 AD ED A1			lda NX
 11398 6DA9 18 69 09			add #$09
 11399 6DAC 91 84			sta (:bp2),y
 11400 6DAE C8				iny
 11401 6DAF AD EE A1			lda NX+1
 11402 6DB2 69 00			adc #$00
 11403 6DB4 91 84			sta (:bp2),y
 11404
 11405 				; optimize OK (service.pas), line = 2123
 11406
 11407 6DB6 A0 02			ldy #BALL.Y-DATAORIGIN
 11408 6DB8 AD EF A1			lda NY
 11409 6DBB 18 69 16			add #$16
 11410 6DBE 91 84			sta (:bp2),y
 11411 6DC0 C8				iny
 11412 6DC1 AD F0 A1			lda NY+1
 11413 6DC4 69 00			adc #$00
 11414 6DC6 91 84			sta (:bp2),y
 11415
 11416 				; optimize OK (service.pas), line = 2127
 11417
 11418 6DC8 A0 00			ldy #$00
 11419 6DCA AD E8 A1			lda YB
 11420 6DCD 10 01			spl
 11421 6DCF 88				dey
 11422 6DD0 8C D4 A1			sty SHOOT_BLOCK.YB+1
 11423 6DD3 8D D3 A1			sta SHOOT_BLOCK.YB
 11424 6DD6 A0 00			ldy #$00
 11425 6DD8 AD E7 A1			lda XB
 11426 6DDB 10 01			spl
 11427 6DDD 88				dey
 11428 6DDE 8C D2 A1			sty SHOOT_BLOCK.XB+1
 11429 6DE1 8D D1 A1			sta SHOOT_BLOCK.XB
 11430 6DE4 AD DF A1			lda BALL
 11431 6DE7 8D D5 A1			sta SHOOT_BLOCK.BALL
 11432 6DEA AD E0 A1			lda BALL+1
 11433 6DED 8D D6 A1			sta SHOOT_BLOCK.BALL+1
 11434 6DF0 20 53 65			jsr SHOOT_BLOCK
 11435
 11436 				; optimize OK (service.pas), line = 2129
 11437
 11438 6DF3 AD ED A1			lda NX
 11439 6DF6 29 0F			and #$0F
 11440 6DF8 85 9F			sta :STACKORIGIN+9
 11441 6DFA A9 00			lda #$00
 11442 6DFC 4A				lsr @
 11443 6DFD 66 9F			ror :STACKORIGIN+9
 11444 6DFF A5 9F			lda :STACKORIGIN+9
 11445 6E01 8D E3 A1			sta X
 11446
 11447 				; optimize OK (service.pas), line = 2130
 11448
 11449 6E04 AD EF A1			lda NY
 11450 6E07 29 07			and #$07
 11451 6E09 8D E4 A1			sta Y
 11452
 11453 				; optimize OK (service.pas), line = 2142
 11454
 11455 6E0C AD E3 A1			lda X
 11456 6E0F F0 12			jeq l_1CE3
 11457 6E11 C9 07			cmp #$07
 11458 6E13 F0 0E			jeq l_1CE3
 11459 6E15 AD E4 A1			lda Y
 11460 6E18 F0 09			jeq l_1CE3
 11461 6E1A C9 07			cmp #$07
 11462 6E1C F0 05			jeq l_1CE3
 11463
 11464 				; optimize OK (service.pas), line = 2143
 11465
 11466 6E1E A9 03			lda #$03
 11467 6E20 20 AA 3C			jsr FATAL_ERROR
 11468 6E23			l_1CE3
 11469
 11470 				; optimize OK (service.pas), line = 2158
 11471
 11472 6E23 AD E4 A1			lda Y
 11473 6E26 38 ED E3 A1			sub X
 11474 6E2A 50 02			svc
 11475 6E2C 49 80			eor #$80
 11476 6E2E 10 3E			jpl l_1D0E
 11477 6E30 A9 07			lda #$07
 11478 6E32 38 ED E4 A1			sub Y
 11479 6E36 85 A1			sta :STACKORIGIN+11
 11480 6E38 AD E3 A1			lda X
 11481 6E3B 38 E5 A1			sub :STACKORIGIN+11
 11482 6E3E 50 02			svc
 11483 6E40 49 80			eor #$80
 11484 6E42 10 2A			jpl l_1D0E
 11485
 11486 				; optimize OK (service.pas), line = 2160
 11487
 11488 6E44 AC DF A1 84 84 AC + 	mwy BALL :bp2
 11489 6E4E A0 12			ldy #BALL.SPEEDY-DATAORIGIN
 11490 6E50 A9 00			lda #$00
 11491 6E52 38 F1 84			sub (:bp2),y
 11492 6E55 85 9F			sta :STACKORIGIN+9
 11493 6E57 C8				iny
 11494 6E58 A9 00			lda #$00
 11495 6E5A F1 84			sbc (:bp2),y
 11496 6E5C 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 11497 6E5E A0 12			ldy #BALL.SPEEDY-DATAORIGIN
 11498 6E60 A5 9F			lda :STACKORIGIN+9
 11499 6E62 91 84			sta (:bp2),y
 11500 6E64 C8				iny
 11501 6E65 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 11502 6E67 91 84			sta (:bp2),y
 11503
 11504 				; optimize OK (service.pas), line = 2161
 11505
 11506 6E69 A9 01			lda #$01
 11507 6E6B 8D FF A1			sta EMERGENCY
 11508 6E6E			l_1D0E
 11509
 11510 				; optimize OK (service.pas), line = 2165
 11511
 11512 6E6E A9 07			lda #$07
 11513 6E70 38 ED E4 A1			sub Y
 11514 6E74 38 ED E3 A1			sub X
 11515 6E78 50 02			svc
 11516 6E7A 49 80			eor #$80
 11517 6E7C 10 37			jpl l_1D43
 11518 6E7E AD E3 A1			lda X
 11519 6E81 38 ED E4 A1			sub Y
 11520 6E85 50 02			svc
 11521 6E87 49 80			eor #$80
 11522 6E89 10 2A			jpl l_1D43
 11523
 11524 				; optimize OK (service.pas), line = 2167
 11525
 11526 6E8B AC DF A1 84 84 AC + 	mwy BALL :bp2
 11527 6E95 A0 12			ldy #BALL.SPEEDY-DATAORIGIN
 11528 6E97 A9 00			lda #$00
 11529 6E99 38 F1 84			sub (:bp2),y
 11530 6E9C 85 9F			sta :STACKORIGIN+9
 11531 6E9E C8				iny
 11532 6E9F A9 00			lda #$00
 11533 6EA1 F1 84			sbc (:bp2),y
 11534 6EA3 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 11535 6EA5 A0 12			ldy #BALL.SPEEDY-DATAORIGIN
 11536 6EA7 A5 9F			lda :STACKORIGIN+9
 11537 6EA9 91 84			sta (:bp2),y
 11538 6EAB C8				iny
 11539 6EAC A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 11540 6EAE 91 84			sta (:bp2),y
 11541
 11542 				; optimize OK (service.pas), line = 2168
 11543
 11544 6EB0 A9 03			lda #$03
 11545 6EB2 8D FF A1			sta EMERGENCY
 11546 6EB5			l_1D43
 11547
 11548 				; optimize OK (service.pas), line = 2172
 11549
 11550 6EB5 AD E3 A1			lda X
 11551 6EB8 38 ED E4 A1			sub Y
 11552 6EBC 50 02			svc
 11553 6EBE 49 80			eor #$80
 11554 6EC0 10 3E			jpl l_1D78
 11555 6EC2 A9 07			lda #$07
 11556 6EC4 38 ED E3 A1			sub X
 11557 6EC8 85 A1			sta :STACKORIGIN+11
 11558 6ECA AD E4 A1			lda Y
 11559 6ECD 38 E5 A1			sub :STACKORIGIN+11
 11560 6ED0 50 02			svc
 11561 6ED2 49 80			eor #$80
 11562 6ED4 10 2A			jpl l_1D78
 11563
 11564 				; optimize OK (service.pas), line = 2174
 11565
 11566 6ED6 AC DF A1 84 84 AC + 	mwy BALL :bp2
 11567 6EE0 A0 10			ldy #BALL.SPEEDX-DATAORIGIN
 11568 6EE2 A9 00			lda #$00
 11569 6EE4 38 F1 84			sub (:bp2),y
 11570 6EE7 85 9F			sta :STACKORIGIN+9
 11571 6EE9 C8				iny
 11572 6EEA A9 00			lda #$00
 11573 6EEC F1 84			sbc (:bp2),y
 11574 6EEE 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 11575 6EF0 A0 10			ldy #BALL.SPEEDX-DATAORIGIN
 11576 6EF2 A5 9F			lda :STACKORIGIN+9
 11577 6EF4 91 84			sta (:bp2),y
 11578 6EF6 C8				iny
 11579 6EF7 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 11580 6EF9 91 84			sta (:bp2),y
 11581
 11582 				; optimize OK (service.pas), line = 2175
 11583
 11584 6EFB A9 02			lda #$02
 11585 6EFD 8D FF A1			sta EMERGENCY
 11586 6F00			l_1D78
 11587
 11588 				; optimize OK (service.pas), line = 2179
 11589
 11590 6F00 A9 07			lda #$07
 11591 6F02 38 ED E3 A1			sub X
 11592 6F06 38 ED E4 A1			sub Y
 11593 6F0A 50 02			svc
 11594 6F0C 49 80			eor #$80
 11595 6F0E 10 37			jpl l_1DAD
 11596 6F10 AD E4 A1			lda Y
 11597 6F13 38 ED E3 A1			sub X
 11598 6F17 50 02			svc
 11599 6F19 49 80			eor #$80
 11600 6F1B 10 2A			jpl l_1DAD
 11601
 11602 				; optimize OK (service.pas), line = 2181
 11603
 11604 6F1D AC DF A1 84 84 AC + 	mwy BALL :bp2
 11605 6F27 A0 10			ldy #BALL.SPEEDX-DATAORIGIN
 11606 6F29 A9 00			lda #$00
 11607 6F2B 38 F1 84			sub (:bp2),y
 11608 6F2E 85 9F			sta :STACKORIGIN+9
 11609 6F30 C8				iny
 11610 6F31 A9 00			lda #$00
 11611 6F33 F1 84			sbc (:bp2),y
 11612 6F35 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 11613 6F37 A0 10			ldy #BALL.SPEEDX-DATAORIGIN
 11614 6F39 A5 9F			lda :STACKORIGIN+9
 11615 6F3B 91 84			sta (:bp2),y
 11616 6F3D C8				iny
 11617 6F3E A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 11618 6F40 91 84			sta (:bp2),y
 11619
 11620 				; optimize OK (service.pas), line = 2182
 11621
 11622 6F42 A9 04			lda #$04
 11623 6F44 8D FF A1			sta EMERGENCY
 11624 6F47			l_1DAD
 11625
 11626 				; optimize OK (service.pas), line = 2186
 11627
 11628 6F47 AD E3 A1			lda X
 11629 6F4A CD E4 A1			cmp Y
 11630 6F4D F0 0E			jeq l_1DE2x
 11631 6F4F A9 07			lda #$07
 11632 6F51 38 ED E4 A1			sub Y
 11633 6F55 CD E3 A1			cmp X
 11634 6F58 F0 03 4C 59 75		jne l_1DE2
 11635 6F5D			l_1DE2x
 11636
 11637 				; optimize OK (service.pas), line = 2188
 11638
 11639 6F5D A9 00			lda #$00
 11640 6F5F 8D 01 A2			sta DEFLECT
 11641
 11642 				; optimize OK (service.pas), line = 2189
 11643
 11644 6F62 8D 04 A2			sta TOUCH
 11645
 11646 				; optimize OK (service.pas), line = 2197
 11647
 11648 6F65 AD E3 A1			lda X
 11649 6F68 38 E9 05			sub #$05
 11650 6F6B 50 02			svc
 11651 6F6D 49 80			eor #$80
 11652 6F6F 30 08			jmi l_1DFD
 11653 6F71 AD 04 A2			lda TOUCH
 11654 6F74 09 01			ora #$01
 11655 6F76 8D 04 A2			sta TOUCH
 11656 6F79			l_1DFD
 11657
 11658 				; optimize OK (service.pas), line = 2198
 11659
 11660 6F79 AD E4 A1			lda Y
 11661 6F7C 38 E9 05			sub #$05
 11662 6F7F 50 02			svc
 11663 6F81 49 80			eor #$80
 11664 6F83 30 08			jmi l_1E1C
 11665 6F85 AD 04 A2			lda TOUCH
 11666 6F88 09 02			ora #$02
 11667 6F8A 8D 04 A2			sta TOUCH
 11668 6F8D			l_1E1C
 11669
 11670 				; optimize OK (service.pas), line = 2207
 11671
 11672 6F8D A9 FF			lda #$FF
 11673 6F8F 8D E5 A1			sta LX
 11674
 11675 6F92			l_1E32
 11676 				; --- ForToDoCondition
 11677 6F92 AD E5 A1			lda LX
 11678 6F95 38 E9 02			sub #$02
 11679 6F98 50 02			svc
 11680 6F9A 49 80			eor #$80
 11681 6F9C 0A				asl @
 11682 6F9D B0 03 4C C8 70		jcc l_1E40
 11683
 11684 				; optimize OK (service.pas), line = 2208
 11685
 11686 6FA2 A9 FF			lda #$FF
 11687 6FA4 8D E6 A1			sta LY
 11688
 11689 6FA7			l_1E49
 11690 				; --- ForToDoCondition
 11691 6FA7 AD E6 A1			lda LY
 11692 6FAA 38 E9 02			sub #$02
 11693 6FAD 50 02			svc
 11694 6FAF 49 80			eor #$80
 11695 6FB1 0A				asl @
 11696 6FB2 B0 03 4C BB 70		jcc l_1E57
 11697
 11698 				; optimize FAIL (1, service.pas), line = 2210
 11699
 11700 6FB7 E8				inx
 11701 6FB8 A9 00 95 96			mva #$00 :STACKORIGIN,x
 11702 6FBC 95 A6			sta :STACKORIGIN+STACKWIDTH,x
 11703 6FBE E8				inx
 11704 6FBF A9 0C 95 96			mva #$0C :STACKORIGIN,x
 11705 6FC3 A9 00 95 A6			mva #$00 :STACKORIGIN+STACKWIDTH,x
 11706 6FC7 E8				inx
 11707 6FC8 AD E7 A1 95 96		mva XB :STACKORIGIN,x
 11708 6FCD E8				inx
 11709 6FCE AD E5 A1 95 96		mva LX :STACKORIGIN,x
 11710 6FD3 20 41 21			jsr @expandSHORT2SMALL1
 11711 6FD6 20 36 21			jsr @expandSHORT2SMALL
 11712 6FD9 20 B5 20			jsr addAX_CX
 11713 6FDC CA				dex
 11714 6FDD B5 96			lda :STACKORIGIN,x
 11715 6FDF 8D DA A0			sta MIN.A
 11716 6FE2 B5 A6			lda :STACKORIGIN+STACKWIDTH,x
 11717 6FE4 8D DB A0			sta MIN.A+1
 11718 6FE7 CA				dex
 11719 6FE8 B5 96			lda :STACKORIGIN,x
 11720 6FEA 8D DC A0			sta MIN.B
 11721 6FED B5 A6			lda :STACKORIGIN+STACKWIDTH,x
 11722 6FEF 8D DD A0			sta MIN.B+1
 11723 6FF2 CA				dex
 11724 6FF3 20 7F 3C			jsr MIN
 11725 6FF6 AD DE A0			lda MIN.RESULT
 11726 6FF9 8D D4 A0			sta MAX.A
 11727 6FFC AD DF A0			lda MIN.RESULT+1
 11728 6FFF 8D D5 A0			sta MAX.A+1
 11729 7002 B5 96			lda :STACKORIGIN,x
 11730 7004 8D D6 A0			sta MAX.B
 11731 7007 B5 A6			lda :STACKORIGIN+STACKWIDTH,x
 11732 7009 8D D7 A0			sta MAX.B+1
 11733 700C CA				dex
 11734 700D 20 54 3C			jsr MAX
 11735 7010 AD D8 A0			lda MAX.RESULT
 11736 7013 8D F1 A1			sta MX
 11737 7016 AD D9 A0			lda MAX.RESULT+1
 11738 7019 8D F2 A1			sta MX+1
 11739
 11740 				; optimize OK (service.pas), line = 2211
 11741
 11742 701C A0 00			ldy #$00
 11743 701E AD E8 A1			lda YB
 11744 7021 10 01			spl
 11745 7023 88				dey
 11746 7024 84 AF			sty :STACKORIGIN+STACKWIDTH+9
 11747 7026 85 9F			sta :STACKORIGIN+9
 11748 7028 A0 00			ldy #$00
 11749 702A AD E6 A1			lda LY
 11750 702D 10 01			spl
 11751 702F 88				dey
 11752 7030 18 65 9F			add :STACKORIGIN+9
 11753 7033 8D F3 A1			sta MY
 11754 7036 98				tya
 11755 7037 65 AF			adc :STACKORIGIN+STACKWIDTH+9
 11756 7039 8D F4 A1			sta MY+1
 11757
 11758 				; optimize OK (service.pas), line = 2215
 11759
 11760 703C AD E7 A1			lda XB
 11761 703F 18 6D E5 A1			add LX
 11762 7043 30 21			jmi l_1EB4x
 11763 7045 AD E7 A1			lda XB
 11764 7048 18 6D E5 A1			add LX
 11765 704C 38 E9 0D			sub #$0D
 11766 704F 50 02			svc
 11767 7051 49 80			eor #$80
 11768 7053 10 11			jpl l_1EB4x
 11769 7055 AD F3 A1			lda MY
 11770 7058 0A				asl @
 11771 7059 0A				asl @
 11772 705A 0A				asl @
 11773 705B 0A				asl @
 11774 705C 18 6D F1 A1			add MX
 11775 7060 A8				tay
 11776 7061 B9 00 DB			lda adr.WALL,y
 11777 7064 F0 24			jeq l_1EB4
 11778 7066			l_1EB4x
 11779
 11780 				; optimize OK (service.pas), line = 2218
 11781
 11782 7066 A0 00			ldy #$00
 11783 7068 AD E5 A1			lda LX
 11784 706B 10 01			spl
 11785 706D 88				dey
 11786 706E 18 69 01			add #$01
 11787 7071 85 86			sta :eax
 11788 7073 90 01			scc
 11789 7075 C8				iny
 11790 7076 84 87			sty :eax+1
 11791 7078 A9 03			lda #$03
 11792 707A 85 8E			sta :ecx
 11793 707C A9 00			lda #$00
 11794 707E 85 8F			sta :ecx+1
 11795 					.ifdef fmulinit
 11796 					fmulu_16
 11797 					els
 11798 7080 20 0B 23			imulCX
 11799 					eif
 11800 7083 A4 86			ldy :eax
 11801 7085 A9 01			lda #$01
 11802 7087 4C AB 70			jmp l_1ED7
 11803 708A			l_1EB4
 11804
 11805 				; optimize OK (service.pas), line = 2220
 11806
 11807 708A A0 00			ldy #$00
 11808 708C AD E5 A1			lda LX
 11809 708F 10 01			spl
 11810 7091 88				dey
 11811 7092 18 69 01			add #$01
 11812 7095 85 86			sta :eax
 11813 7097 90 01			scc
 11814 7099 C8				iny
 11815 709A 84 87			sty :eax+1
 11816 709C A9 03			lda #$03
 11817 709E 85 8E			sta :ecx
 11818 70A0 A9 00			lda #$00
 11819 70A2 85 8F			sta :ecx+1
 11820 					.ifdef fmulinit
 11821 					fmulu_16
 11822 					els
 11823 70A4 20 0B 23			imulCX
 11824 					eif
 11825 70A7 A4 86			ldy :eax
 11826 70A9 A9 00			lda #$00
 11827 70AB			l_1ED7
 11828 70AB 99 06 A2			sta adr.ADJW+$01,y
 11829
 11830 				; --- ForToDoEpilog
 11831 70AE EE E6 A1			inc LY
 11832 70B1 AD E6 A1			lda LY
 11833 70B4 C9 80			cmp #$80
 11834 70B6 F0 03 4C A7 6F		jne l_1E49
 11835 70BB			l_1E57
 11836
 11837 				; --- ForToDoEpilog
 11838 70BB EE E5 A1			inc LX
 11839 70BE AD E5 A1			lda LX
 11840 70C1 C9 80			cmp #$80
 11841 70C3 F0 03 4C 92 6F		jne l_1E32
 11842 70C8			l_1E40
 11843
 11844 				; optimize OK (service.pas), line = 2239
 11845
 11846 70C8 AD 05 A2			lda adr.ADJW
 11847 70CB 85 9F			sta :STACKORIGIN+9
 11848 70CD AD 08 A2			lda adr.ADJW+$03
 11849 70D0 0A				asl @
 11850 70D1 05 9F			ora :STACKORIGIN+9
 11851 70D3 85 9F			sta :STACKORIGIN+9
 11852 70D5 AD 0B A2			lda adr.ADJW+$06
 11853 70D8 0A				asl @
 11854 70D9 0A				asl @
 11855 70DA 05 9F			ora :STACKORIGIN+9
 11856 70DC 85 9F			sta :STACKORIGIN+9
 11857 70DE AD 0C A2			lda adr.ADJW+$07
 11858 70E1 0A				asl @
 11859 70E2 0A				asl @
 11860 70E3 0A				asl @
 11861 70E4 05 9F			ora :STACKORIGIN+9
 11862 70E6 85 9F			sta :STACKORIGIN+9
 11863 70E8 AD 0D A2			lda adr.ADJW+$08
 11864 70EB 0A				asl @
 11865 70EC 0A				asl @
 11866 70ED 0A				asl @
 11867 70EE 0A				asl @
 11868 70EF 05 9F			ora :STACKORIGIN+9
 11869 70F1 85 9F			sta :STACKORIGIN+9
 11870 70F3 AD 0A A2			lda adr.ADJW+$05
 11871 70F6 0A				asl @
 11872 70F7 0A				asl @
 11873 70F8 0A				asl @
 11874 70F9 0A				asl @
 11875 70FA 0A				asl @
 11876 70FB 05 9F			ora :STACKORIGIN+9
 11877 70FD 85 9F			sta :STACKORIGIN+9
 11878 70FF AD 07 A2			lda adr.ADJW+$02
 11879 7102 0A				asl @
 11880 7103 0A				asl @
 11881 7104 0A				asl @
 11882 7105 0A				asl @
 11883 7106 0A				asl @
 11884 7107 0A				asl @
 11885 7108 05 9F			ora :STACKORIGIN+9
 11886 710A 85 9F			sta :STACKORIGIN+9
 11887 710C AD 06 A2			lda adr.ADJW+$01
 11888 710F 0A				asl @
 11889 7110 0A				asl @
 11890 7111 0A				asl @
 11891 7112 0A				asl @
 11892 7113 0A				asl @
 11893 7114 0A				asl @
 11894 7115 0A				asl @
 11895 7116 05 9F			ora :STACKORIGIN+9
 11896 7118 8D 02 A2			sta AROUND
 11897
 11898 				; optimize OK (service.pas), line = 2270
 11899
 11900 711B AD 04 A2			lda TOUCH
 11901 711E F0 03 4C BF 71		jne l_1F80
 11902
 11903 				; optimize OK (service.pas), line = 2272
 11904
 11905 7123 AD 02 A2			lda AROUND
 11906 7126 29 83			and #$83
 11907 7128 D0 05			jne l_1F97
 11908 712A A9 11			lda #$11
 11909 712C 8D 01 A2			sta DEFLECT
 11910 712F			l_1F97
 11911
 11912 				; optimize OK (service.pas), line = 2273
 11913
 11914 712F AD 02 A2			lda AROUND
 11915 7132 29 83			and #$83
 11916 7134 C9 01			cmp #$01
 11917 7136 D0 05			jne l_1FB4
 11918 7138 A9 33			lda #$33
 11919 713A 8D 01 A2			sta DEFLECT
 11920 713D			l_1FB4
 11921
 11922 				; optimize OK (service.pas), line = 2274
 11923
 11924 713D AD 02 A2			lda AROUND
 11925 7140 29 83			and #$83
 11926 7142 C9 02			cmp #$02
 11927 7144 D0 05			jne l_1FD1
 11928 7146 A9 10			lda #$10
 11929 7148 8D 01 A2			sta DEFLECT
 11930 714B			l_1FD1
 11931
 11932 				; optimize OK (service.pas), line = 2275
 11933
 11934 714B AD 02 A2			lda AROUND
 11935 714E 29 83			and #$83
 11936 7150 C9 03			cmp #$03
 11937 7152 D0 05			jne l_1FEE
 11938 7154 A9 12			lda #$12
 11939 7156 8D 01 A2			sta DEFLECT
 11940 7159			l_1FEE
 11941
 11942 				; optimize OK (service.pas), line = 2276
 11943
 11944 7159 AD 02 A2			lda AROUND
 11945 715C 29 83			and #$83
 11946 715E C9 80			cmp #$80
 11947 7160 D0 05			jne l_200B
 11948 7162 A9 01			lda #$01
 11949 7164 8D 01 A2			sta DEFLECT
 11950 7167			l_200B
 11951
 11952 				; optimize OK (service.pas), line = 2277
 11953
 11954 7167 AD 02 A2			lda AROUND
 11955 716A 29 83			and #$83
 11956 716C C9 81			cmp #$81
 11957 716E D0 05			jne l_2028
 11958 7170 A9 21			lda #$21
 11959 7172 8D 01 A2			sta DEFLECT
 11960 7175			l_2028
 11961
 11962 				; optimize OK (service.pas), line = 2278
 11963
 11964 7175 AD 02 A2			lda AROUND
 11965 7178 29 83			and #$83
 11966 717A C9 82			cmp #$82
 11967 717C D0 05			jne l_2045
 11968 717E A9 11			lda #$11
 11969 7180 8D 01 A2			sta DEFLECT
 11970 7183			l_2045
 11971
 11972 				; optimize OK (service.pas), line = 2280
 11973
 11974 7183 A9 05			lda #$05
 11975 7185 8D FF A1			sta EMERGENCY
 11976
 11977 				; optimize OK (service.pas), line = 2281
 11978
 11979 7188 A0 00			ldy #$00
 11980 718A AD E8 A1			lda YB
 11981 718D 10 01			spl
 11982 718F 88				dey
 11983 7190 38 E9 01			sub #$01
 11984 7193 8D D3 A1			sta SHOOT_BLOCK.YB
 11985 7196 98				tya
 11986 7197 E9 00			sbc #$00
 11987 7199 8D D4 A1			sta SHOOT_BLOCK.YB+1
 11988 719C A0 00			ldy #$00
 11989 719E AD E7 A1			lda XB
 11990 71A1 10 01			spl
 11991 71A3 88				dey
 11992 71A4 38 E9 01			sub #$01
 11993 71A7 8D D1 A1			sta SHOOT_BLOCK.XB
 11994 71AA 98				tya
 11995 71AB E9 00			sbc #$00
 11996 71AD 8D D2 A1			sta SHOOT_BLOCK.XB+1
 11997 71B0 AD DF A1			lda BALL
 11998 71B3 8D D5 A1			sta SHOOT_BLOCK.BALL
 11999 71B6 AD E0 A1			lda BALL+1
 12000 71B9 8D D6 A1			sta SHOOT_BLOCK.BALL+1
 12001 71BC 20 53 65			jsr SHOOT_BLOCK
 12002 71BF			l_1F80
 12003
 12004 				; optimize OK (service.pas), line = 2286
 12005
 12006 71BF AD 04 A2			lda TOUCH
 12007 71C2 C9 01			cmp #$01
 12008 71C4 F0 03 4C 65 72		jne l_2075
 12009
 12010 				; optimize OK (service.pas), line = 2288
 12011
 12012 71C9 AD 02 A2			lda AROUND
 12013 71CC 29 0E			and #$0E
 12014 71CE D0 05			jne l_208C
 12015 71D0 A9 21			lda #$21
 12016 71D2 8D 01 A2			sta DEFLECT
 12017 71D5			l_208C
 12018
 12019 				; optimize OK (service.pas), line = 2289
 12020
 12021 71D5 AD 02 A2			lda AROUND
 12022 71D8 29 0E			and #$0E
 12023 71DA C9 02			cmp #$02
 12024 71DC D0 05			jne l_20A9
 12025 71DE A9 20			lda #$20
 12026 71E0 8D 01 A2			sta DEFLECT
 12027 71E3			l_20A9
 12028
 12029 				; optimize OK (service.pas), line = 2290
 12030
 12031 71E3 AD 02 A2			lda AROUND
 12032 71E6 29 0E			and #$0E
 12033 71E8 C9 04			cmp #$04
 12034 71EA D0 05			jne l_20C6
 12035 71EC A9 33			lda #$33
 12036 71EE 8D 01 A2			sta DEFLECT
 12037 71F1			l_20C6
 12038
 12039 				; optimize OK (service.pas), line = 2291
 12040
 12041 71F1 AD 02 A2			lda AROUND
 12042 71F4 29 0E			and #$0E
 12043 71F6 C9 06			cmp #$06
 12044 71F8 D0 05			jne l_20E3
 12045 71FA A9 22			lda #$22
 12046 71FC 8D 01 A2			sta DEFLECT
 12047 71FF			l_20E3
 12048
 12049 				; optimize OK (service.pas), line = 2292
 12050
 12051 71FF AD 02 A2			lda AROUND
 12052 7202 29 0E			and #$0E
 12053 7204 C9 08			cmp #$08
 12054 7206 D0 05			jne l_2100
 12055 7208 A9 01			lda #$01
 12056 720A 8D 01 A2			sta DEFLECT
 12057 720D			l_2100
 12058
 12059 				; optimize OK (service.pas), line = 2293
 12060
 12061 720D AD 02 A2			lda AROUND
 12062 7210 29 0E			and #$0E
 12063 7212 C9 0A			cmp #$0A
 12064 7214 D0 05			jne l_211D
 12065 7216 A9 21			lda #$21
 12066 7218 8D 01 A2			sta DEFLECT
 12067 721B			l_211D
 12068
 12069 				; optimize OK (service.pas), line = 2294
 12070
 12071 721B AD 02 A2			lda AROUND
 12072 721E 29 0E			and #$0E
 12073 7220 C9 0C			cmp #$0C
 12074 7222 D0 05			jne l_213A
 12075 7224 A9 11			lda #$11
 12076 7226 8D 01 A2			sta DEFLECT
 12077 7229			l_213A
 12078
 12079 				; optimize OK (service.pas), line = 2296
 12080
 12081 7229 A9 08			lda #$08
 12082 722B 8D FF A1			sta EMERGENCY
 12083
 12084 				; optimize OK (service.pas), line = 2297
 12085
 12086 722E A0 00			ldy #$00
 12087 7230 AD E8 A1			lda YB
 12088 7233 10 01			spl
 12089 7235 88				dey
 12090 7236 38 E9 01			sub #$01
 12091 7239 8D D3 A1			sta SHOOT_BLOCK.YB
 12092 723C 98				tya
 12093 723D E9 00			sbc #$00
 12094 723F 8D D4 A1			sta SHOOT_BLOCK.YB+1
 12095 7242 A0 00			ldy #$00
 12096 7244 AD E7 A1			lda XB
 12097 7247 10 01			spl
 12098 7249 88				dey
 12099 724A 18 69 01			add #$01
 12100 724D 8D D1 A1			sta SHOOT_BLOCK.XB
 12101 7250 90 01			scc
 12102 7252 C8				iny
 12103 7253 8C D2 A1			sty SHOOT_BLOCK.XB+1
 12104 7256 AD DF A1			lda BALL
 12105 7259 8D D5 A1			sta SHOOT_BLOCK.BALL
 12106 725C AD E0 A1			lda BALL+1
 12107 725F 8D D6 A1			sta SHOOT_BLOCK.BALL+1
 12108 7262 20 53 65			jsr SHOOT_BLOCK
 12109 7265			l_2075
 12110
 12111 				; optimize OK (service.pas), line = 2300
 12112
 12113 7265 AD 04 A2			lda TOUCH
 12114 7268 C9 02			cmp #$02
 12115 726A F0 03 4C 0B 73		jne l_216A
 12116
 12117 				; optimize OK (service.pas), line = 2302
 12118
 12119 726F AD 02 A2			lda AROUND
 12120 7272 29 E0			and #$E0
 12121 7274 D0 05			jne l_2181
 12122 7276 A9 12			lda #$12
 12123 7278 8D 01 A2			sta DEFLECT
 12124 727B			l_2181
 12125
 12126 				; optimize OK (service.pas), line = 2303
 12127
 12128 727B AD 02 A2			lda AROUND
 12129 727E 29 E0			and #$E0
 12130 7280 C9 20			cmp #$20
 12131 7282 D0 05			jne l_219E
 12132 7284 A9 10			lda #$10
 12133 7286 8D 01 A2			sta DEFLECT
 12134 7289			l_219E
 12135
 12136 				; optimize OK (service.pas), line = 2304
 12137
 12138 7289 AD 02 A2			lda AROUND
 12139 728C 29 E0			and #$E0
 12140 728E C9 40			cmp #$40
 12141 7290 D0 05			jne l_21BB
 12142 7292 A9 33			lda #$33
 12143 7294 8D 01 A2			sta DEFLECT
 12144 7297			l_21BB
 12145
 12146 				; optimize OK (service.pas), line = 2305
 12147
 12148 7297 AD 02 A2			lda AROUND
 12149 729A 29 E0			and #$E0
 12150 729C C9 60			cmp #$60
 12151 729E D0 05			jne l_21D8
 12152 72A0 A9 11			lda #$11
 12153 72A2 8D 01 A2			sta DEFLECT
 12154 72A5			l_21D8
 12155
 12156 				; optimize OK (service.pas), line = 2306
 12157
 12158 72A5 AD 02 A2			lda AROUND
 12159 72A8 29 E0			and #$E0
 12160 72AA C9 80			cmp #$80
 12161 72AC D0 05			jne l_21F5
 12162 72AE A9 02			lda #$02
 12163 72B0 8D 01 A2			sta DEFLECT
 12164 72B3			l_21F5
 12165
 12166 				; optimize OK (service.pas), line = 2307
 12167
 12168 72B3 AD 02 A2			lda AROUND
 12169 72B6 29 E0			and #$E0
 12170 72B8 C9 A0			cmp #$A0
 12171 72BA D0 05			jne l_2212
 12172 72BC A9 12			lda #$12
 12173 72BE 8D 01 A2			sta DEFLECT
 12174 72C1			l_2212
 12175
 12176 				; optimize OK (service.pas), line = 2308
 12177
 12178 72C1 AD 02 A2			lda AROUND
 12179 72C4 29 E0			and #$E0
 12180 72C6 C9 C0			cmp #$C0
 12181 72C8 D0 05			jne l_222F
 12182 72CA A9 22			lda #$22
 12183 72CC 8D 01 A2			sta DEFLECT
 12184 72CF			l_222F
 12185
 12186 				; optimize OK (service.pas), line = 2310
 12187
 12188 72CF A9 06			lda #$06
 12189 72D1 8D FF A1			sta EMERGENCY
 12190
 12191 				; optimize OK (service.pas), line = 2311
 12192
 12193 72D4 A0 00			ldy #$00
 12194 72D6 AD E8 A1			lda YB
 12195 72D9 10 01			spl
 12196 72DB 88				dey
 12197 72DC 18 69 01			add #$01
 12198 72DF 8D D3 A1			sta SHOOT_BLOCK.YB
 12199 72E2 90 01			scc
 12200 72E4 C8				iny
 12201 72E5 8C D4 A1			sty SHOOT_BLOCK.YB+1
 12202 72E8 A0 00			ldy #$00
 12203 72EA AD E7 A1			lda XB
 12204 72ED 10 01			spl
 12205 72EF 88				dey
 12206 72F0 38 E9 01			sub #$01
 12207 72F3 8D D1 A1			sta SHOOT_BLOCK.XB
 12208 72F6 98				tya
 12209 72F7 E9 00			sbc #$00
 12210 72F9 8D D2 A1			sta SHOOT_BLOCK.XB+1
 12211 72FC AD DF A1			lda BALL
 12212 72FF 8D D5 A1			sta SHOOT_BLOCK.BALL
 12213 7302 AD E0 A1			lda BALL+1
 12214 7305 8D D6 A1			sta SHOOT_BLOCK.BALL+1
 12215 7308 20 53 65			jsr SHOOT_BLOCK
 12216 730B			l_216A
 12217
 12218 				; optimize OK (service.pas), line = 2314
 12219
 12220 730B AD 04 A2			lda TOUCH
 12221 730E C9 03			cmp #$03
 12222 7310 F0 03 4C B1 73		jne l_225F
 12223
 12224 				; optimize OK (service.pas), line = 2316
 12225
 12226 7315 AD 02 A2			lda AROUND
 12227 7318 29 38			and #$38
 12228 731A D0 05			jne l_2276
 12229 731C A9 22			lda #$22
 12230 731E 8D 01 A2			sta DEFLECT
 12231 7321			l_2276
 12232
 12233 				; optimize OK (service.pas), line = 2317
 12234
 12235 7321 AD 02 A2			lda AROUND
 12236 7324 29 38			and #$38
 12237 7326 C9 08			cmp #$08
 12238 7328 D0 05			jne l_2293
 12239 732A A9 02			lda #$02
 12240 732C 8D 01 A2			sta DEFLECT
 12241 732F			l_2293
 12242
 12243 				; optimize OK (service.pas), line = 2318
 12244
 12245 732F AD 02 A2			lda AROUND
 12246 7332 29 38			and #$38
 12247 7334 C9 10			cmp #$10
 12248 7336 D0 05			jne l_22B0
 12249 7338 A9 33			lda #$33
 12250 733A 8D 01 A2			sta DEFLECT
 12251 733D			l_22B0
 12252
 12253 				; optimize OK (service.pas), line = 2319
 12254
 12255 733D AD 02 A2			lda AROUND
 12256 7340 29 38			and #$38
 12257 7342 C9 18			cmp #$18
 12258 7344 D0 05			jne l_22CD
 12259 7346 A9 12			lda #$12
 12260 7348 8D 01 A2			sta DEFLECT
 12261 734B			l_22CD
 12262
 12263 				; optimize OK (service.pas), line = 2320
 12264
 12265 734B AD 02 A2			lda AROUND
 12266 734E 29 38			and #$38
 12267 7350 C9 20			cmp #$20
 12268 7352 D0 05			jne l_22EA
 12269 7354 A9 20			lda #$20
 12270 7356 8D 01 A2			sta DEFLECT
 12271 7359			l_22EA
 12272
 12273 				; optimize OK (service.pas), line = 2321
 12274
 12275 7359 AD 02 A2			lda AROUND
 12276 735C 29 38			and #$38
 12277 735E C9 28			cmp #$28
 12278 7360 D0 05			jne l_2307
 12279 7362 A9 22			lda #$22
 12280 7364 8D 01 A2			sta DEFLECT
 12281 7367			l_2307
 12282
 12283 				; optimize OK (service.pas), line = 2322
 12284
 12285 7367 AD 02 A2			lda AROUND
 12286 736A 29 38			and #$38
 12287 736C C9 30			cmp #$30
 12288 736E D0 05			jne l_2324
 12289 7370 A9 21			lda #$21
 12290 7372 8D 01 A2			sta DEFLECT
 12291 7375			l_2324
 12292
 12293 				; optimize OK (service.pas), line = 2324
 12294
 12295 7375 A9 07			lda #$07
 12296 7377 8D FF A1			sta EMERGENCY
 12297
 12298 				; optimize OK (service.pas), line = 2325
 12299
 12300 737A A0 00			ldy #$00
 12301 737C AD E8 A1			lda YB
 12302 737F 10 01			spl
 12303 7381 88				dey
 12304 7382 18 69 01			add #$01
 12305 7385 8D D3 A1			sta SHOOT_BLOCK.YB
 12306 7388 90 01			scc
 12307 738A C8				iny
 12308 738B 8C D4 A1			sty SHOOT_BLOCK.YB+1
 12309 738E A0 00			ldy #$00
 12310 7390 AD E7 A1			lda XB
 12311 7393 10 01			spl
 12312 7395 88				dey
 12313 7396 18 69 01			add #$01
 12314 7399 8D D1 A1			sta SHOOT_BLOCK.XB
 12315 739C 90 01			scc
 12316 739E C8				iny
 12317 739F 8C D2 A1			sty SHOOT_BLOCK.XB+1
 12318 73A2 AD DF A1			lda BALL
 12319 73A5 8D D5 A1			sta SHOOT_BLOCK.BALL
 12320 73A8 AD E0 A1			lda BALL+1
 12321 73AB 8D D6 A1			sta SHOOT_BLOCK.BALL+1
 12322 73AE 20 53 65			jsr SHOOT_BLOCK
 12323 73B1			l_225F
 12324
 12325 				; optimize OK (service.pas), line = 2331
 12326
 12327 73B1 AD 01 A2			lda DEFLECT
 12328 73B4 4A				lsr @
 12329 73B5 4A				lsr @
 12330 73B6 4A				lsr @
 12331 73B7 4A				lsr @
 12332 73B8 8D FB A1			sta MYX
 12333 73BB A9 00			lda #$00
 12334 73BD 8D FC A1			sta MYX+1
 12335
 12336 				; optimize OK (service.pas), line = 2332
 12337
 12338 73C0 AD 01 A2			lda DEFLECT
 12339 73C3 29 0F			and #$0F
 12340 73C5 8D FD A1			sta MYY
 12341 73C8 A9 00			lda #$00
 12342 73CA 8D FE A1			sta MYY+1
 12343
 12344 				; optimize OK (service.pas), line = 2334
 12345
 12346 73CD AD FC A1			lda MYX+1
 12347 73D0 D0 05			bne @+
 12348 73D2 AD FB A1			lda MYX
 12349 73D5 C9 01			cmp #$01
 12350 				@
 12351 73D7 D0 50			jne l_2367
 12352 73D9 AC DF A1 84 84 AC + 	mwy BALL :bp2
 12353 73E3 A0 10			ldy #BALL.SPEEDX-DATAORIGIN
 12354 73E5 B1 84			lda (:bp2),y
 12355 73E7 85 8A			sta SYSTEM.ABS.@010184000.X
 12356 73E9 C8				iny
 12357 73EA B1 84			lda (:bp2),y
 12358 73EC 85 8B			sta SYSTEM.ABS.@010184000.X+1
 12359 73EE 20 D1 2A			jsr SYSTEM.ABS.@010184000
 12360 73F1 E8				inx
 12361 73F2 A5 92 95 96			mva SYSTEM.ABS.@010184000.RESULT :STACKORIGIN,x
 12362 73F6 A5 93 95 A6			mva SYSTEM.ABS.@010184000.RESULT+1 :STACKORIGIN+STACKWIDTH,x
 12363 73FA A9 00			lda #$00
 12364 73FC 38 F5 96			sub :STACKORIGIN,x
 12365 73FF 95 96			sta :STACKORIGIN,x
 12366 7401 A9 00			lda #$00
 12367 7403 F5 A6			sbc :STACKORIGIN+STACKWIDTH,x
 12368 7405 95 A6			sta :STACKORIGIN+STACKWIDTH,x
 12369 7407 A9 00			lda #$00
 12370 7409 E9 00			sbc #$00
 12371 740B 95 B6			sta :STACKORIGIN+STACKWIDTH*2,x
 12372 740D A9 00			lda #$00
 12373 740F E9 00			sbc #$00
 12374 7411 95 C6			sta :STACKORIGIN+STACKWIDTH*3,x
 12375 7413 AC DF A1 84 84 AC + 	mwy BALL :bp2
 12376 741D A0 10			ldy #BALL.SPEEDX-DATAORIGIN
 12377 741F B5 96			lda :STACKORIGIN,x
 12378 7421 91 84			sta (:bp2),y
 12379 7423 C8				iny
 12380 7424 B5 A6			lda :STACKORIGIN+STACKWIDTH,x
 12381 7426 91 84			sta (:bp2),y
 12382 7428 CA				dex
 12383 7429			l_2367
 12384
 12385 				; optimize OK (service.pas), line = 2335
 12386
 12387 7429 AD FC A1			lda MYX+1
 12388 742C D0 05			bne @+
 12389 742E AD FB A1			lda MYX
 12390 7431 C9 02			cmp #$02
 12391 				@
 12392 7433 D0 2D			jne l_2384
 12393 7435 AC DF A1 84 84 AC + 	mwy BALL :bp2
 12394 743F A0 10			ldy #BALL.SPEEDX-DATAORIGIN
 12395 7441 B1 84			lda (:bp2),y
 12396 7443 85 8A			sta SYSTEM.ABS.@010184000.X
 12397 7445 C8				iny
 12398 7446 B1 84			lda (:bp2),y
 12399 7448 85 8B			sta SYSTEM.ABS.@010184000.X+1
 12400 744A 20 D1 2A			jsr SYSTEM.ABS.@010184000
 12401 744D AC DF A1 84 84 AC + 	mwy BALL :bp2
 12402 7457 A0 10			ldy #BALL.SPEEDX-DATAORIGIN
 12403 7459 A5 92			lda SYSTEM.ABS.@010184000.RESULT
 12404 745B 91 84			sta (:bp2),y
 12405 745D C8				iny
 12406 745E A5 93			lda SYSTEM.ABS.@010184000.RESULT+1
 12407 7460 91 84			sta (:bp2),y
 12408 7462			l_2384
 12409
 12410 				; optimize OK (service.pas), line = 2336
 12411
 12412 7462 AD FC A1			lda MYX+1
 12413 7465 D0 05			bne @+
 12414 7467 AD FB A1			lda MYX
 12415 746A C9 03			cmp #$03
 12416 				@
 12417 746C D0 25			jne l_239E
 12418 746E AC DF A1 84 84 AC + 	mwy BALL :bp2
 12419 7478 A0 10			ldy #BALL.SPEEDX-DATAORIGIN
 12420 747A A9 00			lda #$00
 12421 747C 38 F1 84			sub (:bp2),y
 12422 747F 85 9F			sta :STACKORIGIN+9
 12423 7481 C8				iny
 12424 7482 A9 00			lda #$00
 12425 7484 F1 84			sbc (:bp2),y
 12426 7486 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 12427 7488 A0 10			ldy #BALL.SPEEDX-DATAORIGIN
 12428 748A A5 9F			lda :STACKORIGIN+9
 12429 748C 91 84			sta (:bp2),y
 12430 748E C8				iny
 12431 748F A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 12432 7491 91 84			sta (:bp2),y
 12433 7493			l_239E
 12434
 12435 				; optimize OK (service.pas), line = 2338
 12436
 12437 7493 AD FE A1			lda MYY+1
 12438 7496 D0 05			bne @+
 12439 7498 AD FD A1			lda MYY
 12440 749B C9 01			cmp #$01
 12441 				@
 12442 749D D0 50			jne l_23BA
 12443 749F AC DF A1 84 84 AC + 	mwy BALL :bp2
 12444 74A9 A0 12			ldy #BALL.SPEEDY-DATAORIGIN
 12445 74AB B1 84			lda (:bp2),y
 12446 74AD 85 8A			sta SYSTEM.ABS.@010184000.X
 12447 74AF C8				iny
 12448 74B0 B1 84			lda (:bp2),y
 12449 74B2 85 8B			sta SYSTEM.ABS.@010184000.X+1
 12450 74B4 20 D1 2A			jsr SYSTEM.ABS.@010184000
 12451 74B7 E8				inx
 12452 74B8 A5 92 95 96			mva SYSTEM.ABS.@010184000.RESULT :STACKORIGIN,x
 12453 74BC A5 93 95 A6			mva SYSTEM.ABS.@010184000.RESULT+1 :STACKORIGIN+STACKWIDTH,x
 12454 74C0 A9 00			lda #$00
 12455 74C2 38 F5 96			sub :STACKORIGIN,x
 12456 74C5 95 96			sta :STACKORIGIN,x
 12457 74C7 A9 00			lda #$00
 12458 74C9 F5 A6			sbc :STACKORIGIN+STACKWIDTH,x
 12459 74CB 95 A6			sta :STACKORIGIN+STACKWIDTH,x
 12460 74CD A9 00			lda #$00
 12461 74CF E9 00			sbc #$00
 12462 74D1 95 B6			sta :STACKORIGIN+STACKWIDTH*2,x
 12463 74D3 A9 00			lda #$00
 12464 74D5 E9 00			sbc #$00
 12465 74D7 95 C6			sta :STACKORIGIN+STACKWIDTH*3,x
 12466 74D9 AC DF A1 84 84 AC + 	mwy BALL :bp2
 12467 74E3 A0 12			ldy #BALL.SPEEDY-DATAORIGIN
 12468 74E5 B5 96			lda :STACKORIGIN,x
 12469 74E7 91 84			sta (:bp2),y
 12470 74E9 C8				iny
 12471 74EA B5 A6			lda :STACKORIGIN+STACKWIDTH,x
 12472 74EC 91 84			sta (:bp2),y
 12473 74EE CA				dex
 12474 74EF			l_23BA
 12475
 12476 				; optimize OK (service.pas), line = 2339
 12477
 12478 74EF AD FE A1			lda MYY+1
 12479 74F2 D0 05			bne @+
 12480 74F4 AD FD A1			lda MYY
 12481 74F7 C9 02			cmp #$02
 12482 				@
 12483 74F9 D0 2D			jne l_23D7
 12484 74FB AC DF A1 84 84 AC + 	mwy BALL :bp2
 12485 7505 A0 12			ldy #BALL.SPEEDY-DATAORIGIN
 12486 7507 B1 84			lda (:bp2),y
 12487 7509 85 8A			sta SYSTEM.ABS.@010184000.X
 12488 750B C8				iny
 12489 750C B1 84			lda (:bp2),y
 12490 750E 85 8B			sta SYSTEM.ABS.@010184000.X+1
 12491 7510 20 D1 2A			jsr SYSTEM.ABS.@010184000
 12492 7513 AC DF A1 84 84 AC + 	mwy BALL :bp2
 12493 751D A0 12			ldy #BALL.SPEEDY-DATAORIGIN
 12494 751F A5 92			lda SYSTEM.ABS.@010184000.RESULT
 12495 7521 91 84			sta (:bp2),y
 12496 7523 C8				iny
 12497 7524 A5 93			lda SYSTEM.ABS.@010184000.RESULT+1
 12498 7526 91 84			sta (:bp2),y
 12499 7528			l_23D7
 12500
 12501 				; optimize OK (service.pas), line = 2340
 12502
 12503 7528 AD FE A1			lda MYY+1
 12504 752B D0 05			bne @+
 12505 752D AD FD A1			lda MYY
 12506 7530 C9 03			cmp #$03
 12507 				@
 12508 7532 D0 25			jne l_23F1
 12509 7534 AC DF A1 84 84 AC + 	mwy BALL :bp2
 12510 753E A0 12			ldy #BALL.SPEEDY-DATAORIGIN
 12511 7540 A9 00			lda #$00
 12512 7542 38 F1 84			sub (:bp2),y
 12513 7545 85 9F			sta :STACKORIGIN+9
 12514 7547 C8				iny
 12515 7548 A9 00			lda #$00
 12516 754A F1 84			sbc (:bp2),y
 12517 754C 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 12518 754E A0 12			ldy #BALL.SPEEDY-DATAORIGIN
 12519 7550 A5 9F			lda :STACKORIGIN+9
 12520 7552 91 84			sta (:bp2),y
 12521 7554 C8				iny
 12522 7555 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 12523 7557 91 84			sta (:bp2),y
 12524 7559			l_23F1
 12525 7559			l_1DE2
 12526 7559			l_1B07
 12527
 12528 				; optimize OK (service.pas), line = 2350
 12529
 12530 7559 AC DF A1 84 84 AC + 	mwy BALL :bp2
 12531 7563 A0 16			ldy #BALL.BRWHIT-DATAORIGIN
 12532 7565 B1 84			lda (:bp2),y
 12533 7567 C9 65			cmp #$65
 12534 7569 B0 03 4C 34 77		jcc l_2412
 12535
 12536 				; optimize OK (service.pas), line = 2353
 12537
 12538 756E AD FF A1			lda EMERGENCY
 12539 7571 C9 FF			cmp #$FF
 12540 7573 D0 05			jne l_2425
 12541 7575 A9 04			lda #$04
 12542 7577 20 AA 3C			jsr FATAL_ERROR
 12543 757A			l_2425
 12544
 12545 				; optimize OK (service.pas), line = 2355
 12546
 12547 757A AC FF A1			ldy EMERGENCY
 12548 757D B9 7F 20			lda adr.EMERG_DEV,y
 12549 7580 8D 00 A2			sta MIMAX
 12550
 12551 				; optimize OK (service.pas), line = 2381
 12552
 12553 7583 98				tya
 12554 7584 8D 0E A2			sta @CASETMP_0009
 12555 7587 C9 05			cmp #$05
 12556 7589 D0 1F			jne l_243E
 12557 				@
 12558
 12559 				; optimize OK (service.pas), line = 2384
 12560
 12561 758B AD 08 A2			lda adr.ADJW+$03
 12562 758E D0 08			jne l_2455
 12563 7590 AD 00 A2			lda MIMAX
 12564 7593 29 0F			and #$0F
 12565 7595 8D 00 A2			sta MIMAX
 12566 7598			l_2455
 12567
 12568 				; optimize OK (service.pas), line = 2385
 12569
 12570 7598 AD 06 A2			lda adr.ADJW+$01
 12571 759B D0 0A			jne l_247D
 12572 759D AD 00 A2			lda MIMAX
 12573 75A0 29 F0			and #$F0
 12574 75A2 09 03			ora #$03
 12575 75A4 8D 00 A2			sta MIMAX
 12576 75A7			l_247D
 12577 75A7 4C 16 76			jmp a_0009
 12578 75AA			l_243E
 12579 75AA C9 06			cmp #$06
 12580 75AC D0 21			jne l_2495
 12581
 12582 				; optimize OK (service.pas), line = 2389
 12583
 12584 75AE AD 06 A2			lda adr.ADJW+$01
 12585 75B1 D0 0A			jne l_24AC
 12586 75B3 AD 00 A2			lda MIMAX
 12587 75B6 29 0F			and #$0F
 12588 75B8 09 10			ora #$10
 12589 75BA 8D 00 A2			sta MIMAX
 12590 75BD			l_24AC
 12591
 12592 				; optimize OK (service.pas), line = 2390
 12593
 12594 75BD AD 0A A2			lda adr.ADJW+$05
 12595 75C0 D0 0A			jne l_24D4
 12596 75C2 AD 00 A2			lda MIMAX
 12597 75C5 29 F0			and #$F0
 12598 75C7 09 04			ora #$04
 12599 75C9 8D 00 A2			sta MIMAX
 12600 75CC			l_24D4
 12601 75CC 4C 16 76			jmp a_0009
 12602 75CF			l_2495
 12603 75CF C9 07			cmp #$07
 12604 75D1 D0 21			jne l_24EC
 12605
 12606 				; optimize OK (service.pas), line = 2394
 12607
 12608 75D3 AD 0A A2			lda adr.ADJW+$05
 12609 75D6 D0 0A			jne l_2503
 12610 75D8 AD 00 A2			lda MIMAX
 12611 75DB 29 0F			and #$0F
 12612 75DD 09 20			ora #$20
 12613 75DF 8D 00 A2			sta MIMAX
 12614 75E2			l_2503
 12615
 12616 				; optimize OK (service.pas), line = 2395
 12617
 12618 75E2 AD 0C A2			lda adr.ADJW+$07
 12619 75E5 D0 0A			jne l_252B
 12620 75E7 AD 00 A2			lda MIMAX
 12621 75EA 29 F0			and #$F0
 12622 75EC 09 05			ora #$05
 12623 75EE 8D 00 A2			sta MIMAX
 12624 75F1			l_252B
 12625 75F1 4C 16 76			jmp a_0009
 12626 75F4			l_24EC
 12627 75F4 C9 08			cmp #$08
 12628 75F6 D0 1E			jne l_2543
 12629
 12630 				; optimize OK (service.pas), line = 2399
 12631
 12632 75F8 AD 0C A2			lda adr.ADJW+$07
 12633 75FB D0 0A			jne l_255A
 12634 75FD AD 00 A2			lda MIMAX
 12635 7600 29 0F			and #$0F
 12636 7602 09 30			ora #$30
 12637 7604 8D 00 A2			sta MIMAX
 12638 7607			l_255A
 12639
 12640 				; optimize OK (service.pas), line = 2400
 12641
 12642 7607 AD 08 A2			lda adr.ADJW+$03
 12643 760A D0 0A			jne l_2582
 12644 760C AD 00 A2			lda MIMAX
 12645 760F 29 F0			and #$F0
 12646 7611 09 06			ora #$06
 12647 7613 8D 00 A2			sta MIMAX
 12648 7616			l_2582
 12649 7616			l_2543
 12650 7616			a_0009
 12651
 12652 				; --- RepeatUntilProlog
 12653 7616			l_259A
 12654
 12655 				; optimize OK (service.pas), line = 2407
 12656
 12657 7616 AD 00 A2			lda MIMAX
 12658 7619 4A				lsr @
 12659 761A 4A				lsr @
 12660 761B 4A				lsr @
 12661 761C 4A				lsr @
 12662 761D 85 8E			sta :ecx
 12663 761F A9 5A			lda #$5A
 12664 7621 85 86			sta :eax
 12665 					.ifdef fmulinit
 12666 					fmulu_8
 12667 					els
 12668 7623 20 BF 22			imulCL
 12669 					eif
 12670 7626 A5 86			lda :eax
 12671 7628 8D E5 A1			sta LX
 12672
 12673 				; optimize OK (service.pas), line = 2408
 12674
 12675 762B AD 00 A2			lda MIMAX
 12676 762E 29 0F			and #$0F
 12677 7630 85 8E			sta :ecx
 12678 7632 A9 5A			lda #$5A
 12679 7634 85 86			sta :eax
 12680 					.ifdef fmulinit
 12681 					fmulu_8
 12682 					els
 12683 7636 20 BF 22			imulCL
 12684 					eif
 12685 7639 8D F2 A1			sta MX+1
 12686 763C A5 86			lda :eax
 12687 763E 8D F1 A1			sta MX
 12688
 12689 				; optimize OK (service.pas), line = 2410
 12690
 12691 7641 A0 00			ldy #$00
 12692 7643 AD E5 A1			lda LX
 12693 7646 10 01			spl
 12694 7648 88				dey
 12695 7649 84 B0			sty :STACKORIGIN+STACKWIDTH+10
 12696 764B 85 A0			sta :STACKORIGIN+10
 12697 764D AD F1 A1			lda MX
 12698 7650 38 E5 A0			sub :STACKORIGIN+10
 12699 7653 8D DD 9E			sta SYSTEM.RANDOM.@010184000.RANGE
 12700 7656 AD F2 A1			lda MX+1
 12701 7659 E5 B0			sbc :STACKORIGIN+STACKWIDTH+10
 12702 765B 8D DE 9E			sta SYSTEM.RANDOM.@010184000.RANGE+1
 12703 765E 20 1A 33			jsr SYSTEM.RANDOM.@010184000
 12704 7661 E8				inx
 12705 7662 AD DF 9E 95 96		mva SYSTEM.RANDOM.@010184000.RESULT :STACKORIGIN,x
 12706 7667 AD E0 9E 95 A6		mva SYSTEM.RANDOM.@010184000.RESULT+1 :STACKORIGIN+STACKWIDTH,x
 12707 766C E8				inx
 12708 766D AD E5 A1 95 96		mva LX :STACKORIGIN,x
 12709 7672 20 36 21			jsr @expandSHORT2SMALL
 12710 7675 20 B5 20			jsr addAX_CX
 12711 7678 CA				dex
 12712 7679 B5 96			lda :STACKORIGIN,x
 12713 767B 8D F9 A1			sta ANGLE
 12714 767E B5 A6			lda :STACKORIGIN+STACKWIDTH,x
 12715 7680 8D FA A1			sta ANGLE+1
 12716 7683 CA				dex
 12717
 12718 				; optimize OK (service.pas), line = 2415
 12719
 12720 7684 A9 5A			lda #$5A
 12721 7686 85 8E			sta @SMALLINT.MOD.B
 12722 7688 A9 00			lda #$00
 12723 768A 85 8F			sta @SMALLINT.MOD.B+1
 12724 768C AD F9 A1			lda ANGLE
 12725 768F 85 86			sta @SMALLINT.MOD.A
 12726 7691 AD FA A1			lda ANGLE+1
 12727 7694 85 87			sta @SMALLINT.MOD.A+1
 12728 7696 20 50 22			jsr @SMALLINT.MOD
 12729 7699 A5 92			lda @SMALLINT.MOD.RESULT
 12730 769B C9 1F			cmp #$1F
 12731 769D A5 93			lda @SMALLINT.MOD.RESULT+1
 12732 769F E9 00			sbc #$00
 12733 76A1 50 02			svc
 12734 76A3 49 80			eor #$80
 12735 76A5 10 03 4C 16 76		jmi l_259A
 12736 76AA A9 5A			lda #$5A
 12737 76AC 85 8E			sta @SMALLINT.MOD.B
 12738 76AE A9 00			lda #$00
 12739 76B0 85 8F			sta @SMALLINT.MOD.B+1
 12740 76B2 AD F9 A1			lda ANGLE
 12741 76B5 85 86			sta @SMALLINT.MOD.A
 12742 76B7 AD FA A1			lda ANGLE+1
 12743 76BA 85 87			sta @SMALLINT.MOD.A+1
 12744 76BC 20 50 22			jsr @SMALLINT.MOD
 12745 76BF A5 92			lda @SMALLINT.MOD.RESULT
 12746 76C1 C9 3C			cmp #$3C
 12747 76C3 A5 93			lda @SMALLINT.MOD.RESULT+1
 12748 76C5 E9 00			sbc #$00
 12749 76C7 50 02			svc
 12750 76C9 49 80			eor #$80
 12751 76CB 30 03 4C 16 76		jpl l_259A
 12752
 12753 				; optimize OK (service.pas), line = 2419
 12754
 12755 76D0 A9 68			lda #$68
 12756 76D2 85 8E			sta @SMALLINT.MOD.B
 12757 76D4 A9 01			lda #$01
 12758 76D6 85 8F			sta @SMALLINT.MOD.B+1
 12759 76D8 AD F9 A1			lda ANGLE
 12760 76DB 85 86			sta @SMALLINT.MOD.A
 12761 76DD AD FA A1			lda ANGLE+1
 12762 76E0 85 87			sta @SMALLINT.MOD.A+1
 12763 76E2 20 50 22			jsr @SMALLINT.MOD
 12764 76E5 A5 92			lda @SMALLINT.MOD.RESULT
 12765 76E7 8D 38 A1			sta SET_BALL_DIRECTION.ANGLE
 12766 76EA A5 93			lda @SMALLINT.MOD.RESULT+1
 12767 76EC 8D 39 A1			sta SET_BALL_DIRECTION.ANGLE+1
 12768 76EF AD DF A1			lda BALL
 12769 76F2 8D 34 A1			sta SET_BALL_DIRECTION.BALL
 12770 76F5 AD E0 A1			lda BALL+1
 12771 76F8 8D 35 A1			sta SET_BALL_DIRECTION.BALL+1
 12772 76FB 20 A6 46			jsr SET_BALL_DIRECTION
 12773
 12774 				; optimize OK (service.pas), line = 2420
 12775
 12776 76FE AC DF A1 84 84 AC + 	mwy BALL :bp2
 12777 7708 A0 0C			ldy #BALL.SPEED-DATAORIGIN
 12778 770A B1 84			lda (:bp2),y
 12779 770C 8D 22 A1			sta SET_BALL_SPEED.SPEED
 12780 770F C8				iny
 12781 7710 B1 84			lda (:bp2),y
 12782 7712 8D 23 A1			sta SET_BALL_SPEED.SPEED+1
 12783 7715 AD DF A1			lda BALL
 12784 7718 8D 1E A1			sta SET_BALL_SPEED.BALL
 12785 771B AD E0 A1			lda BALL+1
 12786 771E 8D 1F A1			sta SET_BALL_SPEED.BALL+1
 12787 7721 20 C3 44			jsr SET_BALL_SPEED
 12788
 12789 				; optimize OK (service.pas), line = 2422
 12790
 12791 7724 AC DF A1 84 84 AC + 	mwy BALL :bp2
 12792 772E A0 16			ldy #BALL.BRWHIT-DATAORIGIN
 12793 7730 A9 00			lda #$00
 12794 7732 91 84			sta (:bp2),y
 12795 7734			l_2412
 12796
 12797 				; ------------------------------------------------------------
 12798
 12799 = A1DF			BALL	= DATAORIGIN+$033A
 12800 = 9EA5			BALL.X	= DATAORIGIN+$0000
 12801 = 9EA7			BALL.Y	= DATAORIGIN+$0002
 12802 = 9EA9			BALL.FINEX	= DATAORIGIN+$0004
 12803 = 9EAB			BALL.FINEY	= DATAORIGIN+$0006
 12804 = 9EAD			BALL.OLDX	= DATAORIGIN+$0008
 12805 = 9EAF			BALL.OLDY	= DATAORIGIN+$000A
 12806 = 9EB1			BALL.SPEED	= DATAORIGIN+$000C
 12807 = 9EB3			BALL.FINESPEED	= DATAORIGIN+$000E
 12808 = 9EB5			BALL.SPEEDX	= DATAORIGIN+$0010
 12809 = 9EB7			BALL.SPEEDY	= DATAORIGIN+$0012
 12810 = 9EB9			BALL.SBD	= DATAORIGIN+$0014
 12811 = 9EBB			BALL.BRWHIT	= DATAORIGIN+$0016
 12812 = 9EBC			BALL.INPLAY	= DATAORIGIN+$0017
 12813 = 9EBD			BALL.LAUNCH	= DATAORIGIN+$0018
 12814 = 9EBE			BALL.ONVAUS	= DATAORIGIN+$0019
 12815 = 9EC0			BALL.STM	= DATAORIGIN+$001B
 12816 = A1E3			X	= DATAORIGIN+$033E
 12817 = A1E4			Y	= DATAORIGIN+$033F
 12818 = A1E5			LX	= DATAORIGIN+$0340
 12819 = A1E6			LY	= DATAORIGIN+$0341
 12820 = A1E7			XB	= DATAORIGIN+$0342
 12821 = A1E8			YB	= DATAORIGIN+$0343
 12822 = A1E9			OX	= DATAORIGIN+$0344
 12823 = A1EB			OY	= DATAORIGIN+$0346
 12824 = A1ED			NX	= DATAORIGIN+$0348
 12825 = A1EF			NY	= DATAORIGIN+$034A
 12826 = A1F1			MX	= DATAORIGIN+$034C
 12827 = A1F3			MY	= DATAORIGIN+$034E
 12828 = A1F5			F1	= DATAORIGIN+$0350
 12829 = A1F7			F2	= DATAORIGIN+$0352
 12830 = A1F9			ANGLE	= DATAORIGIN+$0354
 12831 = A1FB			MYX	= DATAORIGIN+$0356
 12832 = A1FD			MYY	= DATAORIGIN+$0358
 12833 = A1FF			EMERGENCY	= DATAORIGIN+$035A
 12834 = A200			MIMAX	= DATAORIGIN+$035B
 12835 = A201			DEFLECT	= DATAORIGIN+$035C
 12836 = A202			AROUND	= DATAORIGIN+$035D
 12837 = A203			COLLISION	= DATAORIGIN+$035E
 12838 = A204			TOUCH	= DATAORIGIN+$035F
 12839 = A205			adr.ADJW	= [DATAORIGIN+$0360] .array [3] [3]
 12840 7734			.var ADJW	= adr.ADJW .word
 12841 = A20E			@CASETMP_0009	= DATAORIGIN+$0369
 12842
 12843 = A1DF			@VarData	= BALL
 12844 = 0028			@VarDataSize	= 40
 12845
 12846 7734			@exit
 12847 					.ifdef @new
 12848 					lda <@VarData
 12849 					sta :ztmp
 12850 					lda >@VarData
 12851 					ldy #@VarDataSize-1
 12852 					jmp @FreeMem
 12853 					els
 12854 7734 60				rts						; ret
 12855 					eif
 12856 = 7735 05 A2		ADJW
 12856 				.endl
 12857
 12858 7737			.local	FILL_PICTURE_WITH_PATTERN			; PROCEDURE
 12859
 12860 				; optimize OK (service.pas), line = 2437
 12861
 12862 7737 A9 00			lda #$00
 12863 7739 8D 16 A2			sta Y
 12864
 12865 773C			l_2608
 12866 				; --- ForToDoCondition
 12867 773C AC 0F A2 84 84 AC + 	mwy PATT :bp2
 12868 7746 A0 00			ldy #PATT.WIDTH-DATAORIGIN
 12869 7748 B1 84			lda (:bp2),y
 12870 774A 85 8E			sta @WORD.MOD.B
 12871 774C C8				iny
 12872 774D B1 84			lda (:bp2),y
 12873 774F 85 8F			sta @WORD.MOD.B+1
 12874 7751 AD 16 A2			lda Y
 12875 7754 85 86			sta @WORD.MOD.A
 12876 7756 A9 00			lda #$00
 12877 7758 85 87			sta @WORD.MOD.A+1
 12878 775A 20 A0 23			jsr @WORD.MOD
 12879 775D A5 92			lda @WORD.MOD.RESULT
 12880 775F AC 16 A2			ldy Y
 12881 7762 99 00 C4			sta adr.MODX,y
 12882
 12883 				; optimize OK (service.pas), line = 2443
 12884
 12885 7765 AC 0F A2 84 84 AC + 	mwy PATT :bp2
 12886 776F A0 02			ldy #PATT.HEIGHT-DATAORIGIN
 12887 7771 B1 84			lda (:bp2),y
 12888 7773 85 8E			sta @WORD.MOD.B
 12889 7775 C8				iny
 12890 7776 B1 84			lda (:bp2),y
 12891 7778 85 8F			sta @WORD.MOD.B+1
 12892 777A AD 16 A2			lda Y
 12893 777D 85 86			sta @WORD.MOD.A
 12894 777F A9 00			lda #$00
 12895 7781 85 87			sta @WORD.MOD.A+1
 12896 7783 20 A0 23			jsr @WORD.MOD
 12897 7786 A5 92			lda @WORD.MOD.RESULT
 12898 7788 AC 16 A2			ldy Y
 12899 778B 99 00 C3			sta adr.MODY,y
 12900
 12901 				; --- ForToDoEpilog
 12902 778E EE 16 A2			inc Y
 12903 7791 D0 A9			jne l_2608
 12904 7793			l_2616
 12905
 12906 				; optimize OK (service.pas), line = 2449
 12907
 12908 7793 A9 0A			lda #$0A
 12909 7795 8D 16 A2			sta Y
 12910
 12911 7798			l_2640
 12912 				; --- ForToDoCondition
 12913 7798 AC 16 A2			ldy Y
 12914 779B C0 C7			cpy #$C7
 12915 779D 90 03 4C C6 78		jcs l_264E
 12916
 12917 				; optimize OK (service.pas), line = 2452
 12918
 12919 77A2 B9 00 C3			lda adr.MODY,y
 12920 77A5 85 86			sta :eax
 12921 77A7 AC 0F A2 84 84 AC + 	mwy PATT :bp2
 12922 77B1 A0 00			ldy #PATT.WIDTH-DATAORIGIN
 12923 77B3 B1 84			lda (:bp2),y
 12924 77B5 85 8E			sta :ecx
 12925 77B7 C8				iny
 12926 77B8 B1 84			lda (:bp2),y
 12927 77BA 85 8F			sta :ecx+1
 12928 77BC A9 00			lda #$00
 12929 77BE 85 87			sta :eax+1
 12930 					.ifdef fmulinit
 12931 					fmulu_16
 12932 					els
 12933 77C0 20 0B 23			imulCX
 12934 					eif
 12935 77C3 A5 86			lda :eax
 12936 77C5 8D 13 A2			sta YB
 12937 77C8 A5 87			lda :eax+1
 12938 77CA 8D 14 A2			sta YB+1
 12939
 12940 				; optimize OK (service.pas), line = 2454
 12941
 12942 77CD A9 00			lda #$00
 12943 77CF 8D 19 A2			sta K
 12944
 12945 				; optimize OK (service.pas), line = 2455
 12946
 12947 77D2 A9 09			lda #$09
 12948 77D4 8D 15 A2			sta X
 12949
 12950 77D7			l_2669
 12951 				; --- ForToDoCondition
 12952 77D7 AD 15 A2			lda X
 12953 77DA C9 D8			cmp #$D8
 12954 77DC 90 03 4C 76 78		jcs l_2677
 12955
 12956 				; optimize OK (service.pas), line = 2458
 12957
 12958 77E1 AC 0F A2 84 84 AC + 	mwy PATT :bp2
 12959 77EB A0 04			ldy #PATT.OFS-DATAORIGIN
 12960 77ED B1 84			lda (:bp2),y
 12961 77EF 85 9F			sta :STACKORIGIN+9
 12962 77F1 C8				iny
 12963 77F2 B1 84			lda (:bp2),y
 12964 77F4 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 12965 77F6 C8				iny
 12966 77F7 B1 84			lda (:bp2),y
 12967 77F9 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
 12968 77FB C8				iny
 12969 77FC B1 84			lda (:bp2),y
 12970 77FE 85 CF			sta :STACKORIGIN+STACKWIDTH*3+9
 12971 7800 AC 15 A2			ldy X
 12972 7803 A5 9F			lda :STACKORIGIN+9
 12973 7805 18 79 00 C4			add adr.MODX,y
 12974 7809 85 9F			sta :STACKORIGIN+9
 12975 780B A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 12976 780D 69 00			adc #$00
 12977 780F 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 12978 7811 A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
 12979 7813 69 00			adc #$00
 12980 7815 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
 12981 7817 A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
 12982 7819 69 00			adc #$00
 12983 781B 85 CF			sta :STACKORIGIN+STACKWIDTH*3+9
 12984 781D A5 9F			lda :STACKORIGIN+9
 12985 781F 18 6D 13 A2			add YB
 12986 7823 8D CD A0			sta GETBYTE.SRC
 12987 7826 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 12988 7828 6D 14 A2			adc YB+1
 12989 782B 8D CE A0			sta GETBYTE.SRC+1
 12990 782E A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
 12991 7830 69 00			adc #$00
 12992 7832 8D CF A0			sta GETBYTE.SRC+2
 12993 7835 A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
 12994 7837 69 00			adc #$00
 12995 7839 8D D0 A0			sta GETBYTE.SRC+3
 12996 783C 20 2A 3C			jsr GETBYTE
 12997 783F AD D1 A0			lda GETBYTE.RESULT
 12998 7842 8D 17 A2			sta CL
 12999
 13000 				; optimize OK (service.pas), line = 2460
 13001
 13002 7845 A9 80			lda #$80
 13003 7847 8D 18 A2			sta SHADOW
 13004
 13005 				; optimize OK (service.pas), line = 2465
 13006
 13007 784A AD 16 A2			lda Y
 13008 784D C9 10			cmp #$10
 13009 784F 90 07			jcc l_26ACx
 13010 7851 AD 15 A2			lda X
 13011 7854 C9 12			cmp #$12
 13012 7856 B0 05			jcs l_26AC
 13013 7858			l_26ACx
 13014 7858 A9 00			lda #$00
 13015 785A 8D 18 A2			sta SHADOW
 13016 785D			l_26AC
 13017
 13018 				; optimize OK (service.pas), line = 2470
 13019
 13020 785D AD 17 A2			lda CL
 13021 7860 29 7F			and #$7F
 13022 7862 0D 18 A2			ora SHADOW
 13023 7865 AC 19 A2			ldy K
 13024 7868 99 00 C2			sta adr.TMP,y
 13025
 13026 				; optimize FAIL (0, service.pas), line = 2472
 13027
 13028 786B EE 19 A2			inc K
 13029
 13030 				; --- ForToDoEpilog
 13031 786E EE 15 A2			inc X
 13032 7871 F0 03 4C D7 77		jne l_2669
 13033 7876			l_2677
 13034
 13035 				; optimize OK (service.pas), line = 2475
 13036
 13037 7876 AD A5 9F			lda PLAYSCREEN.OFS
 13038 7879 18 69 09			add #$09
 13039 787C 85 A0			sta :STACKORIGIN+10
 13040 787E AD A6 9F			lda PLAYSCREEN.OFS+1
 13041 7881 69 00			adc #$00
 13042 7883 85 B0			sta :STACKORIGIN+STACKWIDTH+10
 13043 7885 AD A7 9F			lda PLAYSCREEN.OFS+2
 13044 7888 69 00			adc #$00
 13045 788A 85 C0			sta :STACKORIGIN+STACKWIDTH*2+10
 13046 788C AD A8 9F			lda PLAYSCREEN.OFS+3
 13047 788F 69 00			adc #$00
 13048 7891 85 D0			sta :STACKORIGIN+STACKWIDTH*3+10
 13049 7893 AC 16 A2			ldy Y
 13050 7896 A5 A0			lda :STACKORIGIN+10
 13051 7898 18 79 00 C0			add adr.ROW,y
 13052 789C 8D B9 A0			sta BLITTMP.DST
 13053 789F A5 B0			lda :STACKORIGIN+STACKWIDTH+10
 13054 78A1 79 00 C1			adc adr.ROW+256,y
 13055 78A4 8D BA A0			sta BLITTMP.DST+1
 13056 78A7 A5 C0			lda :STACKORIGIN+STACKWIDTH*2+10
 13057 78A9 69 00			adc #$00
 13058 78AB 8D BB A0			sta BLITTMP.DST+2
 13059 78AE A5 D0			lda :STACKORIGIN+STACKWIDTH*3+10
 13060 78B0 69 00			adc #$00
 13061 78B2 8D BC A0			sta BLITTMP.DST+3
 13062 78B5 AD 19 A2			lda K
 13063 78B8 8D BD A0			sta BLITTMP.SIZE
 13064 78BB 20 57 3B			jsr BLITTMP
 13065
 13066 				; --- ForToDoEpilog
 13067 78BE EE 16 A2			inc Y
 13068 78C1 F0 03 4C 98 77		jne l_2640
 13069 78C6			l_264E
 13070
 13071 				; ------------------------------------------------------------
 13072
 13073 = A20F			PATT	= DATAORIGIN+$036A
 13074 = 9EA5			PATT.WIDTH	= DATAORIGIN+$0000
 13075 = 9EA7			PATT.HEIGHT	= DATAORIGIN+$0002
 13076 = 9EA9			PATT.OFS	= DATAORIGIN+$0004
 13077 = A213			YB	= DATAORIGIN+$036E
 13078 = A215			X	= DATAORIGIN+$0370
 13079 = A216			Y	= DATAORIGIN+$0371
 13080 = A217			CL	= DATAORIGIN+$0372
 13081 = A218			SHADOW	= DATAORIGIN+$0373
 13082 = A219			K	= DATAORIGIN+$0374
 13083
 13084 = A20F			@VarData	= PATT
 13085 = 0009			@VarDataSize	= 9
 13086
 13087 78C6			@exit
 13088 					.ifdef @new
 13089 					lda <@VarData
 13090 					sta :ztmp
 13091 					lda >@VarData
 13092 					ldy #@VarDataSize-1
 13093 					jmp @FreeMem
 13094 					els
 13095 78C6 60				rts						; ret
 13096 					eif
 13097 				.endl
 13098
 13099 78C7			.local	WRITE_ROUND_LEVEL				; PROCEDURE
 13100
 13101 				; ------------------------------------------------------------
 13102
 13103 = A21A			X	= DATAORIGIN+$0375
 13104 = A21C			Y	= DATAORIGIN+$0377
 13105
 13106 = A21A			@VarData	= X
 13107 = 0004			@VarDataSize	= 4
 13108
 13109 78C7			@exit
 13110 					.ifdef @new
 13111 					lda <@VarData
 13112 					sta :ztmp
 13113 					lda >@VarData
 13114 					ldy #@VarDataSize-1
 13115 					jmp @FreeMem
 13116 					els
 13117 78C7 60				rts						; ret
 13118 					eif
 13119 				.endl
 13120
 13121 78C8			.local	REMOVE_ROUND_LEVEL				; PROCEDURE
 13122
 13123 				; optimize OK (service.pas), line = 2591
 13124
 13125 78C8 AD 81 C0			lda adr.ROW+$81
 13126 78CB 18 69 48			add #$48
 13127 78CE 8D 98 A0			sta HLP
 13128 78D1 AD 81 C1			lda adr.ROW+256+$81
 13129 78D4 69 00			adc #$00
 13130 78D6 8D 99 A0			sta HLP+1
 13131
 13132 				; optimize OK (service.pas), line = 2593
 13133
 13134 78D9 AD 98 A0			lda HLP
 13135 78DC 8D A7 A0			sta BLITBOX.DST
 13136 78DF A9 50			lda #$50
 13137 78E1 18 6D 99 A0			add HLP+1
 13138 78E5 8D A8 A0			sta BLITBOX.DST+1
 13139 78E8 A9 00			lda #$00
 13140 78EA 69 00			adc #$00
 13141 78EC 8D A9 A0			sta BLITBOX.DST+2
 13142 78EF A9 00			lda #$00
 13143 78F1 69 00			adc #$00
 13144 78F3 8D AA A0			sta BLITBOX.DST+3
 13145 78F6 AD A5 9F			lda PLAYSCREEN.OFS
 13146 78F9 18 6D 98 A0			add HLP
 13147 78FD 8D A3 A0			sta BLITBOX.SRC
 13148 7900 AD A6 9F			lda PLAYSCREEN.OFS+1
 13149 7903 6D 99 A0			adc HLP+1
 13150 7906 8D A4 A0			sta BLITBOX.SRC+1
 13151 7909 AD A7 9F			lda PLAYSCREEN.OFS+2
 13152 790C 69 00			adc #$00
 13153 790E 8D A5 A0			sta BLITBOX.SRC+2
 13154 7911 AD A8 9F			lda PLAYSCREEN.OFS+3
 13155 7914 69 00			adc #$00
 13156 7916 8D A6 A0			sta BLITBOX.SRC+3
 13157 7919 A9 58			lda #$58
 13158 791B 8D AB A0			sta BLITBOX.W
 13159 791E A9 00			lda #$00
 13160 7920 8D AC A0			sta BLITBOX.W+1
 13161 7923 A9 1F			lda #$1F
 13162 7925 8D AD A0			sta BLITBOX.H
 13163 7928 20 58 3A			jsr BLITBOX
 13164
 13165 792B			@exit
 13166 					.ifdef @new
 13167 					lda <@VarData
 13168 					sta :ztmp
 13169 					lda >@VarData
 13170 					ldy #@VarDataSize-1
 13171 					jmp @FreeMem
 13172 					els
 13173 792B 60				rts						; ret
 13174 					eif
 13175 				.endl
 13176
 13177 792C			.local	GAME_OVER					; PROCEDURE
 13178
 13179 				; ------------------------------------------------------------
 13180
 13181 = A21E			X	= DATAORIGIN+$0379
 13182 = A220			Y	= DATAORIGIN+$037B
 13183 = A222			adr.SC	= [DATAORIGIN+$037D] .array [21]
 13184 792C			.var SC	= adr.SC .word
 13185
 13186 = A21E			@VarData	= X
 13187 = 0019			@VarDataSize	= 25
 13188
 13189 792C			@exit
 13190 					.ifdef @new
 13191 					lda <@VarData
 13192 					sta :ztmp
 13193 					lda >@VarData
 13194 					ldy #@VarDataSize-1
 13195 					jmp @FreeMem
 13196 					els
 13197 792C 60				rts						; ret
 13198 					eif
 13199 = 792D 22 A2		SC
 13199 				.endl
 13200
 13201 792F			.local	DESTROY_VAUS					; PROCEDURE
 13202
 13203 				; optimize OK (service.pas), line = 2647
 13204
 13205 792F AD B1 9F 8D A9 9F + 	:8 mva adr.NORMAL+# adr.PLAYVAUS+#
 13206
 13207 				; optimize FAIL ('MODIFY_VAUS', service.pas), line = 2648
 13208
 13209 795F 20 5E 51			jsr MODIFY_VAUS
 13210
 13211 				; optimize OK (service.pas), line = 2650
 13212
 13213 7962 AD 19 A0			lda VAUS.X
 13214 7965 8D 7F A1			sta MOVE_VAUS.X
 13215 7968 A9 00			lda #$00
 13216 796A 8D 80 A1			sta MOVE_VAUS.X+1
 13217 796D AD 1A A0			lda VAUS.Y
 13218 7970 8D 81 A1			sta MOVE_VAUS.Y
 13219 7973 A9 00			lda #$00
 13220 7975 8D 82 A1			sta MOVE_VAUS.Y+1
 13221 7978 20 A9 53			jsr MOVE_VAUS
 13222
 13223 				; optimize OK (service.pas), line = 2652
 13224
 13225 797B AD 19 A0			lda VAUS.X
 13226 797E 38 E9 04			sub #$04
 13227 7981 8D 39 A2			sta A
 13228 7984 A9 00			lda #$00
 13229 7986 E9 00			sbc #$00
 13230 7988 8D 3A A2			sta A+1
 13231
 13232 				; optimize OK (service.pas), line = 2653
 13233
 13234 798B AD 1A A0			lda VAUS.Y
 13235 798E 38 E9 05			sub #$05
 13236 7991 8D 3B A2			sta B
 13237 7994 A9 00			lda #$00
 13238 7996 E9 00			sbc #$00
 13239 7998 8D 3C A2			sta B+1
 13240
 13241 				; optimize OK (service.pas), line = 2656
 13242
 13243 799B A9 00			lda #$00
 13244 799D 8D 3D A2			sta W
 13245
 13246 79A0			l_2739
 13247 				; --- ForToDoCondition
 13248 79A0 AD 3D A2			lda W
 13249 79A3 C9 07			cmp #$07
 13250 79A5 90 03 4C 8D 7B		jcs l_2747
 13251
 13252 				; optimize OK (service.pas), line = 2658
 13253
 13254 79AA A9 00			lda #$00
 13255 79AC 8D 3F A2			sta Y
 13256
 13257 79AF			l_2750
 13258 				; --- ForToDoCondition
 13259 79AF AD 3F A2			lda Y
 13260 79B2 C9 10			cmp #$10
 13261 79B4 90 03 4C 77 7B		jcs l_275E
 13262
 13263 				; optimize OK (service.pas), line = 2661
 13264
 13265 79B9 AD C9 9F			lda EXPLOSION.WIDTH
 13266 79BC 85 8E			sta :ecx
 13267 79BE AD CA 9F			lda EXPLOSION.WIDTH+1
 13268 79C1 85 8F			sta :ecx+1
 13269 79C3 AD 3F A2			lda Y
 13270 79C6 85 86			sta :eax
 13271 79C8 A9 00			lda #$00
 13272 79CA 85 87			sta :eax+1
 13273 					.ifdef fmulinit
 13274 					fmulu_16
 13275 					els
 13276 79CC 20 4F 23			imulCX_AL
 13277 					eif
 13278 79CF A5 86			lda :eax
 13279 79D1 85 9F			sta :STACKORIGIN+9
 13280 79D3 A5 87			lda :eax+1
 13281 79D5 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 13282 79D7 AD C9 9F			lda EXPLOSION.WIDTH
 13283 79DA 85 A1			sta :STACKORIGIN+11
 13284 79DC AD CA 9F			lda EXPLOSION.WIDTH+1
 13285 79DF 06 A1			asl :STACKORIGIN+11
 13286 79E1 2A				rol @
 13287 79E2 06 A1			asl :STACKORIGIN+11
 13288 79E4 2A				rol @
 13289 79E5 06 A1			asl :STACKORIGIN+11
 13290 79E7 2A				rol @
 13291 79E8 06 A1			asl :STACKORIGIN+11
 13292 79EA 2A				rol @
 13293 79EB 85 8F			sta :ecx+1
 13294 79ED A5 A1			lda :STACKORIGIN+11
 13295 79EF 85 8E			sta :ecx
 13296 79F1 AD 3D A2			lda W
 13297 79F4 85 86			sta :eax
 13298 79F6 A9 00			lda #$00
 13299 79F8 85 87			sta :eax+1
 13300 					.ifdef fmulinit
 13301 					fmulu_16
 13302 					els
 13303 79FA 20 0B 23			imulCX
 13304 					eif
 13305 79FD A5 86			lda :eax
 13306 79FF 18 65 9F			add :STACKORIGIN+9
 13307 7A02 8D 37 A2			sta Z
 13308 7A05 A5 87			lda :eax+1
 13309 7A07 65 AF			adc :STACKORIGIN+STACKWIDTH+9
 13310 7A09 8D 38 A2			sta Z+1
 13311
 13312 				; optimize OK (service.pas), line = 2663
 13313
 13314 7A0C AD 3F A2			lda Y
 13315 7A0F 18 6D 3B A2			add B
 13316 7A13 A8				tay
 13317 7A14 AD 39 A2			lda A
 13318 7A17 18 79 00 C0			add adr.ROW,y
 13319 7A1B 8D 98 A0			sta HLP
 13320 7A1E AD 3A A2			lda A+1
 13321 7A21 79 00 C1			adc adr.ROW+256,y
 13322 7A24 8D 99 A0			sta HLP+1
 13323
 13324 				; optimize OK (service.pas), line = 2665
 13325
 13326 7A27 A9 00			lda #$00
 13327 7A29 8D 3E A2			sta X
 13328 7A2C AC C9 9F			ldy EXPLOSION.WIDTH
 13329 7A2F 88				dey
 13330 7A30 8C 34 7A			sty @FORTMP_2795_0
 13331
 13332 7A33			l_2798
 13333 				; --- ForToDoCondition
 13334 7A33 A9 00			lda @FORTMP_2795_0::#$00
 13335 7A35 CD 3E A2			cmp X
 13336 7A38 B0 03 4C 49 7B		jcc l_27A6
 13337
 13338 				; optimize FAIL (1, service.pas), line = 2669
 13339
 13340 7A3D E8				inx
 13341 7A3E A0 01			ldy #1
 13342 7A40 AD 3D A2			lda W
 13343 7A43 C9 06			cmp #$06
 13344 7A45 F0 01			beq @+
 13345 7A47 88				dey
 13346 				@
 13347 7A48 94 96			sty :STACKORIGIN,x
 13348 7A4A AD CD 9F			lda EXPLOSION.OFS
 13349 7A4D 18 6D 3E A2			add X
 13350 7A51 85 9F			sta :STACKORIGIN+9
 13351 7A53 AD CE 9F			lda EXPLOSION.OFS+1
 13352 7A56 69 00			adc #$00
 13353 7A58 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 13354 7A5A AD CF 9F			lda EXPLOSION.OFS+2
 13355 7A5D 69 00			adc #$00
 13356 7A5F 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
 13357 7A61 AD D0 9F			lda EXPLOSION.OFS+3
 13358 7A64 69 00			adc #$00
 13359 7A66 85 CF			sta :STACKORIGIN+STACKWIDTH*3+9
 13360 7A68 A5 9F			lda :STACKORIGIN+9
 13361 7A6A 18 6D 37 A2			add Z
 13362 7A6E 8D CD A0			sta GETBYTE.SRC
 13363 7A71 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 13364 7A73 6D 38 A2			adc Z+1
 13365 7A76 8D CE A0			sta GETBYTE.SRC+1
 13366 7A79 A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
 13367 7A7B 69 00			adc #$00
 13368 7A7D 8D CF A0			sta GETBYTE.SRC+2
 13369 7A80 A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
 13370 7A82 69 00			adc #$00
 13371 7A84 8D D0 A0			sta GETBYTE.SRC+3
 13372 7A87 20 2A 3C			jsr GETBYTE
 13373 7A8A CA				dex
 13374 7A8B A0 01			ldy #1
 13375 7A8D AD D1 A0			lda GETBYTE.RESULT
 13376 7A90 F0 01			beq @+
 13377 7A92 88				dey
 13378 				@
 13379 7A93 98				tya
 13380 7A94 15 97			ora :STACKORIGIN+1,x
 13381 7A96 F0 56			jeq l_27CE
 13382
 13383 				; optimize FAIL (1, service.pas), line = 2673
 13384
 13385 7A98 E8				inx
 13386 7A99 AD 3E A2 95 96		mva X :STACKORIGIN,x
 13387 7A9E A9 00 95 A6			mva #$00 :STACKORIGIN+STACKWIDTH,x
 13388 7AA2 AD A5 9F			lda PLAYSCREEN.OFS
 13389 7AA5 18 6D 98 A0			add HLP
 13390 7AA9 85 9F			sta :STACKORIGIN+9
 13391 7AAB AD A6 9F			lda PLAYSCREEN.OFS+1
 13392 7AAE 6D 99 A0			adc HLP+1
 13393 7AB1 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 13394 7AB3 AD A7 9F			lda PLAYSCREEN.OFS+2
 13395 7AB6 69 00			adc #$00
 13396 7AB8 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
 13397 7ABA AD A8 9F			lda PLAYSCREEN.OFS+3
 13398 7ABD 69 00			adc #$00
 13399 7ABF 85 CF			sta :STACKORIGIN+STACKWIDTH*3+9
 13400 7AC1 A5 9F			lda :STACKORIGIN+9
 13401 7AC3 18 6D 3E A2			add X
 13402 7AC7 8D CD A0			sta GETBYTE.SRC
 13403 7ACA A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 13404 7ACC 69 00			adc #$00
 13405 7ACE 8D CE A0			sta GETBYTE.SRC+1
 13406 7AD1 A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
 13407 7AD3 69 00			adc #$00
 13408 7AD5 8D CF A0			sta GETBYTE.SRC+2
 13409 7AD8 A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
 13410 7ADA 69 00			adc #$00
 13411 7ADC 8D D0 A0			sta GETBYTE.SRC+3
 13412 7ADF 20 2A 3C			jsr GETBYTE
 13413 7AE2 B4 96			ldy :STACKORIGIN,x
 13414 7AE4 AD D1 A0			lda GETBYTE.RESULT
 13415 7AE7 99 00 C2			sta adr.TMP,y
 13416 7AEA CA				dex
 13417 7AEB 4C 41 7B			jmp l_27EB
 13418 7AEE			l_27CE
 13419
 13420 				; optimize FAIL (1, service.pas), line = 2678
 13421
 13422 7AEE E8				inx
 13423 7AEF AD 3E A2 95 96		mva X :STACKORIGIN,x
 13424 7AF4 A9 00 95 A6			mva #$00 :STACKORIGIN+STACKWIDTH,x
 13425 7AF8 AD CD 9F			lda EXPLOSION.OFS
 13426 7AFB 18 6D 3E A2			add X
 13427 7AFF 85 9F			sta :STACKORIGIN+9
 13428 7B01 AD CE 9F			lda EXPLOSION.OFS+1
 13429 7B04 69 00			adc #$00
 13430 7B06 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 13431 7B08 AD CF 9F			lda EXPLOSION.OFS+2
 13432 7B0B 69 00			adc #$00
 13433 7B0D 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
 13434 7B0F AD D0 9F			lda EXPLOSION.OFS+3
 13435 7B12 69 00			adc #$00
 13436 7B14 85 CF			sta :STACKORIGIN+STACKWIDTH*3+9
 13437 7B16 A5 9F			lda :STACKORIGIN+9
 13438 7B18 18 6D 37 A2			add Z
 13439 7B1C 8D CD A0			sta GETBYTE.SRC
 13440 7B1F A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 13441 7B21 6D 38 A2			adc Z+1
 13442 7B24 8D CE A0			sta GETBYTE.SRC+1
 13443 7B27 A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
 13444 7B29 69 00			adc #$00
 13445 7B2B 8D CF A0			sta GETBYTE.SRC+2
 13446 7B2E A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
 13447 7B30 69 00			adc #$00
 13448 7B32 8D D0 A0			sta GETBYTE.SRC+3
 13449 7B35 20 2A 3C			jsr GETBYTE
 13450 7B38 B4 96			ldy :STACKORIGIN,x
 13451 7B3A AD D1 A0			lda GETBYTE.RESULT
 13452 7B3D 99 00 C2			sta adr.TMP,y
 13453 7B40 CA				dex
 13454 7B41			l_27EB
 13455
 13456 				; --- ForToDoEpilog
 13457 7B41 EE 3E A2			inc X
 13458 7B44 F0 03 4C 33 7A		jne l_2798
 13459 7B49			l_27A6
 13460
 13461 				; optimize OK (service.pas), line = 2681
 13462
 13463 7B49 AD 98 A0			lda HLP
 13464 7B4C 8D B9 A0			sta BLITTMP.DST
 13465 7B4F A9 50			lda #$50
 13466 7B51 18 6D 99 A0			add HLP+1
 13467 7B55 8D BA A0			sta BLITTMP.DST+1
 13468 7B58 A9 00			lda #$00
 13469 7B5A 69 00			adc #$00
 13470 7B5C 8D BB A0			sta BLITTMP.DST+2
 13471 7B5F A9 00			lda #$00
 13472 7B61 69 00			adc #$00
 13473 7B63 8D BC A0			sta BLITTMP.DST+3
 13474 7B66 AD C9 9F			lda EXPLOSION.WIDTH
 13475 7B69 8D BD A0			sta BLITTMP.SIZE
 13476 7B6C 20 57 3B			jsr BLITTMP
 13477
 13478 				; --- ForToDoEpilog
 13479 7B6F EE 3F A2			inc Y
 13480 7B72 F0 03 4C AF 79		jne l_2750
 13481 7B77			l_275E
 13482
 13483 				; optimize OK (service.pas), line = 2684
 13484
 13485 7B77 AD 3D A2			lda W
 13486 7B7A 8D 7D 9F			sta DEATH_SOUND.A
 13487 7B7D A9 00			lda #$00
 13488 7B7F 8D 7E 9F			sta DEATH_SOUND.A+1
 13489 7B82 20 3E 38			jsr DEATH_SOUND
 13490
 13491 				; --- ForToDoEpilog
 13492 7B85 EE 3D A2			inc W
 13493 7B88 F0 03 4C A0 79		jne l_2739
 13494 7B8D			l_2747
 13495
 13496 				; optimize OK (service.pas), line = 2688
 13497
 13498 7B8D A9 07			lda #$07
 13499 7B8F 8D 7D 9F			sta DEATH_SOUND.A
 13500 7B92 A9 00			lda #$00
 13501 7B94 8D 7E 9F			sta DEATH_SOUND.A+1
 13502 7B97 20 3E 38			jsr DEATH_SOUND
 13503
 13504 				; optimize OK (service.pas), line = 2689
 13505
 13506 7B9A A9 96			lda #$96
 13507 7B9C 8D D2 A0			sta MYDELAY.A
 13508 7B9F A9 00			lda #$00
 13509 7BA1 8D D3 A0			sta MYDELAY.A+1
 13510 7BA4 20 53 3C			jsr MYDELAY
 13511
 13512 				; optimize FAIL ('DISABLE_LETTER', service.pas), line = 2690
 13513
 13514 7BA7 20 22 41			jsr DISABLE_LETTER
 13515
 13516 				; ------------------------------------------------------------
 13517
 13518 = A237			Z	= DATAORIGIN+$0392
 13519 = A239			A	= DATAORIGIN+$0394
 13520 = A23B			B	= DATAORIGIN+$0396
 13521 = A23D			W	= DATAORIGIN+$0398
 13522 = A23E			X	= DATAORIGIN+$0399
 13523 = A23F			Y	= DATAORIGIN+$039A
 13524
 13525 = A237			@VarData	= Z
 13526 = 0009			@VarDataSize	= 9
 13527
 13528 7BAA			@exit
 13529 					.ifdef @new
 13530 					lda <@VarData
 13531 					sta :ztmp
 13532 					lda >@VarData
 13533 					ldy #@VarDataSize-1
 13534 					jmp @FreeMem
 13535 					els
 13536 7BAA 60				rts						; ret
 13537 					eif
 13538 				.endl
 13539
 13540 7BAB			.local	CREATE_VAUS					; PROCEDURE
 13541
 13542 				; optimize FAIL ('NOSOUND', service.pas), line = 2702
 13543
 13544 7BAB 20 52 3C			jsr NOSOUND
 13545
 13546 				; optimize OK (service.pas), line = 2703
 13547
 13548 7BAE A9 5B			lda #$5B
 13549 7BB0 8D 46 A2			sta A
 13550 7BB3 A9 00			lda #$00
 13551 7BB5 8D 47 A2			sta A+1
 13552
 13553 				; optimize OK (service.pas), line = 2704
 13554
 13555 7BB8 A9 B3			lda #$B3
 13556 7BBA 8D 48 A2			sta B
 13557 7BBD A9 00			lda #$00
 13558 7BBF 8D 49 A2			sta B+1
 13559
 13560 				; optimize OK (service.pas), line = 2706
 13561
 13562 7BC2 A9 0B			lda #$0B
 13563 7BC4 8D 43 A2			sta W
 13564
 13565 7BC7			l_2835
 13566 				; --- ForToDoCondition
 13567 7BC7 A9 00			lda #$00
 13568 7BC9 8D 42 A2			sta Y
 13569
 13570 7BCC			l_284C
 13571 				; --- ForToDoCondition
 13572 7BCC AD 42 A2			lda Y
 13573 7BCF C9 10			cmp #$10
 13574 7BD1 90 03 4C 81 7D		jcs l_285A
 13575
 13576 				; optimize OK (service.pas), line = 2711
 13577
 13578 7BD6 AD D1 9F			lda NEWVAUS.WIDTH
 13579 7BD9 85 8E			sta :ecx
 13580 7BDB AD D2 9F			lda NEWVAUS.WIDTH+1
 13581 7BDE 85 8F			sta :ecx+1
 13582 7BE0 AD 42 A2			lda Y
 13583 7BE3 85 86			sta :eax
 13584 7BE5 A9 00			lda #$00
 13585 7BE7 85 87			sta :eax+1
 13586 					.ifdef fmulinit
 13587 					fmulu_16
 13588 					els
 13589 7BE9 20 4F 23			imulCX_AL
 13590 					eif
 13591 7BEC A5 86			lda :eax
 13592 7BEE 85 9F			sta :STACKORIGIN+9
 13593 7BF0 A5 87			lda :eax+1
 13594 7BF2 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 13595 7BF4 A9 10			lda #$10
 13596 7BF6 85 8E			sta :ecx
 13597 7BF8 A9 00			lda #$00
 13598 7BFA 85 8F			sta :ecx+1
 13599 7BFC AD D1 9F			lda NEWVAUS.WIDTH
 13600 7BFF 85 86			sta :eax
 13601 7C01 AD D2 9F			lda NEWVAUS.WIDTH+1
 13602 7C04 85 87			sta :eax+1
 13603 					.ifdef fmulinit
 13604 					fmulu_16
 13605 					els
 13606 7C06 20 0B 23			imulCX
 13607 					eif
 13608 7C09 A5 86			lda :eax
 13609 7C0B 85 8E			sta :ecx
 13610 7C0D A5 87			lda :eax+1
 13611 7C0F 85 8F			sta :ecx+1
 13612 7C11 AD 43 A2			lda W
 13613 7C14 85 86			sta :eax
 13614 7C16 A9 00			lda #$00
 13615 7C18 85 87			sta :eax+1
 13616 					.ifdef fmulinit
 13617 					fmulu_16
 13618 					els
 13619 7C1A 20 4F 23			imulCX_AL
 13620 					eif
 13621 7C1D A5 86			lda :eax
 13622 7C1F 18 65 9F			add :STACKORIGIN+9
 13623 7C22 8D 44 A2			sta Z
 13624 7C25 A5 87			lda :eax+1
 13625 7C27 65 AF			adc :STACKORIGIN+STACKWIDTH+9
 13626 7C29 8D 45 A2			sta Z+1
 13627
 13628 				; optimize OK (service.pas), line = 2713
 13629
 13630 7C2C AD 42 A2			lda Y
 13631 7C2F 18 6D 48 A2			add B
 13632 7C33 A8				tay
 13633 7C34 AD 46 A2			lda A
 13634 7C37 18 79 00 C0			add adr.ROW,y
 13635 7C3B 8D 98 A0			sta HLP
 13636 7C3E AD 47 A2			lda A+1
 13637 7C41 79 00 C1			adc adr.ROW+256,y
 13638 7C44 8D 99 A0			sta HLP+1
 13639
 13640 				; optimize OK (service.pas), line = 2715
 13641
 13642 7C47 A9 00			lda #$00
 13643 7C49 8D 41 A2			sta X
 13644 7C4C AC D1 9F			ldy NEWVAUS.WIDTH
 13645 7C4F 88				dey
 13646 7C50 8C 54 7C			sty @FORTMP_2891_0
 13647
 13648 7C53			l_2894
 13649 				; --- ForToDoCondition
 13650 7C53 A9 00			lda @FORTMP_2891_0::#$00
 13651 7C55 CD 41 A2			cmp X
 13652 7C58 B0 03 4C 53 7D		jcc l_28A2
 13653
 13654 				; optimize OK (service.pas), line = 2717
 13655
 13656 7C5D AD D5 9F			lda NEWVAUS.OFS
 13657 7C60 18 6D 41 A2			add X
 13658 7C64 85 9F			sta :STACKORIGIN+9
 13659 7C66 AD D6 9F			lda NEWVAUS.OFS+1
 13660 7C69 69 00			adc #$00
 13661 7C6B 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 13662 7C6D AD D7 9F			lda NEWVAUS.OFS+2
 13663 7C70 69 00			adc #$00
 13664 7C72 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
 13665 7C74 AD D8 9F			lda NEWVAUS.OFS+3
 13666 7C77 69 00			adc #$00
 13667 7C79 85 CF			sta :STACKORIGIN+STACKWIDTH*3+9
 13668 7C7B A5 9F			lda :STACKORIGIN+9
 13669 7C7D 18 6D 44 A2			add Z
 13670 7C81 8D CD A0			sta GETBYTE.SRC
 13671 7C84 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 13672 7C86 6D 45 A2			adc Z+1
 13673 7C89 8D CE A0			sta GETBYTE.SRC+1
 13674 7C8C A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
 13675 7C8E 69 00			adc #$00
 13676 7C90 8D CF A0			sta GETBYTE.SRC+2
 13677 7C93 A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
 13678 7C95 69 00			adc #$00
 13679 7C97 8D D0 A0			sta GETBYTE.SRC+3
 13680 7C9A 20 2A 3C			jsr GETBYTE
 13681 7C9D AD D1 A0			lda GETBYTE.RESULT
 13682 7CA0 D0 56			jne l_28BE
 13683
 13684 				; optimize FAIL (1, service.pas), line = 2721
 13685
 13686 7CA2 E8				inx
 13687 7CA3 AD 41 A2 95 96		mva X :STACKORIGIN,x
 13688 7CA8 A9 00 95 A6			mva #$00 :STACKORIGIN+STACKWIDTH,x
 13689 7CAC AD A5 9F			lda PLAYSCREEN.OFS
 13690 7CAF 18 6D 98 A0			add HLP
 13691 7CB3 85 9F			sta :STACKORIGIN+9
 13692 7CB5 AD A6 9F			lda PLAYSCREEN.OFS+1
 13693 7CB8 6D 99 A0			adc HLP+1
 13694 7CBB 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 13695 7CBD AD A7 9F			lda PLAYSCREEN.OFS+2
 13696 7CC0 69 00			adc #$00
 13697 7CC2 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
 13698 7CC4 AD A8 9F			lda PLAYSCREEN.OFS+3
 13699 7CC7 69 00			adc #$00
 13700 7CC9 85 CF			sta :STACKORIGIN+STACKWIDTH*3+9
 13701 7CCB A5 9F			lda :STACKORIGIN+9
 13702 7CCD 18 6D 41 A2			add X
 13703 7CD1 8D CD A0			sta GETBYTE.SRC
 13704 7CD4 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 13705 7CD6 69 00			adc #$00
 13706 7CD8 8D CE A0			sta GETBYTE.SRC+1
 13707 7CDB A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
 13708 7CDD 69 00			adc #$00
 13709 7CDF 8D CF A0			sta GETBYTE.SRC+2
 13710 7CE2 A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
 13711 7CE4 69 00			adc #$00
 13712 7CE6 8D D0 A0			sta GETBYTE.SRC+3
 13713 7CE9 20 2A 3C			jsr GETBYTE
 13714 7CEC B4 96			ldy :STACKORIGIN,x
 13715 7CEE AD D1 A0			lda GETBYTE.RESULT
 13716 7CF1 99 00 C2			sta adr.TMP,y
 13717 7CF4 CA				dex
 13718 7CF5 4C 4B 7D			jmp l_28DB
 13719 7CF8			l_28BE
 13720
 13721 				; optimize FAIL (1, service.pas), line = 2726
 13722
 13723 7CF8 E8				inx
 13724 7CF9 AD 41 A2 95 96		mva X :STACKORIGIN,x
 13725 7CFE A9 00 95 A6			mva #$00 :STACKORIGIN+STACKWIDTH,x
 13726 7D02 AD D5 9F			lda NEWVAUS.OFS
 13727 7D05 18 6D 41 A2			add X
 13728 7D09 85 9F			sta :STACKORIGIN+9
 13729 7D0B AD D6 9F			lda NEWVAUS.OFS+1
 13730 7D0E 69 00			adc #$00
 13731 7D10 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 13732 7D12 AD D7 9F			lda NEWVAUS.OFS+2
 13733 7D15 69 00			adc #$00
 13734 7D17 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
 13735 7D19 AD D8 9F			lda NEWVAUS.OFS+3
 13736 7D1C 69 00			adc #$00
 13737 7D1E 85 CF			sta :STACKORIGIN+STACKWIDTH*3+9
 13738 7D20 A5 9F			lda :STACKORIGIN+9
 13739 7D22 18 6D 44 A2			add Z
 13740 7D26 8D CD A0			sta GETBYTE.SRC
 13741 7D29 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 13742 7D2B 6D 45 A2			adc Z+1
 13743 7D2E 8D CE A0			sta GETBYTE.SRC+1
 13744 7D31 A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
 13745 7D33 69 00			adc #$00
 13746 7D35 8D CF A0			sta GETBYTE.SRC+2
 13747 7D38 A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
 13748 7D3A 69 00			adc #$00
 13749 7D3C 8D D0 A0			sta GETBYTE.SRC+3
 13750 7D3F 20 2A 3C			jsr GETBYTE
 13751 7D42 B4 96			ldy :STACKORIGIN,x
 13752 7D44 AD D1 A0			lda GETBYTE.RESULT
 13753 7D47 99 00 C2			sta adr.TMP,y
 13754 7D4A CA				dex
 13755 7D4B			l_28DB
 13756
 13757 				; --- ForToDoEpilog
 13758 7D4B EE 41 A2			inc X
 13759 7D4E F0 03 4C 53 7C		jne l_2894
 13760 7D53			l_28A2
 13761
 13762 				; optimize OK (service.pas), line = 2729
 13763
 13764 7D53 AD 98 A0			lda HLP
 13765 7D56 8D B9 A0			sta BLITTMP.DST
 13766 7D59 A9 50			lda #$50
 13767 7D5B 18 6D 99 A0			add HLP+1
 13768 7D5F 8D BA A0			sta BLITTMP.DST+1
 13769 7D62 A9 00			lda #$00
 13770 7D64 69 00			adc #$00
 13771 7D66 8D BB A0			sta BLITTMP.DST+2
 13772 7D69 A9 00			lda #$00
 13773 7D6B 69 00			adc #$00
 13774 7D6D 8D BC A0			sta BLITTMP.DST+3
 13775 7D70 AD D1 9F			lda NEWVAUS.WIDTH
 13776 7D73 8D BD A0			sta BLITTMP.SIZE
 13777 7D76 20 57 3B			jsr BLITTMP
 13778
 13779 				; --- ForToDoEpilog
 13780 7D79 EE 42 A2			inc Y
 13781 7D7C F0 03 4C CC 7B		jne l_284C
 13782 7D81			l_285A
 13783
 13784 				; optimize OK (service.pas), line = 2732
 13785
 13786 7D81 A9 01			lda #$01
 13787 7D83 8D D2 A0			sta MYDELAY.A
 13788 7D86 A9 00			lda #$00
 13789 7D88 8D D3 A0			sta MYDELAY.A+1
 13790 7D8B 20 53 3C			jsr MYDELAY
 13791
 13792 				; --- ForToDoEpilog
 13793 7D8E CE 43 A2			dec W
 13794 7D91 30 03 4C C7 7B		jpl l_2835
 13795 7D96			l_2843
 13796
 13797 				; ------------------------------------------------------------
 13798
 13799 = A241			X	= DATAORIGIN+$039C
 13800 = A242			Y	= DATAORIGIN+$039D
 13801 = A243			W	= DATAORIGIN+$039E
 13802 = A244			Z	= DATAORIGIN+$039F
 13803 = A246			A	= DATAORIGIN+$03A1
 13804 = A248			B	= DATAORIGIN+$03A3
 13805
 13806 = A241			@VarData	= X
 13807 = 0009			@VarDataSize	= 9
 13808
 13809 7D96			@exit
 13810 					.ifdef @new
 13811 					lda <@VarData
 13812 					sta :ztmp
 13813 					lda >@VarData
 13814 					ldy #@VarDataSize-1
 13815 					jmp @FreeMem
 13816 					els
 13817 7D96 60				rts						; ret
 13818 					eif
 13819 				.endl
 13820
 13821 7D97			.local	PUT_DIGIT					; PROCEDURE
 13822
 13823 				; optimize OK (service.pas), line = 2742
 13824
 13825 7D97 A9 DE			lda #$DE
 13826 7D99 8D 53 A2			sta A
 13827
 13828 				; optimize OK (service.pas), line = 2766
 13829
 13830 7D9C AC 4F A2			ldy NUM
 13831 7D9F B9 96 20			lda adr.DIGITS,y
 13832 7DA2 29 01			and #$01
 13833 7DA4 C9 01			cmp #$01
 13834 7DA6 D0 05			jne l_2928
 13835 7DA8 A9 DF			lda #$DF
 13836 7DAA 8D 53 A2			sta A
 13837 7DAD			l_2928
 13838
 13839 				; optimize OK (service.pas), line = 2767
 13840
 13841 7DAD A9 01			lda #$01
 13842 7DAF 8D 51 A2			sta X
 13843
 13844 7DB2			l_2938
 13845 				; --- ForToDoCondition
 13846 7DB2 AD 51 A2			lda X
 13847 7DB5 C9 05			cmp #$05
 13848 7DB7 B0 63			jcs l_2946
 13849
 13850 				; optimize OK (service.pas), line = 2769
 13851
 13852 7DB9 AD 4B A2			lda PX
 13853 7DBC 85 A0			sta :STACKORIGIN+10
 13854 7DBE A9 50			lda #$50
 13855 7DC0 18 6D 4C A2			add PX+1
 13856 7DC4 85 B0			sta :STACKORIGIN+STACKWIDTH+10
 13857 7DC6 A9 00			lda #$00
 13858 7DC8 69 00			adc #$00
 13859 7DCA 85 C0			sta :STACKORIGIN+STACKWIDTH*2+10
 13860 7DCC A9 00			lda #$00
 13861 7DCE 69 00			adc #$00
 13862 7DD0 85 D0			sta :STACKORIGIN+STACKWIDTH*3+10
 13863 7DD2 A5 A0			lda :STACKORIGIN+10
 13864 7DD4 18 6D 51 A2			add X
 13865 7DD8 85 A0			sta :STACKORIGIN+10
 13866 7DDA A5 B0			lda :STACKORIGIN+STACKWIDTH+10
 13867 7DDC 69 00			adc #$00
 13868 7DDE 85 B0			sta :STACKORIGIN+STACKWIDTH+10
 13869 7DE0 A5 C0			lda :STACKORIGIN+STACKWIDTH*2+10
 13870 7DE2 69 00			adc #$00
 13871 7DE4 85 C0			sta :STACKORIGIN+STACKWIDTH*2+10
 13872 7DE6 A5 D0			lda :STACKORIGIN+STACKWIDTH*3+10
 13873 7DE8 69 00			adc #$00
 13874 7DEA 85 D0			sta :STACKORIGIN+STACKWIDTH*3+10
 13875 7DEC AC 4D A2			ldy PY
 13876 7DEF A5 A0			lda :STACKORIGIN+10
 13877 7DF1 18 79 00 C0			add adr.ROW,y
 13878 7DF5 8D C8 A0			sta PUTBYTE.DST
 13879 7DF8 A5 B0			lda :STACKORIGIN+STACKWIDTH+10
 13880 7DFA 79 00 C1			adc adr.ROW+256,y
 13881 7DFD 8D C9 A0			sta PUTBYTE.DST+1
 13882 7E00 A5 C0			lda :STACKORIGIN+STACKWIDTH*2+10
 13883 7E02 69 00			adc #$00
 13884 7E04 8D CA A0			sta PUTBYTE.DST+2
 13885 7E07 A5 D0			lda :STACKORIGIN+STACKWIDTH*3+10
 13886 7E09 69 00			adc #$00
 13887 7E0B 8D CB A0			sta PUTBYTE.DST+3
 13888 7E0E AD 53 A2			lda A
 13889 7E11 8D CC A0			sta PUTBYTE.V
 13890 7E14 20 02 3C			jsr PUTBYTE
 13891
 13892 				; --- ForToDoEpilog
 13893 7E17 EE 51 A2			inc X
 13894 7E1A D0 96			jne l_2938
 13895 7E1C			l_2946
 13896
 13897 				; optimize OK (service.pas), line = 2773
 13898
 13899 7E1C A9 DE			lda #$DE
 13900 7E1E 8D 53 A2			sta A
 13901
 13902 				; optimize OK (service.pas), line = 2774
 13903
 13904 7E21 AC 4F A2			ldy NUM
 13905 7E24 B9 96 20			lda adr.DIGITS,y
 13906 7E27 29 02			and #$02
 13907 7E29 C9 02			cmp #$02
 13908 7E2B D0 05			jne l_297E
 13909 7E2D A9 DF			lda #$DF
 13910 7E2F 8D 53 A2			sta A
 13911 7E32			l_297E
 13912
 13913 				; optimize OK (service.pas), line = 2775
 13914
 13915 7E32 A9 01			lda #$01
 13916 7E34 8D 51 A2			sta X
 13917
 13918 7E37			l_298E
 13919 				; --- ForToDoCondition
 13920 7E37 AD 51 A2			lda X
 13921 7E3A C9 05			cmp #$05
 13922 7E3C B0 63			jcs l_299C
 13923
 13924 				; optimize OK (service.pas), line = 2777
 13925
 13926 7E3E AD 4B A2			lda PX
 13927 7E41 85 A0			sta :STACKORIGIN+10
 13928 7E43 A9 50			lda #$50
 13929 7E45 18 6D 4C A2			add PX+1
 13930 7E49 85 B0			sta :STACKORIGIN+STACKWIDTH+10
 13931 7E4B A9 00			lda #$00
 13932 7E4D 69 00			adc #$00
 13933 7E4F 85 C0			sta :STACKORIGIN+STACKWIDTH*2+10
 13934 7E51 A9 00			lda #$00
 13935 7E53 69 00			adc #$00
 13936 7E55 85 D0			sta :STACKORIGIN+STACKWIDTH*3+10
 13937 7E57 A5 A0			lda :STACKORIGIN+10
 13938 7E59 18 6D 51 A2			add X
 13939 7E5D 85 A0			sta :STACKORIGIN+10
 13940 7E5F A5 B0			lda :STACKORIGIN+STACKWIDTH+10
 13941 7E61 69 00			adc #$00
 13942 7E63 85 B0			sta :STACKORIGIN+STACKWIDTH+10
 13943 7E65 A5 C0			lda :STACKORIGIN+STACKWIDTH*2+10
 13944 7E67 69 00			adc #$00
 13945 7E69 85 C0			sta :STACKORIGIN+STACKWIDTH*2+10
 13946 7E6B A5 D0			lda :STACKORIGIN+STACKWIDTH*3+10
 13947 7E6D 69 00			adc #$00
 13948 7E6F 85 D0			sta :STACKORIGIN+STACKWIDTH*3+10
 13949 7E71 AC 4D A2			ldy PY
 13950 7E74 A5 A0			lda :STACKORIGIN+10
 13951 7E76 18 79 05 C0			add adr.ROW+$05,y
 13952 7E7A 8D C8 A0			sta PUTBYTE.DST
 13953 7E7D A5 B0			lda :STACKORIGIN+STACKWIDTH+10
 13954 7E7F 79 05 C1			adc adr.ROW+256+$05,y
 13955 7E82 8D C9 A0			sta PUTBYTE.DST+1
 13956 7E85 A5 C0			lda :STACKORIGIN+STACKWIDTH*2+10
 13957 7E87 69 00			adc #$00
 13958 7E89 8D CA A0			sta PUTBYTE.DST+2
 13959 7E8C A5 D0			lda :STACKORIGIN+STACKWIDTH*3+10
 13960 7E8E 69 00			adc #$00
 13961 7E90 8D CB A0			sta PUTBYTE.DST+3
 13962 7E93 AD 53 A2			lda A
 13963 7E96 8D CC A0			sta PUTBYTE.V
 13964 7E99 20 02 3C			jsr PUTBYTE
 13965
 13966 				; --- ForToDoEpilog
 13967 7E9C EE 51 A2			inc X
 13968 7E9F D0 96			jne l_298E
 13969 7EA1			l_299C
 13970
 13971 				; optimize OK (service.pas), line = 2781
 13972
 13973 7EA1 A9 DE			lda #$DE
 13974 7EA3 8D 53 A2			sta A
 13975
 13976 				; optimize OK (service.pas), line = 2782
 13977
 13978 7EA6 AC 4F A2			ldy NUM
 13979 7EA9 B9 96 20			lda adr.DIGITS,y
 13980 7EAC 29 04			and #$04
 13981 7EAE C9 04			cmp #$04
 13982 7EB0 D0 05			jne l_29D8
 13983 7EB2 A9 DF			lda #$DF
 13984 7EB4 8D 53 A2			sta A
 13985 7EB7			l_29D8
 13986
 13987 				; optimize OK (service.pas), line = 2783
 13988
 13989 7EB7 A9 01			lda #$01
 13990 7EB9 8D 51 A2			sta X
 13991
 13992 7EBC			l_29E8
 13993 				; --- ForToDoCondition
 13994 7EBC AD 51 A2			lda X
 13995 7EBF C9 05			cmp #$05
 13996 7EC1 B0 63			jcs l_29F6
 13997
 13998 				; optimize OK (service.pas), line = 2785
 13999
 14000 7EC3 AD 4B A2			lda PX
 14001 7EC6 85 A0			sta :STACKORIGIN+10
 14002 7EC8 A9 50			lda #$50
 14003 7ECA 18 6D 4C A2			add PX+1
 14004 7ECE 85 B0			sta :STACKORIGIN+STACKWIDTH+10
 14005 7ED0 A9 00			lda #$00
 14006 7ED2 69 00			adc #$00
 14007 7ED4 85 C0			sta :STACKORIGIN+STACKWIDTH*2+10
 14008 7ED6 A9 00			lda #$00
 14009 7ED8 69 00			adc #$00
 14010 7EDA 85 D0			sta :STACKORIGIN+STACKWIDTH*3+10
 14011 7EDC A5 A0			lda :STACKORIGIN+10
 14012 7EDE 18 6D 51 A2			add X
 14013 7EE2 85 A0			sta :STACKORIGIN+10
 14014 7EE4 A5 B0			lda :STACKORIGIN+STACKWIDTH+10
 14015 7EE6 69 00			adc #$00
 14016 7EE8 85 B0			sta :STACKORIGIN+STACKWIDTH+10
 14017 7EEA A5 C0			lda :STACKORIGIN+STACKWIDTH*2+10
 14018 7EEC 69 00			adc #$00
 14019 7EEE 85 C0			sta :STACKORIGIN+STACKWIDTH*2+10
 14020 7EF0 A5 D0			lda :STACKORIGIN+STACKWIDTH*3+10
 14021 7EF2 69 00			adc #$00
 14022 7EF4 85 D0			sta :STACKORIGIN+STACKWIDTH*3+10
 14023 7EF6 AC 4D A2			ldy PY
 14024 7EF9 A5 A0			lda :STACKORIGIN+10
 14025 7EFB 18 79 0A C0			add adr.ROW+$0A,y
 14026 7EFF 8D C8 A0			sta PUTBYTE.DST
 14027 7F02 A5 B0			lda :STACKORIGIN+STACKWIDTH+10
 14028 7F04 79 0A C1			adc adr.ROW+256+$0A,y
 14029 7F07 8D C9 A0			sta PUTBYTE.DST+1
 14030 7F0A A5 C0			lda :STACKORIGIN+STACKWIDTH*2+10
 14031 7F0C 69 00			adc #$00
 14032 7F0E 8D CA A0			sta PUTBYTE.DST+2
 14033 7F11 A5 D0			lda :STACKORIGIN+STACKWIDTH*3+10
 14034 7F13 69 00			adc #$00
 14035 7F15 8D CB A0			sta PUTBYTE.DST+3
 14036 7F18 AD 53 A2			lda A
 14037 7F1B 8D CC A0			sta PUTBYTE.V
 14038 7F1E 20 02 3C			jsr PUTBYTE
 14039
 14040 				; --- ForToDoEpilog
 14041 7F21 EE 51 A2			inc X
 14042 7F24 D0 96			jne l_29E8
 14043 7F26			l_29F6
 14044
 14045 				; optimize OK (service.pas), line = 2788
 14046
 14047 7F26 A9 DE			lda #$DE
 14048 7F28 8D 53 A2			sta A
 14049
 14050 				; optimize OK (service.pas), line = 2789
 14051
 14052 7F2B AC 4F A2			ldy NUM
 14053 7F2E B9 96 20			lda adr.DIGITS,y
 14054 7F31 29 08			and #$08
 14055 7F33 C9 08			cmp #$08
 14056 7F35 D0 05			jne l_2A32
 14057 7F37 A9 DF			lda #$DF
 14058 7F39 8D 53 A2			sta A
 14059 7F3C			l_2A32
 14060
 14061 				; optimize OK (service.pas), line = 2790
 14062
 14063 7F3C A9 01			lda #$01
 14064 7F3E 8D 52 A2			sta Y
 14065
 14066 7F41			l_2A42
 14067 				; --- ForToDoCondition
 14068 7F41 AD 52 A2			lda Y
 14069 7F44 C9 05			cmp #$05
 14070 7F46 B0 4E			jcs l_2A50
 14071
 14072 				; optimize OK (service.pas), line = 2792
 14073
 14074 7F48 AD 4B A2			lda PX
 14075 7F4B 85 A0			sta :STACKORIGIN+10
 14076 7F4D A9 50			lda #$50
 14077 7F4F 18 6D 4C A2			add PX+1
 14078 7F53 85 B0			sta :STACKORIGIN+STACKWIDTH+10
 14079 7F55 A9 00			lda #$00
 14080 7F57 69 00			adc #$00
 14081 7F59 85 C0			sta :STACKORIGIN+STACKWIDTH*2+10
 14082 7F5B A9 00			lda #$00
 14083 7F5D 69 00			adc #$00
 14084 7F5F 85 D0			sta :STACKORIGIN+STACKWIDTH*3+10
 14085 7F61 AD 4D A2			lda PY
 14086 7F64 18 6D 52 A2			add Y
 14087 7F68 A8				tay
 14088 7F69 A5 A0			lda :STACKORIGIN+10
 14089 7F6B 18 79 00 C0			add adr.ROW,y
 14090 7F6F 8D C8 A0			sta PUTBYTE.DST
 14091 7F72 A5 B0			lda :STACKORIGIN+STACKWIDTH+10
 14092 7F74 79 00 C1			adc adr.ROW+256,y
 14093 7F77 8D C9 A0			sta PUTBYTE.DST+1
 14094 7F7A A5 C0			lda :STACKORIGIN+STACKWIDTH*2+10
 14095 7F7C 69 00			adc #$00
 14096 7F7E 8D CA A0			sta PUTBYTE.DST+2
 14097 7F81 A5 D0			lda :STACKORIGIN+STACKWIDTH*3+10
 14098 7F83 69 00			adc #$00
 14099 7F85 8D CB A0			sta PUTBYTE.DST+3
 14100 7F88 AD 53 A2			lda A
 14101 7F8B 8D CC A0			sta PUTBYTE.V
 14102 7F8E 20 02 3C			jsr PUTBYTE
 14103
 14104 				; --- ForToDoEpilog
 14105 7F91 EE 52 A2			inc Y
 14106 7F94 D0 AB			jne l_2A42
 14107 7F96			l_2A50
 14108
 14109 				; optimize OK (service.pas), line = 2795
 14110
 14111 7F96 A9 DE			lda #$DE
 14112 7F98 8D 53 A2			sta A
 14113
 14114 				; optimize OK (service.pas), line = 2796
 14115
 14116 7F9B AC 4F A2			ldy NUM
 14117 7F9E B9 96 20			lda adr.DIGITS,y
 14118 7FA1 29 10			and #$10
 14119 7FA3 C9 10			cmp #$10
 14120 7FA5 D0 05			jne l_2A88
 14121 7FA7 A9 DF			lda #$DF
 14122 7FA9 8D 53 A2			sta A
 14123 7FAC			l_2A88
 14124
 14125 				; optimize OK (service.pas), line = 2797
 14126
 14127 7FAC A9 01			lda #$01
 14128 7FAE 8D 52 A2			sta Y
 14129
 14130 7FB1			l_2A98
 14131 				; --- ForToDoCondition
 14132 7FB1 AD 52 A2			lda Y
 14133 7FB4 C9 05			cmp #$05
 14134 7FB6 B0 4E			jcs l_2AA6
 14135
 14136 				; optimize OK (service.pas), line = 2799
 14137
 14138 7FB8 AD 4B A2			lda PX
 14139 7FBB 85 A0			sta :STACKORIGIN+10
 14140 7FBD A9 50			lda #$50
 14141 7FBF 18 6D 4C A2			add PX+1
 14142 7FC3 85 B0			sta :STACKORIGIN+STACKWIDTH+10
 14143 7FC5 A9 00			lda #$00
 14144 7FC7 69 00			adc #$00
 14145 7FC9 85 C0			sta :STACKORIGIN+STACKWIDTH*2+10
 14146 7FCB A9 00			lda #$00
 14147 7FCD 69 00			adc #$00
 14148 7FCF 85 D0			sta :STACKORIGIN+STACKWIDTH*3+10
 14149 7FD1 AD 4D A2			lda PY
 14150 7FD4 18 6D 52 A2			add Y
 14151 7FD8 A8				tay
 14152 7FD9 A5 A0			lda :STACKORIGIN+10
 14153 7FDB 18 79 05 C0			add adr.ROW+$05,y
 14154 7FDF 8D C8 A0			sta PUTBYTE.DST
 14155 7FE2 A5 B0			lda :STACKORIGIN+STACKWIDTH+10
 14156 7FE4 79 05 C1			adc adr.ROW+256+$05,y
 14157 7FE7 8D C9 A0			sta PUTBYTE.DST+1
 14158 7FEA A5 C0			lda :STACKORIGIN+STACKWIDTH*2+10
 14159 7FEC 69 00			adc #$00
 14160 7FEE 8D CA A0			sta PUTBYTE.DST+2
 14161 7FF1 A5 D0			lda :STACKORIGIN+STACKWIDTH*3+10
 14162 7FF3 69 00			adc #$00
 14163 7FF5 8D CB A0			sta PUTBYTE.DST+3
 14164 7FF8 AD 53 A2			lda A
 14165 7FFB 8D CC A0			sta PUTBYTE.V
 14166 7FFE 20 02 3C			jsr PUTBYTE
 14167
 14168 				; --- ForToDoEpilog
 14169 8001 EE 52 A2			inc Y
 14170 8004 D0 AB			jne l_2A98
 14171 8006			l_2AA6
 14172
 14173 				; optimize OK (service.pas), line = 2802
 14174
 14175 8006 A9 DE			lda #$DE
 14176 8008 8D 53 A2			sta A
 14177
 14178 				; optimize OK (service.pas), line = 2803
 14179
 14180 800B AC 4F A2			ldy NUM
 14181 800E B9 96 20			lda adr.DIGITS,y
 14182 8011 29 20			and #$20
 14183 8013 C9 20			cmp #$20
 14184 8015 D0 05			jne l_2AE2
 14185 8017 A9 DF			lda #$DF
 14186 8019 8D 53 A2			sta A
 14187 801C			l_2AE2
 14188
 14189 				; optimize OK (service.pas), line = 2804
 14190
 14191 801C A9 01			lda #$01
 14192 801E 8D 52 A2			sta Y
 14193
 14194 8021			l_2AF2
 14195 				; --- ForToDoCondition
 14196 8021 AD 52 A2			lda Y
 14197 8024 C9 05			cmp #$05
 14198 8026 B0 4F			jcs l_2B00
 14199
 14200 				; optimize OK (service.pas), line = 2806
 14201
 14202 8028 A9 05			lda #$05
 14203 802A 6D 4B A2			adc PX
 14204 802D 85 A0			sta :STACKORIGIN+10
 14205 802F A9 50			lda #$50
 14206 8031 6D 4C A2			adc PX+1
 14207 8034 85 B0			sta :STACKORIGIN+STACKWIDTH+10
 14208 8036 A9 00			lda #$00
 14209 8038 69 00			adc #$00
 14210 803A 85 C0			sta :STACKORIGIN+STACKWIDTH*2+10
 14211 803C A9 00			lda #$00
 14212 803E 69 00			adc #$00
 14213 8040 85 D0			sta :STACKORIGIN+STACKWIDTH*3+10
 14214 8042 AD 4D A2			lda PY
 14215 8045 18 6D 52 A2			add Y
 14216 8049 A8				tay
 14217 804A A5 A0			lda :STACKORIGIN+10
 14218 804C 18 79 00 C0			add adr.ROW,y
 14219 8050 8D C8 A0			sta PUTBYTE.DST
 14220 8053 A5 B0			lda :STACKORIGIN+STACKWIDTH+10
 14221 8055 79 00 C1			adc adr.ROW+256,y
 14222 8058 8D C9 A0			sta PUTBYTE.DST+1
 14223 805B A5 C0			lda :STACKORIGIN+STACKWIDTH*2+10
 14224 805D 69 00			adc #$00
 14225 805F 8D CA A0			sta PUTBYTE.DST+2
 14226 8062 A5 D0			lda :STACKORIGIN+STACKWIDTH*3+10
 14227 8064 69 00			adc #$00
 14228 8066 8D CB A0			sta PUTBYTE.DST+3
 14229 8069 AD 53 A2			lda A
 14230 806C 8D CC A0			sta PUTBYTE.V
 14231 806F 20 02 3C			jsr PUTBYTE
 14232
 14233 				; --- ForToDoEpilog
 14234 8072 EE 52 A2			inc Y
 14235 8075 D0 AA			jne l_2AF2
 14236 8077			l_2B00
 14237
 14238 				; optimize OK (service.pas), line = 2809
 14239
 14240 8077 A9 DE			lda #$DE
 14241 8079 8D 53 A2			sta A
 14242
 14243 				; optimize OK (service.pas), line = 2810
 14244
 14245 807C AC 4F A2			ldy NUM
 14246 807F B9 96 20			lda adr.DIGITS,y
 14247 8082 29 40			and #$40
 14248 8084 C9 40			cmp #$40
 14249 8086 D0 05			jne l_2B3C
 14250 8088 A9 DF			lda #$DF
 14251 808A 8D 53 A2			sta A
 14252 808D			l_2B3C
 14253
 14254 				; optimize OK (service.pas), line = 2811
 14255
 14256 808D A9 01			lda #$01
 14257 808F 8D 52 A2			sta Y
 14258
 14259 8092			l_2B4C
 14260 				; --- ForToDoCondition
 14261 8092 AD 52 A2			lda Y
 14262 8095 C9 05			cmp #$05
 14263 8097 B0 4F			jcs l_2B5A
 14264
 14265 				; optimize OK (service.pas), line = 2813
 14266
 14267 8099 A9 05			lda #$05
 14268 809B 6D 4B A2			adc PX
 14269 809E 85 A0			sta :STACKORIGIN+10
 14270 80A0 A9 50			lda #$50
 14271 80A2 6D 4C A2			adc PX+1
 14272 80A5 85 B0			sta :STACKORIGIN+STACKWIDTH+10
 14273 80A7 A9 00			lda #$00
 14274 80A9 69 00			adc #$00
 14275 80AB 85 C0			sta :STACKORIGIN+STACKWIDTH*2+10
 14276 80AD A9 00			lda #$00
 14277 80AF 69 00			adc #$00
 14278 80B1 85 D0			sta :STACKORIGIN+STACKWIDTH*3+10
 14279 80B3 AD 4D A2			lda PY
 14280 80B6 18 6D 52 A2			add Y
 14281 80BA A8				tay
 14282 80BB A5 A0			lda :STACKORIGIN+10
 14283 80BD 18 79 05 C0			add adr.ROW+$05,y
 14284 80C1 8D C8 A0			sta PUTBYTE.DST
 14285 80C4 A5 B0			lda :STACKORIGIN+STACKWIDTH+10
 14286 80C6 79 05 C1			adc adr.ROW+256+$05,y
 14287 80C9 8D C9 A0			sta PUTBYTE.DST+1
 14288 80CC A5 C0			lda :STACKORIGIN+STACKWIDTH*2+10
 14289 80CE 69 00			adc #$00
 14290 80D0 8D CA A0			sta PUTBYTE.DST+2
 14291 80D3 A5 D0			lda :STACKORIGIN+STACKWIDTH*3+10
 14292 80D5 69 00			adc #$00
 14293 80D7 8D CB A0			sta PUTBYTE.DST+3
 14294 80DA AD 53 A2			lda A
 14295 80DD 8D CC A0			sta PUTBYTE.V
 14296 80E0 20 02 3C			jsr PUTBYTE
 14297
 14298 				; --- ForToDoEpilog
 14299 80E3 EE 52 A2			inc Y
 14300 80E6 D0 AA			jne l_2B4C
 14301 80E8			l_2B5A
 14302
 14303 				; ------------------------------------------------------------
 14304
 14305 = A24B			PX	= DATAORIGIN+$03A6
 14306 = A24D			PY	= DATAORIGIN+$03A8
 14307 = A24F			NUM	= DATAORIGIN+$03AA
 14308 = A251			X	= DATAORIGIN+$03AC
 14309 = A252			Y	= DATAORIGIN+$03AD
 14310 = A253			A	= DATAORIGIN+$03AE
 14311
 14312 = A24B			@VarData	= PX
 14313 = 0009			@VarDataSize	= 9
 14314
 14315 80E8			@exit
 14316 					.ifdef @new
 14317 					lda <@VarData
 14318 					sta :ztmp
 14319 					lda >@VarData
 14320 					ldy #@VarDataSize-1
 14321 					jmp @FreeMem
 14322 					els
 14323 80E8 60				rts						; ret
 14324 					eif
 14325 				.endl
 14326
 14327 80E9			.local	WRITE_SCORE					; PROCEDURE
 14328
 14329 				; optimize OK (service.pas), line = 2824
 14330
 14331 80E9 A9 00			lda #$00
 14332 80EB 8D 60 A2			sta F
 14333
 14334 				; optimize OK (service.pas), line = 2829
 14335
 14336 80EE A9 A0			lda #$A0
 14337 80F0 85 8E			sta @INTEGER.DIV.B
 14338 80F2 A9 86			lda #$86
 14339 80F4 85 8F			sta @INTEGER.DIV.B+1
 14340 80F6 A9 01			lda #$01
 14341 80F8 85 90			sta @INTEGER.DIV.B+2
 14342 80FA A9 00			lda #$00
 14343 80FC 85 91			sta @INTEGER.DIV.B+3
 14344 80FE AD 58 A2			lda SC
 14345 8101 85 86			sta @INTEGER.DIV.A
 14346 8103 AD 59 A2			lda SC+1
 14347 8106 85 87			sta @INTEGER.DIV.A+1
 14348 8108 AD 5A A2			lda SC+2
 14349 810B 85 88			sta @INTEGER.DIV.A+2
 14350 810D AD 5B A2			lda SC+3
 14351 8110 85 89			sta @INTEGER.DIV.A+3
 14352 8112 20 73 22			jsr @INTEGER.DIV
 14353 8115 A9 0A			lda #$0A
 14354 8117 85 8E			sta @INTEGER.MOD.B
 14355 8119 A9 00			lda #$00
 14356 811B 85 8F			sta @INTEGER.MOD.B+1
 14357 811D 85 90			sta @INTEGER.MOD.B+2
 14358 811F 85 91			sta @INTEGER.MOD.B+3
 14359 8121 20 90 22			jsr @INTEGER.MOD
 14360 8124 A5 8A			lda @INTEGER.MOD.RESULT
 14361 8126 8D 5C A2			sta N1
 14362 8129 A5 8B			lda @INTEGER.MOD.RESULT+1
 14363 812B 8D 5D A2			sta N1+1
 14364 812E A5 8C			lda @INTEGER.MOD.RESULT+2
 14365 8130 8D 5E A2			sta N1+2
 14366 8133 A5 8D			lda @INTEGER.MOD.RESULT+3
 14367 8135 8D 5F A2			sta N1+3
 14368
 14369 				; optimize OK (service.pas), line = 2830
 14370
 14371 8138 30 10			jmi l_2BA2
 14372 813A 0D 5E A2			ora N1+2
 14373 813D 0D 5D A2			ora N1+1
 14374 8140 0D 5C A2			ora N1
 14375 8143 F0 05			jeq l_2BA2
 14376 8145 A9 01			lda #$01
 14377 8147 8D 60 A2			sta F
 14378 814A			l_2BA2
 14379
 14380 				; optimize OK (service.pas), line = 2831
 14381
 14382 814A AD 60 A2			lda F
 14383 814D F0 24			jeq l_2BB5
 14384 814F AD 54 A2			lda PX
 14385 8152 8D 4B A2			sta PUT_DIGIT.PX
 14386 8155 AD 55 A2			lda PX+1
 14387 8158 8D 4C A2			sta PUT_DIGIT.PX+1
 14388 815B AD 56 A2			lda PY
 14389 815E 8D 4D A2			sta PUT_DIGIT.PY
 14390 8161 AD 57 A2			lda PY+1
 14391 8164 8D 4E A2			sta PUT_DIGIT.PY+1
 14392 8167 AD 5C A2			lda N1
 14393 816A 8D 4F A2			sta PUT_DIGIT.NUM
 14394 816D AD 5D A2			lda N1+1
 14395 8170 4C 92 81			jmp l_2BC5
 14396 8173			l_2BB5
 14397
 14398 				; optimize OK (service.pas), line = 2832
 14399
 14400 8173 AD 54 A2			lda PX
 14401 8176 8D 4B A2			sta PUT_DIGIT.PX
 14402 8179 AD 55 A2			lda PX+1
 14403 817C 8D 4C A2			sta PUT_DIGIT.PX+1
 14404 817F AD 56 A2			lda PY
 14405 8182 8D 4D A2			sta PUT_DIGIT.PY
 14406 8185 AD 57 A2			lda PY+1
 14407 8188 8D 4E A2			sta PUT_DIGIT.PY+1
 14408 818B A9 0A			lda #$0A
 14409 818D 8D 4F A2			sta PUT_DIGIT.NUM
 14410 8190 A9 00			lda #$00
 14411 8192			l_2BC5
 14412 8192 8D 50 A2			sta PUT_DIGIT.NUM+1
 14413 8195 20 97 7D			jsr PUT_DIGIT
 14414
 14415 				; optimize OK (service.pas), line = 2835
 14416
 14417 8198 A9 10			lda #$10
 14418 819A 85 8E			sta @INTEGER.DIV.B
 14419 819C A9 27			lda #$27
 14420 819E 85 8F			sta @INTEGER.DIV.B+1
 14421 81A0 A9 00			lda #$00
 14422 81A2 85 90			sta @INTEGER.DIV.B+2
 14423 81A4 85 91			sta @INTEGER.DIV.B+3
 14424 81A6 AD 58 A2			lda SC
 14425 81A9 85 86			sta @INTEGER.DIV.A
 14426 81AB AD 59 A2			lda SC+1
 14427 81AE 85 87			sta @INTEGER.DIV.A+1
 14428 81B0 AD 5A A2			lda SC+2
 14429 81B3 85 88			sta @INTEGER.DIV.A+2
 14430 81B5 AD 5B A2			lda SC+3
 14431 81B8 85 89			sta @INTEGER.DIV.A+3
 14432 81BA 20 73 22			jsr @INTEGER.DIV
 14433 81BD A9 0A			lda #$0A
 14434 81BF 85 8E			sta @INTEGER.MOD.B
 14435 81C1 A9 00			lda #$00
 14436 81C3 85 8F			sta @INTEGER.MOD.B+1
 14437 81C5 85 90			sta @INTEGER.MOD.B+2
 14438 81C7 85 91			sta @INTEGER.MOD.B+3
 14439 81C9 20 90 22			jsr @INTEGER.MOD
 14440 81CC A5 8A			lda @INTEGER.MOD.RESULT
 14441 81CE 8D 5C A2			sta N1
 14442 81D1 A5 8B			lda @INTEGER.MOD.RESULT+1
 14443 81D3 8D 5D A2			sta N1+1
 14444 81D6 A5 8C			lda @INTEGER.MOD.RESULT+2
 14445 81D8 8D 5E A2			sta N1+2
 14446 81DB A5 8D			lda @INTEGER.MOD.RESULT+3
 14447 81DD 8D 5F A2			sta N1+3
 14448
 14449 				; optimize OK (service.pas), line = 2836
 14450
 14451 81E0 30 10			jmi l_2BE7
 14452 81E2 0D 5E A2			ora N1+2
 14453 81E5 0D 5D A2			ora N1+1
 14454 81E8 0D 5C A2			ora N1
 14455 81EB F0 05			jeq l_2BE7
 14456 81ED A9 01			lda #$01
 14457 81EF 8D 60 A2			sta F
 14458 81F2			l_2BE7
 14459
 14460 				; optimize OK (service.pas), line = 2837
 14461
 14462 81F2 AD 60 A2			lda F
 14463 81F5 F0 29			jeq l_2BFA
 14464 81F7 AD 54 A2			lda PX
 14465 81FA 18 69 07			add #$07
 14466 81FD 8D 4B A2			sta PUT_DIGIT.PX
 14467 8200 AD 55 A2			lda PX+1
 14468 8203 69 00			adc #$00
 14469 8205 8D 4C A2			sta PUT_DIGIT.PX+1
 14470 8208 AD 56 A2			lda PY
 14471 820B 8D 4D A2			sta PUT_DIGIT.PY
 14472 820E AD 57 A2			lda PY+1
 14473 8211 8D 4E A2			sta PUT_DIGIT.PY+1
 14474 8214 AD 5C A2			lda N1
 14475 8217 8D 4F A2			sta PUT_DIGIT.NUM
 14476 821A AD 5D A2			lda N1+1
 14477 821D 4C 44 82			jmp l_2C0E
 14478 8220			l_2BFA
 14479
 14480 				; optimize OK (service.pas), line = 2838
 14481
 14482 8220 AD 54 A2			lda PX
 14483 8223 18 69 07			add #$07
 14484 8226 8D 4B A2			sta PUT_DIGIT.PX
 14485 8229 AD 55 A2			lda PX+1
 14486 822C 69 00			adc #$00
 14487 822E 8D 4C A2			sta PUT_DIGIT.PX+1
 14488 8231 AD 56 A2			lda PY
 14489 8234 8D 4D A2			sta PUT_DIGIT.PY
 14490 8237 AD 57 A2			lda PY+1
 14491 823A 8D 4E A2			sta PUT_DIGIT.PY+1
 14492 823D A9 0A			lda #$0A
 14493 823F 8D 4F A2			sta PUT_DIGIT.NUM
 14494 8242 A9 00			lda #$00
 14495 8244			l_2C0E
 14496 8244 8D 50 A2			sta PUT_DIGIT.NUM+1
 14497 8247 20 97 7D			jsr PUT_DIGIT
 14498
 14499 				; optimize OK (service.pas), line = 2841
 14500
 14501 824A A9 E8			lda #$E8
 14502 824C 85 8E			sta @INTEGER.DIV.B
 14503 824E A9 03			lda #$03
 14504 8250 85 8F			sta @INTEGER.DIV.B+1
 14505 8252 A9 00			lda #$00
 14506 8254 85 90			sta @INTEGER.DIV.B+2
 14507 8256 85 91			sta @INTEGER.DIV.B+3
 14508 8258 AD 58 A2			lda SC
 14509 825B 85 86			sta @INTEGER.DIV.A
 14510 825D AD 59 A2			lda SC+1
 14511 8260 85 87			sta @INTEGER.DIV.A+1
 14512 8262 AD 5A A2			lda SC+2
 14513 8265 85 88			sta @INTEGER.DIV.A+2
 14514 8267 AD 5B A2			lda SC+3
 14515 826A 85 89			sta @INTEGER.DIV.A+3
 14516 826C 20 73 22			jsr @INTEGER.DIV
 14517 826F A9 0A			lda #$0A
 14518 8271 85 8E			sta @INTEGER.MOD.B
 14519 8273 A9 00			lda #$00
 14520 8275 85 8F			sta @INTEGER.MOD.B+1
 14521 8277 85 90			sta @INTEGER.MOD.B+2
 14522 8279 85 91			sta @INTEGER.MOD.B+3
 14523 827B 20 90 22			jsr @INTEGER.MOD
 14524 827E A5 8A			lda @INTEGER.MOD.RESULT
 14525 8280 8D 5C A2			sta N1
 14526 8283 A5 8B			lda @INTEGER.MOD.RESULT+1
 14527 8285 8D 5D A2			sta N1+1
 14528 8288 A5 8C			lda @INTEGER.MOD.RESULT+2
 14529 828A 8D 5E A2			sta N1+2
 14530 828D A5 8D			lda @INTEGER.MOD.RESULT+3
 14531 828F 8D 5F A2			sta N1+3
 14532
 14533 				; optimize OK (service.pas), line = 2842
 14534
 14535 8292 30 10			jmi l_2C34
 14536 8294 0D 5E A2			ora N1+2
 14537 8297 0D 5D A2			ora N1+1
 14538 829A 0D 5C A2			ora N1
 14539 829D F0 05			jeq l_2C34
 14540 829F A9 01			lda #$01
 14541 82A1 8D 60 A2			sta F
 14542 82A4			l_2C34
 14543
 14544 				; optimize OK (service.pas), line = 2843
 14545
 14546 82A4 AD 60 A2			lda F
 14547 82A7 F0 29			jeq l_2C47
 14548 82A9 AD 54 A2			lda PX
 14549 82AC 18 69 0E			add #$0E
 14550 82AF 8D 4B A2			sta PUT_DIGIT.PX
 14551 82B2 AD 55 A2			lda PX+1
 14552 82B5 69 00			adc #$00
 14553 82B7 8D 4C A2			sta PUT_DIGIT.PX+1
 14554 82BA AD 56 A2			lda PY
 14555 82BD 8D 4D A2			sta PUT_DIGIT.PY
 14556 82C0 AD 57 A2			lda PY+1
 14557 82C3 8D 4E A2			sta PUT_DIGIT.PY+1
 14558 82C6 AD 5C A2			lda N1
 14559 82C9 8D 4F A2			sta PUT_DIGIT.NUM
 14560 82CC AD 5D A2			lda N1+1
 14561 82CF 4C F6 82			jmp l_2C5B
 14562 82D2			l_2C47
 14563
 14564 				; optimize OK (service.pas), line = 2844
 14565
 14566 82D2 AD 54 A2			lda PX
 14567 82D5 18 69 0E			add #$0E
 14568 82D8 8D 4B A2			sta PUT_DIGIT.PX
 14569 82DB AD 55 A2			lda PX+1
 14570 82DE 69 00			adc #$00
 14571 82E0 8D 4C A2			sta PUT_DIGIT.PX+1
 14572 82E3 AD 56 A2			lda PY
 14573 82E6 8D 4D A2			sta PUT_DIGIT.PY
 14574 82E9 AD 57 A2			lda PY+1
 14575 82EC 8D 4E A2			sta PUT_DIGIT.PY+1
 14576 82EF A9 0A			lda #$0A
 14577 82F1 8D 4F A2			sta PUT_DIGIT.NUM
 14578 82F4 A9 00			lda #$00
 14579 82F6			l_2C5B
 14580 82F6 8D 50 A2			sta PUT_DIGIT.NUM+1
 14581 82F9 20 97 7D			jsr PUT_DIGIT
 14582
 14583 				; optimize OK (service.pas), line = 2847
 14584
 14585 82FC A9 64			lda #$64
 14586 82FE 85 8E			sta @INTEGER.DIV.B
 14587 8300 A9 00			lda #$00
 14588 8302 85 8F			sta @INTEGER.DIV.B+1
 14589 8304 85 90			sta @INTEGER.DIV.B+2
 14590 8306 85 91			sta @INTEGER.DIV.B+3
 14591 8308 AD 58 A2			lda SC
 14592 830B 85 86			sta @INTEGER.DIV.A
 14593 830D AD 59 A2			lda SC+1
 14594 8310 85 87			sta @INTEGER.DIV.A+1
 14595 8312 AD 5A A2			lda SC+2
 14596 8315 85 88			sta @INTEGER.DIV.A+2
 14597 8317 AD 5B A2			lda SC+3
 14598 831A 85 89			sta @INTEGER.DIV.A+3
 14599 831C 20 73 22			jsr @INTEGER.DIV
 14600 831F A9 0A			lda #$0A
 14601 8321 85 8E			sta @INTEGER.MOD.B
 14602 8323 A9 00			lda #$00
 14603 8325 85 8F			sta @INTEGER.MOD.B+1
 14604 8327 85 90			sta @INTEGER.MOD.B+2
 14605 8329 85 91			sta @INTEGER.MOD.B+3
 14606 832B 20 90 22			jsr @INTEGER.MOD
 14607 832E A5 8A			lda @INTEGER.MOD.RESULT
 14608 8330 8D 5C A2			sta N1
 14609 8333 A5 8B			lda @INTEGER.MOD.RESULT+1
 14610 8335 8D 5D A2			sta N1+1
 14611 8338 A5 8C			lda @INTEGER.MOD.RESULT+2
 14612 833A 8D 5E A2			sta N1+2
 14613 833D A5 8D			lda @INTEGER.MOD.RESULT+3
 14614 833F 8D 5F A2			sta N1+3
 14615
 14616 				; optimize OK (service.pas), line = 2848
 14617
 14618 8342 30 10			jmi l_2C81
 14619 8344 0D 5E A2			ora N1+2
 14620 8347 0D 5D A2			ora N1+1
 14621 834A 0D 5C A2			ora N1
 14622 834D F0 05			jeq l_2C81
 14623 834F A9 01			lda #$01
 14624 8351 8D 60 A2			sta F
 14625 8354			l_2C81
 14626
 14627 				; optimize OK (service.pas), line = 2849
 14628
 14629 8354 AD 60 A2			lda F
 14630 8357 F0 29			jeq l_2C94
 14631 8359 AD 54 A2			lda PX
 14632 835C 18 69 15			add #$15
 14633 835F 8D 4B A2			sta PUT_DIGIT.PX
 14634 8362 AD 55 A2			lda PX+1
 14635 8365 69 00			adc #$00
 14636 8367 8D 4C A2			sta PUT_DIGIT.PX+1
 14637 836A AD 56 A2			lda PY
 14638 836D 8D 4D A2			sta PUT_DIGIT.PY
 14639 8370 AD 57 A2			lda PY+1
 14640 8373 8D 4E A2			sta PUT_DIGIT.PY+1
 14641 8376 AD 5C A2			lda N1
 14642 8379 8D 4F A2			sta PUT_DIGIT.NUM
 14643 837C AD 5D A2			lda N1+1
 14644 837F 4C A6 83			jmp l_2CA8
 14645 8382			l_2C94
 14646
 14647 				; optimize OK (service.pas), line = 2850
 14648
 14649 8382 AD 54 A2			lda PX
 14650 8385 18 69 15			add #$15
 14651 8388 8D 4B A2			sta PUT_DIGIT.PX
 14652 838B AD 55 A2			lda PX+1
 14653 838E 69 00			adc #$00
 14654 8390 8D 4C A2			sta PUT_DIGIT.PX+1
 14655 8393 AD 56 A2			lda PY
 14656 8396 8D 4D A2			sta PUT_DIGIT.PY
 14657 8399 AD 57 A2			lda PY+1
 14658 839C 8D 4E A2			sta PUT_DIGIT.PY+1
 14659 839F A9 0A			lda #$0A
 14660 83A1 8D 4F A2			sta PUT_DIGIT.NUM
 14661 83A4 A9 00			lda #$00
 14662 83A6			l_2CA8
 14663 83A6 8D 50 A2			sta PUT_DIGIT.NUM+1
 14664 83A9 20 97 7D			jsr PUT_DIGIT
 14665
 14666 				; optimize OK (service.pas), line = 2853
 14667
 14668 83AC A9 0A			lda #$0A
 14669 83AE 85 8E			sta @INTEGER.DIV.B
 14670 83B0 A9 00			lda #$00
 14671 83B2 85 8F			sta @INTEGER.DIV.B+1
 14672 83B4 85 90			sta @INTEGER.DIV.B+2
 14673 83B6 85 91			sta @INTEGER.DIV.B+3
 14674 83B8 AD 58 A2			lda SC
 14675 83BB 85 86			sta @INTEGER.DIV.A
 14676 83BD AD 59 A2			lda SC+1
 14677 83C0 85 87			sta @INTEGER.DIV.A+1
 14678 83C2 AD 5A A2			lda SC+2
 14679 83C5 85 88			sta @INTEGER.DIV.A+2
 14680 83C7 AD 5B A2			lda SC+3
 14681 83CA 85 89			sta @INTEGER.DIV.A+3
 14682 83CC 20 73 22			jsr @INTEGER.DIV
 14683 83CF A9 0A			lda #$0A
 14684 83D1 85 8E			sta @INTEGER.MOD.B
 14685 83D3 A9 00			lda #$00
 14686 83D5 85 8F			sta @INTEGER.MOD.B+1
 14687 83D7 85 90			sta @INTEGER.MOD.B+2
 14688 83D9 85 91			sta @INTEGER.MOD.B+3
 14689 83DB 20 90 22			jsr @INTEGER.MOD
 14690 83DE A5 8A			lda @INTEGER.MOD.RESULT
 14691 83E0 8D 5C A2			sta N1
 14692 83E3 A5 8B			lda @INTEGER.MOD.RESULT+1
 14693 83E5 8D 5D A2			sta N1+1
 14694 83E8 A5 8C			lda @INTEGER.MOD.RESULT+2
 14695 83EA 8D 5E A2			sta N1+2
 14696 83ED A5 8D			lda @INTEGER.MOD.RESULT+3
 14697 83EF 8D 5F A2			sta N1+3
 14698
 14699 				; optimize OK (service.pas), line = 2854
 14700
 14701 83F2 AD 54 A2			lda PX
 14702 83F5 18 69 1C			add #$1C
 14703 83F8 8D 4B A2			sta PUT_DIGIT.PX
 14704 83FB AD 55 A2			lda PX+1
 14705 83FE 69 00			adc #$00
 14706 8400 8D 4C A2			sta PUT_DIGIT.PX+1
 14707 8403 AD 56 A2			lda PY
 14708 8406 8D 4D A2			sta PUT_DIGIT.PY
 14709 8409 AD 57 A2			lda PY+1
 14710 840C 8D 4E A2			sta PUT_DIGIT.PY+1
 14711 840F AD 5C A2			lda N1
 14712 8412 8D 4F A2			sta PUT_DIGIT.NUM
 14713 8415 AD 5D A2			lda N1+1
 14714 8418 8D 50 A2			sta PUT_DIGIT.NUM+1
 14715 841B 20 97 7D			jsr PUT_DIGIT
 14716
 14717 				; optimize OK (service.pas), line = 2858
 14718
 14719 841E AD 54 A2			lda PX
 14720 8421 18 69 23			add #$23
 14721 8424 8D 4B A2			sta PUT_DIGIT.PX
 14722 8427 AD 55 A2			lda PX+1
 14723 842A 69 00			adc #$00
 14724 842C 8D 4C A2			sta PUT_DIGIT.PX+1
 14725 842F AD 56 A2			lda PY
 14726 8432 8D 4D A2			sta PUT_DIGIT.PY
 14727 8435 AD 57 A2			lda PY+1
 14728 8438 8D 4E A2			sta PUT_DIGIT.PY+1
 14729 843B A9 00			lda #$00
 14730 843D 8D 4F A2			sta PUT_DIGIT.NUM
 14731 8440 8D 50 A2			sta PUT_DIGIT.NUM+1
 14732 8443 20 97 7D			jsr PUT_DIGIT
 14733
 14734 				; ------------------------------------------------------------
 14735
 14736 = A254			PX	= DATAORIGIN+$03AF
 14737 = A256			PY	= DATAORIGIN+$03B1
 14738 = A258			SC	= DATAORIGIN+$03B3
 14739 = A25C			N1	= DATAORIGIN+$03B7
 14740 = A260			F	= DATAORIGIN+$03BB
 14741
 14742 = A254			@VarData	= PX
 14743 = 000D			@VarDataSize	= 13
 14744
 14745 8446			@exit
 14746 					.ifdef @new
 14747 					lda <@VarData
 14748 					sta :ztmp
 14749 					lda >@VarData
 14750 					ldy #@VarDataSize-1
 14751 					jmp @FreeMem
 14752 					els
 14753 8446 60				rts						; ret
 14754 					eif
 14755 				.endl
 14756
 14757 8447			.local	PLOT_LIVES					; PROCEDURE
 14758
 14759 				; optimize FAIL (0, service.pas), line = 2904
 14760
 14761 8447 AD 61 A2			lda LIVES
 14762 844A D0 03			bne @+
 14763 844C CE 62 A2			dec LIVES+1
 14764 				@
 14765 844F CE 61 A2			dec LIVES
 14766
 14767 				; optimize OK (service.pas), line = 2907
 14768
 14769 8452 A9 00			lda #$00
 14770 8454 8D 65 A2			sta CN
 14771
 14772 8457			l_2CE7
 14773 				; --- ForToDoCondition
 14774 8457 AD 65 A2			lda CN
 14775 845A C9 08			cmp #$08
 14776 845C 90 03 4C 17 87		jcs l_2CF5
 14777
 14778 				; optimize OK (service.pas), line = 2908
 14779
 14780 8461 A9 00			lda #$00
 14781 8463 8D 64 A2			sta Y
 14782 8466 AC F3 9F			ldy MINIVAUS.HEIGHT
 14783 8469 88				dey
 14784 846A 8C 6E 84			sty @FORTMP_2D00_0
 14785
 14786 846D			l_2D03
 14787 				; --- ForToDoCondition
 14788 846D A9 00			lda @FORTMP_2D00_0::#$00
 14789 846F CD 64 A2			cmp Y
 14790 8472 B0 03 4C 0F 87		jcc l_2D11
 14791
 14792 				; optimize OK (service.pas), line = 2909
 14793
 14794 8477 A9 00			lda #$00
 14795 8479 8D 63 A2			sta X
 14796 847C AC F1 9F			ldy MINIVAUS.WIDTH
 14797 847F 88				dey
 14798 8480 8C 84 84			sty @FORTMP_2D1C_0
 14799
 14800 8483			l_2D1F
 14801 				; --- ForToDoCondition
 14802 8483 A9 00			lda @FORTMP_2D1C_0::#$00
 14803 8485 CD 63 A2			cmp X
 14804 8488 B0 03 4C 07 87		jcc l_2D2D
 14805
 14806 				; optimize OK (service.pas), line = 2911
 14807
 14808 848D AD 63 A2			lda X
 14809 8490 18 69 0B			add #$0B
 14810 8493 85 9F			sta :STACKORIGIN+9
 14811 8495 A9 00			lda #$00
 14812 8497 69 00			adc #$00
 14813 8499 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 14814 849B AD F1 9F			lda MINIVAUS.WIDTH
 14815 849E 85 8E			sta :ecx
 14816 84A0 AD F2 9F			lda MINIVAUS.WIDTH+1
 14817 84A3 85 8F			sta :ecx+1
 14818 84A5 AD 65 A2			lda CN
 14819 84A8 85 86			sta :eax
 14820 84AA A9 00			lda #$00
 14821 84AC 85 87			sta :eax+1
 14822 					.ifdef fmulinit
 14823 					fmulu_16
 14824 					els
 14825 84AE 20 4F 23			imulCX_AL
 14826 					eif
 14827 84B1 A5 86			lda :eax
 14828 84B3 18 65 9F			add :STACKORIGIN+9
 14829 84B6 8D 6A A2			sta XL
 14830 84B9 A5 87			lda :eax+1
 14831 84BB 65 AF			adc :STACKORIGIN+STACKWIDTH+9
 14832 84BD 8D 6B A2			sta XL+1
 14833
 14834 				; optimize OK (service.pas), line = 2912
 14835
 14836 84C0 AD 64 A2			lda Y
 14837 84C3 18 69 C0			add #$C0
 14838 84C6 8D 6C A2			sta YL
 14839 84C9 A9 00			lda #$00
 14840 84CB 69 00			adc #$00
 14841 84CD 8D 6D A2			sta YL+1
 14842
 14843 				; optimize OK (service.pas), line = 2914
 14844
 14845 84D0 AC 6A A2			ldy XL
 14846 84D3 B9 00 C4			lda adr.MODX,y
 14847 84D6 8D 66 A2			sta XP
 14848 84D9 A9 00			lda #$00
 14849 84DB 8D 67 A2			sta XP+1
 14850
 14851 				; optimize OK (service.pas), line = 2915
 14852
 14853 84DE AC 6C A2			ldy YL
 14854 84E1 B9 00 C3			lda adr.MODY,y
 14855 84E4 85 86			sta :eax
 14856 84E6 A9 00			lda #$00
 14857 84E8 85 87			sta :eax+1
 14858 84EA AD 26 A0			lda PATTERN.WIDTH
 14859 84ED 85 8E			sta :ecx
 14860 84EF AD 27 A0			lda PATTERN.WIDTH+1
 14861 84F2 85 8F			sta :ecx+1
 14862 					.ifdef fmulinit
 14863 					fmulu_16
 14864 					els
 14865 84F4 20 4F 23			imulCX_AL
 14866 					eif
 14867 84F7 A5 86			lda :eax
 14868 84F9 8D 68 A2			sta YP
 14869 84FC A5 87			lda :eax+1
 14870 84FE 8D 69 A2			sta YP+1
 14871
 14872 				; optimize FAIL (1, service.pas), line = 2919
 14873
 14874 8501 E8				inx
 14875 8502 A0 01			ldy #1
 14876 8504 AD 65 A2			lda CN
 14877 8507 CD 61 A2			cmp LIVES
 14878 850A A9 00			lda #$00
 14879 850C ED 62 A2			sbc LIVES+1
 14880 850F 50 02			svc
 14881 8511 49 80			eor #$80
 14882 8513 30 01			bmi @+
 14883 8515 88				dey
 14884 				@
 14885 8516 94 96			sty :STACKORIGIN,x
 14886 8518 AD F5 9F			lda MINIVAUS.OFS
 14887 851B 18 6D 63 A2			add X
 14888 851F 85 9F			sta :STACKORIGIN+9
 14889 8521 AD F6 9F			lda MINIVAUS.OFS+1
 14890 8524 69 00			adc #$00
 14891 8526 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 14892 8528 AD F7 9F			lda MINIVAUS.OFS+2
 14893 852B 69 00			adc #$00
 14894 852D 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
 14895 852F AD F8 9F			lda MINIVAUS.OFS+3
 14896 8532 69 00			adc #$00
 14897 8534 85 CF			sta :STACKORIGIN+STACKWIDTH*3+9
 14898 8536 AD F1 9F			lda MINIVAUS.WIDTH
 14899 8539 85 8E			sta :ecx
 14900 853B AD F2 9F			lda MINIVAUS.WIDTH+1
 14901 853E 85 8F			sta :ecx+1
 14902 8540 AD 64 A2			lda Y
 14903 8543 85 86			sta :eax
 14904 8545 A9 00			lda #$00
 14905 8547 85 87			sta :eax+1
 14906 					.ifdef fmulinit
 14907 					fmulu_16
 14908 					els
 14909 8549 20 4F 23			imulCX_AL
 14910 					eif
 14911 854C A5 9F			lda :STACKORIGIN+9
 14912 854E 18 65 86			add :eax
 14913 8551 8D CD A0			sta GETBYTE.SRC
 14914 8554 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 14915 8556 65 87			adc :eax+1
 14916 8558 8D CE A0			sta GETBYTE.SRC+1
 14917 855B A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
 14918 855D 65 88			adc :eax+2
 14919 855F 8D CF A0			sta GETBYTE.SRC+2
 14920 8562 A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
 14921 8564 65 89			adc :eax+3
 14922 8566 8D D0 A0			sta GETBYTE.SRC+3
 14923 8569 20 2A 3C			jsr GETBYTE
 14924 856C CA				dex
 14925 856D A0 01			ldy #1
 14926 856F AD D1 A0			lda GETBYTE.RESULT
 14927 8572 D0 01			bne @+
 14928 8574 88				dey
 14929 				@
 14930 8575 98				tya
 14931 8576 35 97			and :STACKORIGIN+1,x
 14932 8578 F0 5D			jeq l_2D90
 14933
 14934 				; optimize OK (service.pas), line = 2922
 14935
 14936 857A AD F5 9F			lda MINIVAUS.OFS
 14937 857D 18 6D 63 A2			add X
 14938 8581 85 9F			sta :STACKORIGIN+9
 14939 8583 AD F6 9F			lda MINIVAUS.OFS+1
 14940 8586 69 00			adc #$00
 14941 8588 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 14942 858A AD F7 9F			lda MINIVAUS.OFS+2
 14943 858D 69 00			adc #$00
 14944 858F 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
 14945 8591 AD F8 9F			lda MINIVAUS.OFS+3
 14946 8594 69 00			adc #$00
 14947 8596 85 CF			sta :STACKORIGIN+STACKWIDTH*3+9
 14948 8598 AD F1 9F			lda MINIVAUS.WIDTH
 14949 859B 85 8E			sta :ecx
 14950 859D AD F2 9F			lda MINIVAUS.WIDTH+1
 14951 85A0 85 8F			sta :ecx+1
 14952 85A2 AD 64 A2			lda Y
 14953 85A5 85 86			sta :eax
 14954 85A7 A9 00			lda #$00
 14955 85A9 85 87			sta :eax+1
 14956 					.ifdef fmulinit
 14957 					fmulu_16
 14958 					els
 14959 85AB 20 4F 23			imulCX_AL
 14960 					eif
 14961 85AE A5 9F			lda :STACKORIGIN+9
 14962 85B0 18 65 86			add :eax
 14963 85B3 8D CD A0			sta GETBYTE.SRC
 14964 85B6 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 14965 85B8 65 87			adc :eax+1
 14966 85BA 8D CE A0			sta GETBYTE.SRC+1
 14967 85BD A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
 14968 85BF 65 88			adc :eax+2
 14969 85C1 8D CF A0			sta GETBYTE.SRC+2
 14970 85C4 A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
 14971 85C6 65 89			adc :eax+3
 14972 85C8 8D D0 A0			sta GETBYTE.SRC+3
 14973 85CB 20 2A 3C			jsr GETBYTE
 14974 85CE AD D1 A0			lda GETBYTE.RESULT
 14975 85D1 8D 6F A2			sta CL
 14976 				; optimize OK (service.pas), line = 2925
 14977 				; optimize OK (service.pas), line = 2928
 14978 85D4 4C 71 86			jmp l_2DD2
 14979 85D7			l_2D90
 14980
 14981 				; optimize OK (service.pas), line = 2937
 14982
 14983 85D7 AD A5 9F			lda PLAYSCREEN.OFS
 14984 85DA 18 6D 6A A2			add XL
 14985 85DE 85 9F			sta :STACKORIGIN+9
 14986 85E0 AD A6 9F			lda PLAYSCREEN.OFS+1
 14987 85E3 6D 6B A2			adc XL+1
 14988 85E6 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 14989 85E8 AD A7 9F			lda PLAYSCREEN.OFS+2
 14990 85EB 69 00			adc #$00
 14991 85ED 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
 14992 85EF AD A8 9F			lda PLAYSCREEN.OFS+3
 14993 85F2 69 00			adc #$00
 14994 85F4 85 CF			sta :STACKORIGIN+STACKWIDTH*3+9
 14995 85F6 AC 6C A2			ldy YL
 14996 85F9 A5 9F			lda :STACKORIGIN+9
 14997 85FB 18 79 00 C0			add adr.ROW,y
 14998 85FF 8D CD A0			sta GETBYTE.SRC
 14999 8602 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 15000 8604 79 00 C1			adc adr.ROW+256,y
 15001 8607 8D CE A0			sta GETBYTE.SRC+1
 15002 860A A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
 15003 860C 69 00			adc #$00
 15004 860E 8D CF A0			sta GETBYTE.SRC+2
 15005 8611 A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
 15006 8613 69 00			adc #$00
 15007 8615 8D D0 A0			sta GETBYTE.SRC+3
 15008 8618 20 2A 3C			jsr GETBYTE
 15009 861B AD D1 A0			lda GETBYTE.RESULT
 15010 861E 29 80			and #$80
 15011 8620 8D 6E A2			sta SHADOW
 15012
 15013 				; optimize OK (service.pas), line = 2940
 15014
 15015 8623 AD 2A A0			lda PATTERN.OFS
 15016 8626 18 6D 66 A2			add XP
 15017 862A 85 9F			sta :STACKORIGIN+9
 15018 862C AD 2B A0			lda PATTERN.OFS+1
 15019 862F 6D 67 A2			adc XP+1
 15020 8632 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 15021 8634 AD 2C A0			lda PATTERN.OFS+2
 15022 8637 69 00			adc #$00
 15023 8639 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
 15024 863B AD 2D A0			lda PATTERN.OFS+3
 15025 863E 69 00			adc #$00
 15026 8640 85 CF			sta :STACKORIGIN+STACKWIDTH*3+9
 15027 8642 A5 9F			lda :STACKORIGIN+9
 15028 8644 18 6D 68 A2			add YP
 15029 8648 8D CD A0			sta GETBYTE.SRC
 15030 864B A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 15031 864D 6D 69 A2			adc YP+1
 15032 8650 8D CE A0			sta GETBYTE.SRC+1
 15033 8653 A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
 15034 8655 69 00			adc #$00
 15035 8657 8D CF A0			sta GETBYTE.SRC+2
 15036 865A A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
 15037 865C 69 00			adc #$00
 15038 865E 8D D0 A0			sta GETBYTE.SRC+3
 15039 8661 20 2A 3C			jsr GETBYTE
 15040 8664 E8				inx
 15041 8665 AD D1 A0			lda GETBYTE.RESULT
 15042 8668 29 7F			and #$7F
 15043 866A 0D 6E A2			ora SHADOW
 15044 866D 8D 6F A2			sta CL
 15045 8670 CA				dex
 15046 8671			l_2DD2
 15047
 15048 				; optimize OK (service.pas), line = 2943
 15049
 15050 8671 AD 6A A2			lda XL
 15051 8674 85 A0			sta :STACKORIGIN+10
 15052 8676 A9 50			lda #$50
 15053 8678 18 6D 6B A2			add XL+1
 15054 867C 85 B0			sta :STACKORIGIN+STACKWIDTH+10
 15055 867E A9 00			lda #$00
 15056 8680 69 00			adc #$00
 15057 8682 85 C0			sta :STACKORIGIN+STACKWIDTH*2+10
 15058 8684 A9 00			lda #$00
 15059 8686 69 00			adc #$00
 15060 8688 85 D0			sta :STACKORIGIN+STACKWIDTH*3+10
 15061 868A AC 6C A2			ldy YL
 15062 868D A5 A0			lda :STACKORIGIN+10
 15063 868F 18 79 00 C0			add adr.ROW,y
 15064 8693 8D C8 A0			sta PUTBYTE.DST
 15065 8696 A5 B0			lda :STACKORIGIN+STACKWIDTH+10
 15066 8698 79 00 C1			adc adr.ROW+256,y
 15067 869B 8D C9 A0			sta PUTBYTE.DST+1
 15068 869E A5 C0			lda :STACKORIGIN+STACKWIDTH*2+10
 15069 86A0 69 00			adc #$00
 15070 86A2 8D CA A0			sta PUTBYTE.DST+2
 15071 86A5 A5 D0			lda :STACKORIGIN+STACKWIDTH*3+10
 15072 86A7 69 00			adc #$00
 15073 86A9 8D CB A0			sta PUTBYTE.DST+3
 15074 86AC AD 6F A2			lda CL
 15075 86AF 8D CC A0			sta PUTBYTE.V
 15076 86B2 20 02 3C			jsr PUTBYTE
 15077
 15078 				; optimize OK (service.pas), line = 2946
 15079
 15080 86B5 AD A5 9F			lda PLAYSCREEN.OFS
 15081 86B8 18 6D 6A A2			add XL
 15082 86BC 85 A0			sta :STACKORIGIN+10
 15083 86BE AD A6 9F			lda PLAYSCREEN.OFS+1
 15084 86C1 6D 6B A2			adc XL+1
 15085 86C4 85 B0			sta :STACKORIGIN+STACKWIDTH+10
 15086 86C6 AD A7 9F			lda PLAYSCREEN.OFS+2
 15087 86C9 69 00			adc #$00
 15088 86CB 85 C0			sta :STACKORIGIN+STACKWIDTH*2+10
 15089 86CD AD A8 9F			lda PLAYSCREEN.OFS+3
 15090 86D0 69 00			adc #$00
 15091 86D2 85 D0			sta :STACKORIGIN+STACKWIDTH*3+10
 15092 86D4 AC 6C A2			ldy YL
 15093 86D7 A5 A0			lda :STACKORIGIN+10
 15094 86D9 18 79 00 C0			add adr.ROW,y
 15095 86DD 8D C8 A0			sta PUTBYTE.DST
 15096 86E0 A5 B0			lda :STACKORIGIN+STACKWIDTH+10
 15097 86E2 79 00 C1			adc adr.ROW+256,y
 15098 86E5 8D C9 A0			sta PUTBYTE.DST+1
 15099 86E8 A5 C0			lda :STACKORIGIN+STACKWIDTH*2+10
 15100 86EA 69 00			adc #$00
 15101 86EC 8D CA A0			sta PUTBYTE.DST+2
 15102 86EF A5 D0			lda :STACKORIGIN+STACKWIDTH*3+10
 15103 86F1 69 00			adc #$00
 15104 86F3 8D CB A0			sta PUTBYTE.DST+3
 15105 86F6 AD 6F A2			lda CL
 15106 86F9 8D CC A0			sta PUTBYTE.V
 15107 86FC 20 02 3C			jsr PUTBYTE
 15108
 15109 				; --- ForToDoEpilog
 15110 86FF EE 63 A2			inc X
 15111 8702 F0 03 4C 83 84		jne l_2D1F
 15112 8707			l_2D2D
 15113
 15114 				; --- ForToDoEpilog
 15115 8707 EE 64 A2			inc Y
 15116 870A F0 03 4C 6D 84		jne l_2D03
 15117 870F			l_2D11
 15118
 15119 				; --- ForToDoEpilog
 15120 870F EE 65 A2			inc CN
 15121 8712 F0 03 4C 57 84		jne l_2CE7
 15122 8717			l_2CF5
 15123
 15124 				; ------------------------------------------------------------
 15125
 15126 = A261			LIVES	= DATAORIGIN+$03BC
 15127 = 000B			XLIVES	= $0B
 15128 = 00C0			YLIVES	= $C0
 15129 = A263			X	= DATAORIGIN+$03BE
 15130 = A264			Y	= DATAORIGIN+$03BF
 15131 = A265			CN	= DATAORIGIN+$03C0
 15132 = A266			XP	= DATAORIGIN+$03C1
 15133 = A268			YP	= DATAORIGIN+$03C3
 15134 = A26A			XL	= DATAORIGIN+$03C5
 15135 = A26C			YL	= DATAORIGIN+$03C7
 15136 = A26E			SHADOW	= DATAORIGIN+$03C9
 15137 = A26F			CL	= DATAORIGIN+$03CA
 15138
 15139 = A261			@VarData	= LIVES
 15140 = 000F			@VarDataSize	= 15
 15141
 15142 8717			@exit
 15143 					.ifdef @new
 15144 					lda <@VarData
 15145 					sta :ztmp
 15146 					lda >@VarData
 15147 					ldy #@VarDataSize-1
 15148 					jmp @FreeMem
 15149 					els
 15150 8717 60				rts						; ret
 15151 					eif
 15152 				.endl
 15153
 15154 8718			.local	PLACE_FIRE					; PROCEDURE
 15155
 15156 				; optimize OK (service.pas), line = 2957
 15157
 15158 8718 AC 90 A0			ldy FIRE.Y
 15159 871B AD 8F A0			lda FIRE.X
 15160 871E 18 79 00 C0			add adr.ROW,y
 15161 8722 8D 98 A0			sta HLP
 15162 8725 A9 00			lda #$00
 15163 8727 79 00 C1			adc adr.ROW+256,y
 15164 872A 8D 99 A0			sta HLP+1
 15165
 15166 				; optimize OK (service.pas), line = 2959
 15167
 15168 872D AD 98 A0			lda HLP
 15169 8730 8D B2 A0			sta BLITZERO.DST
 15170 8733 A9 50			lda #$50
 15171 8735 18 6D 99 A0			add HLP+1
 15172 8739 8D B3 A0			sta BLITZERO.DST+1
 15173 873C A9 00			lda #$00
 15174 873E 69 00			adc #$00
 15175 8740 8D B4 A0			sta BLITZERO.DST+2
 15176 8743 A9 00			lda #$00
 15177 8745 69 00			adc #$00
 15178 8747 8D B5 A0			sta BLITZERO.DST+3
 15179 874A AD 0D A0			lda SHOOTS.OFS
 15180 874D 8D AE A0			sta BLITZERO.SRC
 15181 8750 AD 0E A0			lda SHOOTS.OFS+1
 15182 8753 8D AF A0			sta BLITZERO.SRC+1
 15183 8756 AD 0F A0			lda SHOOTS.OFS+2
 15184 8759 8D B0 A0			sta BLITZERO.SRC+2
 15185 875C AD 10 A0			lda SHOOTS.OFS+3
 15186 875F 8D B1 A0			sta BLITZERO.SRC+3
 15187 8762 AD 09 A0			lda SHOOTS.WIDTH
 15188 8765 8D B6 A0			sta BLITZERO.W
 15189 8768 AD 0A A0			lda SHOOTS.WIDTH+1
 15190 876B 8D B7 A0			sta BLITZERO.W+1
 15191 876E AD 0B A0			lda SHOOTS.HEIGHT
 15192 8771 8D B8 A0			sta BLITZERO.H
 15193 8774 20 D9 3A			jsr BLITZERO
 15194
 15195 8777			@exit
 15196 					.ifdef @new
 15197 					lda <@VarData
 15198 					sta :ztmp
 15199 					lda >@VarData
 15200 					ldy #@VarDataSize-1
 15201 					jmp @FreeMem
 15202 					els
 15203 8777 60				rts						; ret
 15204 					eif
 15205 				.endl
 15206
 15207 8778			.local	REMOVE_FIRE					; PROCEDURE
 15208
 15209 				; optimize OK (service.pas), line = 2977
 15210
 15211 8778 AC 90 A0			ldy FIRE.Y
 15212 877B AD 8F A0			lda FIRE.X
 15213 877E 18 79 00 C0			add adr.ROW,y
 15214 8782 8D 98 A0			sta HLP
 15215 8785 A9 00			lda #$00
 15216 8787 79 00 C1			adc adr.ROW+256,y
 15217 878A 8D 99 A0			sta HLP+1
 15218
 15219 				; optimize OK (service.pas), line = 2979
 15220
 15221 878D AD 98 A0			lda HLP
 15222 8790 8D A7 A0			sta BLITBOX.DST
 15223 8793 A9 50			lda #$50
 15224 8795 18 6D 99 A0			add HLP+1
 15225 8799 8D A8 A0			sta BLITBOX.DST+1
 15226 879C A9 00			lda #$00
 15227 879E 69 00			adc #$00
 15228 87A0 8D A9 A0			sta BLITBOX.DST+2
 15229 87A3 A9 00			lda #$00
 15230 87A5 69 00			adc #$00
 15231 87A7 8D AA A0			sta BLITBOX.DST+3
 15232 87AA AD A5 9F			lda PLAYSCREEN.OFS
 15233 87AD 18 6D 98 A0			add HLP
 15234 87B1 8D A3 A0			sta BLITBOX.SRC
 15235 87B4 AD A6 9F			lda PLAYSCREEN.OFS+1
 15236 87B7 6D 99 A0			adc HLP+1
 15237 87BA 8D A4 A0			sta BLITBOX.SRC+1
 15238 87BD AD A7 9F			lda PLAYSCREEN.OFS+2
 15239 87C0 69 00			adc #$00
 15240 87C2 8D A5 A0			sta BLITBOX.SRC+2
 15241 87C5 AD A8 9F			lda PLAYSCREEN.OFS+3
 15242 87C8 69 00			adc #$00
 15243 87CA 8D A6 A0			sta BLITBOX.SRC+3
 15244 87CD AD 09 A0			lda SHOOTS.WIDTH
 15245 87D0 8D AB A0			sta BLITBOX.W
 15246 87D3 AD 0A A0			lda SHOOTS.WIDTH+1
 15247 87D6 8D AC A0			sta BLITBOX.W+1
 15248 87D9 AD 0B A0			lda SHOOTS.HEIGHT
 15249 87DC 8D AD A0			sta BLITBOX.H
 15250 87DF 20 58 3A			jsr BLITBOX
 15251
 15252 87E2			@exit
 15253 					.ifdef @new
 15254 					lda <@VarData
 15255 					sta :ztmp
 15256 					lda >@VarData
 15257 					ldy #@VarDataSize-1
 15258 					jmp @FreeMem
 15259 					els
 15260 87E2 60				rts						; ret
 15261 					eif
 15262 				.endl
 15263
 15264 87E3			.local	CHECK_FIRE					; PROCEDURE
 15265
 15266 				; optimize OK (service.pas), line = 2995
 15267
 15268 87E3 AD 92 A0			lda FIRE.AVL
 15269 87E6 D0 03 4C 45 89		jeq l_2E82
 15270
 15271 				; optimize FAIL ('MOUSECLICK', service.pas), line = 2997
 15272
 15273 87EB 20 4F 3A			jsr MOUSECLICK
 15274 87EE E8				inx
 15275 87EF E8				inx
 15276 87F0 A0 01			ldy #1
 15277 87F2 AD A2 A0			lda MOUSECLICK.RESULT
 15278 87F5 C9 01			cmp #$01
 15279 87F7 F0 01			beq @+
 15280 87F9 88				dey
 15281 				@
 15282 87FA 98				tya
 15283 87FB 2D 92 A0			and FIRE.AVL
 15284 87FE 95 95			sta :STACKORIGIN-1,x
 15285 8800 CA				dex
 15286 8801 CA				dex
 15287 8802 A0 01			ldy #1
 15288 8804 AD 91 A0			lda FIRE.SHOT
 15289 8807 F0 01			beq @+
 15290 8809 88				dey
 15291 				@
 15292 880A 98				tya
 15293 880B 35 97			and :STACKORIGIN+1,x
 15294 880D F0 3A			jeq l_2EA2
 15295
 15296 				; optimize OK (service.pas), line = 2999
 15297
 15298 880F AD 21 A0			lda VAUS.WIDTH
 15299 8812 38 ED 09 A0			sub SHOOTS.WIDTH
 15300 8816 4A				lsr @
 15301 8817 18 6D 19 A0			add VAUS.X
 15302 881B 8D 8F A0			sta FIRE.X
 15303
 15304 				; optimize OK (service.pas), line = 3000
 15305
 15306 881E AD 1A A0			lda VAUS.Y
 15307 8821 38 ED 0B A0			sub SHOOTS.HEIGHT
 15308 8825 8D 90 A0			sta FIRE.Y
 15309
 15310 				; optimize OK (service.pas), line = 3001
 15311
 15312 8828 A9 01			lda #$01
 15313 882A 8D 91 A0			sta FIRE.SHOT
 15314
 15315 				; optimize OK (service.pas), line = 3002
 15316
 15317 882D A9 00			lda #$00
 15318 882F 8D 93 A0			sta FIRE.NW
 15319
 15320 				; optimize OK (service.pas), line = 3003
 15321
 15322 8832 A9 BC			lda #$BC
 15323 8834 8D 7F 9F			sta BALL_BLOCK_SOUND.A
 15324 8837 A9 02			lda #$02
 15325 8839 8D 80 9F			sta BALL_BLOCK_SOUND.A+1
 15326 883C A9 05			lda #$05
 15327 883E 8D 81 9F			sta BALL_BLOCK_SOUND.B
 15328 8841 A9 00			lda #$00
 15329 8843 8D 82 9F			sta BALL_BLOCK_SOUND.B+1
 15330 8846 20 3F 38			jsr BALL_BLOCK_SOUND
 15331 8849			l_2EA2
 15332
 15333 				; optimize OK (service.pas), line = 3006
 15334
 15335 8849 AD 91 A0			lda FIRE.SHOT
 15336 884C D0 03 4C 45 89		jeq l_2EDC
 15337
 15338 				; optimize OK (service.pas), line = 3008
 15339
 15340 8851 AD 93 A0			lda FIRE.NW
 15341 8854 F0 03			jeq l_2EE9
 15342 8856 20 78 87			jsr REMOVE_FIRE
 15343 8859			l_2EE9
 15344
 15345 				; optimize OK (service.pas), line = 3009
 15346
 15347 8859 A9 01			lda #$01
 15348 885B 8D 93 A0			sta FIRE.NW
 15349
 15350 				; optimize OK (service.pas), line = 3011
 15351
 15352 885E AD 90 A0			lda FIRE.Y
 15353 8861 38 E9 04			sub #$04
 15354 8864 8D 90 A0			sta FIRE.Y
 15355
 15356 				; optimize OK (service.pas), line = 3012
 15357
 15358 8867 C9 16			cmp #$16
 15359 8869 B0 08			jcs l_2F04
 15360 886B A9 00			lda #$00
 15361 886D 8D 91 A0			sta FIRE.SHOT
 15362 8870 4C 45 89			jmp l_2F12
 15363 8873			l_2F04
 15364
 15365 				; optimize FAIL ('PLACE_FIRE', service.pas), line = 3015
 15366
 15367 8873 20 18 87			jsr PLACE_FIRE
 15368
 15369 				; optimize OK (service.pas), line = 3017
 15370
 15371 8876 AD 90 A0			lda FIRE.Y
 15372 8879 38 E9 16			sub #$16
 15373 887C 10 03 4C 45 89		jmi l_2F39
 15374 8881 AD 90 A0			lda FIRE.Y
 15375 8884 38 E9 16			sub #$16
 15376 8887 85 A0			sta :STACKORIGIN+10
 15377 8889 A9 00			lda #$00
 15378 888B E9 00			sbc #$00
 15379 888D 85 B0			sta :STACKORIGIN+STACKWIDTH+10
 15380 888F A5 A0			lda :STACKORIGIN+10
 15381 8891 C9 78			cmp #$78
 15382 8893 A5 B0			lda :STACKORIGIN+STACKWIDTH+10
 15383 8895 E9 00			sbc #$00
 15384 8897 50 02			svc
 15385 8899 49 80			eor #$80
 15386 889B 30 03 4C 45 89		jpl l_2F39
 15387
 15388 				; optimize OK (service.pas), line = 3019
 15389
 15390 88A0 AD 8F A0			lda FIRE.X
 15391 88A3 38 E9 09			sub #$09
 15392 88A6 4A				lsr @
 15393 88A7 4A				lsr @
 15394 88A8 4A				lsr @
 15395 88A9 4A				lsr @
 15396 88AA 8D 72 A2			sta X1
 15397 88AD A9 00			lda #$00
 15398 88AF 8D 73 A2			sta X1+1
 15399
 15400 				; optimize OK (service.pas), line = 3020
 15401
 15402 88B2 AD 90 A0			lda FIRE.Y
 15403 88B5 38 E9 16			sub #$16
 15404 88B8 4A				lsr @
 15405 88B9 4A				lsr @
 15406 88BA 4A				lsr @
 15407 88BB 8D 76 A2			sta Y1
 15408 88BE A9 00			lda #$00
 15409 88C0 8D 77 A2			sta Y1+1
 15410
 15411 				; optimize OK (service.pas), line = 3022
 15412
 15413 88C3 AD 8F A0			lda FIRE.X
 15414 88C6 18 6D 09 A0			add SHOOTS.WIDTH
 15415 88CA 38 E9 09			sub #$09
 15416 88CD 4A				lsr @
 15417 88CE 4A				lsr @
 15418 88CF 4A				lsr @
 15419 88D0 4A				lsr @
 15420 88D1 8D 74 A2			sta X2
 15421 88D4 A9 00			lda #$00
 15422 88D6 8D 75 A2			sta X2+1
 15423
 15424 				; optimize OK (service.pas), line = 3023
 15425
 15426 88D9 AD 76 A2			lda Y1
 15427 88DC 8D 78 A2			sta Y2
 15428 88DF AD 77 A2			lda Y1+1
 15429 88E2 8D 79 A2			sta Y2+1
 15430
 15431 				; optimize OK (service.pas), line = 3025
 15432
 15433 88E5 AD 76 A2			lda Y1
 15434 88E8 0A				asl @
 15435 88E9 0A				asl @
 15436 88EA 0A				asl @
 15437 88EB 0A				asl @
 15438 88EC 18 6D 72 A2			add X1
 15439 88F0 A8				tay
 15440 88F1 B9 00 DB			lda adr.WALL,y
 15441 88F4 D0 11			jne l_2FA2x
 15442 88F6 AD 78 A2			lda Y2
 15443 88F9 0A				asl @
 15444 88FA 0A				asl @
 15445 88FB 0A				asl @
 15446 88FC 0A				asl @
 15447 88FD 18 6D 74 A2			add X2
 15448 8901 A8				tay
 15449 8902 B9 00 DB			lda adr.WALL,y
 15450 8905 F0 3E			jeq l_2FA2
 15451 8907			l_2FA2x
 15452
 15453 				; optimize FAIL ('REMOVE_FIRE', service.pas), line = 3027
 15454
 15455 8907 20 78 87			jsr REMOVE_FIRE
 15456
 15457 				; optimize OK (service.pas), line = 3028
 15458
 15459 890A A9 00			lda #$00
 15460 890C 8D 91 A0			sta FIRE.SHOT
 15461
 15462 				; optimize OK (service.pas), line = 3030
 15463
 15464 890F AD 72 A2			lda X1
 15465 8912 8D DA A1			sta SHOOT_BLOCK_WITH_FIRE.XB
 15466 8915 AD 73 A2			lda X1+1
 15467 8918 8D DB A1			sta SHOOT_BLOCK_WITH_FIRE.XB+1
 15468 891B AD 76 A2			lda Y1
 15469 891E 8D DC A1			sta SHOOT_BLOCK_WITH_FIRE.YB
 15470 8921 AD 77 A2			lda Y1+1
 15471 8924 8D DD A1			sta SHOOT_BLOCK_WITH_FIRE.YB+1
 15472 8927 20 65 67			jsr SHOOT_BLOCK_WITH_FIRE
 15473
 15474 				; optimize OK (service.pas), line = 3031
 15475
 15476 892A AD 74 A2			lda X2
 15477 892D 8D DA A1			sta SHOOT_BLOCK_WITH_FIRE.XB
 15478 8930 AD 75 A2			lda X2+1
 15479 8933 8D DB A1			sta SHOOT_BLOCK_WITH_FIRE.XB+1
 15480 8936 AD 78 A2			lda Y2
 15481 8939 8D DC A1			sta SHOOT_BLOCK_WITH_FIRE.YB
 15482 893C AD 79 A2			lda Y2+1
 15483 893F 8D DD A1			sta SHOOT_BLOCK_WITH_FIRE.YB+1
 15484 8942 20 65 67			jsr SHOOT_BLOCK_WITH_FIRE
 15485 8945			l_2F12
 15486 8945			l_2FA2
 15487 8945			l_2F39
 15488 8945			l_2EDC
 15489 8945			l_2E82
 15490
 15491 				; ------------------------------------------------------------
 15492
 15493 = A272			X1	= DATAORIGIN+$03CD
 15494 = A274			X2	= DATAORIGIN+$03CF
 15495 = A276			Y1	= DATAORIGIN+$03D1
 15496 = A278			Y2	= DATAORIGIN+$03D3
 15497
 15498 = A272			@VarData	= X1
 15499 = 0008			@VarDataSize	= 8
 15500
 15501 8945			@exit
 15502 					.ifdef @new
 15503 					lda <@VarData
 15504 					sta :ztmp
 15505 					lda >@VarData
 15506 					ldy #@VarDataSize-1
 15507 					jmp @FreeMem
 15508 					els
 15509 8945 60				rts						; ret
 15510 					eif
 15511 				.endl
 15512
 15513 8946			.local	REMOVE_FLUX					; PROCEDURE
 15514
 15515 				; optimize OK (service.pas), line = 3043
 15516
 15517 8946 AD B0 C0			lda adr.ROW+$B0
 15518 8949 18 69 D9			add #$D9
 15519 894C 8D 98 A0			sta HLP
 15520 894F AD B0 C1			lda adr.ROW+256+$B0
 15521 8952 69 00			adc #$00
 15522 8954 8D 99 A0			sta HLP+1
 15523
 15524 				; optimize OK (service.pas), line = 3045
 15525
 15526 8957 AD 98 A0			lda HLP
 15527 895A 8D A7 A0			sta BLITBOX.DST
 15528 895D A9 50			lda #$50
 15529 895F 18 6D 99 A0			add HLP+1
 15530 8963 8D A8 A0			sta BLITBOX.DST+1
 15531 8966 A9 00			lda #$00
 15532 8968 69 00			adc #$00
 15533 896A 8D A9 A0			sta BLITBOX.DST+2
 15534 896D A9 00			lda #$00
 15535 896F 69 00			adc #$00
 15536 8971 8D AA A0			sta BLITBOX.DST+3
 15537 8974 AD A5 9F			lda PLAYSCREEN.OFS
 15538 8977 18 6D 98 A0			add HLP
 15539 897B 8D A3 A0			sta BLITBOX.SRC
 15540 897E AD A6 9F			lda PLAYSCREEN.OFS+1
 15541 8981 6D 99 A0			adc HLP+1
 15542 8984 8D A4 A0			sta BLITBOX.SRC+1
 15543 8987 AD A7 9F			lda PLAYSCREEN.OFS+2
 15544 898A 69 00			adc #$00
 15545 898C 8D A5 A0			sta BLITBOX.SRC+2
 15546 898F AD A8 9F			lda PLAYSCREEN.OFS+3
 15547 8992 69 00			adc #$00
 15548 8994 8D A6 A0			sta BLITBOX.SRC+3
 15549 8997 A9 08			lda #$08
 15550 8999 8D AB A0			sta BLITBOX.W
 15551 899C A9 00			lda #$00
 15552 899E 8D AC A0			sta BLITBOX.W+1
 15553 89A1 A9 14			lda #$14
 15554 89A3 8D AD A0			sta BLITBOX.H
 15555 89A6 20 58 3A			jsr BLITBOX
 15556
 15557 89A9			@exit
 15558 					.ifdef @new
 15559 					lda <@VarData
 15560 					sta :ztmp
 15561 					lda >@VarData
 15562 					ldy #@VarDataSize-1
 15563 					jmp @FreeMem
 15564 					els
 15565 89A9 60				rts						; ret
 15566 					eif
 15567 				.endl
 15568
 15569 89AA			.local	CHECK_FLUX					; PROCEDURE
 15570
 15571 				; optimize OK (service.pas), line = 3059
 15572
 15573 89AA AD 96 A0			lda SCRFLUXCNT
 15574 89AD 8D 7B A2			sta FX
 15575
 15576 				; optimize OK (service.pas), line = 3061
 15577
 15578 89B0 AD 95 A0			lda SCRFLUX
 15579 89B3 D0 03 4C 46 8A		jeq l_2FED
 15580
 15581 				; optimize OK (service.pas), line = 3064
 15582
 15583 89B8 A9 00			lda #$00
 15584 89BA 8D 7A A2			sta Y
 15585
 15586 89BD			l_2FF7
 15587 				; --- ForToDoCondition
 15588 89BD AC 7A A2			ldy Y
 15589 89C0 C0 14			cpy #$14
 15590 89C2 B0 73			jcs l_3005
 15591
 15592 				; optimize OK (service.pas), line = 3066
 15593
 15594 89C4 A9 D9			lda #$D9
 15595 89C6 79 B0 C0			adc adr.ROW+$B0,y
 15596 89C9 8D C2 A0			sta BLITROW.DST
 15597 89CC A9 50			lda #$50
 15598 89CE 79 B0 C1			adc adr.ROW+256+$B0,y
 15599 89D1 8D C3 A0			sta BLITROW.DST+1
 15600 89D4 A9 00			lda #$00
 15601 89D6 69 00			adc #$00
 15602 89D8 8D C4 A0			sta BLITROW.DST+2
 15603 89DB A9 00			lda #$00
 15604 89DD 69 00			adc #$00
 15605 89DF 8D C5 A0			sta BLITROW.DST+3
 15606 89E2 AD 7A A2			lda Y
 15607 89E5 18 6D 7B A2			add FX
 15608 89E9 85 A2			sta :STACKORIGIN+12
 15609 89EB A9 00			lda #$00
 15610 89ED 69 00			adc #$00
 15611 89EF 85 B2			sta :STACKORIGIN+STACKWIDTH+12
 15612 89F1 A9 00			lda #$00
 15613 89F3 06 A2			asl :STACKORIGIN+12
 15614 89F5 26 B2			rol :STACKORIGIN+STACKWIDTH+12
 15615 89F7 2A				rol @
 15616 89F8 06 A2			asl :STACKORIGIN+12
 15617 89FA 26 B2			rol :STACKORIGIN+STACKWIDTH+12
 15618 89FC 2A				rol @
 15619 89FD 06 A2			asl :STACKORIGIN+12
 15620 89FF 26 B2			rol :STACKORIGIN+STACKWIDTH+12
 15621 8A01 2A				rol @
 15622 8A02 85 C2			sta :STACKORIGIN+STACKWIDTH*2+12
 15623 8A04 AD 15 A0			lda FLUX.OFS
 15624 8A07 18 65 A2			add :STACKORIGIN+12
 15625 8A0A 8D BE A0			sta BLITROW.SRC
 15626 8A0D AD 16 A0			lda FLUX.OFS+1
 15627 8A10 65 B2			adc :STACKORIGIN+STACKWIDTH+12
 15628 8A12 8D BF A0			sta BLITROW.SRC+1
 15629 8A15 AD 17 A0			lda FLUX.OFS+2
 15630 8A18 65 C2			adc :STACKORIGIN+STACKWIDTH*2+12
 15631 8A1A 8D C0 A0			sta BLITROW.SRC+2
 15632 8A1D AD 18 A0			lda FLUX.OFS+3
 15633 8A20 69 00			adc #$00
 15634 8A22 8D C1 A0			sta BLITROW.SRC+3
 15635 8A25 A9 08			lda #$08
 15636 8A27 8D C6 A0			sta BLITROW.SIZE
 15637 8A2A A9 00			lda #$00
 15638 8A2C 8D C7 A0			sta BLITROW.SIZE+1
 15639 8A2F 20 90 3B			jsr BLITROW
 15640
 15641 				; --- ForToDoEpilog
 15642 8A32 EE 7A A2			inc Y
 15643 8A35 D0 86			jne l_2FF7
 15644 8A37			l_3005
 15645
 15646 				; optimize FAIL (0, service.pas), line = 3068
 15647
 15648 8A37 EE 96 A0			inc SCRFLUXCNT
 15649
 15650 				; optimize OK (service.pas), line = 3069
 15651
 15652 8A3A AD 96 A0			lda SCRFLUXCNT
 15653 8A3D C9 15			cmp #$15
 15654 8A3F 90 05			jcc l_3044
 15655 8A41 A9 00			lda #$00
 15656 8A43 8D 96 A0			sta SCRFLUXCNT
 15657 8A46			l_3044
 15658 8A46			l_2FED
 15659
 15660 				; ------------------------------------------------------------
 15661
 15662 = A27A			Y	= DATAORIGIN+$03D5
 15663 = A27B			FX	= DATAORIGIN+$03D6
 15664
 15665 = A27A			@VarData	= Y
 15666 = 0002			@VarDataSize	= 2
 15667
 15668 8A46			@exit
 15669 					.ifdef @new
 15670 					lda <@VarData
 15671 					sta :ztmp
 15672 					lda >@VarData
 15673 					ldy #@VarDataSize-1
 15674 					jmp @FreeMem
 15675 					els
 15676 8A46 60				rts						; ret
 15677 					eif
 15678 				.endl
 15679
 15680 8A47			.local	VAUS_OUT					; PROCEDURE
 15681
 15682 				; optimize FAIL ('NOSOUND', service.pas), line = 3077
 15683
 15684 8A47 20 52 3C			jsr NOSOUND
 15685
 15686 				; optimize OK (service.pas), line = 3079
 15687
 15688 8A4A AD 75 A0			lda CUR_PLAYER
 15689 8A4D 0A				asl @
 15690 8A4E 0A				asl @
 15691 8A4F A8				tay
 15692 8A50 B9 5A A0			lda adr.SCORE.PLAYER,y
 15693 8A53 18 69 10			add #$10
 15694 8A56 99 5A A0			sta adr.SCORE.PLAYER,y
 15695 8A59 B9 5B A0			lda adr.SCORE.PLAYER+1,y
 15696 8A5C 69 27			adc #$27
 15697 8A5E 99 5B A0			sta adr.SCORE.PLAYER+1,y
 15698 8A61 B9 5C A0			lda adr.SCORE.PLAYER+2,y
 15699 8A64 69 00			adc #$00
 15700 8A66 99 5C A0			sta adr.SCORE.PLAYER+2,y
 15701 8A69 B9 5D A0			lda adr.SCORE.PLAYER+3,y
 15702 8A6C 69 00			adc #$00
 15703 8A6E 99 5D A0			sta adr.SCORE.PLAYER+3,y
 15704
 15705 				; optimize OK (service.pas), line = 3080
 15706
 15707 8A71 A9 00			lda #$00
 15708 8A73 8D 58 A0			sta REMAIN_BLK
 15709
 15710 				; optimize OK (service.pas), line = 3082
 15711
 15712 8A76 AD 19 A0			lda VAUS.X
 15713 8A79 8D 80 A2			sta Z
 15714 8A7C A9 00			lda #$00
 15715 8A7E 8D 81 A2			sta Z+1
 15716
 15717 				; optimize FAIL ('WAIT_VBL', service.pas), line = 3084
 15718
 15719 8A81 20 E6 43			jsr WAIT_VBL
 15720
 15721 				; optimize FAIL ('REMOVE_VAUS', service.pas), line = 3085
 15722
 15723 8A84 20 BE 51			jsr REMOVE_VAUS
 15724
 15725 				; optimize FAIL ('PLACE_VAUS', service.pas), line = 3086
 15726
 15727 8A87 20 35 52			jsr PLACE_VAUS
 15728
 15729 				; optimize OK (service.pas), line = 3088
 15730
 15731 8A8A AD 80 A2			lda Z
 15732 8A8D 8D 7C A2			sta X
 15733 8A90 AD 81 A2			lda Z+1
 15734 8A93 8D 7D A2			sta X+1
 15735 8A96 AD 80 A2			lda Z
 15736 8A99 18 69 2C			add #$2C
 15737 8A9C 8D AF 8A			sta @FORTMP_306F_0
 15738 8A9F AD 81 A2			lda Z+1
 15739 8AA2 69 00			adc #$00
 15740 8AA4 8D A8 8A			sta @FORTMP_306F_1
 15741
 15742 8AA7			l_3072
 15743 				; --- ForToDoCondition
 15744 8AA7 A9 00			lda @FORTMP_306F_1::#$00
 15745 8AA9 CD 7D A2			cmp X+1
 15746 8AAC D0 05			bne @+
 15747 8AAE A9 00			lda @FORTMP_306F_0::#$00
 15748 8AB0 CD 7C A2			cmp X
 15749 				@
 15750 8AB3 B0 03 4C 4C 8B		jcc l_307E
 15751
 15752 				; optimize FAIL ('WAIT_VBL', service.pas), line = 3090
 15753
 15754 8AB8 20 E6 43			jsr WAIT_VBL
 15755
 15756 				; optimize OK (service.pas), line = 3092
 15757
 15758 8ABB AD 19 A0			lda VAUS.X
 15759 8ABE 8D 1B A0			sta VAUS.OLDX
 15760 8AC1 A9 00			lda #$00
 15761 8AC3 8D 1C A0			sta VAUS.OLDX+1
 15762
 15763 				; optimize OK (service.pas), line = 3093
 15764
 15765 8AC6 AD 7C A2			lda X
 15766 8AC9 8D 19 A0			sta VAUS.X
 15767
 15768 				; optimize FAIL ('REMOVE_VAUS', service.pas), line = 3094
 15769
 15770 8ACC 20 BE 51			jsr REMOVE_VAUS
 15771
 15772 				; optimize FAIL ('CHECK_FLUX', service.pas), line = 3095
 15773
 15774 8ACF 20 AA 89			jsr CHECK_FLUX
 15775
 15776 				; optimize FAIL ('PLACE_VAUS', service.pas), line = 3096
 15777
 15778 8AD2 20 35 52			jsr PLACE_VAUS
 15779
 15780 				; optimize OK (service.pas), line = 3098
 15781
 15782 8AD5 AC 1A A0			ldy VAUS.Y
 15783 8AD8 B9 00 C0			lda adr.ROW,y
 15784 8ADB 18 69 E1			add #$E1
 15785 8ADE 8D 98 A0			sta HLP
 15786 8AE1 B9 00 C1			lda adr.ROW+256,y
 15787 8AE4 69 00			adc #$00
 15788 8AE6 8D 99 A0			sta HLP+1
 15789
 15790 				; optimize OK (service.pas), line = 3100
 15791
 15792 8AE9 AD 98 A0			lda HLP
 15793 8AEC 8D A7 A0			sta BLITBOX.DST
 15794 8AEF A9 50			lda #$50
 15795 8AF1 18 6D 99 A0			add HLP+1
 15796 8AF5 8D A8 A0			sta BLITBOX.DST+1
 15797 8AF8 A9 00			lda #$00
 15798 8AFA 69 00			adc #$00
 15799 8AFC 8D A9 A0			sta BLITBOX.DST+2
 15800 8AFF A9 00			lda #$00
 15801 8B01 69 00			adc #$00
 15802 8B03 8D AA A0			sta BLITBOX.DST+3
 15803 8B06 AD A5 9F			lda PLAYSCREEN.OFS
 15804 8B09 18 6D 98 A0			add HLP
 15805 8B0D 8D A3 A0			sta BLITBOX.SRC
 15806 8B10 AD A6 9F			lda PLAYSCREEN.OFS+1
 15807 8B13 6D 99 A0			adc HLP+1
 15808 8B16 8D A4 A0			sta BLITBOX.SRC+1
 15809 8B19 AD A7 9F			lda PLAYSCREEN.OFS+2
 15810 8B1C 69 00			adc #$00
 15811 8B1E 8D A5 A0			sta BLITBOX.SRC+2
 15812 8B21 AD A8 9F			lda PLAYSCREEN.OFS+3
 15813 8B24 69 00			adc #$00
 15814 8B26 8D A6 A0			sta BLITBOX.SRC+3
 15815 8B29 A9 28			lda #$28
 15816 8B2B 8D AB A0			sta BLITBOX.W
 15817 8B2E A9 00			lda #$00
 15818 8B30 8D AC A0			sta BLITBOX.W+1
 15819 8B33 AD 22 A0			lda VAUS.HEIGHT
 15820 8B36 8D AD A0			sta BLITBOX.H
 15821 8B39 20 58 3A			jsr BLITBOX
 15822
 15823 				; --- ForToDoEpilog
 15824 8B3C EE 7C A2			inc X
 15825 8B3F F0 03 4C A7 8A		jne l_3072
 15826 8B44 EE 7D A2			inc X+1
 15827 8B47 F0 03 4C A7 8A		jne l_3072
 15828 8B4C			l_307E
 15829
 15830 				; ------------------------------------------------------------
 15831
 15832 = A27C			X	= DATAORIGIN+$03D7
 15833 = A27E			Y	= DATAORIGIN+$03D9
 15834 = A280			Z	= DATAORIGIN+$03DB
 15835
 15836 = A27C			@VarData	= X
 15837 = 0006			@VarDataSize	= 6
 15838
 15839 8B4C			@exit
 15840 					.ifdef @new
 15841 					lda <@VarData
 15842 					sta :ztmp
 15843 					lda >@VarData
 15844 					ldy #@VarDataSize-1
 15845 					jmp @FreeMem
 15846 					els
 15847 8B4C 60				rts						; ret
 15848 					eif
 15849 				.endl
 15850
 15851 8B4D			.local	CHECK_BONUS_TYPE				; PROCEDURE
 15852
 15853 				; optimize OK (service.pas), line = 3115
 15854
 15855 8B4D AD 25 A0			lda VAUS.LETTER
 15856 8B50 10 03 4C 03 8C		jmi l_30C5
 15857 8B55 D0 03 4C 03 8C		jeq l_30C5
 15858
 15859 				; optimize OK (service.pas), line = 3117
 15860
 15861 8B5A A0 00			ldy #$00
 15862 8B5C AD 25 A0			lda VAUS.LETTER
 15863 8B5F 10 01			spl
 15864 8B61 88				dey
 15865 8B62 38 E9 01			sub #$01
 15866 8B65 8D 8D A0			sta LETT.LAST
 15867 8B68 98				tya
 15868 8B69 E9 00			sbc #$00
 15869 8B6B 8D 8E A0			sta LETT.LAST+1
 15870
 15871 				; optimize OK (service.pas), line = 3118
 15872
 15873 8B6E AC 88 A2 84 84 AC + 	mwy B2 :bp2
 15874 8B78 A0 17			ldy #B2.INPLAY-DATAORIGIN
 15875 8B7A B1 84			lda (:bp2),y
 15876 8B7C F0 0F			jeq l_30DC
 15877 8B7E AD 88 A2			lda B2
 15878 8B81 8D 14 A1			sta REMOVE_BALL.BALL
 15879 8B84 AD 89 A2			lda B2+1
 15880 8B87 8D 15 A1			sta REMOVE_BALL.BALL+1
 15881 8B8A 20 60 43			jsr REMOVE_BALL
 15882 8B8D			l_30DC
 15883
 15884 				; optimize OK (service.pas), line = 3119
 15885
 15886 8B8D AC 8C A2 84 84 AC + 	mwy B3 :bp2
 15887 8B97 A0 17			ldy #B3.INPLAY-DATAORIGIN
 15888 8B99 B1 84			lda (:bp2),y
 15889 8B9B F0 0F			jeq l_30EE
 15890 8B9D AD 8C A2			lda B3
 15891 8BA0 8D 14 A1			sta REMOVE_BALL.BALL
 15892 8BA3 AD 8D A2			lda B3+1
 15893 8BA6 8D 15 A1			sta REMOVE_BALL.BALL+1
 15894 8BA9 20 60 43			jsr REMOVE_BALL
 15895 8BAC			l_30EE
 15896
 15897 				; optimize OK (service.pas), line = 3120
 15898
 15899 8BAC AC 88 A2 84 84 AC + 	mwy B2 :bp2
 15900 8BB6 A0 17			ldy #B2.INPLAY-DATAORIGIN
 15901 8BB8 A9 00			lda #$00
 15902 8BBA 91 84			sta (:bp2),y
 15903
 15904 				; optimize OK (service.pas), line = 3121
 15905
 15906 8BBC AC 8C A2 84 84 AC + 	mwy B3 :bp2
 15907 8BC6 A0 17			ldy #B3.INPLAY-DATAORIGIN
 15908 8BC8 91 84			sta (:bp2),y
 15909
 15910 				; optimize OK (service.pas), line = 3122
 15911
 15912 8BCA 8D 95 A0			sta SCRFLUX
 15913
 15914 				; optimize FAIL ('REMOVE_FLUX', service.pas), line = 3123
 15915
 15916 8BCD 20 46 89			jsr REMOVE_FLUX
 15917
 15918 				; optimize OK (service.pas), line = 3125
 15919
 15920 8BD0 AD 25 A0			lda VAUS.LETTER
 15921 8BD3 C9 06			cmp #$06
 15922 8BD5 F0 2C			jeq l_3113
 15923
 15924 				; optimize OK (service.pas), line = 3127
 15925
 15926 8BD7 AC 84 A2 84 84 AC + 	mwy B1 :bp2
 15927 8BE1 A0 18			ldy #B1.LAUNCH-DATAORIGIN
 15928 8BE3 A9 00			lda #$00
 15929 8BE5 91 84			sta (:bp2),y
 15930
 15931 				; optimize OK (service.pas), line = 3128
 15932
 15933 8BE7 AC 88 A2 84 84 AC + 	mwy B2 :bp2
 15934 8BF1 A0 18			ldy #B2.LAUNCH-DATAORIGIN
 15935 8BF3 91 84			sta (:bp2),y
 15936
 15937 				; optimize OK (service.pas), line = 3129
 15938
 15939 8BF5 AC 8C A2 84 84 AC + 	mwy B3 :bp2
 15940 8BFF A0 18			ldy #B3.LAUNCH-DATAORIGIN
 15941 8C01 91 84			sta (:bp2),y
 15942 8C03			l_3113
 15943 8C03			l_30C5
 15944
 15945 				; optimize OK (service.pas), line = 3133
 15946
 15947 8C03 AD 25 A0			lda VAUS.LETTER
 15948 8C06 8D 92 A2			sta @CASETMP_000A
 15949 8C09 C9 01			cmp #$01
 15950 8C0B D0 4D			jne l_312F
 15951 				@
 15952
 15953 				; optimize OK (service.pas), line = 3136
 15954
 15955 8C0D AD 91 A0			lda FIRE.SHOT
 15956 8C10 F0 03			jeq l_313B
 15957 8C12 20 78 87			jsr REMOVE_FIRE
 15958 8C15			l_313B
 15959
 15960 				; optimize OK (service.pas), line = 3137
 15961
 15962 8C15 AD C1 9F 8D A9 9F + 	:8 mva adr.LASERS+# adr.PLAYVAUS+#
 15963
 15964 				; optimize FAIL ('MODIFY_VAUS', service.pas), line = 3138
 15965
 15966 8C45 20 5E 51			jsr MODIFY_VAUS
 15967
 15968 				; optimize OK (service.pas), line = 3139
 15969
 15970 8C48 A9 00			lda #$00
 15971 8C4A 8D 25 A0			sta VAUS.LETTER
 15972
 15973 				; optimize OK (service.pas), line = 3140
 15974
 15975 8C4D A9 01			lda #$01
 15976 8C4F 8D 92 A0			sta FIRE.AVL
 15977
 15978 				; optimize OK (service.pas), line = 3141
 15979
 15980 8C52 A9 00			lda #$00
 15981 8C54 8D 91 A0			sta FIRE.SHOT
 15982 8C57 4C 88 8E			jmp a_000A
 15983 8C5A			l_312F
 15984 8C5A C9 02			cmp #$02
 15985 8C5C D0 46			jne l_3155
 15986
 15987 				; optimize OK (service.pas), line = 3145
 15988
 15989 8C5E AD 91 A0			lda FIRE.SHOT
 15990 8C61 F0 03			jeq l_3161
 15991 8C63 20 78 87			jsr REMOVE_FIRE
 15992 8C66			l_3161
 15993
 15994 				; optimize OK (service.pas), line = 3146
 15995
 15996 8C66 AD B9 9F 8D A9 9F + 	:8 mva adr.ENLARGED+# adr.PLAYVAUS+#
 15997
 15998 				; optimize FAIL ('MODIFY_VAUS', service.pas), line = 3147
 15999
 16000 8C96 20 5E 51			jsr MODIFY_VAUS
 16001
 16002 				; optimize OK (service.pas), line = 3148
 16003
 16004 8C99 A9 00			lda #$00
 16005 8C9B 8D 25 A0			sta VAUS.LETTER
 16006
 16007 				; optimize OK (service.pas), line = 3149
 16008
 16009 8C9E 8D 92 A0			sta FIRE.AVL
 16010 8CA1 4C 88 8E			jmp a_000A
 16011 8CA4			l_3155
 16012 8CA4 C9 03			cmp #$03
 16013 8CA6 D0 4B			jne l_3177
 16014
 16015 				; optimize OK (service.pas), line = 3153
 16016
 16017 8CA8 AD 91 A0			lda FIRE.SHOT
 16018 8CAB F0 03			jeq l_3183
 16019 8CAD 20 78 87			jsr REMOVE_FIRE
 16020 8CB0			l_3183
 16021
 16022 				; optimize OK (service.pas), line = 3154
 16023
 16024 8CB0 AD B1 9F 8D A9 9F + 	:8 mva adr.NORMAL+# adr.PLAYVAUS+#
 16025
 16026 				; optimize FAIL ('MODIFY_VAUS', service.pas), line = 3155
 16027
 16028 8CE0 20 5E 51			jsr MODIFY_VAUS
 16029
 16030 				; optimize OK (service.pas), line = 3156
 16031
 16032 8CE3 A9 00			lda #$00
 16033 8CE5 8D 25 A0			sta VAUS.LETTER
 16034
 16035 				; optimize OK (service.pas), line = 3157
 16036
 16037 8CE8 8D 92 A0			sta FIRE.AVL
 16038
 16039 				; optimize OK (service.pas), line = 3158
 16040
 16041 8CEB A9 01			lda #$01
 16042 8CED 8D 95 A0			sta SCRFLUX
 16043 8CF0 4C 88 8E			jmp a_000A
 16044 8CF3			l_3177
 16045 8CF3 C9 04			cmp #$04
 16046 8CF5 D0 3E			jne l_319D
 16047
 16048 				; optimize OK (service.pas), line = 3162
 16049
 16050 8CF7 AD 91 A0			lda FIRE.SHOT
 16051 8CFA F0 03			jeq l_31A9
 16052 8CFC 20 78 87			jsr REMOVE_FIRE
 16053 8CFF			l_31A9
 16054
 16055 				; optimize OK (service.pas), line = 3163
 16056
 16057 8CFF AD B1 9F 8D A9 9F + 	:8 mva adr.NORMAL+# adr.PLAYVAUS+#
 16058
 16059 				; optimize FAIL ('MODIFY_VAUS', service.pas), line = 3164
 16060
 16061 8D2F 20 5E 51			jsr MODIFY_VAUS
 16062 				; optimize OK (service.pas), line = 3165
 16063 8D32 4C CC 8D			jmp s_31E6
 16064 8D35			l_319D
 16065 8D35 C9 05			cmp #$05
 16066 8D37 F0 03 4C CF 8D		jne l_31BB
 16067
 16068 				; optimize OK (service.pas), line = 3169
 16069
 16070 8D3C AD 91 A0			lda FIRE.SHOT
 16071 8D3F F0 03			jeq l_31C7
 16072 8D41 20 78 87			jsr REMOVE_FIRE
 16073 8D44			l_31C7
 16074
 16075 				; optimize OK (service.pas), line = 3170
 16076
 16077 8D44 AD B1 9F 8D A9 9F + 	:8 mva adr.NORMAL+# adr.PLAYVAUS+#
 16078
 16079 				; optimize FAIL ('MODIFY_VAUS', service.pas), line = 3171
 16080
 16081 8D74 20 5E 51			jsr MODIFY_VAUS
 16082
 16083 				; optimize OK (service.pas), line = 3172
 16084
 16085 8D77 A9 00			lda #$00
 16086 8D79 8D 25 A0			sta VAUS.LETTER
 16087
 16088 				; optimize OK (service.pas), line = 3173
 16089
 16090 8D7C AC 84 A2 84 84 AC + 	mwy B1 :bp2
 16091 8D86 A0 0C			ldy #B1.SPEED-DATAORIGIN
 16092 8D88 B1 84			lda (:bp2),y
 16093 8D8A 38 E9 F4			sub #$F4
 16094 8D8D 8D D4 A0			sta MAX.A
 16095 8D90 C8				iny
 16096 8D91 B1 84			lda (:bp2),y
 16097 8D93 E9 01			sbc #$01
 16098 8D95 8D D5 A0			sta MAX.A+1
 16099 8D98 A9 F4			lda #$F4
 16100 8D9A 8D D6 A0			sta MAX.B
 16101 8D9D A9 01			lda #$01
 16102 8D9F 8D D7 A0			sta MAX.B+1
 16103 8DA2 20 54 3C			jsr MAX
 16104 8DA5 AD D8 A0			lda MAX.RESULT
 16105 8DA8 8D 90 A2			sta X
 16106 8DAB AD D9 A0			lda MAX.RESULT+1
 16107 8DAE 8D 91 A2			sta X+1
 16108
 16109 				; optimize OK (service.pas), line = 3174
 16110
 16111 8DB1 AD 84 A2			lda B1
 16112 8DB4 8D 1E A1			sta SET_BALL_SPEED.BALL
 16113 8DB7 AD 85 A2			lda B1+1
 16114 8DBA 8D 1F A1			sta SET_BALL_SPEED.BALL+1
 16115 8DBD AD 90 A2			lda X
 16116 8DC0 8D 22 A1			sta SET_BALL_SPEED.SPEED
 16117 8DC3 AD 91 A2			lda X+1
 16118 8DC6 8D 23 A1			sta SET_BALL_SPEED.SPEED+1
 16119 8DC9 20 C3 44			jsr SET_BALL_SPEED
 16120 8DCC			s_31E6
 16121 				; optimize OK (service.pas), line = 3175
 16122 8DCC 4C 0E 8E			jmp s_3204
 16123 8DCF			l_31BB
 16124 8DCF C9 06			cmp #$06
 16125 8DD1 D0 3E			jne l_31ED
 16126
 16127 				; optimize OK (service.pas), line = 3179
 16128
 16129 8DD3 AD 91 A0			lda FIRE.SHOT
 16130 8DD6 F0 03			jeq l_31F9
 16131 8DD8 20 78 87			jsr REMOVE_FIRE
 16132 8DDB			l_31F9
 16133
 16134 				; optimize OK (service.pas), line = 3180
 16135
 16136 8DDB AD B1 9F 8D A9 9F + 	:8 mva adr.NORMAL+# adr.PLAYVAUS+#
 16137
 16138 				; optimize FAIL ('MODIFY_VAUS', service.pas), line = 3181
 16139
 16140 8E0B 20 5E 51			jsr MODIFY_VAUS
 16141 8E0E			s_3204
 16142 				; optimize OK (service.pas), line = 3182
 16143 8E0E 4C 83 8E			jmp s_3234
 16144 8E11			l_31ED
 16145 8E11 C9 07			cmp #$07
 16146 8E13 D0 73			jne l_320B
 16147
 16148 				; optimize OK (service.pas), line = 3186
 16149
 16150 8E15 AD 91 A0			lda FIRE.SHOT
 16151 8E18 F0 03			jeq l_3217
 16152 8E1A 20 78 87			jsr REMOVE_FIRE
 16153 8E1D			l_3217
 16154
 16155 				; optimize OK (service.pas), line = 3187
 16156
 16157 8E1D AD B1 9F 8D A9 9F + 	:8 mva adr.NORMAL+# adr.PLAYVAUS+#
 16158
 16159 				; optimize FAIL ('MODIFY_VAUS', service.pas), line = 3188
 16160
 16161 8E4D 20 5E 51			jsr MODIFY_VAUS
 16162
 16163 				; optimize OK (service.pas), line = 3189
 16164
 16165 8E50 A9 00			lda #$00
 16166 8E52 8D 25 A0			sta VAUS.LETTER
 16167
 16168 				; optimize OK (service.pas), line = 3190
 16169
 16170 8E55 AC 75 A0			ldy CUR_PLAYER
 16171 8E58 B9 69 A0			lda adr.SCORE.LIVES,y
 16172 8E5B 18 69 01			add #$01
 16173 8E5E 99 69 A0			sta adr.SCORE.LIVES,y
 16174
 16175 				; optimize OK (service.pas), line = 3191
 16176
 16177 8E61 8D 61 A2			sta PLOT_LIVES.LIVES
 16178 8E64 A9 00			lda #$00
 16179 8E66 8D 62 A2			sta PLOT_LIVES.LIVES+1
 16180 8E69 20 47 84			jsr PLOT_LIVES
 16181
 16182 				; optimize OK (service.pas), line = 3192
 16183
 16184 8E6C A9 D0			lda #$D0
 16185 8E6E 8D 7F 9F			sta BALL_BLOCK_SOUND.A
 16186 8E71 A9 07			lda #$07
 16187 8E73 8D 80 9F			sta BALL_BLOCK_SOUND.A+1
 16188 8E76 A9 0A			lda #$0A
 16189 8E78 8D 81 9F			sta BALL_BLOCK_SOUND.B
 16190 8E7B A9 00			lda #$00
 16191 8E7D 8D 82 9F			sta BALL_BLOCK_SOUND.B+1
 16192 8E80 20 3F 38			jsr BALL_BLOCK_SOUND
 16193 8E83			s_3234
 16194
 16195 				; optimize OK (service.pas), line = 3193
 16196
 16197 8E83 A9 00			lda #$00
 16198 8E85 8D 92 A0			sta FIRE.AVL
 16199 8E88			l_320B
 16200 8E88			a_000A
 16201
 16202 				; ------------------------------------------------------------
 16203
 16204 = A284			B1	= DATAORIGIN+$03DF
 16205 = 9EA5			B1.X	= DATAORIGIN+$0000
 16206 = 9EA7			B1.Y	= DATAORIGIN+$0002
 16207 = 9EA9			B1.FINEX	= DATAORIGIN+$0004
 16208 = 9EAB			B1.FINEY	= DATAORIGIN+$0006
 16209 = 9EAD			B1.OLDX	= DATAORIGIN+$0008
 16210 = 9EAF			B1.OLDY	= DATAORIGIN+$000A
 16211 = 9EB1			B1.SPEED	= DATAORIGIN+$000C
 16212 = 9EB3			B1.FINESPEED	= DATAORIGIN+$000E
 16213 = 9EB5			B1.SPEEDX	= DATAORIGIN+$0010
 16214 = 9EB7			B1.SPEEDY	= DATAORIGIN+$0012
 16215 = 9EB9			B1.SBD	= DATAORIGIN+$0014
 16216 = 9EBB			B1.BRWHIT	= DATAORIGIN+$0016
 16217 = 9EBC			B1.INPLAY	= DATAORIGIN+$0017
 16218 = 9EBD			B1.LAUNCH	= DATAORIGIN+$0018
 16219 = 9EBE			B1.ONVAUS	= DATAORIGIN+$0019
 16220 = 9EC0			B1.STM	= DATAORIGIN+$001B
 16221 = A288			B2	= DATAORIGIN+$03E3
 16222 = 9EA5			B2.X	= DATAORIGIN+$0000
 16223 = 9EA7			B2.Y	= DATAORIGIN+$0002
 16224 = 9EA9			B2.FINEX	= DATAORIGIN+$0004
 16225 = 9EAB			B2.FINEY	= DATAORIGIN+$0006
 16226 = 9EAD			B2.OLDX	= DATAORIGIN+$0008
 16227 = 9EAF			B2.OLDY	= DATAORIGIN+$000A
 16228 = 9EB1			B2.SPEED	= DATAORIGIN+$000C
 16229 = 9EB3			B2.FINESPEED	= DATAORIGIN+$000E
 16230 = 9EB5			B2.SPEEDX	= DATAORIGIN+$0010
 16231 = 9EB7			B2.SPEEDY	= DATAORIGIN+$0012
 16232 = 9EB9			B2.SBD	= DATAORIGIN+$0014
 16233 = 9EBB			B2.BRWHIT	= DATAORIGIN+$0016
 16234 = 9EBC			B2.INPLAY	= DATAORIGIN+$0017
 16235 = 9EBD			B2.LAUNCH	= DATAORIGIN+$0018
 16236 = 9EBE			B2.ONVAUS	= DATAORIGIN+$0019
 16237 = 9EC0			B2.STM	= DATAORIGIN+$001B
 16238 = A28C			B3	= DATAORIGIN+$03E7
 16239 = 9EA5			B3.X	= DATAORIGIN+$0000
 16240 = 9EA7			B3.Y	= DATAORIGIN+$0002
 16241 = 9EA9			B3.FINEX	= DATAORIGIN+$0004
 16242 = 9EAB			B3.FINEY	= DATAORIGIN+$0006
 16243 = 9EAD			B3.OLDX	= DATAORIGIN+$0008
 16244 = 9EAF			B3.OLDY	= DATAORIGIN+$000A
 16245 = 9EB1			B3.SPEED	= DATAORIGIN+$000C
 16246 = 9EB3			B3.FINESPEED	= DATAORIGIN+$000E
 16247 = 9EB5			B3.SPEEDX	= DATAORIGIN+$0010
 16248 = 9EB7			B3.SPEEDY	= DATAORIGIN+$0012
 16249 = 9EB9			B3.SBD	= DATAORIGIN+$0014
 16250 = 9EBB			B3.BRWHIT	= DATAORIGIN+$0016
 16251 = 9EBC			B3.INPLAY	= DATAORIGIN+$0017
 16252 = 9EBD			B3.LAUNCH	= DATAORIGIN+$0018
 16253 = 9EBE			B3.ONVAUS	= DATAORIGIN+$0019
 16254 = 9EC0			B3.STM	= DATAORIGIN+$001B
 16255 = A290			X	= DATAORIGIN+$03EB
 16256 = A292			@CASETMP_000A	= DATAORIGIN+$03ED
 16257
 16258 = A284			@VarData	= B1
 16259 = 0009			@VarDataSize	= 9
 16260
 16261 8E88			@exit
 16262 					.ifdef @new
 16263 					lda <@VarData
 16264 					sta :ztmp
 16265 					lda >@VarData
 16266 					ldy #@VarDataSize-1
 16267 					jmp @FreeMem
 16268 					els
 16269 8E88 60				rts						; ret
 16270 					eif
 16271 				.endl
 16272
 16273 8E89			.local	DEVIATE_BALL					; PROCEDURE
 16274
 16275 				; --- RepeatUntilProlog
 16276 8E89			l_3242
 16277
 16278 				; optimize OK (service.pas), line = 3206
 16279
 16280 8E89 AD 93 A2			lda BALL
 16281 8E8C 8D 3E A1			sta GET_BALL_DIRECTION.BALL
 16282 8E8F AD 94 A2			lda BALL+1
 16283 8E92 8D 3F A1			sta GET_BALL_DIRECTION.BALL+1
 16284 8E95 20 89 48			jsr GET_BALL_DIRECTION
 16285 8E98 E8				inx
 16286 8E99 AD 42 A1 95 96		mva GET_BALL_DIRECTION.RESULT :STACKORIGIN,x
 16287 8E9E AD 43 A1 95 A6		mva GET_BALL_DIRECTION.RESULT+1 :STACKORIGIN+STACKWIDTH,x
 16288 8EA3 A9 1E			lda #$1E
 16289 8EA5 20 03 33			jsr SYSTEM.RANDOM.@010180000
 16290 8EA8 E8				inx
 16291 8EA9 AD DC 9E 95 96		mva SYSTEM.RANDOM.@010180000.RESULT :STACKORIGIN,x
 16292 8EAE A9 00 95 A6			mva #$00 :STACKORIGIN+STACKWIDTH,x
 16293 8EB2 20 B5 20			jsr addAX_CX
 16294 8EB5 B5 95			lda :STACKORIGIN-1,x
 16295 8EB7 38 E9 0F			sub #$0F
 16296 8EBA 8D 97 A2			sta TEMP
 16297 8EBD B5 A5			lda :STACKORIGIN-1+STACKWIDTH,x
 16298 8EBF E9 00			sbc #$00
 16299 8EC1 8D 98 A2			sta TEMP+1
 16300 8EC4 CA				dex
 16301 8EC5 CA				dex
 16302
 16303 				; optimize OK (service.pas), line = 3207
 16304
 16305 8EC6 A9 5A			lda #$5A
 16306 8EC8 85 8E			sta @SMALLINT.MOD.B
 16307 8ECA A9 00			lda #$00
 16308 8ECC 85 8F			sta @SMALLINT.MOD.B+1
 16309 8ECE AD 97 A2			lda TEMP
 16310 8ED1 85 86			sta @SMALLINT.MOD.A
 16311 8ED3 AD 98 A2			lda TEMP+1
 16312 8ED6 85 87			sta @SMALLINT.MOD.A+1
 16313 8ED8 20 50 22			jsr @SMALLINT.MOD
 16314 8EDB A5 92			lda @SMALLINT.MOD.RESULT
 16315 8EDD C9 1F			cmp #$1F
 16316 8EDF A5 93			lda @SMALLINT.MOD.RESULT+1
 16317 8EE1 E9 00			sbc #$00
 16318 8EE3 50 02			svc
 16319 8EE5 49 80			eor #$80
 16320 8EE7 30 A0			jmi l_3242
 16321 8EE9 A9 5A			lda #$5A
 16322 8EEB 85 8E			sta @SMALLINT.MOD.B
 16323 8EED A9 00			lda #$00
 16324 8EEF 85 8F			sta @SMALLINT.MOD.B+1
 16325 8EF1 AD 97 A2			lda TEMP
 16326 8EF4 85 86			sta @SMALLINT.MOD.A
 16327 8EF6 AD 98 A2			lda TEMP+1
 16328 8EF9 85 87			sta @SMALLINT.MOD.A+1
 16329 8EFB 20 50 22			jsr @SMALLINT.MOD
 16330 8EFE A5 92			lda @SMALLINT.MOD.RESULT
 16331 8F00 C9 3C			cmp #$3C
 16332 8F02 A5 93			lda @SMALLINT.MOD.RESULT+1
 16333 8F04 E9 00			sbc #$00
 16334 8F06 50 02			svc
 16335 8F08 49 80			eor #$80
 16336 8F0A 30 03 4C 89 8E		jpl l_3242
 16337
 16338 				; optimize OK (service.pas), line = 3209
 16339
 16340 8F0F AD 93 A2			lda BALL
 16341 8F12 8D 34 A1			sta SET_BALL_DIRECTION.BALL
 16342 8F15 AD 94 A2			lda BALL+1
 16343 8F18 8D 35 A1			sta SET_BALL_DIRECTION.BALL+1
 16344 8F1B AD 97 A2			lda TEMP
 16345 8F1E 8D 38 A1			sta SET_BALL_DIRECTION.ANGLE
 16346 8F21 AD 98 A2			lda TEMP+1
 16347 8F24 8D 39 A1			sta SET_BALL_DIRECTION.ANGLE+1
 16348 8F27 20 A6 46			jsr SET_BALL_DIRECTION
 16349
 16350 				; optimize OK (service.pas), line = 3210
 16351
 16352 8F2A AC 93 A2 84 84 AC + 	mwy BALL :bp2
 16353 8F34 A0 0C			ldy #BALL.SPEED-DATAORIGIN
 16354 8F36 B1 84			lda (:bp2),y
 16355 8F38 8D 22 A1			sta SET_BALL_SPEED.SPEED
 16356 8F3B C8				iny
 16357 8F3C B1 84			lda (:bp2),y
 16358 8F3E 8D 23 A1			sta SET_BALL_SPEED.SPEED+1
 16359 8F41 AD 93 A2			lda BALL
 16360 8F44 8D 1E A1			sta SET_BALL_SPEED.BALL
 16361 8F47 AD 94 A2			lda BALL+1
 16362 8F4A 8D 1F A1			sta SET_BALL_SPEED.BALL+1
 16363 8F4D 20 C3 44			jsr SET_BALL_SPEED
 16364
 16365 				; optimize OK (service.pas), line = 3211
 16366
 16367 8F50 AC 93 A2 84 84 AC + 	mwy BALL :bp2
 16368 8F5A A0 14			ldy #BALL.SBD-DATAORIGIN
 16369 8F5C A9 00			lda #$00
 16370 8F5E 91 84			sta (:bp2),y
 16371 8F60 C8				iny
 16372 8F61 91 84			sta (:bp2),y
 16373
 16374 				; ------------------------------------------------------------
 16375
 16376 = A293			BALL	= DATAORIGIN+$03EE
 16377 = 9EA5			BALL.X	= DATAORIGIN+$0000
 16378 = 9EA7			BALL.Y	= DATAORIGIN+$0002
 16379 = 9EA9			BALL.FINEX	= DATAORIGIN+$0004
 16380 = 9EAB			BALL.FINEY	= DATAORIGIN+$0006
 16381 = 9EAD			BALL.OLDX	= DATAORIGIN+$0008
 16382 = 9EAF			BALL.OLDY	= DATAORIGIN+$000A
 16383 = 9EB1			BALL.SPEED	= DATAORIGIN+$000C
 16384 = 9EB3			BALL.FINESPEED	= DATAORIGIN+$000E
 16385 = 9EB5			BALL.SPEEDX	= DATAORIGIN+$0010
 16386 = 9EB7			BALL.SPEEDY	= DATAORIGIN+$0012
 16387 = 9EB9			BALL.SBD	= DATAORIGIN+$0014
 16388 = 9EBB			BALL.BRWHIT	= DATAORIGIN+$0016
 16389 = 9EBC			BALL.INPLAY	= DATAORIGIN+$0017
 16390 = 9EBD			BALL.LAUNCH	= DATAORIGIN+$0018
 16391 = 9EBE			BALL.ONVAUS	= DATAORIGIN+$0019
 16392 = 9EC0			BALL.STM	= DATAORIGIN+$001B
 16393 = A297			TEMP	= DATAORIGIN+$03F2
 16394
 16395 = A293			@VarData	= BALL
 16396 = 0004			@VarDataSize	= 4
 16397
 16398 8F63			@exit
 16399 					.ifdef @new
 16400 					lda <@VarData
 16401 					sta :ztmp
 16402 					lda >@VarData
 16403 					ldy #@VarDataSize-1
 16404 					jmp @FreeMem
 16405 					els
 16406 8F63 60				rts						; ret
 16407 					eif
 16408 				.endl
 16409
 16410 8F64			.local	BOUNCEBALL					; FUNCTION
 16411
 16412 8F64 4C D9 90			jmp l_3282
 16413
 16414 8F67			.local	CHECK_BALL					; PROCEDURE
 16415
 16416 				; optimize OK (service.pas), line = 3241
 16417
 16418 8F67 AC FB A2 84 84 AC + 	mwy BALL :bp2
 16419 8F71 A0 17			ldy #BALL.INPLAY-DATAORIGIN
 16420 8F73 B1 84			lda (:bp2),y
 16421 8F75 F0 65			jeq l_3291
 16422
 16423 				; optimize OK (service.pas), line = 3244
 16424
 16425 8F77 A0 02			ldy #BALL.Y-DATAORIGIN
 16426 8F79 B1 84			lda (:bp2),y
 16427 8F7B C8				iny
 16428 8F7C C9 16			cmp #$16
 16429 8F7E B1 84			lda (:bp2),y
 16430 8F80 E9 00			sbc #$00
 16431 8F82 50 02			svc
 16432 8F84 49 80			eor #$80
 16433 8F86 30 20			jmi l_32AE
 16434 8F88 A0 02			ldy #BALL.Y-DATAORIGIN
 16435 8F8A B1 84			lda (:bp2),y
 16436 8F8C C8				iny
 16437 8F8D C9 8E			cmp #$8E
 16438 8F8F B1 84			lda (:bp2),y
 16439 8F91 E9 00			sbc #$00
 16440 8F93 50 02			svc
 16441 8F95 49 80			eor #$80
 16442 8F97 10 0F			jpl l_32AE
 16443
 16444 				; optimize OK (service.pas), line = 3245
 16445
 16446 8F99 AD FB A2			lda BALL
 16447 8F9C 8D DF A1			sta BALL_HIT_BLOCK.BALL
 16448 8F9F AD FC A2			lda BALL+1
 16449 8FA2 8D E0 A1			sta BALL_HIT_BLOCK.BALL+1
 16450 8FA5 20 80 68			jsr BALL_HIT_BLOCK
 16451 8FA8			l_32AE
 16452
 16453 				; optimize OK (service.pas), line = 3247
 16454
 16455 8FA8 AD FB A2			lda BALL
 16456 8FAB 8D 18 A1			sta SET_BALL.BALL
 16457 8FAE AD FC A2			lda BALL+1
 16458 8FB1 8D 19 A1			sta SET_BALL.BALL+1
 16459 8FB4 20 EA 43			jsr SET_BALL
 16460
 16461 				; optimize FAIL ('BALL_SPEED', service.pas), line = 3248
 16462
 16463 8FB7 E8				inx
 16464 8FB8 AD FB A2 95 96		mva BALL :STACKORIGIN,x
 16465 8FBD AD FC A2 95 A6		mva BALL+1 :STACKORIGIN+STACKWIDTH,x
 16466 8FC2 20 02 4B			jsr BALL_SPEED
 16467 8FC5 AC FB A2 84 84 AC + 	mwy BALL :bp2
 16468 8FCF A0 0C			ldy #BALL.SPEED-DATAORIGIN
 16469 8FD1 AD 66 A1			lda BALL_SPEED.RESULT
 16470 8FD4 91 84			sta (:bp2),y
 16471 8FD6 C8				iny
 16472 8FD7 AD 67 A1			lda BALL_SPEED.RESULT+1
 16473 8FDA 91 84			sta (:bp2),y
 16474 8FDC			l_3291
 16475
 16476 				; ------------------------------------------------------------
 16477
 16478 = A2FB			BALL	= DATAORIGIN+$0456
 16479 = 9EA5			BALL.X	= DATAORIGIN+$0000
 16480 = 9EA7			BALL.Y	= DATAORIGIN+$0002
 16481 = 9EA9			BALL.FINEX	= DATAORIGIN+$0004
 16482 = 9EAB			BALL.FINEY	= DATAORIGIN+$0006
 16483 = 9EAD			BALL.OLDX	= DATAORIGIN+$0008
 16484 = 9EAF			BALL.OLDY	= DATAORIGIN+$000A
 16485 = 9EB1			BALL.SPEED	= DATAORIGIN+$000C
 16486 = 9EB3			BALL.FINESPEED	= DATAORIGIN+$000E
 16487 = 9EB5			BALL.SPEEDX	= DATAORIGIN+$0010
 16488 = 9EB7			BALL.SPEEDY	= DATAORIGIN+$0012
 16489 = 9EB9			BALL.SBD	= DATAORIGIN+$0014
 16490 = 9EBB			BALL.BRWHIT	= DATAORIGIN+$0016
 16491 = 9EBC			BALL.INPLAY	= DATAORIGIN+$0017
 16492 = 9EBD			BALL.LAUNCH	= DATAORIGIN+$0018
 16493 = 9EBE			BALL.ONVAUS	= DATAORIGIN+$0019
 16494 = 9EC0			BALL.STM	= DATAORIGIN+$001B
 16495
 16496 = A2FB			@VarData	= BALL
 16497 = 0002			@VarDataSize	= 2
 16498
 16499 8FDC			@exit
 16500 					.ifdef @new
 16501 					lda <@VarData
 16502 					sta :ztmp
 16503 					lda >@VarData
 16504 					ldy #@VarDataSize-1
 16505 					jmp @FreeMem
 16506 					els
 16507 8FDC 60				rts						; ret
 16508 					eif
 16509 				.endl
 16510
 16511 8FDD			.local	TEST_BALL					; PROCEDURE
 16512
 16513 				; optimize OK (service.pas), line = 3256
 16514
 16515 8FDD AC FF A2 84 84 AC + 	mwy BALL :bp2
 16516 8FE7 A0 17			ldy #BALL.INPLAY-DATAORIGIN
 16517 8FE9 B1 84			lda (:bp2),y
 16518 8FEB D0 03 4C D8 90		jeq l_32CF
 16519
 16520 				; optimize OK (service.pas), line = 3258
 16521
 16522 8FF0 A0 0E			ldy #BALL.FINESPEED-DATAORIGIN
 16523 8FF2 B1 84			lda (:bp2),y
 16524 8FF4 18 69 01			add #$01
 16525 8FF7 91 84			sta (:bp2),y
 16526 8FF9 C8				iny
 16527 8FFA B1 84			lda (:bp2),y
 16528 8FFC 69 00			adc #$00
 16529 8FFE 91 84			sta (:bp2),y
 16530
 16531 				; optimize OK (service.pas), line = 3260
 16532
 16533 9000 A0 0E			ldy #BALL.FINESPEED-DATAORIGIN
 16534 9002 B1 84			lda (:bp2),y
 16535 9004 85 9F			sta :STACKORIGIN+9
 16536 9006 C8				iny
 16537 9007 B1 84			lda (:bp2),y
 16538 9009 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 16539 900B AD 7B A0			lda LV
 16540 900E 0A				asl @
 16541 900F A8				tay
 16542 9010 B9 A1 20			lda adr.LEVEL,y
 16543 9013 85 A0			sta :STACKORIGIN+10
 16544 9015 B9 A2 20			lda adr.LEVEL+1,y
 16545 9018 85 B0			sta :STACKORIGIN+STACKWIDTH+10
 16546 901A A0 00			ldy #$00
 16547 901C A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 16548 901E 10 01			spl
 16549 9020 88				dey
 16550 9021 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 16551 9023 84 BF			sty :STACKORIGIN+STACKWIDTH*2+9
 16552 9025 84 CF			sty :STACKORIGIN+STACKWIDTH*3+9
 16553 9027				.LOCAL
 16554 9027 A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
 16555 9029 38 E9 00			sub #$00
 16556 902C D0 1C			bne L4
 16557 902E A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
 16558 9030 C9 00			cmp #$00
 16559 9032 D0 0A			bne L1
 16560 9034 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 16561 9036 C5 B0			cmp :STACKORIGIN+STACKWIDTH+10
 16562 9038 D0 04			bne L1
 16563 903A A5 9F			lda :STACKORIGIN+9
 16564 903C C5 A0			cmp :STACKORIGIN+10
 16565 903E F0 10		L1	beq L5
 16566 9040 B0 04			bcs L3
 16567 9042 A9 FF			lda #$FF
 16568 9044 D0 0A			bne L5
 16569 9046 A9 01		L3	lda #$01
 16570 9048 D0 06			bne L5
 16571 904A 50 04		L4	bvc L5
 16572 904C 49 FF			eor #$FF
 16573 904E 09 01			ora #$01
 16574 9050			L5
 16575 					.ENDL
 16576 9050 30 48			jmi l_32E5
 16577 9052 F0 46			jeq l_32E5
 16578
 16579 				; optimize OK (service.pas), line = 3262
 16580
 16581 9054 A0 0E			ldy #BALL.FINESPEED-DATAORIGIN
 16582 9056 A9 00			lda #$00
 16583 9058 91 84			sta (:bp2),y
 16584 905A C8				iny
 16585 905B 91 84			sta (:bp2),y
 16586
 16587 				; optimize OK (service.pas), line = 3265
 16588
 16589 905D A0 0C			ldy #BALL.SPEED-DATAORIGIN
 16590 905F B1 84			lda (:bp2),y
 16591 9061 C8				iny
 16592 9062 C9 D0			cmp #$D0
 16593 9064 B1 84			lda (:bp2),y
 16594 9066 E9 07			sbc #$07
 16595 9068 50 02			svc
 16596 906A 49 80			eor #$80
 16597 906C 10 2C			jpl l_32FB
 16598
 16599 				; optimize OK (service.pas), line = 3267
 16600
 16601 906E A0 0C			ldy #BALL.SPEED-DATAORIGIN
 16602 9070 B1 84			lda (:bp2),y
 16603 9072 18 69 0A			add #$0A
 16604 9075 91 84			sta (:bp2),y
 16605 9077 C8				iny
 16606 9078 B1 84			lda (:bp2),y
 16607 907A 69 00			adc #$00
 16608 907C 91 84			sta (:bp2),y
 16609
 16610 				; optimize OK (service.pas), line = 3268
 16611
 16612 907E A0 0C			ldy #BALL.SPEED-DATAORIGIN
 16613 9080 B1 84			lda (:bp2),y
 16614 9082 8D 22 A1			sta SET_BALL_SPEED.SPEED
 16615 9085 C8				iny
 16616 9086 B1 84			lda (:bp2),y
 16617 9088 8D 23 A1			sta SET_BALL_SPEED.SPEED+1
 16618 908B AD FF A2			lda BALL
 16619 908E 8D 1E A1			sta SET_BALL_SPEED.BALL
 16620 9091 AD 00 A3			lda BALL+1
 16621 9094 8D 1F A1			sta SET_BALL_SPEED.BALL+1
 16622 9097 20 C3 44			jsr SET_BALL_SPEED
 16623 909A			l_32FB
 16624 909A			l_32E5
 16625
 16626 				; optimize OK (service.pas), line = 3272
 16627
 16628 909A AC FF A2 84 84 AC + 	mwy BALL :bp2
 16629 90A4 A0 14			ldy #BALL.SBD-DATAORIGIN
 16630 90A6 B1 84			lda (:bp2),y
 16631 90A8 18 69 01			add #$01
 16632 90AB 91 84			sta (:bp2),y
 16633 90AD C8				iny
 16634 90AE B1 84			lda (:bp2),y
 16635 90B0 69 00			adc #$00
 16636 90B2 91 84			sta (:bp2),y
 16637
 16638 				; optimize OK (service.pas), line = 3276
 16639
 16640 90B4 A0 15			ldy #BALL.SBD-DATAORIGIN+$01
 16641 90B6 B1 84			lda (:bp2),y
 16642 90B8 C9 02			cmp #$02
 16643 90BA D0 05			bne @+
 16644 90BC 88				dey
 16645 90BD B1 84			lda (:bp2),y
 16646 90BF C9 58			cmp #$58
 16647 				@
 16648 90C1 90 15			jcc l_3323
 16649 				@
 16650 90C3 A0 00			ldy #$00
 16651 90C5 B1 84			lda (:bp2),y
 16652 90C7 10 0F			jpl l_3323
 16653 				@
 16654
 16655 				; optimize OK (service.pas), line = 3277
 16656
 16657 90C9 AD FF A2			lda BALL
 16658 90CC 8D 93 A2			sta DEVIATE_BALL.BALL
 16659 90CF AD 00 A3			lda BALL+1
 16660 90D2 8D 94 A2			sta DEVIATE_BALL.BALL+1
 16661 90D5 20 89 8E			jsr DEVIATE_BALL
 16662 90D8			l_3323
 16663 90D8			l_32CF
 16664
 16665 				; ------------------------------------------------------------
 16666
 16667 = A2FF			BALL	= DATAORIGIN+$045A
 16668 = 9EA5			BALL.X	= DATAORIGIN+$0000
 16669 = 9EA7			BALL.Y	= DATAORIGIN+$0002
 16670 = 9EA9			BALL.FINEX	= DATAORIGIN+$0004
 16671 = 9EAB			BALL.FINEY	= DATAORIGIN+$0006
 16672 = 9EAD			BALL.OLDX	= DATAORIGIN+$0008
 16673 = 9EAF			BALL.OLDY	= DATAORIGIN+$000A
 16674 = 9EB1			BALL.SPEED	= DATAORIGIN+$000C
 16675 = 9EB3			BALL.FINESPEED	= DATAORIGIN+$000E
 16676 = 9EB5			BALL.SPEEDX	= DATAORIGIN+$0010
 16677 = 9EB7			BALL.SPEEDY	= DATAORIGIN+$0012
 16678 = 9EB9			BALL.SBD	= DATAORIGIN+$0014
 16679 = 9EBB			BALL.BRWHIT	= DATAORIGIN+$0016
 16680 = 9EBC			BALL.INPLAY	= DATAORIGIN+$0017
 16681 = 9EBD			BALL.LAUNCH	= DATAORIGIN+$0018
 16682 = 9EBE			BALL.ONVAUS	= DATAORIGIN+$0019
 16683 = 9EC0			BALL.STM	= DATAORIGIN+$001B
 16684
 16685 = A2FF			@VarData	= BALL
 16686 = 0002			@VarDataSize	= 2
 16687
 16688 90D8			@exit
 16689 					.ifdef @new
 16690 					lda <@VarData
 16691 					sta :ztmp
 16692 					lda >@VarData
 16693 					ldy #@VarDataSize-1
 16694 					jmp @FreeMem
 16695 					els
 16696 90D8 60				rts						; ret
 16697 					eif
 16698 				.endl
 16699 90D9			l_3282
 16700
 16701 				; optimize OK (service.pas), line = 3285
 16702
 16703 90D9 A9 00			lda #$00
 16704 90DB 8D 96 A0			sta SCRFLUXCNT
 16705
 16706 				; optimize OK (service.pas), line = 3286
 16707
 16708 90DE 8D 95 A0			sta SCRFLUX
 16709
 16710 				; optimize OK (service.pas), line = 3288
 16711
 16712 90E1 A9 01			lda #$01
 16713 90E3 8D 94 A0			sta BALLS_IN_PLAY
 16714
 16715 				; optimize OK (service.pas), line = 3290
 16716
 16717 90E6 A9 00			lda #$00
 16718 90E8 8D 92 A0			sta FIRE.AVL
 16719
 16720 				; optimize OK (service.pas), line = 3291
 16721
 16722 90EB AD B1 9F 8D A9 9F + 	:8 mva adr.NORMAL+# adr.PLAYVAUS+#
 16723
 16724 				; optimize OK (service.pas), line = 3293
 16725
 16726 911B A9 FF			lda #$FF
 16727 911D 8D 8D A0			sta LETT.LAST
 16728 9120 8D 8E A0			sta LETT.LAST+1
 16729
 16730 				; optimize OK (service.pas), line = 3294
 16731
 16732 9123 A9 00			lda #$00
 16733 9125 8D 84 A0			sta LETT.ACTIVE
 16734
 16735 				; optimize OK (service.pas), line = 3297
 16736
 16737 9128 AD 6F 9E			lda PATTERN
 16738 912B 8D 0F A2			sta FILL_PICTURE_WITH_PATTERN.PATT
 16739 912E AD 70 9E			lda PATTERN+1
 16740 9131 8D 10 A2			sta FILL_PICTURE_WITH_PATTERN.PATT+1
 16741 9134 20 37 77			jsr FILL_PICTURE_WITH_PATTERN
 16742
 16743 				; optimize FAIL ('SHOWBTMPICTURE', service.pas), line = 3300
 16744
 16745 9137 E8				inx
 16746 9138 AD 4F 9E 95 96		mva PLAYSCREEN :STACKORIGIN,x
 16747 913D AD 50 9E 95 A6		mva PLAYSCREEN+1 :STACKORIGIN+STACKWIDTH,x
 16748 9142 20 90 42			jsr SHOWBTMPICTURE
 16749
 16750 				; optimize OK (service.pas), line = 3304
 16751
 16752 9145 AC 75 A0			ldy CUR_PLAYER
 16753 9148 B9 69 A0			lda adr.SCORE.LIVES,y
 16754 914B 8D 61 A2			sta PLOT_LIVES.LIVES
 16755 914E A9 00			lda #$00
 16756 9150 8D 62 A2			sta PLOT_LIVES.LIVES+1
 16757 9153 20 47 84			jsr PLOT_LIVES
 16758
 16759 				; optimize OK (service.pas), line = 3310
 16760
 16761 9156 AD 5E A0			lda adr.SCORE.PLAYER+$04
 16762 9159 8D 58 A2			sta WRITE_SCORE.SC
 16763 915C AD 5F A0			lda adr.SCORE.PLAYER+1+$04
 16764 915F 8D 59 A2			sta WRITE_SCORE.SC+1
 16765 9162 AD 60 A0			lda adr.SCORE.PLAYER+2+$04
 16766 9165 8D 5A A2			sta WRITE_SCORE.SC+2
 16767 9168 AD 61 A0			lda adr.SCORE.PLAYER+3+$04
 16768 916B 8D 5B A2			sta WRITE_SCORE.SC+3
 16769 916E A9 FD			lda #$FD
 16770 9170 8D 54 A2			sta WRITE_SCORE.PX
 16771 9173 A9 00			lda #$00
 16772 9175 8D 55 A2			sta WRITE_SCORE.PX+1
 16773 9178 A9 3C			lda #$3C
 16774 917A 8D 56 A2			sta WRITE_SCORE.PY
 16775 917D A9 00			lda #$00
 16776 917F 8D 57 A2			sta WRITE_SCORE.PY+1
 16777 9182 20 E9 80			jsr WRITE_SCORE
 16778
 16779 				; optimize OK (service.pas), line = 3311
 16780
 16781 9185 AD 62 A0			lda adr.SCORE.PLAYER+$08
 16782 9188 8D 58 A2			sta WRITE_SCORE.SC
 16783 918B AD 63 A0			lda adr.SCORE.PLAYER+1+$08
 16784 918E 8D 59 A2			sta WRITE_SCORE.SC+1
 16785 9191 AD 64 A0			lda adr.SCORE.PLAYER+2+$08
 16786 9194 8D 5A A2			sta WRITE_SCORE.SC+2
 16787 9197 AD 65 A0			lda adr.SCORE.PLAYER+3+$08
 16788 919A 8D 5B A2			sta WRITE_SCORE.SC+3
 16789 919D A9 FD			lda #$FD
 16790 919F 8D 54 A2			sta WRITE_SCORE.PX
 16791 91A2 A9 00			lda #$00
 16792 91A4 8D 55 A2			sta WRITE_SCORE.PX+1
 16793 91A7 A9 5D			lda #$5D
 16794 91A9 8D 56 A2			sta WRITE_SCORE.PY
 16795 91AC A9 00			lda #$00
 16796 91AE 8D 57 A2			sta WRITE_SCORE.PY+1
 16797 91B1 20 E9 80			jsr WRITE_SCORE
 16798
 16799 				; optimize OK (service.pas), line = 3312
 16800
 16801 91B4 A9 FD			lda #$FD
 16802 91B6 8D 54 A2			sta WRITE_SCORE.PX
 16803 91B9 A9 00			lda #$00
 16804 91BB 8D 55 A2			sta WRITE_SCORE.PX+1
 16805 91BE A9 80			lda #$80
 16806 91C0 8D 56 A2			sta WRITE_SCORE.PY
 16807 91C3 A9 00			lda #$00
 16808 91C5 8D 57 A2			sta WRITE_SCORE.PY+1
 16809 91C8 AD 6C A0			lda SCORE.HISCORE
 16810 91CB 8D 58 A2			sta WRITE_SCORE.SC
 16811 91CE AD 6D A0			lda SCORE.HISCORE+1
 16812 91D1 8D 59 A2			sta WRITE_SCORE.SC+1
 16813 91D4 AD 6E A0			lda SCORE.HISCORE+2
 16814 91D7 8D 5A A2			sta WRITE_SCORE.SC+2
 16815 91DA AD 6F A0			lda SCORE.HISCORE+3
 16816 91DD 8D 5B A2			sta WRITE_SCORE.SC+3
 16817 91E0 20 E9 80			jsr WRITE_SCORE
 16818
 16819 				; optimize FAIL ('PUT_WALL', service.pas), line = 3315
 16820
 16821 91E3 20 AD 5B			jsr PUT_WALL
 16822
 16823 				; optimize OK (service.pas), line = 3322
 16824
 16825 91E6 A9 01			lda #$01
 16826 91E8 8D BE A2			sta BALL0.INPLAY
 16827
 16828 				; optimize OK (service.pas), line = 3323
 16829
 16830 91EB 8D BF A2			sta BALL0.LAUNCH
 16831
 16832 				; optimize OK (service.pas), line = 3326
 16833
 16834 91EE A9 6F			lda #$6F
 16835 91F0 8D A7 A2			sta BALL0.X
 16836 91F3 A9 00			lda #$00
 16837 91F5 8D A8 A2			sta BALL0.X+1
 16838
 16839 				; optimize OK (service.pas), line = 3327
 16840
 16841 91F8 A9 B5			lda #$B5
 16842 91FA 8D A9 A2			sta BALL0.Y
 16843 91FD A9 00			lda #$00
 16844 91FF 8D AA A2			sta BALL0.Y+1
 16845
 16846 				; optimize OK (service.pas), line = 3330
 16847
 16848 9202 A9 FF			lda #$FF
 16849 9204 8D AF A2			sta BALL0.OLDX
 16850 9207 8D B0 A2			sta BALL0.OLDX+1
 16851
 16852 				; optimize OK (service.pas), line = 3331
 16853
 16854 920A 8D B1 A2			sta BALL0.OLDY
 16855 920D 8D B2 A2			sta BALL0.OLDY+1
 16856
 16857 				; optimize OK (service.pas), line = 3334
 16858
 16859 9210 A9 00			lda #$00
 16860 9212 8D BB A2			sta BALL0.SBD
 16861 9215 8D BC A2			sta BALL0.SBD+1
 16862
 16863 				; optimize OK (service.pas), line = 3338
 16864
 16865 9218 A9 10			lda #$10
 16866 921A 8D C0 A2			sta BALL0.ONVAUS
 16867 921D A9 00			lda #$00
 16868 921F 8D C1 A2			sta BALL0.ONVAUS+1
 16869
 16870 				; optimize OK (service.pas), line = 3343
 16871
 16872 9222 8D C2 A2			sta BALL0.STM
 16873
 16874 				; optimize OK (service.pas), line = 3347
 16875
 16876 9225 A9 E8			lda #$E8
 16877 9227 8D DD 9E			sta SYSTEM.RANDOM.@010184000.RANGE
 16878 922A A9 03			lda #$03
 16879 922C 8D DE 9E			sta SYSTEM.RANDOM.@010184000.RANGE+1
 16880 922F 20 1A 33			jsr SYSTEM.RANDOM.@010184000
 16881 9232 AD DF 9E			lda SYSTEM.RANDOM.@010184000.RESULT
 16882 9235 8D 85 A0			sta LETT.INCOMING
 16883 9238 AD E0 9E			lda SYSTEM.RANDOM.@010184000.RESULT+1
 16884 923B 8D 86 A0			sta LETT.INCOMING+1
 16885
 16886 				; optimize FAIL ('CREATE_VAUS', service.pas), line = 3350
 16887
 16888 923E 20 AB 7B			jsr CREATE_VAUS
 16889
 16890 				; optimize FAIL ('WRITE_ROUND_LEVEL', service.pas), line = 3353
 16891
 16892 9241 20 C7 78			jsr WRITE_ROUND_LEVEL
 16893
 16894 				; optimize FAIL ('SET_VAUS', service.pas), line = 3355
 16895
 16896 9244 20 76 51			jsr SET_VAUS
 16897
 16898 				; optimize FAIL ('START_VAUS', service.pas), line = 3356
 16899
 16900 9247 20 B3 51			jsr START_VAUS
 16901
 16902 				; optimize OK (service.pas), line = 3357
 16903
 16904 924A AD 19 A0			lda VAUS.X
 16905 924D 8D 7F A1			sta MOVE_VAUS.X
 16906 9250 A9 00			lda #$00
 16907 9252 8D 80 A1			sta MOVE_VAUS.X+1
 16908 9255 A9 B8			lda #$B8
 16909 9257 8D 81 A1			sta MOVE_VAUS.Y
 16910 925A A9 00			lda #$00
 16911 925C 8D 82 A1			sta MOVE_VAUS.Y+1
 16912 925F 20 A9 53			jsr MOVE_VAUS
 16913
 16914 				; optimize FAIL ('START_LEVEL', service.pas), line = 3358
 16915
 16916 9262 20 3D 38			jsr START_LEVEL
 16917
 16918 				; optimize FAIL ('START_VAUS', service.pas), line = 3359
 16919
 16920 9265 20 B3 51			jsr START_VAUS
 16921
 16922 				; optimize FAIL ('REMOVE_ROUND_LEVEL', service.pas), line = 3360
 16923
 16924 9268 20 C8 78			jsr REMOVE_ROUND_LEVEL
 16925
 16926 				; optimize OK (service.pas), line = 3361
 16927
 16928 926B AD 6C 97			lda BALL0
 16929 926E 8D 18 A1			sta SET_BALL.BALL
 16930 9271 AD 6D 97			lda BALL0+1
 16931 9274 8D 19 A1			sta SET_BALL.BALL+1
 16932 9277 20 EA 43			jsr SET_BALL
 16933
 16934 				; optimize OK (service.pas), line = 3368
 16935
 16936 927A A9 0F			lda #$0F
 16937 927C 20 03 33			jsr SYSTEM.RANDOM.@010180000
 16938 927F E8				inx
 16939 9280 E8				inx
 16940 9281 AD DC 9E			lda SYSTEM.RANDOM.@010180000.RESULT
 16941 9284 18 69 3C			add #$3C
 16942 9287 95 95			sta :STACKORIGIN-1,x
 16943 9289 A9 00			lda #$00
 16944 928B 69 00			adc #$00
 16945 928D 95 A5			sta :STACKORIGIN-1+STACKWIDTH,x
 16946 928F AD 6C 97			lda BALL0
 16947 9292 8D 34 A1			sta SET_BALL_DIRECTION.BALL
 16948 9295 AD 6D 97			lda BALL0+1
 16949 9298 8D 35 A1			sta SET_BALL_DIRECTION.BALL+1
 16950 929B CA				dex
 16951 929C B5 96			lda :STACKORIGIN,x
 16952 929E 8D 38 A1			sta SET_BALL_DIRECTION.ANGLE
 16953 92A1 B5 A6			lda :STACKORIGIN+STACKWIDTH,x
 16954 92A3 8D 39 A1			sta SET_BALL_DIRECTION.ANGLE+1
 16955 92A6 CA				dex
 16956 92A7 20 A6 46			jsr SET_BALL_DIRECTION
 16957
 16958 				; optimize OK (service.pas), line = 3370
 16959
 16960 92AA AD 6C 97			lda BALL0
 16961 92AD 8D 1E A1			sta SET_BALL_SPEED.BALL
 16962 92B0 AD 6D 97			lda BALL0+1
 16963 92B3 8D 1F A1			sta SET_BALL_SPEED.BALL+1
 16964 92B6 A9 F4			lda #$F4
 16965 92B8 8D 22 A1			sta SET_BALL_SPEED.SPEED
 16966 92BB A9 01			lda #$01
 16967 92BD 8D 23 A1			sta SET_BALL_SPEED.SPEED+1
 16968 92C0 20 C3 44			jsr SET_BALL_SPEED
 16969
 16970 				; optimize OK (service.pas), line = 3373
 16971
 16972 92C3 A9 00			lda #$00
 16973 92C5 8D B5 A2			sta BALL0.FINESPEED
 16974 92C8 8D B6 A2			sta BALL0.FINESPEED+1
 16975
 16976 				; optimize OK (service.pas), line = 3375
 16977
 16978 92CB 8D DA A2			sta BALL1.INPLAY
 16979
 16980 				; optimize OK (service.pas), line = 3376
 16981
 16982 92CE 8D F6 A2			sta BALL2.INPLAY
 16983
 16984 				; optimize OK (service.pas), line = 3378
 16985
 16986 92D1 AD 19 A0			lda VAUS.X
 16987 92D4 8D 9A A2			sta X
 16988 92D7 A9 00			lda #$00
 16989 92D9 8D 9B A2			sta X+1
 16990
 16991 				; --- WhileProlog
 16992 92DC 4C 4A 97			jmp l_33BB
 16993 92DF			l_33BC
 16994
 16995 				; optimize FAIL ('WAIT_VBL', service.pas), line = 3382
 16996
 16997 92DF 20 E6 43			jsr WAIT_VBL
 16998
 16999 				; optimize OK (service.pas), line = 3391
 17000
 17001 92E2 A9 9A			lda <X
 17002 92E4 8D 9E A0			sta MOUSECOORDS.X
 17003 92E7 A9 A2			lda >X
 17004 92E9 8D 9F A0			sta MOUSECOORDS.X+1
 17005 92EC 20 CE 39			jsr MOUSECOORDS
 17006
 17007 				; optimize OK (service.pas), line = 3396
 17008
 17009 92EF AD 7D A0			lda TRAINER
 17010 92F2 D0 19			jne l_33D1
 17011 92F4 AD 9A A2			lda X
 17012 92F7 8D 7F A1			sta MOVE_VAUS.X
 17013 92FA AD 9B A2			lda X+1
 17014 92FD 8D 80 A1			sta MOVE_VAUS.X+1
 17015 9300 A9 B8			lda #$B8
 17016 9302 8D 81 A1			sta MOVE_VAUS.Y
 17017 9305 A9 00			lda #$00
 17018 9307 8D 82 A1			sta MOVE_VAUS.Y+1
 17019 930A 4C 77 93			jmp l_33DF
 17020 930D			l_33D1
 17021
 17022 				; optimize OK (service.pas), line = 3402
 17023
 17024 930D AD 7D A0			lda TRAINER
 17025 9310 C9 01			cmp #$01
 17026 9312 D0 66			jne l_33F1
 17027
 17028 				; optimize FAIL (1, service.pas), line = 3403
 17029
 17030 9314 E8				inx
 17031 9315 A9 B8 95 96			mva #$B8 :STACKORIGIN,x
 17032 9319 A9 00 95 A6			mva #$00 :STACKORIGIN+STACKWIDTH,x
 17033 931D E8				inx
 17034 931E A9 0A 95 96			mva #$0A :STACKORIGIN,x
 17035 9322 A9 00 95 A6			mva #$00 :STACKORIGIN+STACKWIDTH,x
 17036 9326 AD A7 A2			lda BALL0.X
 17037 9329 38 ED C0 A2			sub BALL0.ONVAUS
 17038 932D 8D D4 A0			sta MAX.A
 17039 9330 AD A8 A2			lda BALL0.X+1
 17040 9333 ED C1 A2			sbc BALL0.ONVAUS+1
 17041 9336 8D D5 A0			sta MAX.A+1
 17042 9339 B5 96			lda :STACKORIGIN,x
 17043 933B 8D D6 A0			sta MAX.B
 17044 933E B5 A6			lda :STACKORIGIN+STACKWIDTH,x
 17045 9340 8D D7 A0			sta MAX.B+1
 17046 9343 CA				dex
 17047 9344 20 54 3C			jsr MAX
 17048 9347 A9 B8			lda #$B8
 17049 9349 8D DA A0			sta MIN.A
 17050 934C A9 00			lda #$00
 17051 934E 8D DB A0			sta MIN.A+1
 17052 9351 AD D8 A0			lda MAX.RESULT
 17053 9354 8D DC A0			sta MIN.B
 17054 9357 AD D9 A0			lda MAX.RESULT+1
 17055 935A 8D DD A0			sta MIN.B+1
 17056 935D 20 7F 3C			jsr MIN
 17057 9360 AD DE A0			lda MIN.RESULT
 17058 9363 8D 7F A1			sta MOVE_VAUS.X
 17059 9366 AD DF A0			lda MIN.RESULT+1
 17060 9369 8D 80 A1			sta MOVE_VAUS.X+1
 17061 936C B5 96			lda :STACKORIGIN,x
 17062 936E 8D 81 A1			sta MOVE_VAUS.Y
 17063 9371 B5 A6			lda :STACKORIGIN+STACKWIDTH,x
 17064 9373 8D 82 A1			sta MOVE_VAUS.Y+1
 17065 9376 CA				dex
 17066 9377			l_33DF
 17067 9377 20 A9 53			jsr MOVE_VAUS
 17068 937A			l_33F1
 17069
 17070 				; optimize OK (service.pas), line = 3408
 17071
 17072 937A AD BF A2			lda BALL0.LAUNCH
 17073 937D C9 01			cmp #$01
 17074 937F D0 30			jne l_3413
 17075
 17076 				; optimize FAIL (0, service.pas), line = 3410
 17077
 17078 9381 EE C2 A2			inc BALL0.STM
 17079
 17080 				; optimize OK (service.pas), line = 3415
 17081
 17082 9384 AD C2 A2			lda BALL0.STM
 17083 9387 C9 FA			cmp #$FA
 17084 9389 D0 05			jne l_342A
 17085 938B A9 00			lda #$00
 17086 938D 8D BF A2			sta BALL0.LAUNCH
 17087 9390			l_342A
 17088
 17089 				; optimize OK (service.pas), line = 3418
 17090
 17091 9390 AD 6C 97			lda BALL0
 17092 9393 8D 46 A1			sta START_BALL.BALL
 17093 9396 AD 6D 97			lda BALL0+1
 17094 9399 8D 47 A1			sta START_BALL.BALL+1
 17095 939C 20 A7 4A			jsr START_BALL
 17096
 17097 				; optimize FAIL ('MOUSECLICK', service.pas), line = 3421
 17098
 17099 939F 20 4F 3A			jsr MOUSECLICK
 17100 93A2 AD A2 A0			lda MOUSECLICK.RESULT
 17101 93A5 C9 01			cmp #$01
 17102 93A7 D0 05			jne l_3444
 17103 93A9 A9 00			lda #$00
 17104 93AB 8D BF A2			sta BALL0.LAUNCH
 17105 93AE			l_3444
 17106 93AE 4C ED 93			jmp l_3454
 17107 93B1			l_3413
 17108
 17109 				; optimize OK (service.pas), line = 3429
 17110
 17111 93B1 AD BE A2			lda BALL0.INPLAY
 17112 93B4 F0 0F			jeq l_3460
 17113 93B6 AD 6C 97			lda BALL0
 17114 93B9 8D 70 A1			sta MOVE_BALL.BALL
 17115 93BC AD 6D 97			lda BALL0+1
 17116 93BF 8D 71 A1			sta MOVE_BALL.BALL+1
 17117 93C2 20 BC 4B			jsr MOVE_BALL
 17118 93C5			l_3460
 17119
 17120 				; optimize OK (service.pas), line = 3430
 17121
 17122 93C5 AD DA A2			lda BALL1.INPLAY
 17123 93C8 F0 0F			jeq l_3472
 17124 93CA AD 6E 97			lda BALL1
 17125 93CD 8D 70 A1			sta MOVE_BALL.BALL
 17126 93D0 AD 6F 97			lda BALL1+1
 17127 93D3 8D 71 A1			sta MOVE_BALL.BALL+1
 17128 93D6 20 BC 4B			jsr MOVE_BALL
 17129 93D9			l_3472
 17130
 17131 				; optimize OK (service.pas), line = 3431
 17132
 17133 93D9 AD F6 A2			lda BALL2.INPLAY
 17134 93DC F0 0F			jeq l_3484
 17135 93DE AD 70 97			lda BALL2
 17136 93E1 8D 70 A1			sta MOVE_BALL.BALL
 17137 93E4 AD 71 97			lda BALL2+1
 17138 93E7 8D 71 A1			sta MOVE_BALL.BALL+1
 17139 93EA 20 BC 4B			jsr MOVE_BALL
 17140 93ED			l_3484
 17141 93ED			l_3454
 17142
 17143 				; optimize OK (service.pas), line = 3439
 17144
 17145 93ED AD 6C 97			lda BALL0
 17146 93F0 8D FB A2			sta CHECK_BALL.BALL
 17147 93F3 AD 6D 97			lda BALL0+1
 17148 93F6 8D FC A2			sta CHECK_BALL.BALL+1
 17149 93F9 20 67 8F			jsr CHECK_BALL
 17150
 17151 				; optimize OK (service.pas), line = 3440
 17152
 17153 93FC AD 6E 97			lda BALL1
 17154 93FF 8D FB A2			sta CHECK_BALL.BALL
 17155 9402 AD 6F 97			lda BALL1+1
 17156 9405 8D FC A2			sta CHECK_BALL.BALL+1
 17157 9408 20 67 8F			jsr CHECK_BALL
 17158
 17159 				; optimize OK (service.pas), line = 3441
 17160
 17161 940B AD 70 97			lda BALL2
 17162 940E 8D FB A2			sta CHECK_BALL.BALL
 17163 9411 AD 71 97			lda BALL2+1
 17164 9414 8D FC A2			sta CHECK_BALL.BALL+1
 17165 9417 20 67 8F			jsr CHECK_BALL
 17166
 17167 				; optimize FAIL ('CHECKSHINE', service.pas), line = 3456
 17168
 17169 941A 20 43 3F			jsr CHECKSHINE
 17170
 17171 				; optimize FAIL ('CHECK_LETTER', service.pas), line = 3457
 17172
 17173 941D 20 59 41			jsr CHECK_LETTER
 17174
 17175 				; optimize OK (service.pas), line = 3458
 17176
 17177 9420 AD 6C 97			lda BALL0
 17178 9423 8D 84 A2			sta CHECK_BONUS_TYPE.B1
 17179 9426 AD 6D 97			lda BALL0+1
 17180 9429 8D 85 A2			sta CHECK_BONUS_TYPE.B1+1
 17181 942C AD 6E 97			lda BALL1
 17182 942F 8D 88 A2			sta CHECK_BONUS_TYPE.B2
 17183 9432 AD 6F 97			lda BALL1+1
 17184 9435 8D 89 A2			sta CHECK_BONUS_TYPE.B2+1
 17185 9438 AD 70 97			lda BALL2
 17186 943B 8D 8C A2			sta CHECK_BONUS_TYPE.B3
 17187 943E AD 71 97			lda BALL2+1
 17188 9441 8D 8D A2			sta CHECK_BONUS_TYPE.B3+1
 17189 9444 20 4D 8B			jsr CHECK_BONUS_TYPE
 17190
 17191 				; optimize FAIL ('CHECK_FIRE', service.pas), line = 3459
 17192
 17193 9447 20 E3 87			jsr CHECK_FIRE
 17194
 17195 				; optimize FAIL ('CHECK_FLUX', service.pas), line = 3460
 17196
 17197 944A 20 AA 89			jsr CHECK_FLUX
 17198
 17199 				; optimize OK (service.pas), line = 3462
 17200
 17201 944D AD 19 A0			lda VAUS.X
 17202 9450 18 6D 21 A0			add VAUS.WIDTH
 17203 9454 85 9F			sta :STACKORIGIN+9
 17204 9456 A9 00			lda #$00
 17205 9458 69 00			adc #$00
 17206 945A A0 01			ldy #1
 17207 945C C9 00			cmp #$00
 17208 945E D0 04			bne @+
 17209 9460 A5 9F			lda :STACKORIGIN+9
 17210 9462 C9 D7			cmp #$D7
 17211 				@
 17212 9464 F0 01			beq @+
 17213 9466 88				dey
 17214 				@
 17215 9467 98				tya
 17216 9468 2D 95 A0			and SCRFLUX
 17217 946B F0 03			jeq l_34BC
 17218 946D 20 47 8A			jsr VAUS_OUT
 17219 9470			l_34BC
 17220
 17221 				; optimize OK (service.pas), line = 3464
 17222
 17223 9470 AD 25 A0			lda VAUS.LETTER
 17224 9473 C9 04			cmp #$04
 17225 9475 F0 03 4C BA 95		jne l_34D2
 17226
 17227 				; optimize OK (service.pas), line = 3466
 17228
 17229 947A A9 03			lda #$03
 17230 947C 8D 94 A0			sta BALLS_IN_PLAY
 17231
 17232 				; optimize OK (service.pas), line = 3468
 17233
 17234 947F AC 6E 97 84 84 AC + 	mwy BALL1 :bp2
 17235 9489 A0 1B			ldy #$1B
 17236 948B B9 A7 A2 91 84 88 + 	mva:rpl adr.BALL0,y (:bp2),y-
 17237
 17238 				; optimize OK (service.pas), line = 3469
 17239
 17240 9493 AC 70 97 84 84 AC + 	mwy BALL2 :bp2
 17241 949D A0 1B			ldy #$1B
 17242 949F B9 A7 A2 91 84 88 + 	mva:rpl adr.BALL0,y (:bp2),y-
 17243
 17244 				; optimize OK (service.pas), line = 3471
 17245
 17246 94A7 AD 6C 97			lda BALL0
 17247 94AA 8D 3E A1			sta GET_BALL_DIRECTION.BALL
 17248 94AD AD 6D 97			lda BALL0+1
 17249 94B0 8D 3F A1			sta GET_BALL_DIRECTION.BALL+1
 17250 94B3 20 89 48			jsr GET_BALL_DIRECTION
 17251 94B6 E8				inx
 17252 94B7 E8				inx
 17253 94B8 A9 5A			lda #$5A
 17254 94BA 85 8E			sta @SMALLINT.DIV.B
 17255 94BC A9 00			lda #$00
 17256 94BE 85 8F			sta @SMALLINT.DIV.B+1
 17257 94C0 AD 42 A1			lda GET_BALL_DIRECTION.RESULT
 17258 94C3 85 86			sta @SMALLINT.DIV.A
 17259 94C5 AD 43 A1			lda GET_BALL_DIRECTION.RESULT+1
 17260 94C8 85 87			sta @SMALLINT.DIV.A+1
 17261 94CA 20 33 22			jsr @SMALLINT.DIV
 17262 94CD CA				dex
 17263 94CE A5 86			lda :eax
 17264 94D0 8D A0 A2			sta T1
 17265 94D3 A5 87			lda :eax+1
 17266 94D5 8D A1 A2			sta T1+1
 17267 94D8 CA				dex
 17268
 17269 				; optimize OK (service.pas), line = 3473
 17270
 17271 94D9 AD B3 A2			lda BALL0.SPEED
 17272 94DC 8D A2 A2			sta T2
 17273 94DF AD B4 A2			lda BALL0.SPEED+1
 17274 94E2 8D A3 A2			sta T2+1
 17275
 17276 				; optimize OK (service.pas), line = 3480
 17277
 17278 94E5 A9 5A			lda #$5A
 17279 94E7 85 8E			sta :ecx
 17280 94E9 A9 00			lda #$00
 17281 94EB 85 8F			sta :ecx+1
 17282 94ED AD A0 A2			lda T1
 17283 94F0 85 86			sta :eax
 17284 94F2 AD A1 A2			lda T1+1
 17285 94F5 85 87			sta :eax+1
 17286 					.ifdef fmulinit
 17287 					fmulu_16
 17288 					els
 17289 94F7 20 0B 23			imulCX
 17290 					eif
 17291 94FA A5 86			lda :eax
 17292 94FC 8D A4 A2			sta HLP
 17293 94FF A5 87			lda :eax+1
 17294 9501 8D A5 A2			sta HLP+1
 17295
 17296 				; optimize OK (service.pas), line = 3482
 17297
 17298 9504 AD A4 A2			lda HLP
 17299 9507 18 69 1E			add #$1E
 17300 950A 8D 38 A1			sta SET_BALL_DIRECTION.ANGLE
 17301 950D AD A5 A2			lda HLP+1
 17302 9510 69 00			adc #$00
 17303 9512 8D 39 A1			sta SET_BALL_DIRECTION.ANGLE+1
 17304 9515 AD 6C 97			lda BALL0
 17305 9518 8D 34 A1			sta SET_BALL_DIRECTION.BALL
 17306 951B AD 6D 97			lda BALL0+1
 17307 951E 8D 35 A1			sta SET_BALL_DIRECTION.BALL+1
 17308 9521 20 A6 46			jsr SET_BALL_DIRECTION
 17309
 17310 				; optimize OK (service.pas), line = 3483
 17311
 17312 9524 AD A4 A2			lda HLP
 17313 9527 18 69 2D			add #$2D
 17314 952A 8D 38 A1			sta SET_BALL_DIRECTION.ANGLE
 17315 952D AD A5 A2			lda HLP+1
 17316 9530 69 00			adc #$00
 17317 9532 8D 39 A1			sta SET_BALL_DIRECTION.ANGLE+1
 17318 9535 AD 6E 97			lda BALL1
 17319 9538 8D 34 A1			sta SET_BALL_DIRECTION.BALL
 17320 953B AD 6F 97			lda BALL1+1
 17321 953E 8D 35 A1			sta SET_BALL_DIRECTION.BALL+1
 17322 9541 20 A6 46			jsr SET_BALL_DIRECTION
 17323
 17324 				; optimize OK (service.pas), line = 3484
 17325
 17326 9544 AD A4 A2			lda HLP
 17327 9547 18 69 3C			add #$3C
 17328 954A 8D 38 A1			sta SET_BALL_DIRECTION.ANGLE
 17329 954D AD A5 A2			lda HLP+1
 17330 9550 69 00			adc #$00
 17331 9552 8D 39 A1			sta SET_BALL_DIRECTION.ANGLE+1
 17332 9555 AD 70 97			lda BALL2
 17333 9558 8D 34 A1			sta SET_BALL_DIRECTION.BALL
 17334 955B AD 71 97			lda BALL2+1
 17335 955E 8D 35 A1			sta SET_BALL_DIRECTION.BALL+1
 17336 9561 20 A6 46			jsr SET_BALL_DIRECTION
 17337
 17338 				; optimize OK (service.pas), line = 3488
 17339
 17340 9564 AD 6C 97			lda BALL0
 17341 9567 8D 1E A1			sta SET_BALL_SPEED.BALL
 17342 956A AD 6D 97			lda BALL0+1
 17343 956D 8D 1F A1			sta SET_BALL_SPEED.BALL+1
 17344 9570 AD A2 A2			lda T2
 17345 9573 8D 22 A1			sta SET_BALL_SPEED.SPEED
 17346 9576 AD A3 A2			lda T2+1
 17347 9579 8D 23 A1			sta SET_BALL_SPEED.SPEED+1
 17348 957C 20 C3 44			jsr SET_BALL_SPEED
 17349
 17350 				; optimize OK (service.pas), line = 3489
 17351
 17352 957F AD 6E 97			lda BALL1
 17353 9582 8D 1E A1			sta SET_BALL_SPEED.BALL
 17354 9585 AD 6F 97			lda BALL1+1
 17355 9588 8D 1F A1			sta SET_BALL_SPEED.BALL+1
 17356 958B AD A2 A2			lda T2
 17357 958E 8D 22 A1			sta SET_BALL_SPEED.SPEED
 17358 9591 AD A3 A2			lda T2+1
 17359 9594 8D 23 A1			sta SET_BALL_SPEED.SPEED+1
 17360 9597 20 C3 44			jsr SET_BALL_SPEED
 17361
 17362 				; optimize OK (service.pas), line = 3490
 17363
 17364 959A AD 70 97			lda BALL2
 17365 959D 8D 1E A1			sta SET_BALL_SPEED.BALL
 17366 95A0 AD 71 97			lda BALL2+1
 17367 95A3 8D 1F A1			sta SET_BALL_SPEED.BALL+1
 17368 95A6 AD A2 A2			lda T2
 17369 95A9 8D 22 A1			sta SET_BALL_SPEED.SPEED
 17370 95AC AD A3 A2			lda T2+1
 17371 95AF 8D 23 A1			sta SET_BALL_SPEED.SPEED+1
 17372 95B2 20 C3 44			jsr SET_BALL_SPEED
 17373
 17374 				; optimize OK (service.pas), line = 3492
 17375
 17376 95B5 A9 00			lda #$00
 17377 95B7 8D 25 A0			sta VAUS.LETTER
 17378 95BA			l_34D2
 17379
 17380 				; optimize OK (service.pas), line = 3496
 17381
 17382 95BA AD 94 A0			lda BALLS_IN_PLAY
 17383 95BD C9 02			cmp #$02
 17384 95BF 90 08			jcc l_3535
 17385 95C1 A9 00			lda #$00
 17386 95C3 8D 85 A0			sta LETT.INCOMING
 17387 95C6 8D 86 A0			sta LETT.INCOMING+1
 17388 95C9			l_3535
 17389
 17390 				; optimize OK (service.pas), line = 3499
 17391
 17392 95C9 AD 75 A0			lda CUR_PLAYER
 17393 95CC 0A				asl @
 17394 95CD 0A				asl @
 17395 95CE A8				tay
 17396 95CF B9 5A A0			lda adr.SCORE.PLAYER,y
 17397 95D2 8D 58 A2			sta WRITE_SCORE.SC
 17398 95D5 B9 5B A0			lda adr.SCORE.PLAYER+1,y
 17399 95D8 8D 59 A2			sta WRITE_SCORE.SC+1
 17400 95DB B9 5C A0			lda adr.SCORE.PLAYER+2,y
 17401 95DE 8D 5A A2			sta WRITE_SCORE.SC+2
 17402 95E1 B9 5D A0			lda adr.SCORE.PLAYER+3,y
 17403 95E4 8D 5B A2			sta WRITE_SCORE.SC+3
 17404 95E7 AC 75 A0			ldy CUR_PLAYER
 17405 95EA B9 92 20			lda adr.POS_DIGIT,y
 17406 95ED 8D 56 A2			sta WRITE_SCORE.PY
 17407 95F0 A9 FD			lda #$FD
 17408 95F2 8D 54 A2			sta WRITE_SCORE.PX
 17409 95F5 A9 00			lda #$00
 17410 95F7 8D 55 A2			sta WRITE_SCORE.PX+1
 17411 95FA 8D 57 A2			sta WRITE_SCORE.PY+1
 17412 95FD 20 E9 80			jsr WRITE_SCORE
 17413
 17414 				; optimize OK (service.pas), line = 3502
 17415
 17416 9600 AD 75 A0			lda CUR_PLAYER
 17417 9603 0A				asl @
 17418 9604 0A				asl @
 17419 9605 A8				tay
 17420 9606				.LOCAL
 17421 9606 B9 5D A0			lda adr.SCORE.PLAYER+3,y
 17422 9609 38 ED 6F A0			sub SCORE.HISCORE+3
 17423 960D D0 22			bne L4
 17424 960F B9 5C A0			lda adr.SCORE.PLAYER+2,y
 17425 9612 CD 6E A0			cmp SCORE.HISCORE+2
 17426 9615 D0 0E			bne L1
 17427 9617 B9 5B A0			lda adr.SCORE.PLAYER+1,y
 17428 961A CD 6D A0			cmp SCORE.HISCORE+1
 17429 961D D0 06			bne L1
 17430 961F B9 5A A0			lda adr.SCORE.PLAYER,y
 17431 9622 CD 6C A0			cmp SCORE.HISCORE
 17432 9625 F0 10		L1	beq L5
 17433 9627 B0 04			bcs L3
 17434 9629 A9 FF			lda #$FF
 17435 962B D0 0A			bne L5
 17436 962D A9 01		L3	lda #$01
 17437 962F D0 06			bne L5
 17438 9631 50 04		L4	bvc L5
 17439 9633 49 FF			eor #$FF
 17440 9635 09 01			ora #$01
 17441 9637			L5
 17442 					.ENDL
 17443 9637 30 49			jmi l_355B
 17444 9639 F0 47			jeq l_355B
 17445
 17446 				; optimize OK (service.pas), line = 3505
 17447
 17448 963B B9 5A A0			lda adr.SCORE.PLAYER,y
 17449 963E 8D 6C A0			sta SCORE.HISCORE
 17450 9641 B9 5B A0			lda adr.SCORE.PLAYER+1,y
 17451 9644 8D 6D A0			sta SCORE.HISCORE+1
 17452 9647 B9 5C A0			lda adr.SCORE.PLAYER+2,y
 17453 964A 8D 6E A0			sta SCORE.HISCORE+2
 17454 964D B9 5D A0			lda adr.SCORE.PLAYER+3,y
 17455 9650 8D 6F A0			sta SCORE.HISCORE+3
 17456
 17457 				; optimize OK (service.pas), line = 3507
 17458
 17459 9653 A9 FD			lda #$FD
 17460 9655 8D 54 A2			sta WRITE_SCORE.PX
 17461 9658 A9 00			lda #$00
 17462 965A 8D 55 A2			sta WRITE_SCORE.PX+1
 17463 965D A9 80			lda #$80
 17464 965F 8D 56 A2			sta WRITE_SCORE.PY
 17465 9662 A9 00			lda #$00
 17466 9664 8D 57 A2			sta WRITE_SCORE.PY+1
 17467 9667 AD 6C A0			lda SCORE.HISCORE
 17468 966A 8D 58 A2			sta WRITE_SCORE.SC
 17469 966D AD 6D A0			lda SCORE.HISCORE+1
 17470 9670 8D 59 A2			sta WRITE_SCORE.SC+1
 17471 9673 AD 6E A0			lda SCORE.HISCORE+2
 17472 9676 8D 5A A2			sta WRITE_SCORE.SC+2
 17473 9679 AD 6F A0			lda SCORE.HISCORE+3
 17474 967C 8D 5B A2			sta WRITE_SCORE.SC+3
 17475 967F 20 E9 80			jsr WRITE_SCORE
 17476 9682			l_355B
 17477
 17478 				; optimize OK (service.pas), line = 3514
 17479
 17480 9682 AD 6C 97			lda BALL0
 17481 9685 8D FF A2			sta TEST_BALL.BALL
 17482 9688 AD 6D 97			lda BALL0+1
 17483 968B 8D 00 A3			sta TEST_BALL.BALL+1
 17484 968E 20 DD 8F			jsr TEST_BALL
 17485
 17486 				; optimize OK (service.pas), line = 3515
 17487
 17488 9691 AD 6E 97			lda BALL1
 17489 9694 8D FF A2			sta TEST_BALL.BALL
 17490 9697 AD 6F 97			lda BALL1+1
 17491 969A 8D 00 A3			sta TEST_BALL.BALL+1
 17492 969D 20 DD 8F			jsr TEST_BALL
 17493
 17494 				; optimize OK (service.pas), line = 3516
 17495
 17496 96A0 AD 70 97			lda BALL2
 17497 96A3 8D FF A2			sta TEST_BALL.BALL
 17498 96A6 AD 71 97			lda BALL2+1
 17499 96A9 8D 00 A3			sta TEST_BALL.BALL+1
 17500 96AC 20 DD 8F			jsr TEST_BALL
 17501
 17502 				; optimize OK (service.pas), line = 3557
 17503
 17504 96AF AD BE A2			lda BALL0.INPLAY
 17505 96B2 D0 2B			jne l_3581
 17506
 17507 				; optimize OK (service.pas), line = 3559
 17508
 17509 96B4 AC 6C 97 84 84 AC + 	mwy BALL0 :bp2
 17510 96BE A0 1B			ldy #$1B
 17511 96C0 B9 C3 A2 91 84 88 + 	mva:rpl adr.BALL1,y (:bp2),y-
 17512
 17513 				; optimize OK (service.pas), line = 3560
 17514
 17515 96C8 AC 6E 97 84 84 AC + 	mwy BALL1 :bp2
 17516 96D2 A0 1B			ldy #$1B
 17517 96D4 B9 DF A2 91 84 88 + 	mva:rpl adr.BALL2,y (:bp2),y-
 17518
 17519 				; optimize OK (service.pas), line = 3561
 17520
 17521 96DC 8D F6 A2			sta BALL2.INPLAY
 17522 96DF			l_3581
 17523
 17524 				; optimize OK (service.pas), line = 3564
 17525
 17526 96DF A9 00			lda #$00
 17527 96E1 8D 94 A0			sta BALLS_IN_PLAY
 17528
 17529 				; optimize OK (service.pas), line = 3566
 17530
 17531 96E4 AD BE A2			lda BALL0.INPLAY
 17532 96E7 F0 03			jeq l_359C
 17533 96E9 EE 94 A0			inc BALLS_IN_PLAY
 17534 96EC			l_359C
 17535
 17536 				; optimize OK (service.pas), line = 3567
 17537
 17538 96EC AD DA A2			lda BALL1.INPLAY
 17539 96EF F0 03			jeq l_35AF
 17540 96F1 EE 94 A0			inc BALLS_IN_PLAY
 17541 96F4			l_35AF
 17542
 17543 				; optimize OK (service.pas), line = 3568
 17544
 17545 96F4 AD F6 A2			lda BALL2.INPLAY
 17546 96F7 F0 03			jeq l_35C2
 17547 96F9 EE 94 A0			inc BALLS_IN_PLAY
 17548 96FC			l_35C2
 17549
 17550 				; optimize OK (service.pas), line = 3571
 17551
 17552 96FC AD BE A2			lda BALL0.INPLAY
 17553 96FF D0 49			jne l_35D8
 17554
 17555 				; optimize OK (service.pas), line = 3573
 17556
 17557 9701 A9 01			lda #$01
 17558 9703 8D BF A2			sta BALL0.LAUNCH
 17559
 17560 				; optimize OK (service.pas), line = 3574
 17561
 17562 9706 AD 6C 97			lda BALL0
 17563 9709 8D 14 A1			sta REMOVE_BALL.BALL
 17564 970C AD 6D 97			lda BALL0+1
 17565 970F 8D 15 A1			sta REMOVE_BALL.BALL+1
 17566 9712 20 60 43			jsr REMOVE_BALL
 17567
 17568 				; optimize FAIL ('DESTROY_VAUS', service.pas), line = 3575
 17569
 17570 9715 20 2F 79			jsr DESTROY_VAUS
 17571
 17572 				; optimize OK (service.pas), line = 3576
 17573
 17574 9718 AC 75 A0			ldy CUR_PLAYER
 17575 971B B9 69 A0			lda adr.SCORE.LIVES,y
 17576 971E 38 E9 01			sub #$01
 17577 9721 99 69 A0			sta adr.SCORE.LIVES,y
 17578
 17579 				; optimize OK (service.pas), line = 3577
 17580
 17581 9724 AD 93 9E			lda WALL_P
 17582 9727 85 8E			sta @move.dst
 17583 9729 AD 75 A0			lda CUR_PLAYER
 17584 972C 18 6D 94 9E			add WALL_P+1
 17585 9730 85 8F			sta @move.dst+1
 17586 9732 AD 95 9E			lda WALL
 17587 9735 85 8A			sta @move.src
 17588 9737 AD 96 9E			lda WALL+1
 17589 973A 85 8B			sta @move.src+1
 17590 973C A9 00			lda <256
 17591 973E 85 86			sta @move.cnt
 17592 9740 A9 01			lda >256
 17593 9742 85 87			sta @move.cnt+1
 17594 9744 20 B6 21			jsr @move
 17595
 17596 				; optimize FAIL ('NOSOUND', service.pas), line = 3585
 17597
 17598 9747 20 52 3C			jsr NOSOUND
 17599 974A			l_35D8
 17600 974A			l_33BB
 17601
 17602 				; optimize OK (service.pas), line = 3380
 17603
 17604 974A AD 58 A0			lda REMAIN_BLK
 17605 974D F0 0D			jeq l_33BCw
 17606 974F AD BE A2			lda BALL0.INPLAY
 17607 9752 F0 08			jeq l_33BCw
 17608 9754 AD 74 A0			lda SCORE.ABORTPLAY
 17609 9757 D0 03 4C DF 92		jeq l_33BC
 17610 975C			l_33BCw
 17611
 17612 				; optimize OK (service.pas), line = 3641
 17613
 17614 975C A9 00			lda #$00
 17615 975E 8D 99 A2			sta RESULT
 17616
 17617 				; optimize OK (service.pas), line = 3642
 17618
 17619 9761 AD 58 A0			lda REMAIN_BLK
 17620 9764 D0 05			jne l_3626
 17621 9766 A9 01			lda #$01
 17622 9768 8D 99 A2			sta RESULT
 17623 976B			l_3626
 17624 976B			@exit
 17625
 17626 				; ------------------------------------------------------------
 17627
 17628 = A299			RESULT	= DATAORIGIN+$03F4
 17629 = A29A			X	= DATAORIGIN+$03F5
 17630 = A29C			Y	= DATAORIGIN+$03F7
 17631 = A29E			KEY	= DATAORIGIN+$03F9
 17632 = A2A0			T1	= DATAORIGIN+$03FB
 17633 = A2A2			T2	= DATAORIGIN+$03FD
 17634 = A2A4			HLP	= DATAORIGIN+$03FF
 17635 = A2A6			CN	= DATAORIGIN+$0401
 17636 = A2A7			adr.BALL0	= DATAORIGIN+$0402	; [28] RECORD
 17637 976B			.var BALL0	= adr.BALL0 .word
 17638 = A2A7			BALL0.X	= DATAORIGIN+$0402
 17639 = A2A9			BALL0.Y	= DATAORIGIN+$0404
 17640 = A2AB			BALL0.FINEX	= DATAORIGIN+$0406
 17641 = A2AD			BALL0.FINEY	= DATAORIGIN+$0408
 17642 = A2AF			BALL0.OLDX	= DATAORIGIN+$040A
 17643 = A2B1			BALL0.OLDY	= DATAORIGIN+$040C
 17644 = A2B3			BALL0.SPEED	= DATAORIGIN+$040E
 17645 = A2B5			BALL0.FINESPEED	= DATAORIGIN+$0410
 17646 = A2B7			BALL0.SPEEDX	= DATAORIGIN+$0412
 17647 = A2B9			BALL0.SPEEDY	= DATAORIGIN+$0414
 17648 = A2BB			BALL0.SBD	= DATAORIGIN+$0416
 17649 = A2BD			BALL0.BRWHIT	= DATAORIGIN+$0418
 17650 = A2BE			BALL0.INPLAY	= DATAORIGIN+$0419
 17651 = A2BF			BALL0.LAUNCH	= DATAORIGIN+$041A
 17652 = A2C0			BALL0.ONVAUS	= DATAORIGIN+$041B
 17653 = A2C2			BALL0.STM	= DATAORIGIN+$041D
 17654 = A2C3			adr.BALL1	= DATAORIGIN+$041E	; [28] RECORD
 17655 976B			.var BALL1	= adr.BALL1 .word
 17656 = A2C3			BALL1.X	= DATAORIGIN+$041E
 17657 = A2C5			BALL1.Y	= DATAORIGIN+$0420
 17658 = A2C7			BALL1.FINEX	= DATAORIGIN+$0422
 17659 = A2C9			BALL1.FINEY	= DATAORIGIN+$0424
 17660 = A2CB			BALL1.OLDX	= DATAORIGIN+$0426
 17661 = A2CD			BALL1.OLDY	= DATAORIGIN+$0428
 17662 = A2CF			BALL1.SPEED	= DATAORIGIN+$042A
 17663 = A2D1			BALL1.FINESPEED	= DATAORIGIN+$042C
 17664 = A2D3			BALL1.SPEEDX	= DATAORIGIN+$042E
 17665 = A2D5			BALL1.SPEEDY	= DATAORIGIN+$0430
 17666 = A2D7			BALL1.SBD	= DATAORIGIN+$0432
 17667 = A2D9			BALL1.BRWHIT	= DATAORIGIN+$0434
 17668 = A2DA			BALL1.INPLAY	= DATAORIGIN+$0435
 17669 = A2DB			BALL1.LAUNCH	= DATAORIGIN+$0436
 17670 = A2DC			BALL1.ONVAUS	= DATAORIGIN+$0437
 17671 = A2DE			BALL1.STM	= DATAORIGIN+$0439
 17672 = A2DF			adr.BALL2	= DATAORIGIN+$043A	; [28] RECORD
 17673 976B			.var BALL2	= adr.BALL2 .word
 17674 = A2DF			BALL2.X	= DATAORIGIN+$043A
 17675 = A2E1			BALL2.Y	= DATAORIGIN+$043C
 17676 = A2E3			BALL2.FINEX	= DATAORIGIN+$043E
 17677 = A2E5			BALL2.FINEY	= DATAORIGIN+$0440
 17678 = A2E7			BALL2.OLDX	= DATAORIGIN+$0442
 17679 = A2E9			BALL2.OLDY	= DATAORIGIN+$0444
 17680 = A2EB			BALL2.SPEED	= DATAORIGIN+$0446
 17681 = A2ED			BALL2.FINESPEED	= DATAORIGIN+$0448
 17682 = A2EF			BALL2.SPEEDX	= DATAORIGIN+$044A
 17683 = A2F1			BALL2.SPEEDY	= DATAORIGIN+$044C
 17684 = A2F3			BALL2.SBD	= DATAORIGIN+$044E
 17685 = A2F5			BALL2.BRWHIT	= DATAORIGIN+$0450
 17686 = A2F6			BALL2.INPLAY	= DATAORIGIN+$0451
 17687 = A2F7			BALL2.LAUNCH	= DATAORIGIN+$0452
 17688 = A2F8			BALL2.ONVAUS	= DATAORIGIN+$0453
 17689 = A2FA			BALL2.STM	= DATAORIGIN+$0455
 17690
 17691 = A29A			@VarData	= X
 17692 = 0061			@VarDataSize	= 97
 17693
 17694 976B 60				rts						; ret
 17695 = 976C A7 A2		BALL0
 17695 = 976E C3 A2		BALL1
 17695 = 9770 DF A2		BALL2
 17695 				.endl
 17696
 17697 9772			.local	CHOOSE_START_WALL				; FUNCTION
 17698
 17699 				; optimize OK (service.pas), line = 3665
 17700
 17701 9772 A9 01			lda #$01
 17702 9774 8D 09 A3			sta ST
 17703 9777 A9 00			lda #$00
 17704 9779 8D 0A A3			sta ST+1
 17705
 17706 				; optimize OK (service.pas), line = 3723
 17707
 17708 977C AD 09 A3			lda ST
 17709 977F 8D 03 A3			sta RESULT
 17710 9782 AD 0A A3			lda ST+1
 17711 9785 8D 04 A3			sta RESULT+1
 17712 9788			@exit
 17713
 17714 				; ------------------------------------------------------------
 17715
 17716 = A303			RESULT	= DATAORIGIN+$045E
 17717 = 0046			PX	= $46
 17718 = 0064			PY	= $64
 17719 = 0022			DX	= $22
 17720 = 0023			DY	= $23
 17721 = 0013			DDX	= $13
 17722 = 000E			DDY	= $0E
 17723 = A305			X	= DATAORIGIN+$0460
 17724 = A307			Y	= DATAORIGIN+$0462
 17725 = A309			ST	= DATAORIGIN+$0464
 17726 = A30B			OLDX	= DATAORIGIN+$0466
 17727 = A30D			OLDY	= DATAORIGIN+$0468
 17728 = A30F			NEWX	= DATAORIGIN+$046A
 17729 = A311			NEWY	= DATAORIGIN+$046C
 17730
 17731 = A305			@VarData	= X
 17732 = 000E			@VarDataSize	= 14
 17733
 17734 9788 60				rts						; ret
 17735 				.endl
 17736
 17737 9789			.local	SET_START_PARAMETERS				; PROCEDURE
 17738
 17739 				; optimize OK (service.pas), line = 3732
 17740
 17741 9789 A9 01			lda #$01
 17742 978B 8D 13 A3			sta X
 17743
 17744 978E			l_3647
 17745 				; --- ForToDoCondition
 17746 978E AD 13 A3			lda X
 17747 9791 C9 03			cmp #$03
 17748 9793 B0 4E			jcs l_3655
 17749
 17750 				; optimize OK (service.pas), line = 3734
 17751
 17752 9795 0A				asl @
 17753 9796 0A				asl @
 17754 9797 A8				tay
 17755 9798 A9 00			lda #$00
 17756 979A 99 5A A0			sta adr.SCORE.PLAYER,y
 17757 979D 99 5B A0			sta adr.SCORE.PLAYER+1,y
 17758 97A0 99 5C A0			sta adr.SCORE.PLAYER+2,y
 17759 97A3 99 5D A0			sta adr.SCORE.PLAYER+3,y
 17760
 17761 				; optimize OK (service.pas), line = 3735
 17762
 17763 97A6 AC 13 A3			ldy X
 17764 97A9 A9 05			lda #$05
 17765 97AB 99 69 A0			sta adr.SCORE.LIVES,y
 17766
 17767 				; optimize OK (service.pas), line = 3736
 17768
 17769 97AE A9 01			lda #$01
 17770 97B0 99 66 A0			sta adr.SCORE.WALL_N,y
 17771
 17772 				; optimize OK (service.pas), line = 3737
 17773
 17774 97B3 AD 93 9E			lda WALL_P
 17775 97B6 85 8E			sta @move.dst
 17776 97B8 AD 13 A3			lda X
 17777 97BB 18 6D 94 9E			add WALL_P+1
 17778 97BF 85 8F			sta @move.dst+1
 17779 97C1 AD 97 9E			lda ALL_WALLS
 17780 97C4 85 8A			sta @move.src
 17781 97C6 AD 98 9E			lda ALL_WALLS+1
 17782 97C9 85 8B			sta @move.src+1
 17783 97CB A9 00			lda <256
 17784 97CD 85 86			sta @move.cnt
 17785 97CF A9 01			lda >256
 17786 97D1 85 87			sta @move.cnt+1
 17787 97D3 20 B6 21			jsr @move
 17788
 17789 				; optimize OK (service.pas), line = 3739
 17790
 17791 97D6 AC 13 A3			ldy X
 17792 97D9 A9 00			lda #$00
 17793 97DB 99 71 A0			sta adr.SCORE.ROUNDSEL,y
 17794
 17795 				; --- ForToDoEpilog
 17796 97DE EE 13 A3			inc X
 17797 97E1 D0 AB			jne l_3647
 17798 97E3			l_3655
 17799
 17800 				; optimize OK (service.pas), line = 3742
 17801
 17802 97E3 A9 01			lda #$01
 17803 97E5 8D 75 A0			sta CUR_PLAYER
 17804
 17805 				; ------------------------------------------------------------
 17806
 17807 = A313			X	= DATAORIGIN+$046E
 17808
 17809 = A313			@VarData	= X
 17810 = 0001			@VarDataSize	= 1
 17811
 17812 97E8			@exit
 17813 					.ifdef @new
 17814 					lda <@VarData
 17815 					sta :ztmp
 17816 					lda >@VarData
 17817 					ldy #@VarDataSize-1
 17818 					jmp @FreeMem
 17819 					els
 17820 97E8 60				rts						; ret
 17821 					eif
 17822 				.endl
 17823
 17824 97E9			.local	MAINSCREEN					; FUNCTION
 17825
 17826 				; optimize FAIL ('NOSOUND', service.pas), line = 3802
 17827
 17828 97E9 20 52 3C			jsr NOSOUND
 17829
 17830 				; optimize OK (service.pas), line = 3803
 17831
 17832 97EC A9 00			lda #$00
 17833 97EE 8D 74 A0			sta SCORE.ABORTPLAY
 17834
 17835 				; optimize OK (service.pas), line = 3814
 17836
 17837 97F1 AD DD 9F			lda PRESENTS.OFS
 17838 97F4 8D A3 A0			sta BLITBOX.SRC
 17839 97F7 AD DE 9F			lda PRESENTS.OFS+1
 17840 97FA 8D A4 A0			sta BLITBOX.SRC+1
 17841 97FD AD DF 9F			lda PRESENTS.OFS+2
 17842 9800 8D A5 A0			sta BLITBOX.SRC+2
 17843 9803 AD E0 9F			lda PRESENTS.OFS+3
 17844 9806 8D A6 A0			sta BLITBOX.SRC+3
 17845 9809 A9 00			lda #$00
 17846 980B 8D A7 A0			sta BLITBOX.DST
 17847 980E A9 50			lda #$50
 17848 9810 8D A8 A0			sta BLITBOX.DST+1
 17849 9813 A9 00			lda #$00
 17850 9815 8D A9 A0			sta BLITBOX.DST+2
 17851 9818 8D AA A0			sta BLITBOX.DST+3
 17852 981B A9 40			lda #$40
 17853 981D 8D AB A0			sta BLITBOX.W
 17854 9820 A9 01			lda #$01
 17855 9822 8D AC A0			sta BLITBOX.W+1
 17856 9825 A9 C8			lda #$C8
 17857 9827 8D AD A0			sta BLITBOX.H
 17858 982A 20 58 3A			jsr BLITBOX
 17859
 17860 				; optimize OK (service.pas), line = 3852
 17861
 17862 982D A9 01			lda #$01
 17863 982F 8D 14 A3			sta RESULT
 17864 9832 A9 00			lda #$00
 17865 9834 8D 15 A3			sta RESULT+1
 17866 9837			@exit
 17867
 17868 				; ------------------------------------------------------------
 17869
 17870 = A314			RESULT	= DATAORIGIN+$046F
 17871 = A316			X	= DATAORIGIN+$0471
 17872 = A318			Y	= DATAORIGIN+$0473
 17873 = A31A			Z	= DATAORIGIN+$0475
 17874 = A31C			K	= DATAORIGIN+$0477
 17875 = A31E			IK	= DATAORIGIN+$0479
 17876
 17877 = A316			@VarData	= X
 17878 = 000A			@VarDataSize	= 10
 17879
 17880 9837 60				rts						; ret
 17881 				.endl
 17882
 17883 9838			.local	START_GAME					; PROCEDURE
 17884
 17885 				; optimize FAIL ('SET_START_PARAMETERS', service.pas), line = 3860
 17886
 17887 9838 20 89 97			jsr SET_START_PARAMETERS
 17888
 17889 				; optimize OK (service.pas), line = 3861
 17890
 17891 983B AD 21 A3			lda PLAYERS+1
 17892 983E D0 05			bne @+
 17893 9840 AD 20 A3			lda PLAYERS
 17894 9843 C9 01			cmp #$01
 17895 				@
 17896 9845 D0 05			jne l_36B4
 17897 9847 A9 00			lda #$00
 17898 9849 8D 6B A0			sta adr.SCORE.LIVES+$02
 17899 984C			l_36B4
 17900
 17901 				; optimize OK (service.pas), line = 3864
 17902
 17903 984C A9 00			lda #$00
 17904 984E 8D 7D A0			sta TRAINER
 17905
 17906 				; optimize OK (service.pas), line = 3865
 17907
 17908 9851 AD 95 9E			lda WALL
 17909 9854 85 8E			sta @move.dst
 17910 9856 AD 96 9E			lda WALL+1
 17911 9859 85 8F			sta @move.dst+1
 17912 985B AD 93 9E			lda WALL_P
 17913 985E 85 8A			sta @move.src
 17914 9860 AD 75 A0			lda CUR_PLAYER
 17915 9863 18 6D 94 9E			add WALL_P+1
 17916 9867 85 8B			sta @move.src+1
 17917 9869 A9 00			lda <256
 17918 986B 85 86			sta @move.cnt
 17919 986D A9 01			lda >256
 17920 986F 85 87			sta @move.cnt+1
 17921 9871 20 B6 21			jsr @move
 17922
 17923 				; optimize FAIL ('SET_WALL', service.pas), line = 3869
 17924
 17925 9874 20 02 5C			jsr SET_WALL
 17926
 17927 				; optimize OK (service.pas), line = 3871
 17928
 17929 9877 AD 6F 9E			lda PATTERN
 17930 987A 8D 0F A2			sta FILL_PICTURE_WITH_PATTERN.PATT
 17931 987D AD 70 9E			lda PATTERN+1
 17932 9880 8D 10 A2			sta FILL_PICTURE_WITH_PATTERN.PATT+1
 17933 9883 20 37 77			jsr FILL_PICTURE_WITH_PATTERN
 17934
 17935 				; optimize FAIL ('SHOWBTMPICTURE', service.pas), line = 3872
 17936
 17937 9886 E8				inx
 17938 9887 AD 4F 9E 95 96		mva PLAYSCREEN :STACKORIGIN,x
 17939 988C AD 50 9E 95 A6		mva PLAYSCREEN+1 :STACKORIGIN+STACKWIDTH,x
 17940 9891 20 90 42			jsr SHOWBTMPICTURE
 17941
 17942 				; optimize OK (service.pas), line = 3879
 17943
 17944 9894 AD 5E A0			lda adr.SCORE.PLAYER+$04
 17945 9897 8D 58 A2			sta WRITE_SCORE.SC
 17946 989A AD 5F A0			lda adr.SCORE.PLAYER+1+$04
 17947 989D 8D 59 A2			sta WRITE_SCORE.SC+1
 17948 98A0 AD 60 A0			lda adr.SCORE.PLAYER+2+$04
 17949 98A3 8D 5A A2			sta WRITE_SCORE.SC+2
 17950 98A6 AD 61 A0			lda adr.SCORE.PLAYER+3+$04
 17951 98A9 8D 5B A2			sta WRITE_SCORE.SC+3
 17952 98AC A9 FD			lda #$FD
 17953 98AE 8D 54 A2			sta WRITE_SCORE.PX
 17954 98B1 A9 00			lda #$00
 17955 98B3 8D 55 A2			sta WRITE_SCORE.PX+1
 17956 98B6 A9 3C			lda #$3C
 17957 98B8 8D 56 A2			sta WRITE_SCORE.PY
 17958 98BB A9 00			lda #$00
 17959 98BD 8D 57 A2			sta WRITE_SCORE.PY+1
 17960 98C0 20 E9 80			jsr WRITE_SCORE
 17961
 17962 				; optimize OK (service.pas), line = 3880
 17963
 17964 98C3 AD 62 A0			lda adr.SCORE.PLAYER+$08
 17965 98C6 8D 58 A2			sta WRITE_SCORE.SC
 17966 98C9 AD 63 A0			lda adr.SCORE.PLAYER+1+$08
 17967 98CC 8D 59 A2			sta WRITE_SCORE.SC+1
 17968 98CF AD 64 A0			lda adr.SCORE.PLAYER+2+$08
 17969 98D2 8D 5A A2			sta WRITE_SCORE.SC+2
 17970 98D5 AD 65 A0			lda adr.SCORE.PLAYER+3+$08
 17971 98D8 8D 5B A2			sta WRITE_SCORE.SC+3
 17972 98DB A9 FD			lda #$FD
 17973 98DD 8D 54 A2			sta WRITE_SCORE.PX
 17974 98E0 A9 00			lda #$00
 17975 98E2 8D 55 A2			sta WRITE_SCORE.PX+1
 17976 98E5 A9 5D			lda #$5D
 17977 98E7 8D 56 A2			sta WRITE_SCORE.PY
 17978 98EA A9 00			lda #$00
 17979 98EC 8D 57 A2			sta WRITE_SCORE.PY+1
 17980 98EF 20 E9 80			jsr WRITE_SCORE
 17981
 17982 				; optimize OK (service.pas), line = 3881
 17983
 17984 98F2 A9 FD			lda #$FD
 17985 98F4 8D 54 A2			sta WRITE_SCORE.PX
 17986 98F7 A9 00			lda #$00
 17987 98F9 8D 55 A2			sta WRITE_SCORE.PX+1
 17988 98FC A9 80			lda #$80
 17989 98FE 8D 56 A2			sta WRITE_SCORE.PY
 17990 9901 A9 00			lda #$00
 17991 9903 8D 57 A2			sta WRITE_SCORE.PY+1
 17992 9906 AD 6C A0			lda SCORE.HISCORE
 17993 9909 8D 58 A2			sta WRITE_SCORE.SC
 17994 990C AD 6D A0			lda SCORE.HISCORE+1
 17995 990F 8D 59 A2			sta WRITE_SCORE.SC+1
 17996 9912 AD 6E A0			lda SCORE.HISCORE+2
 17997 9915 8D 5A A2			sta WRITE_SCORE.SC+2
 17998 9918 AD 6F A0			lda SCORE.HISCORE+3
 17999 991B 8D 5B A2			sta WRITE_SCORE.SC+3
 18000 991E 20 E9 80			jsr WRITE_SCORE
 18001
 18002 				; --- RepeatUntilProlog
 18003 9921			l_36E3
 18004
 18005 				; --- RepeatUntilProlog
 18006 9921			l_36E4
 18007
 18008 				; optimize OK (service.pas), line = 3891
 18009
 18010 9921 AC 75 A0			ldy CUR_PLAYER
 18011 9924 B9 71 A0			lda adr.SCORE.ROUNDSEL,y
 18012 9927 D0 77			jne l_36F6
 18013
 18014 				; optimize FAIL (1, service.pas), line = 3893
 18015
 18016 9929 E8				inx
 18017 992A AD 75 A0 95 96		mva CUR_PLAYER :STACKORIGIN,x
 18018 992F A9 00 95 A6			mva #$00 :STACKORIGIN+STACKWIDTH,x
 18019 9933 20 72 97			jsr CHOOSE_START_WALL
 18020 9936 E8				inx
 18021 9937 AD 03 A3 95 96		mva CHOOSE_START_WALL.RESULT :STACKORIGIN,x
 18022 993C AD 04 A3 95 A6		mva CHOOSE_START_WALL.RESULT+1 :STACKORIGIN+STACKWIDTH,x
 18023 9941 B4 95			ldy :STACKORIGIN-1,x
 18024 9943 B5 96			lda :STACKORIGIN,x
 18025 9945 99 66 A0			sta adr.SCORE.WALL_N,y
 18026 9948 CA				dex
 18027 9949 CA				dex
 18028
 18029 				; optimize OK (service.pas), line = 3896
 18030
 18031 994A A9 00			lda #$00
 18032 994C 85 9F			sta :STACKORIGIN+9
 18033 994E AD 75 A0			lda CUR_PLAYER
 18034 9951 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 18035 9953 AC 75 A0			ldy CUR_PLAYER
 18036 9956 B9 66 A0			lda adr.SCORE.WALL_N,y
 18037 9959 38 E9 01			sub #$01
 18038 995C 85 86			sta :eax
 18039 995E A9 00			lda #$00
 18040 9960 E9 00			sbc #$00
 18041 9962 85 87			sta :eax+1
 18042 9964 A9 00			lda #$00
 18043 9966 85 8E			sta :ecx
 18044 9968 A9 01			lda #$01
 18045 996A 85 8F			sta :ecx+1
 18046 					.ifdef fmulinit
 18047 					fmulu_16
 18048 					els
 18049 996C 20 0B 23			imulCX
 18050 					eif
 18051 996F AD 93 9E			lda WALL_P
 18052 9972 18 65 9F			add :STACKORIGIN+9
 18053 9975 85 8E			sta @move.dst
 18054 9977 AD 94 9E			lda WALL_P+1
 18055 997A 65 AF			adc :STACKORIGIN+STACKWIDTH+9
 18056 997C 85 8F			sta @move.dst+1
 18057 997E A5 86			lda :eax
 18058 9980 18 6D 97 9E			add ALL_WALLS
 18059 9984 85 8A			sta @move.src
 18060 9986 A5 87			lda :eax+1
 18061 9988 6D 98 9E			adc ALL_WALLS+1
 18062 998B 85 8B			sta @move.src+1
 18063 998D A9 00			lda <256
 18064 998F 85 86			sta @move.cnt
 18065 9991 A9 01			lda >256
 18066 9993 85 87			sta @move.cnt+1
 18067 9995 20 B6 21			jsr @move
 18068
 18069 				; optimize OK (service.pas), line = 3900
 18070
 18071 9998 AC 75 A0			ldy CUR_PLAYER
 18072 999B A9 01			lda #$01
 18073 999D 99 71 A0			sta adr.SCORE.ROUNDSEL,y
 18074 99A0			l_36F6
 18075
 18076 				; optimize OK (service.pas), line = 3904
 18077
 18078 99A0 AD 95 9E			lda WALL
 18079 99A3 85 8E			sta @move.dst
 18080 99A5 AD 96 9E			lda WALL+1
 18081 99A8 85 8F			sta @move.dst+1
 18082 99AA AD 93 9E			lda WALL_P
 18083 99AD 85 8A			sta @move.src
 18084 99AF AD 75 A0			lda CUR_PLAYER
 18085 99B2 18 6D 94 9E			add WALL_P+1
 18086 99B6 85 8B			sta @move.src+1
 18087 99B8 A9 00			lda <256
 18088 99BA 85 86			sta @move.cnt
 18089 99BC A9 01			lda >256
 18090 99BE 85 87			sta @move.cnt+1
 18091 99C0 20 B6 21			jsr @move
 18092
 18093 				; optimize FAIL ('SET_WALL', service.pas), line = 3905
 18094
 18095 99C3 20 02 5C			jsr SET_WALL
 18096
 18097 				; optimize FAIL ('BOUNCEBALL', service.pas), line = 3910
 18098
 18099 99C6 20 64 8F			jsr BOUNCEBALL
 18100 99C9 AD 99 A2			lda BOUNCEBALL.RESULT
 18101 99CC 8D 22 A3			sta NWALL
 18102
 18103 				; optimize OK (service.pas), line = 3913
 18104
 18105 99CF F0 6A			jeq l_3744
 18106
 18107 				; optimize OK (service.pas), line = 3916
 18108
 18109 99D1 AC 75 A0			ldy CUR_PLAYER
 18110 99D4 B9 66 A0			lda adr.SCORE.WALL_N,y
 18111 99D7 18 69 01			add #$01
 18112 99DA 99 66 A0			sta adr.SCORE.WALL_N,y
 18113
 18114 				; optimize OK (service.pas), line = 3919
 18115
 18116 99DD AD 59 A0			lda TOTALWALL
 18117 99E0 D9 66 A0			cmp adr.SCORE.WALL_N,y
 18118 99E3 B0 05			jcs l_3760
 18119
 18120 				; optimize OK (service.pas), line = 3920
 18121
 18122 99E5 A9 01			lda #$01
 18123 99E7 99 66 A0			sta adr.SCORE.WALL_N,y
 18124 99EA			l_3760
 18125
 18126 				; optimize OK (service.pas), line = 3923
 18127
 18128 99EA A9 00			lda #$00
 18129 99EC 85 9F			sta :STACKORIGIN+9
 18130 99EE AD 75 A0			lda CUR_PLAYER
 18131 99F1 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 18132 99F3 AC 75 A0			ldy CUR_PLAYER
 18133 99F6 B9 66 A0			lda adr.SCORE.WALL_N,y
 18134 99F9 38 E9 01			sub #$01
 18135 99FC 85 86			sta :eax
 18136 99FE A9 00			lda #$00
 18137 9A00 E9 00			sbc #$00
 18138 9A02 85 87			sta :eax+1
 18139 9A04 A9 00			lda #$00
 18140 9A06 85 8E			sta :ecx
 18141 9A08 A9 01			lda #$01
 18142 9A0A 85 8F			sta :ecx+1
 18143 					.ifdef fmulinit
 18144 					fmulu_16
 18145 					els
 18146 9A0C 20 0B 23			imulCX
 18147 					eif
 18148 9A0F AD 93 9E			lda WALL_P
 18149 9A12 18 65 9F			add :STACKORIGIN+9
 18150 9A15 85 8E			sta @move.dst
 18151 9A17 AD 94 9E			lda WALL_P+1
 18152 9A1A 65 AF			adc :STACKORIGIN+STACKWIDTH+9
 18153 9A1C 85 8F			sta @move.dst+1
 18154 9A1E A5 86			lda :eax
 18155 9A20 18 6D 97 9E			add ALL_WALLS
 18156 9A24 85 8A			sta @move.src
 18157 9A26 A5 87			lda :eax+1
 18158 9A28 6D 98 9E			adc ALL_WALLS+1
 18159 9A2B 85 8B			sta @move.src+1
 18160 9A2D A9 00			lda <256
 18161 9A2F 85 86			sta @move.cnt
 18162 9A31 A9 01			lda >256
 18163 9A33 85 87			sta @move.cnt+1
 18164 9A35 20 B6 21			jsr @move
 18165 9A38 4C 46 9A			jmp l_3792
 18166 9A3B			l_3744
 18167
 18168 				; optimize OK (service.pas), line = 3929
 18169
 18170 9A3B AC 75 A0			ldy CUR_PLAYER
 18171 9A3E B9 69 A0			lda adr.SCORE.LIVES,y
 18172 9A41 D0 03			jne l_37A7
 18173 9A43 20 2C 79			jsr GAME_OVER
 18174 9A46			l_3792
 18175 9A46			l_37A7
 18176
 18177 				; optimize OK (service.pas), line = 3934
 18178
 18179 9A46 AD 22 A3			lda NWALL
 18180 9A49 F0 03 4C 21 99		jne l_36E4
 18181
 18182 				; optimize FAIL (0, service.pas), line = 3937
 18183
 18184 9A4E EE 75 A0			inc CUR_PLAYER
 18185
 18186 				; optimize OK (service.pas), line = 3938
 18187
 18188 9A51 AD 20 A3			lda PLAYERS
 18189 9A54 CD 75 A0			cmp CUR_PLAYER
 18190 9A57 AD 21 A3			lda PLAYERS+1
 18191 9A5A E9 00			sbc #$00
 18192 9A5C 50 02			svc
 18193 9A5E 49 80			eor #$80
 18194 9A60 10 05			jpl l_37CF
 18195 9A62 A9 01			lda #$01
 18196 9A64 8D 75 A0			sta CUR_PLAYER
 18197 9A67			l_37CF
 18198
 18199 				; optimize OK (service.pas), line = 3944
 18200
 18201 9A67 AC 75 A0			ldy CUR_PLAYER
 18202 9A6A B9 69 A0			lda adr.SCORE.LIVES,y
 18203 9A6D D0 09			jne l_37EB
 18204 9A6F A9 03			lda #$03
 18205 9A71 38 ED 75 A0			sub CUR_PLAYER
 18206 9A75 8D 75 A0			sta CUR_PLAYER
 18207 9A78			l_37EB
 18208
 18209 				; optimize OK (service.pas), line = 3949
 18210
 18211 9A78 A0 01			ldy #1
 18212 9A7A AD 6A A0			lda adr.SCORE.LIVES+$01
 18213 9A7D F0 01			beq @+
 18214 9A7F 88				dey
 18215 				@
 18216 9A80 84 9F			sty :STACKORIGIN+9
 18217 9A82 A0 01			ldy #1
 18218 9A84 AD 6B A0			lda adr.SCORE.LIVES+$02
 18219 9A87 F0 01			beq @+
 18220 9A89 88				dey
 18221 				@
 18222 9A8A 98				tya
 18223 9A8B 25 9F			and :STACKORIGIN+9
 18224 9A8D 0D 74 A0			ora SCORE.ABORTPLAY
 18225 9A90 D0 03 4C 21 99		jeq l_36E3
 18226
 18227 				; ------------------------------------------------------------
 18228
 18229 = A320			PLAYERS	= DATAORIGIN+$047B
 18230 = A322			NWALL	= DATAORIGIN+$047D
 18231
 18232 = A320			@VarData	= PLAYERS
 18233 = 0003			@VarDataSize	= 3
 18234
 18235 9A95			@exit
 18236 					.ifdef @new
 18237 					lda <@VarData
 18238 					sta :ztmp
 18239 					lda >@VarData
 18240 					ldy #@VarDataSize-1
 18241 					jmp @FreeMem
 18242 					els
 18243 9A95 60				rts						; ret
 18244 					eif
 18245 				.endl
 18246
 18247 9A96			.local	INIT_GAME					; PROCEDURE
 18248
 18249 				; optimize FAIL ('SYSTEM.RANDOMIZE', arkanoid_vbxe.pas), line = 124
 18250
 18251 9A96 20 F7 32			jsr SYSTEM.RANDOMIZE
 18252
 18253 				; optimize FAIL ('INITSVGA', arkanoid_vbxe.pas), line = 126
 18254
 18255 9A99 20 FF 3C			jsr INITSVGA
 18256
 18257 				; optimize FAIL ('INITROWARRAY', arkanoid_vbxe.pas), line = 127
 18258
 18259 9A9C 20 BD 3C			jsr INITROWARRAY
 18260
 18261 				; optimize OK (btm.inc), line = 1
 18262
 18263 9A9F A9 00			lda #$00
 18264 9AA1 8D A5 9F			sta PLAYSCREEN.OFS
 18265 9AA4 A9 5E			lda #$5E
 18266 9AA6 8D A6 9F			sta PLAYSCREEN.OFS+1
 18267 9AA9 A9 01			lda #$01
 18268 9AAB 8D A7 9F			sta PLAYSCREEN.OFS+2
 18269 9AAE A9 00			lda #$00
 18270 9AB0 8D A8 9F			sta PLAYSCREEN.OFS+3
 18271
 18272 				; optimize OK (btm.inc), line = 2
 18273
 18274 9AB3 A9 40			lda #$40
 18275 9AB5 8D A1 9F			sta PLAYSCREEN.WIDTH
 18276 9AB8 A9 01			lda #$01
 18277 9ABA 8D A2 9F			sta PLAYSCREEN.WIDTH+1
 18278
 18279 				; optimize OK (btm.inc), line = 3
 18280
 18281 9ABD A9 C8			lda #$C8
 18282 9ABF 8D A3 9F			sta PLAYSCREEN.HEIGHT
 18283 9AC2 A9 00			lda #$00
 18284 9AC4 8D A4 9F			sta PLAYSCREEN.HEIGHT+1
 18285
 18286 				; optimize OK (btm.inc), line = 5
 18287
 18288 9AC7 8D DD 9F			sta PRESENTS.OFS
 18289 9ACA A9 58			lda #$58
 18290 9ACC 8D DE 9F			sta PRESENTS.OFS+1
 18291 9ACF A9 02			lda #$02
 18292 9AD1 8D DF 9F			sta PRESENTS.OFS+2
 18293 9AD4 A9 00			lda #$00
 18294 9AD6 8D E0 9F			sta PRESENTS.OFS+3
 18295
 18296 				; optimize OK (btm.inc), line = 6
 18297
 18298 9AD9 A9 40			lda #$40
 18299 9ADB 8D D9 9F			sta PRESENTS.WIDTH
 18300 9ADE A9 01			lda #$01
 18301 9AE0 8D DA 9F			sta PRESENTS.WIDTH+1
 18302
 18303 				; optimize OK (btm.inc), line = 7
 18304
 18305 9AE3 A9 C8			lda #$C8
 18306 9AE5 8D DB 9F			sta PRESENTS.HEIGHT
 18307 9AE8 A9 00			lda #$00
 18308 9AEA 8D DC 9F			sta PRESENTS.HEIGHT+1
 18309
 18310 				; optimize OK (btm.inc), line = 9
 18311
 18312 9AED 8D CD 9F			sta EXPLOSION.OFS
 18313 9AF0 A9 52			lda #$52
 18314 9AF2 8D CE 9F			sta EXPLOSION.OFS+1
 18315 9AF5 A9 03			lda #$03
 18316 9AF7 8D CF 9F			sta EXPLOSION.OFS+2
 18317 9AFA A9 00			lda #$00
 18318 9AFC 8D D0 9F			sta EXPLOSION.OFS+3
 18319
 18320 				; optimize OK (btm.inc), line = 10
 18321
 18322 9AFF A9 2A			lda #$2A
 18323 9B01 8D C9 9F			sta EXPLOSION.WIDTH
 18324 9B04 A9 00			lda #$00
 18325 9B06 8D CA 9F			sta EXPLOSION.WIDTH+1
 18326
 18327 				; optimize OK (btm.inc), line = 11
 18328
 18329 9B09 A9 72			lda #$72
 18330 9B0B 8D CB 9F			sta EXPLOSION.HEIGHT
 18331 9B0E A9 00			lda #$00
 18332 9B10 8D CC 9F			sta EXPLOSION.HEIGHT+1
 18333
 18334 				; optimize OK (btm.inc), line = 13
 18335
 18336 9B13 A9 B4			lda #$B4
 18337 9B15 8D D5 9F			sta NEWVAUS.OFS
 18338 9B18 A9 64			lda #$64
 18339 9B1A 8D D6 9F			sta NEWVAUS.OFS+1
 18340 9B1D A9 03			lda #$03
 18341 9B1F 8D D7 9F			sta NEWVAUS.OFS+2
 18342 9B22 A9 00			lda #$00
 18343 9B24 8D D8 9F			sta NEWVAUS.OFS+3
 18344
 18345 				; optimize OK (btm.inc), line = 14
 18346
 18347 9B27 A9 29			lda #$29
 18348 9B29 8D D1 9F			sta NEWVAUS.WIDTH
 18349 9B2C A9 00			lda #$00
 18350 9B2E 8D D2 9F			sta NEWVAUS.WIDTH+1
 18351
 18352 				; optimize OK (btm.inc), line = 15
 18353
 18354 9B31 A9 C1			lda #$C1
 18355 9B33 8D D3 9F			sta NEWVAUS.HEIGHT
 18356 9B36 A9 00			lda #$00
 18357 9B38 8D D4 9F			sta NEWVAUS.HEIGHT+1
 18358
 18359 				; optimize OK (btm.inc), line = 17
 18360
 18361 9B3B A9 9D			lda #$9D
 18362 9B3D 8D E5 9F			sta SOUNDFX.OFS
 18363 9B40 A9 83			lda #$83
 18364 9B42 8D E6 9F			sta SOUNDFX.OFS+1
 18365 9B45 A9 03			lda #$03
 18366 9B47 8D E7 9F			sta SOUNDFX.OFS+2
 18367 9B4A A9 00			lda #$00
 18368 9B4C 8D E8 9F			sta SOUNDFX.OFS+3
 18369
 18370 				; optimize OK (btm.inc), line = 18
 18371
 18372 9B4F A9 15			lda #$15
 18373 9B51 8D E1 9F			sta SOUNDFX.WIDTH
 18374 9B54 A9 00			lda #$00
 18375 9B56 8D E2 9F			sta SOUNDFX.WIDTH+1
 18376
 18377 				; optimize OK (btm.inc), line = 19
 18378
 18379 9B59 A9 26			lda #$26
 18380 9B5B 8D E3 9F			sta SOUNDFX.HEIGHT
 18381 9B5E A9 00			lda #$00
 18382 9B60 8D E4 9F			sta SOUNDFX.HEIGHT+1
 18383
 18384 				; optimize OK (btm.inc), line = 21
 18385
 18386 9B63 A9 BB			lda #$BB
 18387 9B65 8D ED 9F			sta SHINEWALL.OFS
 18388 9B68 A9 86			lda #$86
 18389 9B6A 8D EE 9F			sta SHINEWALL.OFS+1
 18390 9B6D A9 03			lda #$03
 18391 9B6F 8D EF 9F			sta SHINEWALL.OFS+2
 18392 9B72 A9 00			lda #$00
 18393 9B74 8D F0 9F			sta SHINEWALL.OFS+3
 18394
 18395 				; optimize OK (btm.inc), line = 22
 18396
 18397 9B77 A9 10			lda #$10
 18398 9B79 8D E9 9F			sta SHINEWALL.WIDTH
 18399 9B7C A9 00			lda #$00
 18400 9B7E 8D EA 9F			sta SHINEWALL.WIDTH+1
 18401
 18402 				; optimize OK (btm.inc), line = 23
 18403
 18404 9B81 A9 50			lda #$50
 18405 9B83 8D EB 9F			sta SHINEWALL.HEIGHT
 18406 9B86 A9 00			lda #$00
 18407 9B88 8D EC 9F			sta SHINEWALL.HEIGHT+1
 18408
 18409 				; optimize OK (btm.inc), line = 25
 18410
 18411 9B8B A9 BB			lda #$BB
 18412 9B8D 8D F5 9F			sta MINIVAUS.OFS
 18413 9B90 A9 8B			lda #$8B
 18414 9B92 8D F6 9F			sta MINIVAUS.OFS+1
 18415 9B95 A9 03			lda #$03
 18416 9B97 8D F7 9F			sta MINIVAUS.OFS+2
 18417 9B9A A9 00			lda #$00
 18418 9B9C 8D F8 9F			sta MINIVAUS.OFS+3
 18419
 18420 				; optimize OK (btm.inc), line = 26
 18421
 18422 9B9F A9 14			lda #$14
 18423 9BA1 8D F1 9F			sta MINIVAUS.WIDTH
 18424 9BA4 A9 00			lda #$00
 18425 9BA6 8D F2 9F			sta MINIVAUS.WIDTH+1
 18426
 18427 				; optimize OK (btm.inc), line = 27
 18428
 18429 9BA9 A9 05			lda #$05
 18430 9BAB 8D F3 9F			sta MINIVAUS.HEIGHT
 18431 9BAE A9 00			lda #$00
 18432 9BB0 8D F4 9F			sta MINIVAUS.HEIGHT+1
 18433
 18434 				; optimize OK (btm.inc), line = 29
 18435
 18436 9BB3 A9 1F			lda #$1F
 18437 9BB5 8D FD 9F			sta LEVELSEL.OFS
 18438 9BB8 A9 8C			lda #$8C
 18439 9BBA 8D FE 9F			sta LEVELSEL.OFS+1
 18440 9BBD A9 03			lda #$03
 18441 9BBF 8D FF 9F			sta LEVELSEL.OFS+2
 18442 9BC2 A9 00			lda #$00
 18443 9BC4 8D 00 A0			sta LEVELSEL.OFS+3
 18444
 18445 				; optimize OK (btm.inc), line = 30
 18446
 18447 9BC7 A9 15			lda #$15
 18448 9BC9 8D F9 9F			sta LEVELSEL.WIDTH
 18449 9BCC A9 00			lda #$00
 18450 9BCE 8D FA 9F			sta LEVELSEL.WIDTH+1
 18451
 18452 				; optimize OK (btm.inc), line = 31
 18453
 18454 9BD1 A9 5F			lda #$5F
 18455 9BD3 8D FB 9F			sta LEVELSEL.HEIGHT
 18456 9BD6 A9 00			lda #$00
 18457 9BD8 8D FC 9F			sta LEVELSEL.HEIGHT+1
 18458
 18459 				; optimize OK (btm.inc), line = 33
 18460
 18461 9BDB A9 EA			lda #$EA
 18462 9BDD 8D 05 A0			sta LETTERS.OFS
 18463 9BE0 A9 93			lda #$93
 18464 9BE2 8D 06 A0			sta LETTERS.OFS+1
 18465 9BE5 A9 03			lda #$03
 18466 9BE7 8D 07 A0			sta LETTERS.OFS+2
 18467 9BEA A9 00			lda #$00
 18468 9BEC 8D 08 A0			sta LETTERS.OFS+3
 18469
 18470 				; optimize OK (btm.inc), line = 34
 18471
 18472 9BEF A9 80			lda #$80
 18473 9BF1 8D 01 A0			sta LETTERS.WIDTH
 18474 9BF4 A9 00			lda #$00
 18475 9BF6 8D 02 A0			sta LETTERS.WIDTH+1
 18476
 18477 				; optimize OK (btm.inc), line = 35
 18478
 18479 9BF9 A9 38			lda #$38
 18480 9BFB 8D 03 A0			sta LETTERS.HEIGHT
 18481 9BFE A9 00			lda #$00
 18482 9C00 8D 04 A0			sta LETTERS.HEIGHT+1
 18483
 18484 				; optimize OK (btm.inc), line = 37
 18485
 18486 9C03 A9 EA			lda #$EA
 18487 9C05 8D B5 9F			sta NORMAL.OFS
 18488 9C08 A9 AF			lda #$AF
 18489 9C0A 8D B6 9F			sta NORMAL.OFS+1
 18490 9C0D A9 03			lda #$03
 18491 9C0F 8D B7 9F			sta NORMAL.OFS+2
 18492 9C12 A9 00			lda #$00
 18493 9C14 8D B8 9F			sta NORMAL.OFS+3
 18494
 18495 				; optimize OK (btm.inc), line = 38
 18496
 18497 9C17 A9 20			lda #$20
 18498 9C19 8D B1 9F			sta NORMAL.WIDTH
 18499 9C1C A9 00			lda #$00
 18500 9C1E 8D B2 9F			sta NORMAL.WIDTH+1
 18501
 18502 				; optimize OK (btm.inc), line = 39
 18503
 18504 9C21 A9 07			lda #$07
 18505 9C23 8D B3 9F			sta NORMAL.HEIGHT
 18506 9C26 A9 00			lda #$00
 18507 9C28 8D B4 9F			sta NORMAL.HEIGHT+1
 18508
 18509 				; optimize OK (btm.inc), line = 41
 18510
 18511 9C2B A9 CA			lda #$CA
 18512 9C2D 8D C5 9F			sta LASERS.OFS
 18513 9C30 A9 B0			lda #$B0
 18514 9C32 8D C6 9F			sta LASERS.OFS+1
 18515 9C35 A9 03			lda #$03
 18516 9C37 8D C7 9F			sta LASERS.OFS+2
 18517 9C3A A9 00			lda #$00
 18518 9C3C 8D C8 9F			sta LASERS.OFS+3
 18519
 18520 				; optimize OK (btm.inc), line = 42
 18521
 18522 9C3F A9 20			lda #$20
 18523 9C41 8D C1 9F			sta LASERS.WIDTH
 18524 9C44 A9 00			lda #$00
 18525 9C46 8D C2 9F			sta LASERS.WIDTH+1
 18526
 18527 				; optimize OK (btm.inc), line = 43
 18528
 18529 9C49 A9 07			lda #$07
 18530 9C4B 8D C3 9F			sta LASERS.HEIGHT
 18531 9C4E A9 00			lda #$00
 18532 9C50 8D C4 9F			sta LASERS.HEIGHT+1
 18533
 18534 				; optimize OK (btm.inc), line = 45
 18535
 18536 9C53 A9 AA			lda #$AA
 18537 9C55 8D BD 9F			sta ENLARGED.OFS
 18538 9C58 A9 B1			lda #$B1
 18539 9C5A 8D BE 9F			sta ENLARGED.OFS+1
 18540 9C5D A9 03			lda #$03
 18541 9C5F 8D BF 9F			sta ENLARGED.OFS+2
 18542 9C62 A9 00			lda #$00
 18543 9C64 8D C0 9F			sta ENLARGED.OFS+3
 18544
 18545 				; optimize OK (btm.inc), line = 46
 18546
 18547 9C67 A9 40			lda #$40
 18548 9C69 8D B9 9F			sta ENLARGED.WIDTH
 18549 9C6C A9 00			lda #$00
 18550 9C6E 8D BA 9F			sta ENLARGED.WIDTH+1
 18551
 18552 				; optimize OK (btm.inc), line = 47
 18553
 18554 9C71 A9 07			lda #$07
 18555 9C73 8D BB 9F			sta ENLARGED.HEIGHT
 18556 9C76 A9 00			lda #$00
 18557 9C78 8D BC 9F			sta ENLARGED.HEIGHT+1
 18558
 18559 				; optimize OK (btm.inc), line = 49
 18560
 18561 9C7B A9 6A			lda #$6A
 18562 9C7D 8D 0D A0			sta SHOOTS.OFS
 18563 9C80 A9 B3			lda #$B3
 18564 9C82 8D 0E A0			sta SHOOTS.OFS+1
 18565 9C85 A9 03			lda #$03
 18566 9C87 8D 0F A0			sta SHOOTS.OFS+2
 18567 9C8A A9 00			lda #$00
 18568 9C8C 8D 10 A0			sta SHOOTS.OFS+3
 18569
 18570 				; optimize OK (btm.inc), line = 50
 18571
 18572 9C8F A9 0D			lda #$0D
 18573 9C91 8D 09 A0			sta SHOOTS.WIDTH
 18574 9C94 A9 00			lda #$00
 18575 9C96 8D 0A A0			sta SHOOTS.WIDTH+1
 18576
 18577 				; optimize OK (btm.inc), line = 51
 18578
 18579 9C99 A9 08			lda #$08
 18580 9C9B 8D 0B A0			sta SHOOTS.HEIGHT
 18581 9C9E A9 00			lda #$00
 18582 9CA0 8D 0C A0			sta SHOOTS.HEIGHT+1
 18583
 18584 				; optimize OK (btm.inc), line = 53
 18585
 18586 9CA3 A9 D2			lda #$D2
 18587 9CA5 8D 15 A0			sta FLUX.OFS
 18588 9CA8 A9 B3			lda #$B3
 18589 9CAA 8D 16 A0			sta FLUX.OFS+1
 18590 9CAD A9 03			lda #$03
 18591 9CAF 8D 17 A0			sta FLUX.OFS+2
 18592 9CB2 A9 00			lda #$00
 18593 9CB4 8D 18 A0			sta FLUX.OFS+3
 18594
 18595 				; optimize OK (btm.inc), line = 54
 18596
 18597 9CB7 A9 08			lda #$08
 18598 9CB9 8D 11 A0			sta FLUX.WIDTH
 18599 9CBC A9 00			lda #$00
 18600 9CBE 8D 12 A0			sta FLUX.WIDTH+1
 18601
 18602 				; optimize OK (btm.inc), line = 55
 18603
 18604 9CC1 A9 29			lda #$29
 18605 9CC3 8D 13 A0			sta FLUX.HEIGHT
 18606 9CC6 A9 00			lda #$00
 18607 9CC8 8D 14 A0			sta FLUX.HEIGHT+1
 18608
 18609 				; optimize OK (btm.inc), line = 57
 18610
 18611 9CCB A9 1A			lda #$1A
 18612 9CCD 8D 9D 9F			sta BALLDATA.OFS
 18613 9CD0 A9 B5			lda #$B5
 18614 9CD2 8D 9E 9F			sta BALLDATA.OFS+1
 18615 9CD5 A9 03			lda #$03
 18616 9CD7 8D 9F 9F			sta BALLDATA.OFS+2
 18617 9CDA A9 00			lda #$00
 18618 9CDC 8D A0 9F			sta BALLDATA.OFS+3
 18619
 18620 				; optimize OK (btm.inc), line = 58
 18621
 18622 9CDF A9 05			lda #$05
 18623 9CE1 8D 99 9F			sta BALLDATA.WIDTH
 18624 9CE4 A9 00			lda #$00
 18625 9CE6 8D 9A 9F			sta BALLDATA.WIDTH+1
 18626
 18627 				; optimize OK (btm.inc), line = 59
 18628
 18629 9CE9 A9 05			lda #$05
 18630 9CEB 8D 9B 9F			sta BALLDATA.HEIGHT
 18631 9CEE A9 00			lda #$00
 18632 9CF0 8D 9C 9F			sta BALLDATA.HEIGHT+1
 18633
 18634 				; optimize OK (btm.inc), line = 61
 18635
 18636 9CF3 A9 33			lda #$33
 18637 9CF5 8D 2A A0			sta PATTERN.OFS
 18638 9CF8 A9 B5			lda #$B5
 18639 9CFA 8D 2B A0			sta PATTERN.OFS+1
 18640 9CFD A9 03			lda #$03
 18641 9CFF 8D 2C A0			sta PATTERN.OFS+2
 18642 9D02 A9 00			lda #$00
 18643 9D04 8D 2D A0			sta PATTERN.OFS+3
 18644
 18645 				; optimize OK (btm.inc), line = 62
 18646
 18647 9D07 A9 1A			lda #$1A
 18648 9D09 8D 26 A0			sta PATTERN.WIDTH
 18649 9D0C A9 00			lda #$00
 18650 9D0E 8D 27 A0			sta PATTERN.WIDTH+1
 18651
 18652 				; optimize OK (btm.inc), line = 63
 18653
 18654 9D11 A9 18			lda #$18
 18655 9D13 8D 28 A0			sta PATTERN.HEIGHT
 18656 9D16 A9 00			lda #$00
 18657 9D18 8D 29 A0			sta PATTERN.HEIGHT+1
 18658
 18659 				; optimize OK (btm.inc), line = 65
 18660
 18661 9D1B A9 A3			lda #$A3
 18662 9D1D 8D 32 A0			sta PATTERN0.OFS
 18663 9D20 A9 B7			lda #$B7
 18664 9D22 8D 33 A0			sta PATTERN0.OFS+1
 18665 9D25 A9 03			lda #$03
 18666 9D27 8D 34 A0			sta PATTERN0.OFS+2
 18667 9D2A A9 00			lda #$00
 18668 9D2C 8D 35 A0			sta PATTERN0.OFS+3
 18669
 18670 				; optimize OK (btm.inc), line = 66
 18671
 18672 9D2F A9 1A			lda #$1A
 18673 9D31 8D 2E A0			sta PATTERN0.WIDTH
 18674 9D34 A9 00			lda #$00
 18675 9D36 8D 2F A0			sta PATTERN0.WIDTH+1
 18676
 18677 				; optimize OK (btm.inc), line = 67
 18678
 18679 9D39 A9 18			lda #$18
 18680 9D3B 8D 30 A0			sta PATTERN0.HEIGHT
 18681 9D3E A9 00			lda #$00
 18682 9D40 8D 31 A0			sta PATTERN0.HEIGHT+1
 18683
 18684 				; optimize OK (btm.inc), line = 69
 18685
 18686 9D43 A9 13			lda #$13
 18687 9D45 8D 3A A0			sta PATTERN1.OFS
 18688 9D48 A9 BA			lda #$BA
 18689 9D4A 8D 3B A0			sta PATTERN1.OFS+1
 18690 9D4D A9 03			lda #$03
 18691 9D4F 8D 3C A0			sta PATTERN1.OFS+2
 18692 9D52 A9 00			lda #$00
 18693 9D54 8D 3D A0			sta PATTERN1.OFS+3
 18694
 18695 				; optimize OK (btm.inc), line = 70
 18696
 18697 9D57 A9 0E			lda #$0E
 18698 9D59 8D 36 A0			sta PATTERN1.WIDTH
 18699 9D5C A9 00			lda #$00
 18700 9D5E 8D 37 A0			sta PATTERN1.WIDTH+1
 18701
 18702 				; optimize OK (btm.inc), line = 71
 18703
 18704 9D61 A9 0E			lda #$0E
 18705 9D63 8D 38 A0			sta PATTERN1.HEIGHT
 18706 9D66 A9 00			lda #$00
 18707 9D68 8D 39 A0			sta PATTERN1.HEIGHT+1
 18708
 18709 				; optimize OK (btm.inc), line = 73
 18710
 18711 9D6B A9 D7			lda #$D7
 18712 9D6D 8D 42 A0			sta PATTERN2.OFS
 18713 9D70 A9 BA			lda #$BA
 18714 9D72 8D 43 A0			sta PATTERN2.OFS+1
 18715 9D75 A9 03			lda #$03
 18716 9D77 8D 44 A0			sta PATTERN2.OFS+2
 18717 9D7A A9 00			lda #$00
 18718 9D7C 8D 45 A0			sta PATTERN2.OFS+3
 18719
 18720 				; optimize OK (btm.inc), line = 74
 18721
 18722 9D7F A9 26			lda #$26
 18723 9D81 8D 3E A0			sta PATTERN2.WIDTH
 18724 9D84 A9 00			lda #$00
 18725 9D86 8D 3F A0			sta PATTERN2.WIDTH+1
 18726
 18727 				; optimize OK (btm.inc), line = 75
 18728
 18729 9D89 A9 23			lda #$23
 18730 9D8B 8D 40 A0			sta PATTERN2.HEIGHT
 18731 9D8E A9 00			lda #$00
 18732 9D90 8D 41 A0			sta PATTERN2.HEIGHT+1
 18733
 18734 				; optimize OK (btm.inc), line = 77
 18735
 18736 9D93 A9 09			lda #$09
 18737 9D95 8D 4A A0			sta PATTERN3.OFS
 18738 9D98 A9 C0			lda #$C0
 18739 9D9A 8D 4B A0			sta PATTERN3.OFS+1
 18740 9D9D A9 03			lda #$03
 18741 9D9F 8D 4C A0			sta PATTERN3.OFS+2
 18742 9DA2 A9 00			lda #$00
 18743 9DA4 8D 4D A0			sta PATTERN3.OFS+3
 18744
 18745 				; optimize OK (btm.inc), line = 78
 18746
 18747 9DA7 A9 1C			lda #$1C
 18748 9DA9 8D 46 A0			sta PATTERN3.WIDTH
 18749 9DAC A9 00			lda #$00
 18750 9DAE 8D 47 A0			sta PATTERN3.WIDTH+1
 18751
 18752 				; optimize OK (btm.inc), line = 79
 18753
 18754 9DB1 A9 1D			lda #$1D
 18755 9DB3 8D 48 A0			sta PATTERN3.HEIGHT
 18756 9DB6 A9 00			lda #$00
 18757 9DB8 8D 49 A0			sta PATTERN3.HEIGHT+1
 18758
 18759 				; optimize OK (btm.inc), line = 81
 18760
 18761 9DBB A9 35			lda #$35
 18762 9DBD 8D 52 A0			sta PATTERN4.OFS
 18763 9DC0 A9 C3			lda #$C3
 18764 9DC2 8D 53 A0			sta PATTERN4.OFS+1
 18765 9DC5 A9 03			lda #$03
 18766 9DC7 8D 54 A0			sta PATTERN4.OFS+2
 18767 9DCA A9 00			lda #$00
 18768 9DCC 8D 55 A0			sta PATTERN4.OFS+3
 18769
 18770 				; optimize OK (btm.inc), line = 82
 18771
 18772 9DCF A9 1E			lda #$1E
 18773 9DD1 8D 4E A0			sta PATTERN4.WIDTH
 18774 9DD4 A9 00			lda #$00
 18775 9DD6 8D 4F A0			sta PATTERN4.WIDTH+1
 18776
 18777 				; optimize OK (btm.inc), line = 83
 18778
 18779 9DD9 A9 1E			lda #$1E
 18780 9DDB 8D 50 A0			sta PATTERN4.HEIGHT
 18781 9DDE A9 00			lda #$00
 18782 9DE0 8D 51 A0			sta PATTERN4.HEIGHT+1
 18783
 18784 				; optimize OK (arkanoid_vbxe.pas), line = 134
 18785
 18786 9DE3 A9 20			lda #$20
 18787 9DE5 8D 59 A0			sta TOTALWALL
 18788
 18789 				; optimize OK (arkanoid_vbxe.pas), line = 136
 18790
 18791 9DE8 A9 50			lda #$50
 18792 9DEA 8D 6C A0			sta SCORE.HISCORE
 18793 9DED A9 C3			lda #$C3
 18794 9DEF 8D 6D A0			sta SCORE.HISCORE+1
 18795 9DF2 A9 00			lda #$00
 18796 9DF4 8D 6E A0			sta SCORE.HISCORE+2
 18797 9DF7 8D 6F A0			sta SCORE.HISCORE+3
 18798
 18799 				; optimize OK (arkanoid_vbxe.pas), line = 139
 18800
 18801 9DFA A9 01			lda #$01
 18802 9DFC 8D 97 A0			sta SOUND_ON
 18803
 18804 				; optimize OK (arkanoid_vbxe.pas), line = 140
 18805
 18806 9DFF A9 03			lda #$03
 18807 9E01 8D 7B A0			sta LV
 18808 9E04 A9 00			lda #$00
 18809 9E06 8D 7C A0			sta LV+1
 18810
 18811 				; --- RepeatUntilProlog
 18812 9E09			l_392D
 18813
 18814 				; optimize FAIL ('MAINSCREEN', arkanoid_vbxe.pas), line = 147
 18815
 18816 9E09 20 E9 97			jsr MAINSCREEN
 18817 9E0C AD 14 A3			lda MAINSCREEN.RESULT
 18818 9E0F 8D 70 A0			sta SCORE.PL_NUMB
 18819
 18820 				; optimize OK (arkanoid_vbxe.pas), line = 149
 18821
 18822 9E12 F0 0D			jeq l_3943
 18823 9E14 A9 01			lda #$01
 18824 9E16 8D 20 A3			sta START_GAME.PLAYERS
 18825 9E19 A9 00			lda #$00
 18826 9E1B 8D 21 A3			sta START_GAME.PLAYERS+1
 18827 9E1E 20 38 98			jsr START_GAME
 18828 9E21			l_3943
 18829
 18830 				; optimize OK (arkanoid_vbxe.pas), line = 151
 18831
 18832 9E21 AD 70 A0			lda SCORE.PL_NUMB
 18833 9E24 C9 01			cmp #$01
 18834 9E26 B0 E1			jcs l_392D
 18835
 18836 9E28			@exit
 18837 					.ifdef @new
 18838 					lda <@VarData
 18839 					sta :ztmp
 18840 					lda >@VarData
 18841 					ldy #@VarDataSize-1
 18842 					jmp @FreeMem
 18843 					els
 18844 9E28 60				rts						; ret
 18845 					eif
 18846 				.endl
 18847 9E29			l_0022
 18848
 18849 				; optimize FAIL ('INIT_GAME', arkanoid_vbxe.pas), line = 159
 18850
 18851 9E29 20 96 9A			jsr INIT_GAME
 18852
 18853 				; ------------------------------------------------------------
 18854
 18855 = 015E00			VBXE_DATA	= $15E00
 18856 = B100			adr.BLT	= $B100
 18857 9E2C			.var BLT	= adr.BLT .word
 18858 = B100			adr.BLT.SRC_ADR	= $B100
 18859 9E2C			.var BLT.SRC_ADR	= adr.BLT.SRC_ADR .word
 18860 = B100			BLT.SRC_ADR.BYTE0	= $B100
 18861 = B101			BLT.SRC_ADR.BYTE1	= $B101
 18862 = B102			BLT.SRC_ADR.BYTE2	= $B102
 18863 = B103			BLT.SRC_STEP_Y	= $B103
 18864 = B105			BLT.SRC_STEP_X	= $B105
 18865 = B106			adr.BLT.DST_ADR	= $B106
 18866 9E2C			.var BLT.DST_ADR	= adr.BLT.DST_ADR .word
 18867 = B106			BLT.DST_ADR.BYTE0	= $B106
 18868 = B107			BLT.DST_ADR.BYTE1	= $B107
 18869 = B108			BLT.DST_ADR.BYTE2	= $B108
 18870 = B109			BLT.DST_STEP_Y	= $B109
 18871 = B10B			BLT.DST_STEP_X	= $B10B
 18872 = B10C			BLT.BLT_WIDTH	= $B10C
 18873 = B10E			BLT.BLT_HEIGHT	= $B10E
 18874 = B10F			BLT.BLT_AND_MASK	= $B10F
 18875 = B110			BLT.BLT_XOR_MASK	= $B110
 18876 = B111			BLT.BLT_COLLISION_MASK	= $B111
 18877 = B112			BLT.BLT_ZOOM	= $B112
 18878 = B113			BLT.PATTERN_FEATURE	= $B113
 18879 = B114			BLT.BLT_CONTROL	= $B114
 18880 = 9F75			adr.VBXE_RAM	= DATAORIGIN+$00D0	; [8] OBJECT
 18881 9E2C			.var VBXE_RAM	= adr.VBXE_RAM .word
 18882 = 9F75			VBXE_RAM.POSITION	= DATAORIGIN+$00D0
 18883 = 9F79			VBXE_RAM.SIZE	= DATAORIGIN+$00D4
 18884 = 5000			VRAM	= $5000
 18885 = 0001			ERR1	= $01
 18886 = 0002			ERR2	= $02
 18887 = 0003			ERR3	= $03
 18888 = 0004			ERR4	= $04
 18889 = 000A			SCRMIN	= $0A
 18890 = 00D8			SCRMAX	= $D8
 18891 = 000C			SCRTOP	= $0C
 18892 = 00C8			SCRBOT	= $C8
 18893 = 0022			VAUS_W	= $22
 18894 = 0004			VAUS_H	= $04
 18895 = 00B8			VAUS_LINE	= $B8
 18896 = 00FF			EMP	= $FF
 18897 = 0005			BALLDIM	= $05
 18898 = 0003			BALLSPOT	= $03
 18899 = 001E			BALLDEV	= $1E
 18900 = 000A			SPEEDFLASH	= $0A
 18901 = 205E			adr.FLASH	= CODEORIGIN+$005E
 18902 9E2C			.var FLASH	= adr.FLASH .word
 18903 = 2069			adr.SCORE_WALL	= CODEORIGIN+$0069
 18904 9E2C			.var SCORE_WALL	= adr.SCORE_WALL .word
 18905 = 207F			adr.EMERG_DEV	= CODEORIGIN+$007F
 18906 9E2C			.var EMERG_DEV	= adr.EMERG_DEV .word
 18907 = 2088			adr.COLORBLOCK	= CODEORIGIN+$0088
 18908 9E2C			.var COLORBLOCK	= adr.COLORBLOCK .word
 18909 = 0001			GRAYDOWN	= $01
 18910 = 0001			STARTWALL	= $01
 18911 = 01F4			BALLSPEED	= $01F4
 18912 = 07D0			MAXSPEED	= $07D0
 18913 = 0064			MAXBRWHIT	= $64
 18914 = 0004			PATNUMBER	= $04
 18915 = 2092			adr.POS_DIGIT	= CODEORIGIN+$0092
 18916 9E2C			.var POS_DIGIT	= adr.POS_DIGIT .word
 18917 = 2096			adr.DIGITS	= CODEORIGIN+$0096
 18918 9E2C			.var DIGITS	= adr.DIGITS .word
 18919 = 20A1			adr.LEVEL	= CODEORIGIN+$00A1
 18920 9E2C			.var LEVEL	= adr.LEVEL .word
 18921 = 0258			SBDIR	= $0258
 18922 = 0003			DEFLEVEL	= $03
 18923 = 012C			LETTER_PROB	= $012C
 18924 = 03E8			LETTER_DROP	= $03E8
 18925 = 0008			LETTER_NUMB	= $08
 18926 = 0008			LETTER_FRM	= $08
 18927 = 0005			LETTER_SBF	= $05
 18928 = 20AD			adr.LETTER_DIS	= CODEORIGIN+$00AD
 18929 9E2C			.var LETTER_DIS	= adr.LETTER_DIS .word
 18930 = 00B0			FLUXLEVEL	= $B0
 18931 = 9F99			adr.BALLDATA	= DATAORIGIN+$00F4	; [8] RECORD
 18932 9E2C			.var BALLDATA	= adr.BALLDATA .word
 18933 = 9F99			BALLDATA.WIDTH	= DATAORIGIN+$00F4
 18934 = 9F9B			BALLDATA.HEIGHT	= DATAORIGIN+$00F6
 18935 = 9F9D			BALLDATA.OFS	= DATAORIGIN+$00F8
 18936 = 9FA1			adr.PLAYSCREEN	= DATAORIGIN+$00FC	; [8] RECORD
 18937 9E2C			.var PLAYSCREEN	= adr.PLAYSCREEN .word
 18938 = 9FA1			PLAYSCREEN.WIDTH	= DATAORIGIN+$00FC
 18939 = 9FA3			PLAYSCREEN.HEIGHT	= DATAORIGIN+$00FE
 18940 = 9FA5			PLAYSCREEN.OFS	= DATAORIGIN+$0100
 18941 = 9FA9			adr.PLAYVAUS	= DATAORIGIN+$0104	; [8] RECORD
 18942 9E2C			.var PLAYVAUS	= adr.PLAYVAUS .word
 18943 = 9FA9			PLAYVAUS.WIDTH	= DATAORIGIN+$0104
 18944 = 9FAB			PLAYVAUS.HEIGHT	= DATAORIGIN+$0106
 18945 = 9FAD			PLAYVAUS.OFS	= DATAORIGIN+$0108
 18946 = 9FB1			adr.NORMAL	= DATAORIGIN+$010C	; [8] RECORD
 18947 9E2C			.var NORMAL	= adr.NORMAL .word
 18948 = 9FB1			NORMAL.WIDTH	= DATAORIGIN+$010C
 18949 = 9FB3			NORMAL.HEIGHT	= DATAORIGIN+$010E
 18950 = 9FB5			NORMAL.OFS	= DATAORIGIN+$0110
 18951 = 9FB9			adr.ENLARGED	= DATAORIGIN+$0114	; [8] RECORD
 18952 9E2C			.var ENLARGED	= adr.ENLARGED .word
 18953 = 9FB9			ENLARGED.WIDTH	= DATAORIGIN+$0114
 18954 = 9FBB			ENLARGED.HEIGHT	= DATAORIGIN+$0116
 18955 = 9FBD			ENLARGED.OFS	= DATAORIGIN+$0118
 18956 = 9FC1			adr.LASERS	= DATAORIGIN+$011C	; [8] RECORD
 18957 9E2C			.var LASERS	= adr.LASERS .word
 18958 = 9FC1			LASERS.WIDTH	= DATAORIGIN+$011C
 18959 = 9FC3			LASERS.HEIGHT	= DATAORIGIN+$011E
 18960 = 9FC5			LASERS.OFS	= DATAORIGIN+$0120
 18961 = 9FC9			adr.EXPLOSION	= DATAORIGIN+$0124	; [8] RECORD
 18962 9E2C			.var EXPLOSION	= adr.EXPLOSION .word
 18963 = 9FC9			EXPLOSION.WIDTH	= DATAORIGIN+$0124
 18964 = 9FCB			EXPLOSION.HEIGHT	= DATAORIGIN+$0126
 18965 = 9FCD			EXPLOSION.OFS	= DATAORIGIN+$0128
 18966 = 9FD1			adr.NEWVAUS	= DATAORIGIN+$012C	; [8] RECORD
 18967 9E2C			.var NEWVAUS	= adr.NEWVAUS .word
 18968 = 9FD1			NEWVAUS.WIDTH	= DATAORIGIN+$012C
 18969 = 9FD3			NEWVAUS.HEIGHT	= DATAORIGIN+$012E
 18970 = 9FD5			NEWVAUS.OFS	= DATAORIGIN+$0130
 18971 = 9FD9			adr.PRESENTS	= DATAORIGIN+$0134	; [8] RECORD
 18972 9E2C			.var PRESENTS	= adr.PRESENTS .word
 18973 = 9FD9			PRESENTS.WIDTH	= DATAORIGIN+$0134
 18974 = 9FDB			PRESENTS.HEIGHT	= DATAORIGIN+$0136
 18975 = 9FDD			PRESENTS.OFS	= DATAORIGIN+$0138
 18976 = 9FE1			adr.SOUNDFX	= DATAORIGIN+$013C	; [8] RECORD
 18977 9E2C			.var SOUNDFX	= adr.SOUNDFX .word
 18978 = 9FE1			SOUNDFX.WIDTH	= DATAORIGIN+$013C
 18979 = 9FE3			SOUNDFX.HEIGHT	= DATAORIGIN+$013E
 18980 = 9FE5			SOUNDFX.OFS	= DATAORIGIN+$0140
 18981 = 9FE9			adr.SHINEWALL	= DATAORIGIN+$0144	; [8] RECORD
 18982 9E2C			.var SHINEWALL	= adr.SHINEWALL .word
 18983 = 9FE9			SHINEWALL.WIDTH	= DATAORIGIN+$0144
 18984 = 9FEB			SHINEWALL.HEIGHT	= DATAORIGIN+$0146
 18985 = 9FED			SHINEWALL.OFS	= DATAORIGIN+$0148
 18986 = 9FF1			adr.MINIVAUS	= DATAORIGIN+$014C	; [8] RECORD
 18987 9E2C			.var MINIVAUS	= adr.MINIVAUS .word
 18988 = 9FF1			MINIVAUS.WIDTH	= DATAORIGIN+$014C
 18989 = 9FF3			MINIVAUS.HEIGHT	= DATAORIGIN+$014E
 18990 = 9FF5			MINIVAUS.OFS	= DATAORIGIN+$0150
 18991 = 9FF9			adr.LEVELSEL	= DATAORIGIN+$0154	; [8] RECORD
 18992 9E2C			.var LEVELSEL	= adr.LEVELSEL .word
 18993 = 9FF9			LEVELSEL.WIDTH	= DATAORIGIN+$0154
 18994 = 9FFB			LEVELSEL.HEIGHT	= DATAORIGIN+$0156
 18995 = 9FFD			LEVELSEL.OFS	= DATAORIGIN+$0158
 18996 = A001			adr.LETTERS	= DATAORIGIN+$015C	; [8] RECORD
 18997 9E2C			.var LETTERS	= adr.LETTERS .word
 18998 = A001			LETTERS.WIDTH	= DATAORIGIN+$015C
 18999 = A003			LETTERS.HEIGHT	= DATAORIGIN+$015E
 19000 = A005			LETTERS.OFS	= DATAORIGIN+$0160
 19001 = A009			adr.SHOOTS	= DATAORIGIN+$0164	; [8] RECORD
 19002 9E2C			.var SHOOTS	= adr.SHOOTS .word
 19003 = A009			SHOOTS.WIDTH	= DATAORIGIN+$0164
 19004 = A00B			SHOOTS.HEIGHT	= DATAORIGIN+$0166
 19005 = A00D			SHOOTS.OFS	= DATAORIGIN+$0168
 19006 = A011			adr.FLUX	= DATAORIGIN+$016C	; [8] RECORD
 19007 9E2C			.var FLUX	= adr.FLUX .word
 19008 = A011			FLUX.WIDTH	= DATAORIGIN+$016C
 19009 = A013			FLUX.HEIGHT	= DATAORIGIN+$016E
 19010 = A015			FLUX.OFS	= DATAORIGIN+$0170
 19011 = A019			adr.VAUS	= DATAORIGIN+$0174	; [13] RECORD
 19012 9E2C			.var VAUS	= adr.VAUS .word
 19013 = A019			VAUS.X	= DATAORIGIN+$0174
 19014 = A01A			VAUS.Y	= DATAORIGIN+$0175
 19015 = A01B			VAUS.OLDX	= DATAORIGIN+$0176
 19016 = A01D			VAUS.OLDY	= DATAORIGIN+$0178
 19017 = A01F			VAUS.OLDLEN	= DATAORIGIN+$017A
 19018 = A021			VAUS.WIDTH	= DATAORIGIN+$017C
 19019 = A022			VAUS.HEIGHT	= DATAORIGIN+$017D
 19020 = A023			VAUS.FLASH	= DATAORIGIN+$017E
 19021 = A024			VAUS.IFLASH	= DATAORIGIN+$017F
 19022 = A025			VAUS.LETTER	= DATAORIGIN+$0180
 19023 = A026			adr.PATTERN	= DATAORIGIN+$0181	; [8] RECORD
 19024 9E2C			.var PATTERN	= adr.PATTERN .word
 19025 = A026			PATTERN.WIDTH	= DATAORIGIN+$0181
 19026 = A028			PATTERN.HEIGHT	= DATAORIGIN+$0183
 19027 = A02A			PATTERN.OFS	= DATAORIGIN+$0185
 19028 = A02E			adr.PATTERN0	= DATAORIGIN+$0189	; [8] RECORD
 19029 9E2C			.var PATTERN0	= adr.PATTERN0 .word
 19030 = A02E			PATTERN0.WIDTH	= DATAORIGIN+$0189
 19031 = A030			PATTERN0.HEIGHT	= DATAORIGIN+$018B
 19032 = A032			PATTERN0.OFS	= DATAORIGIN+$018D
 19033 = A036			adr.PATTERN1	= DATAORIGIN+$0191	; [8] RECORD
 19034 9E2C			.var PATTERN1	= adr.PATTERN1 .word
 19035 = A036			PATTERN1.WIDTH	= DATAORIGIN+$0191
 19036 = A038			PATTERN1.HEIGHT	= DATAORIGIN+$0193
 19037 = A03A			PATTERN1.OFS	= DATAORIGIN+$0195
 19038 = A03E			adr.PATTERN2	= DATAORIGIN+$0199	; [8] RECORD
 19039 9E2C			.var PATTERN2	= adr.PATTERN2 .word
 19040 = A03E			PATTERN2.WIDTH	= DATAORIGIN+$0199
 19041 = A040			PATTERN2.HEIGHT	= DATAORIGIN+$019B
 19042 = A042			PATTERN2.OFS	= DATAORIGIN+$019D
 19043 = A046			adr.PATTERN3	= DATAORIGIN+$01A1	; [8] RECORD
 19044 9E2C			.var PATTERN3	= adr.PATTERN3 .word
 19045 = A046			PATTERN3.WIDTH	= DATAORIGIN+$01A1
 19046 = A048			PATTERN3.HEIGHT	= DATAORIGIN+$01A3
 19047 = A04A			PATTERN3.OFS	= DATAORIGIN+$01A5
 19048 = A04E			adr.PATTERN4	= DATAORIGIN+$01A9	; [8] RECORD
 19049 9E2C			.var PATTERN4	= adr.PATTERN4 .word
 19050 = A04E			PATTERN4.WIDTH	= DATAORIGIN+$01A9
 19051 = A050			PATTERN4.HEIGHT	= DATAORIGIN+$01AB
 19052 = A052			PATTERN4.OFS	= DATAORIGIN+$01AD
 19053 = A056			STATUS	= DATAORIGIN+$01B1
 19054 = A057			SUCCESS	= DATAORIGIN+$01B2
 19055 = A058			REMAIN_BLK	= DATAORIGIN+$01B3
 19056 = A059			TOTALWALL	= DATAORIGIN+$01B4
 19057 = A05A			adr.SCORE	= DATAORIGIN+$01B5	; [27] RECORD
 19058 9E2C			.var SCORE	= adr.SCORE .word
 19059 = A05A			adr.SCORE.PLAYER	= [DATAORIGIN+$01B5] .array [3] .dword
 19060 9E2C			.var SCORE.PLAYER	= adr.SCORE.PLAYER .word
 19061 = A066			adr.SCORE.WALL_N	= [DATAORIGIN+$01C1] .array [3]
 19062 9E2C			.var SCORE.WALL_N	= adr.SCORE.WALL_N .word
 19063 = A069			adr.SCORE.LIVES	= [DATAORIGIN+$01C4] .array [3]
 19064 9E2C			.var SCORE.LIVES	= adr.SCORE.LIVES .word
 19065 = A06C			SCORE.HISCORE	= DATAORIGIN+$01C7
 19066 = A070			SCORE.PL_NUMB	= DATAORIGIN+$01CB
 19067 = A071			adr.SCORE.ROUNDSEL	= [DATAORIGIN+$01CC] .array [3]
 19068 9E2C			.var SCORE.ROUNDSEL	= adr.SCORE.ROUNDSEL .word
 19069 = A074			SCORE.ABORTPLAY	= DATAORIGIN+$01CF
 19070 = A075			CUR_PLAYER	= DATAORIGIN+$01D0
 19071 = A076			adr.SHINEREC	= DATAORIGIN+$01D1	; [5] RECORD
 19072 9E2C			.var SHINEREC	= adr.SHINEREC .word
 19073 = A076			SHINEREC.XB	= DATAORIGIN+$01D1
 19074 = A077			SHINEREC.YB	= DATAORIGIN+$01D2
 19075 = A078			SHINEREC.FRAME	= DATAORIGIN+$01D3
 19076 = A079			SHINEREC.BLOCK	= DATAORIGIN+$01D4
 19077 = A07A			SHINEREC.ACTIVE	= DATAORIGIN+$01D5
 19078 = A07B			LV	= DATAORIGIN+$01D6
 19079 = A07D			TRAINER	= DATAORIGIN+$01D8
 19080 = A07E			adr.LETT	= DATAORIGIN+$01D9	; [17] RECORD
 19081 9E2C			.var LETT	= adr.LETT .word
 19082 = A07E			LETT.X	= DATAORIGIN+$01D9
 19083 = A07F			LETT.Y	= DATAORIGIN+$01DA
 19084 = A080			LETT.TYP	= DATAORIGIN+$01DB
 19085 = A082			LETT.FRAME	= DATAORIGIN+$01DD
 19086 = A083			LETT.SUBFRAME	= DATAORIGIN+$01DE
 19087 = A084			LETT.ACTIVE	= DATAORIGIN+$01DF
 19088 = A085			LETT.INCOMING	= DATAORIGIN+$01E0
 19089 = A087			LETT.NEXTX	= DATAORIGIN+$01E2
 19090 = A089			LETT.NEXTY	= DATAORIGIN+$01E4
 19091 = A08B			LETT.NEXTTYPE	= DATAORIGIN+$01E6
 19092 = A08D			LETT.LAST	= DATAORIGIN+$01E8
 19093 = A08F			adr.FIRE	= DATAORIGIN+$01EA	; [5] RECORD
 19094 9E2C			.var FIRE	= adr.FIRE .word
 19095 = A08F			FIRE.X	= DATAORIGIN+$01EA
 19096 = A090			FIRE.Y	= DATAORIGIN+$01EB
 19097 = A091			FIRE.SHOT	= DATAORIGIN+$01EC
 19098 = A092			FIRE.AVL	= DATAORIGIN+$01ED
 19099 = A093			FIRE.NW	= DATAORIGIN+$01EE
 19100 = A094			BALLS_IN_PLAY	= DATAORIGIN+$01EF
 19101 = A095			SCRFLUX	= DATAORIGIN+$01F0
 19102 = A096			SCRFLUXCNT	= DATAORIGIN+$01F1
 19103 = A097			SOUND_ON	= DATAORIGIN+$01F2
 19104 = A098			HLP	= DATAORIGIN+$01F3
 19105 = A09A			F_HLP	= DATAORIGIN+$01F5
 19106 = C000			adr.ROW	= $C000
 19107 9E2C			.var ROW	= adr.ROW .word
 19108 = C200			adr.TMP	= $C200
 19109 9E2C			.var TMP	= adr.TMP .word
 19110 = C300			adr.MODY	= $C300
 19111 9E2C			.var MODY	= adr.MODY .word
 19112 = C400			adr.MODX	= $C400
 19113 9E2C			.var MODX	= adr.MODX .word
 19114 = D800			adr.WALL_P	= $D800
 19115 9E2C			.var WALL_P	= adr.WALL_P .word
 19116 = DB00			adr.WALL	= $DB00
 19117 9E2C			.var WALL	= adr.WALL .word
 19118 = DC00			adr.ALL_WALLS	= $DC00
 19119 9E2C			.var ALL_WALLS	= adr.ALL_WALLS .word
 19120 9E2C			@exit
 19121
 19122 9E2C A2 00		@halt	ldx #$00
 19123 9E2E 9A				txs
 19124
 19125 					.ifdef MAIN.@DEFINES.ROMOFF
 19126 9E2F EE 01 D3			inc portb
 19127 					.fi
 19128
 19129 9E32 A0 01			ldy #$01
 19130
 19131 9E34 60				rts
 19132
 19133 				; ------------------------------------------------------------
 19134
 19135 9E35			.local	@DEFINES
 19136 9E35			ATARI
 19137 9E35			CPU_6502
 19138 9E35			ROMOFF
 19139 				.endl
 19140
 19141 9E35			.local	@RESOURCE
 19142 				.endl
 19143
 19144 = 9E35 00 B1		BLT
 19144 = 9E37 00 B1		BLT.SRC_ADR
 19144 = 9E39 06 B1		BLT.DST_ADR
 19144 = 9E3B 75 9F		VBXE_RAM
 19144 = 9E3D 5E 20		FLASH
 19144 = 9E3F 69 20		SCORE_WALL
 19144 = 9E41 7F 20		EMERG_DEV
 19144 = 9E43 88 20		COLORBLOCK
 19144 = 9E45 92 20		POS_DIGIT
 19144 = 9E47 96 20		DIGITS
 19144 = 9E49 A1 20		LEVEL
 19144 = 9E4B AD 20		LETTER_DIS
 19144 = 9E4D 99 9F		BALLDATA
 19144 = 9E4F A1 9F		PLAYSCREEN
 19144 = 9E51 A9 9F		PLAYVAUS
 19144 = 9E53 B1 9F		NORMAL
 19144 = 9E55 B9 9F		ENLARGED
 19144 = 9E57 C1 9F		LASERS
 19144 = 9E59 C9 9F		EXPLOSION
 19144 = 9E5B D1 9F		NEWVAUS
 19144 = 9E5D D9 9F		PRESENTS
 19144 = 9E5F E1 9F		SOUNDFX
 19144 = 9E61 E9 9F		SHINEWALL
 19144 = 9E63 F1 9F		MINIVAUS
 19144 = 9E65 F9 9F		LEVELSEL
 19144 = 9E67 01 A0		LETTERS
 19144 = 9E69 09 A0		SHOOTS
 19144 = 9E6B 11 A0		FLUX
 19144 = 9E6D 19 A0		VAUS
 19144 = 9E6F 26 A0		PATTERN
 19144 = 9E71 2E A0		PATTERN0
 19144 = 9E73 36 A0		PATTERN1
 19144 = 9E75 3E A0		PATTERN2
 19144 = 9E77 46 A0		PATTERN3
 19144 = 9E79 4E A0		PATTERN4
 19144 = 9E7B 5A A0		SCORE
 19144 = 9E7D 5A A0		SCORE.PLAYER
 19144 = 9E7F 66 A0		SCORE.WALL_N
 19144 = 9E81 69 A0		SCORE.LIVES
 19144 = 9E83 71 A0		SCORE.ROUNDSEL
 19144 = 9E85 76 A0		SHINEREC
 19144 = 9E87 7E A0		LETT
 19144 = 9E89 8F A0		FIRE
 19144 = 9E8B 00 C0		ROW
 19144 = 9E8D 00 C2		TMP
 19144 = 9E8F 00 C3		MODY
 19144 = 9E91 00 C4		MODX
 19144 = 9E93 00 D8		WALL_P
 19144 = 9E95 00 DB		WALL
 19144 = 9E97 00 DC		ALL_WALLS
 19144 				.endl							; MAIN
 19145
 19146 				; ------------------------------------------------------------
 19147 				; ------------------------------------------------------------
 19148
 19149 				.macro	UNITINITIALIZATION
 19150 				
 19151 					.ifdef MAIN.SYSTEM.@UnitInit
 19152 					jsr MAIN.SYSTEM.@UnitInit
 19153 					.fi
 19154 				
 19155 					.ifdef MAIN.ATARI.@UnitInit
 19156 					jsr MAIN.ATARI.@UnitInit
 19157 					.fi
 19158 				
 19159 					.ifdef MAIN.CRT.@UnitInit
 19160 					jsr MAIN.CRT.@UnitInit
 19161 					.fi
 19162 				
 19163 					.ifdef MAIN.TYPES.@UnitInit
 19164 					jsr MAIN.TYPES.@UnitInit
 19165 					.fi
 19166 				
 19167 					.ifdef MAIN.GRAPH.@UnitInit
 19168 					jsr MAIN.GRAPH.@UnitInit
 19169 					.fi
 19170 				
 19171 					.ifdef MAIN.VBXE.@UnitInit
 19172 					jsr MAIN.VBXE.@UnitInit
 19173 					.fi
 19174 				
 19175 					.ifdef MAIN.JOYSTICK.@UnitInit
 19176 					jsr MAIN.JOYSTICK.@UnitInit
 19177 					.fi
 19178 				.endm
 19179
 19180 				; ------------------------------------------------------------
 19181
 19182 					ift .SIZEOF(MAIN.SYSTEM) > 0
 19183 					.print 'SYSTEM: ',MAIN.SYSTEM,'..',MAIN.SYSTEM+.SIZEOF(MAIN.SYSTEM)-1
 19183 				SYSTEM: $2ABC..$3396
 19184 					eif
 19185
 19186 					ift .SIZEOF(MAIN.ATARI) > 0
 19187 					.print 'ATARI: ',MAIN.ATARI,'..',MAIN.ATARI+.SIZEOF(MAIN.ATARI)-1
 19188 					eif
 19189
 19190 					ift .SIZEOF(MAIN.CRT) > 0
 19191 					.print 'CRT: ',MAIN.CRT,'..',MAIN.CRT+.SIZEOF(MAIN.CRT)-1
 19192 					eif
 19193
 19194 					ift .SIZEOF(MAIN.TYPES) > 0
 19195 					.print 'TYPES: ',MAIN.TYPES,'..',MAIN.TYPES+.SIZEOF(MAIN.TYPES)-1
 19196 					eif
 19197
 19198 					ift .SIZEOF(MAIN.GRAPH) > 0
 19199 					.print 'GRAPH: ',MAIN.GRAPH,'..',MAIN.GRAPH+.SIZEOF(MAIN.GRAPH)-1
 19199 				GRAPH: $3397..$3398
 19200 					eif
 19201
 19202 					ift .SIZEOF(MAIN.VBXE) > 0
 19203 					.print 'VBXE: ',MAIN.VBXE,'..',MAIN.VBXE+.SIZEOF(MAIN.VBXE)-1
 19203 				VBXE: $3399..$3834
 19204 					eif
 19205
 19206 					ift .SIZEOF(MAIN.JOYSTICK) > 0
 19207 					.print 'JOYSTICK: ',MAIN.JOYSTICK,'..',MAIN.JOYSTICK+.SIZEOF(MAIN.JOYSTICK)-1
 19207 				JOYSTICK: $3835..$383C
 19208 					eif
 19209
 19210 				.nowarn	.print 'CODE: ',CODEORIGIN,'..',MAIN.@RESOURCE-1
 19210 				CODE: $2000..$9E34
 19211
 19212 					ift .SIZEOF(MAIN.@RESOURCE)>0
 19213 				.nowarn	.print 'RESOURCE: ',MAIN.@RESOURCE,'..',MAIN.@RESOURCE+.SIZEOF(MAIN.@RESOURCE)-1
 19214 					eif
 19215
 19216 9E99			@end
 19217
 19218 				.nowarn	.print 'VARS: ',MAIN.@RESOURCE+.SIZEOF(MAIN.@RESOURCE),'..',@end-1
 19218 				VARS: $9E35..$9E98
 19219
 19220 				; ------------------------------------------------------------
 19221
 19222 = 9E99				?adr = *
 19223 					ift (?adr < ?old_adr) && (?old_adr - ?adr < $120)
 19224 = 9EA5				?adr = ?old_adr
 19225 					eif
 19226
 19227 					org ?adr
 19228 = 9EA5				?old_adr = *
 19229
 19230 9EA5			DATAORIGIN
 19231 9EA5-9EF8> 2D 0C 00 00 + .by  $2D $0C $00 $00 $00 $28 $00 $18  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
 19232 9EBD 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
 19233 9ED5 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
 19234 9EED 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $27  $00 $00 $00 $17
 19235
 19236 = 0054			VARINITSIZE	= *-DATAORIGIN
 19237 = 047E			VARDATASIZE	= 1150
 19238
 19239 = A323			PROGRAMSTACK	= DATAORIGIN+VARDATASIZE
 19240
 19241 					.print 'DATA: ',DATAORIGIN,'..',PROGRAMSTACK
 19241 				DATA: $9EA5..$A323
 19242
 19243 					ert DATAORIGIN<@end,'DATA memory overlap'
 19244
 19245 02E0-02E1> 2F 2A			run START
 19246
 19247 				; ------------------------------------------------------------
 19248
 19249 				.macro	STATICDATA
 19250 				.by  $11 $56 $42 $58 $45 $20 $6E $6F  $74 $20 $64 $65 $74 $65 $63 $74  $65 $64 $0B $47 $61 $6D $65 $20
 19251 				.by  $50 $61 $75 $73 $65 $64 $00 $00  $00 $00 $00 $00 $AA $00 $00 $AA  $00 $00 $00 $55 $AA $00 $AA $00
 19252 				.by  $00 $00 $AA $00 $AA $00 $AA $AA  $00 $00 $AA $AA $AA $00 $55 $55  $55 $00 $55 $55 $FF $00 $55 $FF
 19253 				.by  $55 $00 $55 $FF $FF $00 $FF $55  $55 $00 $FF $55 $FF $00 $FF $FF  $55 $00 $FF $FF $FF $00 $FF $D4
 19254 				.by  $D3 $D2 $D1 $D0 $CF $CE $CD $CC  $CB $00 $00 $0A $00 $14 $00 $1E  $00 $28 $00 $32 $00 $64 $00 $C8
 19255 				.by  $00 $FA $00 $F4 $01 $E8 $03 $00  $02 $13 $24 $35 $12 $23 $34 $45  $D4 $D3 $D2 $D1 $D0 $CF $CE $CD
 19256 				.by  $CC $CB $00 $3C $5D $80 $7D $60  $37 $67 $6A $4F $5F $61 $7F $6F  $00 $00 $00 $E8 $03 $2C $01 $64
 19257 				.by  $00 $3C $00 $23 $00 $00 $10 $14  $03 $12 $14 $14 $03
 19258 				.endm
 19259
 19260 					end
