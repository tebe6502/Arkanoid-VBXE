mads 2.1.8 build 10 (6 Jul 25)
D:\!Delphi\Arkanoid\vbxe\arkanoid_vbxe.a65 -hm -xli:d:\!Delphi\MadPascal\base 
Source: arkanoid_vbxe.a65
     1 				; ------------------------------------------------------------
     2 				; Mad Pascal Compiler version 1.7.5 [2025/08/30] for MOS 6502 CPU
     3 				; ------------------------------------------------------------
     4
     5 = 0010			STACKWIDTH	= 16
     6 = 2000			CODEORIGIN	= $2000
     7
     8 = 0001			TRUE		= 1
     9 = 0000			FALSE		= 0
    10 = 009B			EOL		= $9B
    11 = 0400			__BUFFER	= $0400
    12 = 0400			@BUF		= __BUFFER
    13
    14 				; ------------------------------------------------------------
    15
    16 					org $80
    17
    18 				zpage
    19
    20 				.if .def(@vbxe_detect)
    21 = 0080			fxptr	.ds 2						; VBXE pointer
    22 				.fi
    23
    24 				.if .def(@AllocMem)||.def(MAIN.SYSTEM.GETMEM)||.def(MAIN.SYSTEM.FREEMEM)
    25 				psptr	.ds 2						; PROGRAMSTACK Pointer
    26 				.fi
    27
    28 = 0082			bp	.ds 2
    29 = 0084			bp2	.ds 2
    30 = 0083			bp3	= bp+1
    31
    32 = 0086			eax	.ds 4						;8 bytes (aex + edx) -> divREAL
    33 = 008A			edx	.ds 4
    34 = 008E			ecx	.ds 4
    35
    36 				TMP
    37 				ztmp
    38 = 0092			ztmp8	.ds 1
    39 = 0093			ztmp9	.ds 1
    40 = 0094			ztmp10	.ds 1
    41 = 0095			ztmp11	.ds 1
    42
    43 = 0096			STACKORIGIN	.ds STACKWIDTH*4
    44 				zpend
    45
    46 				; ------------------------------------------------------------
    47
    48 = 0086			ax	= eax
    49 = 0086			al	= eax
    50 = 0087			ah	= eax+1
    51
    52 = 008E			cx	= ecx
    53 = 008E			cl	= ecx
    54 = 008F			ch	= ecx+1
    55
    56 = 008A			dx	= edx
    57 = 008A			dl	= edx
    58 = 008B			dh	= edx+1
    59
    60 					org eax
    61
    62 = 0086			FP1MAN0	.ds 1
    63 = 0087			FP1MAN1	.ds 1
    64 = 0088			FP1MAN2	.ds 1
    65 = 0089			FP1MAN3	.ds 1
    66
    67 					org edx
    68
    69 = 008A			FP2MAN0	.ds 1
    70 = 008B			FP2MAN1	.ds 1
    71 = 008C			FP2MAN2	.ds 1
    72 = 008D			FP2MAN3	.ds 1
    73
    74 					org ecx
    75
    76 = 008E			FPMAN0	.ds 1
    77 = 008F			FPMAN1	.ds 1
    78 = 0090			FPMAN2	.ds 1
    79 = 0091			FPMAN3	.ds 1
    80
    81 					org ztmp8
    82
    83 = 0092			FP1SGN	.ds 1
    84 = 0093			FP1EXP	.ds 1
    85
    86 					org ztmp10
    87
    88 = 0094			FP2SGN	.ds 1
    89 = 0095			FP2EXP	.ds 1
    90
    91 					org bp2
    92
    93 = 0084			FPSGN	.ds 1
    94 = 0085			FPEXP	.ds 1
    95
    96 					.ifdef MAIN.@DEFINES.BASICOFF
    97 					org CODEORIGIN
    98 					icl 'atari\basicoff.asm'
    99 					ini CODEORIGIN
   100 					.fi
   101
   102 					.ifdef MAIN.@DEFINES.S_VBXE
   103 					opt h-
   104 					ins 'atari\s_vbxe\sdxld2.obx'
   105 					opt h+
   106 					.fi
   107
   108 					org CODEORIGIN
   109
   110 				.local	MAIN.@RESOURCE
   111 				.endl
   112
   113 				.local	RESOURCE
   114 					icl 'atari\resource.asm'
Source: resource.asm
     1
  1539 					opt l+
   115 = 0000				?EXTDETECT = 0
   116 = 0000				?VBXDETECT = 0
   117
   118 20BB				RCDATA 'walls.dat' adr.ALL_WALLS 0 0 0 0 0 0 0 0
Macro: RESOURCE.RCDATA [Source: resource.asm]
     2 = 2100			len = .filesize('walls.dat')-0
     8 20BB				org RESORIGIN
    10 20BB 20 87 20		mcpy	jsr sys.off
    12 20BE A9 DC 85 8A A9 20 +  MWA #DATA EDX
    12 20C6 A9 00 85 8E A9 DC +  MWA #MAIN.ADR.ALL_WALLS ECX
    12 20CE A9 00 85 86 A9 21 +  MWA #LEN EAX
    12 20D6 20 2B 20		 JSR RESOURCE.MEMCPY
    14 20D9 4C AB 20			jmp sys.on
    16 20DC 00 00 00 00 00 00 + data	ins 'walls.dat',0
    20 					.print '$R RCDATA  ',main.ADR.ALL_WALLS,'..',main.ADR.ALL_WALLS+len-1," 'walls.dat'"
    20 				$R RCDATA  $DC00..$FCFF 'walls.dat'
    22 02E2-02E3> BB 20			ini mcpy
Source: arkanoid_vbxe.a65
   119 41DC				XBMP 'btm.bmp' VBXE_DATA 0 1 0 0 0 0 0 0
Macro: RESOURCE.XBMP [Source: resource.asm]
     2 = 0036			he	= .sizeof(s@bmp)
     4 41DC				.get 'btm.bmp',0,he
     9 = 0140			?bw	= .dget[s@bmp.biwidth]
    10 = 01EE			?bh	= .dget[s@bmp.biheight]
    20 41DC				org RESORIGIN
    22 20BB			lbmp
    25 20BB-2552> 20 00 20		jsr vbxe_detect
    26 20BE 90 4B			bcc ok
    28 20C0 A0 20		 LDY> NOTVBXE
    28 20C2 A9 DF		 LDA< NOTVBXE
    28 20C4 20 6C 20		 JSR RESOURCE.@PRINT
    29 20C7 A0 20		 LDY> _EOL
    29 20C9 A9 F0		 LDA< _EOL
    29 20CB 20 6C 20		 JSR RESOURCE.@PRINT
    30 20CE A0 20		 LDY> ANYKEY
    30 20D0 A9 F1		 LDA< ANYKEY
    30 20D2 20 6C 20		 JSR RESOURCE.@PRINT
    32 20D5 AD 0F D2		keypres	lda $d20f
    33 20D8 29 04			and #4
    34 20DA D0 F9			bne keypres
    36 20DC 68				pla
    37 20DD 68				pla
    38 20DE 60				rts
    40 20DF 56 42 58 45 20 6E + notVBXE	dta c'VBXE not detected'
    41 20F0 9B			_eol	dta $9b
    42 20F1 50 72 65 73 73 20 + anyKEY	dta c'Press any key to continue',$9b
    46 = 0001				.def ?VBXDETECT=1
    48 210B			ok	fxs FX_MEMC #%1000+$b0
Macro: RESOURCE.FXS [Source: vbxe.hea]
     2 210B A9 B8		        lda     #%1000+$B0
     3 210D A0 5E		        ldy     #FX_MEMC
     4 210F 91 80		        sta     (fxptr),y
Source: arkanoid_vbxe.a65
     2 2111 A9 01		        lda     #1
     3 2113 A0 45		        ldy     #FX_PSEL
     4 2115 91 80		        sta     (fxptr),y
Source: arkanoid_vbxe.a65
     2 2117 A9 00		        lda     #0
     3 2119 A0 44		        ldy     #FX_CSEL
     4 211B 91 80		        sta     (fxptr),y
Source: arkanoid_vbxe.a65
    53 211D A2 00			ldx #0
    55 211F 20 47 21		paloop	jsr pal
    56 2122 85 92			sta ztmp
    57 2124 20 47 21			jsr pal
    58 2127 85 93			sta ztmp+1
    59 2129 20 47 21			jsr pal
    60 212C 85 94			sta ztmp+2
    61 212E 20 47 21			jsr pal
    63 2131 A5 94			lda ztmp+2
     2 2133 A0 46		        ldy     #FX_CR
     3 2135 91 80		        sta     (fxptr),y
Source: arkanoid_vbxe.a65
    66 2137 A5 93			lda ztmp+1
     2 2139 A0 47		        ldy     #FX_CG
     3 213B 91 80		        sta     (fxptr),y
Source: arkanoid_vbxe.a65
    69 213D A5 92			lda ztmp
     2 213F A0 48		        ldy     #FX_CB
     3 2141 91 80		        sta     (fxptr),y
Source: arkanoid_vbxe.a65
    72 2143 E8				inx
    73 2144 D0 D9			bne paloop
    75 2146 60				rts
    77 2147 AD 53 21		pal	lda cpal
    78 = 2148			paladr	equ *-2
    79 214A EE 48 21 D0 03 EE + 	inw paladr
    80 2152 60				rts
    82 2153 00 00 00 00 7E 7E + cpal	ins 'btm.bmp',he,1024
    84 02E2-02E3> BB 20			ini lbmp
    87 = 026980			ln	= .filesize('btm.bmp')-he-1024
    88 = 0015			?bnk	= main.VBXE_DATA/$1000
    89 = 0001			?cnt	= 1
    91 2553				org RESORIGIN
     2 20BB-20C1> A9 95		        lda     #?BNK+$80
     3 20BD A0 5F		        ldy     #FX_MEMS
     4 20BF 91 80		        sta     (fxptr),y
Source: arkanoid_vbxe.a65
    93 20C1 60				rts
    94 02E2-02E3> BB 20			ini RESORIGIN
    96 20C2				org main.VBXE_DATA%$1000+$B000
    99 BE00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0002				?CNT++
    99 BF40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00C0				?TMP = ?BW-(*+?BW)%$C000
    99 = 0016				?BNK++
    99 C000				ORG RESORIGIN
     2 20BB-20C1> A9 96		        lda     #?BNK+$80
     3 20BD A0 5F		        ldy     #FX_MEMS
     4 20BF 91 80		        sta     (fxptr),y
    99 20C1 60				RTS
    99 02E2-02E3> BB 20			INI RESORIGIN
    99 20C2				ORG $B000
    99 = 0003				?CNT++
    99 B080				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0004				?CNT++
    99 B1C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0005				?CNT++
    99 B300				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0006				?CNT++
    99 B440				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0007				?CNT++
    99 B580				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0008				?CNT++
    99 B6C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0009				?CNT++
    99 B800				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 000A				?CNT++
    99 B940				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 000B				?CNT++
    99 BA80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 000C				?CNT++
    99 BBC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 000D				?CNT++
    99 BD00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 000E				?CNT++
    99 BE40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 000F				?CNT++
    99 BF80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0080				?TMP = ?BW-(*+?BW)%$C000
    99 = 0017				?BNK++
    99 C000				ORG RESORIGIN
     2 20BB-20C1> A9 97		        lda     #?BNK+$80
     3 20BD A0 5F		        ldy     #FX_MEMS
     4 20BF 91 80		        sta     (fxptr),y
    99 20C1 60				RTS
    99 02E2-02E3> BB 20			INI RESORIGIN
    99 20C2				ORG $B000
    99 = 0010				?CNT++
    99 B0C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0011				?CNT++
    99 B200				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0012				?CNT++
    99 B340				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0013				?CNT++
    99 B480				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0014				?CNT++
    99 B5C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0015				?CNT++
    99 B700				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0016				?CNT++
    99 B840				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0017				?CNT++
    99 B980				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0018				?CNT++
    99 BAC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0019				?CNT++
    99 BC00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 001A				?CNT++
    99 BD40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 001B				?CNT++
    99 BE80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 001C				?CNT++
    99 BFC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0040				?TMP = ?BW-(*+?BW)%$C000
    99 = 0018				?BNK++
    99 C000				ORG RESORIGIN
     2 20BB-20C1> A9 98		        lda     #?BNK+$80
     3 20BD A0 5F		        ldy     #FX_MEMS
     4 20BF 91 80		        sta     (fxptr),y
    99 20C1 60				RTS
    99 02E2-02E3> BB 20			INI RESORIGIN
    99 20C2				ORG $B000
    99 = 001D				?CNT++
    99 B100				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 001E				?CNT++
    99 B240				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 001F				?CNT++
    99 B380				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0020				?CNT++
    99 B4C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0021				?CNT++
    99 B600				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0022				?CNT++
    99 B740				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0023				?CNT++
    99 B880				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0024				?CNT++
    99 B9C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0025				?CNT++
    99 BB00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0026				?CNT++
    99 BC40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0027				?CNT++
    99 BD80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0028				?CNT++
    99 BEC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0140				?TMP = ?BW-(*+?BW)%$C000
    99 = 0019				?BNK++
    99 C000				ORG RESORIGIN
     2 20BB-20C1> A9 99		        lda     #?BNK+$80
     3 20BD A0 5F		        ldy     #FX_MEMS
     4 20BF 91 80		        sta     (fxptr),y
    99 20C1 60				RTS
    99 02E2-02E3> BB 20			INI RESORIGIN
    99 20C2				ORG $B000
    99 = 0029				?CNT++
    99 B000				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 002A				?CNT++
    99 B140				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 002B				?CNT++
    99 B280				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 002C				?CNT++
    99 B3C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 002D				?CNT++
    99 B500				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 002E				?CNT++
    99 B640				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 002F				?CNT++
    99 B780				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0030				?CNT++
    99 B8C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0031				?CNT++
    99 BA00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0032				?CNT++
    99 BB40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0033				?CNT++
    99 BC80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0034				?CNT++
    99 BDC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0035				?CNT++
    99 BF00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0100				?TMP = ?BW-(*+?BW)%$C000
    99 = 001A				?BNK++
    99 C000				ORG RESORIGIN
     2 20BB-20C1> A9 9A		        lda     #?BNK+$80
     3 20BD A0 5F		        ldy     #FX_MEMS
     4 20BF 91 80		        sta     (fxptr),y
    99 20C1 60				RTS
    99 02E2-02E3> BB 20			INI RESORIGIN
    99 20C2				ORG $B000
    99 = 0036				?CNT++
    99 B040				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0037				?CNT++
    99 B180				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0038				?CNT++
    99 B2C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0039				?CNT++
    99 B400				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 003A				?CNT++
    99 B540				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 003B				?CNT++
    99 B680				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 003C				?CNT++
    99 B7C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 003D				?CNT++
    99 B900				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 003E				?CNT++
    99 BA40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 003F				?CNT++
    99 BB80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0040				?CNT++
    99 BCC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0041				?CNT++
    99 BE00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0042				?CNT++
    99 BF40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00C0				?TMP = ?BW-(*+?BW)%$C000
    99 = 001B				?BNK++
    99 C000				ORG RESORIGIN
     2 20BB-20C1> A9 9B		        lda     #?BNK+$80
     3 20BD A0 5F		        ldy     #FX_MEMS
     4 20BF 91 80		        sta     (fxptr),y
    99 20C1 60				RTS
    99 02E2-02E3> BB 20			INI RESORIGIN
    99 20C2				ORG $B000
    99 = 0043				?CNT++
    99 B080				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0044				?CNT++
    99 B1C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0045				?CNT++
    99 B300				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0046				?CNT++
    99 B440				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0047				?CNT++
    99 B580				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0048				?CNT++
    99 B6C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0049				?CNT++
    99 B800				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 004A				?CNT++
    99 B940				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 004B				?CNT++
    99 BA80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 004C				?CNT++
    99 BBC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 004D				?CNT++
    99 BD00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 004E				?CNT++
    99 BE40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 004F				?CNT++
    99 BF80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0080				?TMP = ?BW-(*+?BW)%$C000
    99 = 001C				?BNK++
    99 C000				ORG RESORIGIN
     2 20BB-20C1> A9 9C		        lda     #?BNK+$80
     3 20BD A0 5F		        ldy     #FX_MEMS
     4 20BF 91 80		        sta     (fxptr),y
    99 20C1 60				RTS
    99 02E2-02E3> BB 20			INI RESORIGIN
    99 20C2				ORG $B000
    99 = 0050				?CNT++
    99 B0C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0051				?CNT++
    99 B200				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0052				?CNT++
    99 B340				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0053				?CNT++
    99 B480				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0054				?CNT++
    99 B5C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0055				?CNT++
    99 B700				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0056				?CNT++
    99 B840				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0057				?CNT++
    99 B980				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0058				?CNT++
    99 BAC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0059				?CNT++
    99 BC00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 005A				?CNT++
    99 BD40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 005B				?CNT++
    99 BE80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 005C				?CNT++
    99 BFC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0040				?TMP = ?BW-(*+?BW)%$C000
    99 = 001D				?BNK++
    99 C000				ORG RESORIGIN
     2 20BB-20C1> A9 9D		        lda     #?BNK+$80
     3 20BD A0 5F		        ldy     #FX_MEMS
     4 20BF 91 80		        sta     (fxptr),y
    99 20C1 60				RTS
    99 02E2-02E3> BB 20			INI RESORIGIN
    99 20C2				ORG $B000
    99 = 005D				?CNT++
    99 B100				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 005E				?CNT++
    99 B240				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 005F				?CNT++
    99 B380				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0060				?CNT++
    99 B4C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0061				?CNT++
    99 B600				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0062				?CNT++
    99 B740				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0063				?CNT++
    99 B880				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0064				?CNT++
    99 B9C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0065				?CNT++
    99 BB00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0066				?CNT++
    99 BC40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0067				?CNT++
    99 BD80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0068				?CNT++
    99 BEC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0140				?TMP = ?BW-(*+?BW)%$C000
    99 = 001E				?BNK++
    99 C000				ORG RESORIGIN
     2 20BB-20C1> A9 9E		        lda     #?BNK+$80
     3 20BD A0 5F		        ldy     #FX_MEMS
     4 20BF 91 80		        sta     (fxptr),y
    99 20C1 60				RTS
    99 02E2-02E3> BB 20			INI RESORIGIN
    99 20C2				ORG $B000
    99 = 0069				?CNT++
    99 B000				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 006A				?CNT++
    99 B140				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 006B				?CNT++
    99 B280				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 006C				?CNT++
    99 B3C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 006D				?CNT++
    99 B500				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 006E				?CNT++
    99 B640				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 006F				?CNT++
    99 B780				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0070				?CNT++
    99 B8C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0071				?CNT++
    99 BA00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0072				?CNT++
    99 BB40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0073				?CNT++
    99 BC80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0074				?CNT++
    99 BDC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0075				?CNT++
    99 BF00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0100				?TMP = ?BW-(*+?BW)%$C000
    99 = 001F				?BNK++
    99 C000				ORG RESORIGIN
     2 20BB-20C1> A9 9F		        lda     #?BNK+$80
     3 20BD A0 5F		        ldy     #FX_MEMS
     4 20BF 91 80		        sta     (fxptr),y
    99 20C1 60				RTS
    99 02E2-02E3> BB 20			INI RESORIGIN
    99 20C2				ORG $B000
    99 = 0076				?CNT++
    99 B040				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0077				?CNT++
    99 B180				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0078				?CNT++
    99 B2C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0079				?CNT++
    99 B400				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 007A				?CNT++
    99 B540				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 007B				?CNT++
    99 B680				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 007C				?CNT++
    99 B7C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 007D				?CNT++
    99 B900				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 007E				?CNT++
    99 BA40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 007F				?CNT++
    99 BB80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0080				?CNT++
    99 BCC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0081				?CNT++
    99 BE00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0082				?CNT++
    99 BF40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00C0				?TMP = ?BW-(*+?BW)%$C000
    99 = 0020				?BNK++
    99 C000				ORG RESORIGIN
     2 20BB-20C1> A9 A0		        lda     #?BNK+$80
     3 20BD A0 5F		        ldy     #FX_MEMS
     4 20BF 91 80		        sta     (fxptr),y
    99 20C1 60				RTS
    99 02E2-02E3> BB 20			INI RESORIGIN
    99 20C2				ORG $B000
    99 = 0083				?CNT++
    99 B080				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0084				?CNT++
    99 B1C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0085				?CNT++
    99 B300				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0086				?CNT++
    99 B440				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0087				?CNT++
    99 B580				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0088				?CNT++
    99 B6C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0089				?CNT++
    99 B800				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 008A				?CNT++
    99 B940				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 008B				?CNT++
    99 BA80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 008C				?CNT++
    99 BBC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 008D				?CNT++
    99 BD00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 008E				?CNT++
    99 BE40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 008F				?CNT++
    99 BF80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0080				?TMP = ?BW-(*+?BW)%$C000
    99 = 0021				?BNK++
    99 C000				ORG RESORIGIN
     2 20BB-20C1> A9 A1		        lda     #?BNK+$80
     3 20BD A0 5F		        ldy     #FX_MEMS
     4 20BF 91 80		        sta     (fxptr),y
    99 20C1 60				RTS
    99 02E2-02E3> BB 20			INI RESORIGIN
    99 20C2				ORG $B000
    99 = 0090				?CNT++
    99 B0C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0091				?CNT++
    99 B200				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0092				?CNT++
    99 B340				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0093				?CNT++
    99 B480				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0094				?CNT++
    99 B5C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0095				?CNT++
    99 B700				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0096				?CNT++
    99 B840				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0097				?CNT++
    99 B980				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0098				?CNT++
    99 BAC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0099				?CNT++
    99 BC00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 009A				?CNT++
    99 BD40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 009B				?CNT++
    99 BE80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 009C				?CNT++
    99 BFC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0040				?TMP = ?BW-(*+?BW)%$C000
    99 = 0022				?BNK++
    99 C000				ORG RESORIGIN
     2 20BB-20C1> A9 A2		        lda     #?BNK+$80
     3 20BD A0 5F		        ldy     #FX_MEMS
     4 20BF 91 80		        sta     (fxptr),y
    99 20C1 60				RTS
    99 02E2-02E3> BB 20			INI RESORIGIN
    99 20C2				ORG $B000
    99 = 009D				?CNT++
    99 B100				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 009E				?CNT++
    99 B240				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 009F				?CNT++
    99 B380				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00A0				?CNT++
    99 B4C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00A1				?CNT++
    99 B600				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00A2				?CNT++
    99 B740				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00A3				?CNT++
    99 B880				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00A4				?CNT++
    99 B9C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00A5				?CNT++
    99 BB00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00A6				?CNT++
    99 BC40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00A7				?CNT++
    99 BD80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00A8				?CNT++
    99 BEC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0140				?TMP = ?BW-(*+?BW)%$C000
    99 = 0023				?BNK++
    99 C000				ORG RESORIGIN
     2 20BB-20C1> A9 A3		        lda     #?BNK+$80
     3 20BD A0 5F		        ldy     #FX_MEMS
     4 20BF 91 80		        sta     (fxptr),y
    99 20C1 60				RTS
    99 02E2-02E3> BB 20			INI RESORIGIN
    99 20C2				ORG $B000
    99 = 00A9				?CNT++
    99 B000				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00AA				?CNT++
    99 B140				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00AB				?CNT++
    99 B280				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00AC				?CNT++
    99 B3C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00AD				?CNT++
    99 B500				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00AE				?CNT++
    99 B640				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00AF				?CNT++
    99 B780				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00B0				?CNT++
    99 B8C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00B1				?CNT++
    99 BA00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00B2				?CNT++
    99 BB40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00B3				?CNT++
    99 BC80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00B4				?CNT++
    99 BDC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00B5				?CNT++
    99 BF00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0100				?TMP = ?BW-(*+?BW)%$C000
    99 = 0024				?BNK++
    99 C000				ORG RESORIGIN
     2 20BB-20C1> A9 A4		        lda     #?BNK+$80
     3 20BD A0 5F		        ldy     #FX_MEMS
     4 20BF 91 80		        sta     (fxptr),y
    99 20C1 60				RTS
    99 02E2-02E3> BB 20			INI RESORIGIN
    99 20C2				ORG $B000
    99 = 00B6				?CNT++
    99 B040				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00B7				?CNT++
    99 B180				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00B8				?CNT++
    99 B2C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00B9				?CNT++
    99 B400				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00BA				?CNT++
    99 B540				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00BB				?CNT++
    99 B680				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00BC				?CNT++
    99 B7C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00BD				?CNT++
    99 B900				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00BE				?CNT++
    99 BA40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00BF				?CNT++
    99 BB80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00C0				?CNT++
    99 BCC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00C1				?CNT++
    99 BE00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00C2				?CNT++
    99 BF40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00C0				?TMP = ?BW-(*+?BW)%$C000
    99 = 0025				?BNK++
    99 C000				ORG RESORIGIN
     2 20BB-20C1> A9 A5		        lda     #?BNK+$80
     3 20BD A0 5F		        ldy     #FX_MEMS
     4 20BF 91 80		        sta     (fxptr),y
    99 20C1 60				RTS
    99 02E2-02E3> BB 20			INI RESORIGIN
    99 20C2				ORG $B000
    99 = 00C3				?CNT++
    99 B080				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00C4				?CNT++
    99 B1C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00C5				?CNT++
    99 B300				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00C6				?CNT++
    99 B440				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00C7				?CNT++
    99 B580				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00C8				?CNT++
    99 B6C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00C9				?CNT++
    99 B800				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00CA				?CNT++
    99 B940				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00CB				?CNT++
    99 BA80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00CC				?CNT++
    99 BBC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00CD				?CNT++
    99 BD00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00CE				?CNT++
    99 BE40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00CF				?CNT++
    99 BF80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0080				?TMP = ?BW-(*+?BW)%$C000
    99 = 0026				?BNK++
    99 C000				ORG RESORIGIN
     2 20BB-20C1> A9 A6		        lda     #?BNK+$80
     3 20BD A0 5F		        ldy     #FX_MEMS
     4 20BF 91 80		        sta     (fxptr),y
    99 20C1 60				RTS
    99 02E2-02E3> BB 20			INI RESORIGIN
    99 20C2				ORG $B000
    99 = 00D0				?CNT++
    99 B0C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00D1				?CNT++
    99 B200				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00D2				?CNT++
    99 B340				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00D3				?CNT++
    99 B480				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00D4				?CNT++
    99 B5C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00D5				?CNT++
    99 B700				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00D6				?CNT++
    99 B840				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00D7				?CNT++
    99 B980				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00D8				?CNT++
    99 BAC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00D9				?CNT++
    99 BC00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00DA				?CNT++
    99 BD40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00DB				?CNT++
    99 BE80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00DC				?CNT++
    99 BFC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0040				?TMP = ?BW-(*+?BW)%$C000
    99 = 0027				?BNK++
    99 C000				ORG RESORIGIN
     2 20BB-20C1> A9 A7		        lda     #?BNK+$80
     3 20BD A0 5F		        ldy     #FX_MEMS
     4 20BF 91 80		        sta     (fxptr),y
    99 20C1 60				RTS
    99 02E2-02E3> BB 20			INI RESORIGIN
    99 20C2				ORG $B000
    99 = 00DD				?CNT++
    99 B100				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00DE				?CNT++
    99 B240				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00DF				?CNT++
    99 B380				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00E0				?CNT++
    99 B4C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00E1				?CNT++
    99 B600				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00E2				?CNT++
    99 B740				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00E3				?CNT++
    99 B880				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00E4				?CNT++
    99 B9C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00E5				?CNT++
    99 BB00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00E6				?CNT++
    99 BC40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00E7				?CNT++
    99 BD80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00E8				?CNT++
    99 BEC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0140				?TMP = ?BW-(*+?BW)%$C000
    99 = 0028				?BNK++
    99 C000				ORG RESORIGIN
     2 20BB-20C1> A9 A8		        lda     #?BNK+$80
     3 20BD A0 5F		        ldy     #FX_MEMS
     4 20BF 91 80		        sta     (fxptr),y
    99 20C1 60				RTS
    99 02E2-02E3> BB 20			INI RESORIGIN
    99 20C2				ORG $B000
    99 = 00E9				?CNT++
    99 B000				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00EA				?CNT++
    99 B140				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00EB				?CNT++
    99 B280				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00EC				?CNT++
    99 B3C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00ED				?CNT++
    99 B500				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00EE				?CNT++
    99 B640				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00EF				?CNT++
    99 B780				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00F0				?CNT++
    99 B8C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00F1				?CNT++
    99 BA00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00F2				?CNT++
    99 BB40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00F3				?CNT++
    99 BC80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00F4				?CNT++
    99 BDC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00F5				?CNT++
    99 BF00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0100				?TMP = ?BW-(*+?BW)%$C000
    99 = 0029				?BNK++
    99 C000				ORG RESORIGIN
     2 20BB-20C1> A9 A9		        lda     #?BNK+$80
     3 20BD A0 5F		        ldy     #FX_MEMS
     4 20BF 91 80		        sta     (fxptr),y
    99 20C1 60				RTS
    99 02E2-02E3> BB 20			INI RESORIGIN
    99 20C2				ORG $B000
    99 = 00F6				?CNT++
    99 B040				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00F7				?CNT++
    99 B180				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00F8				?CNT++
    99 B2C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00F9				?CNT++
    99 B400				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00FA				?CNT++
    99 B540				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00FB				?CNT++
    99 B680				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00FC				?CNT++
    99 B7C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00FD				?CNT++
    99 B900				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00FE				?CNT++
    99 BA40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00FF				?CNT++
    99 BB80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0100				?CNT++
    99 BCC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0101				?CNT++
    99 BE00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0102				?CNT++
    99 BF40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00C0				?TMP = ?BW-(*+?BW)%$C000
    99 = 002A				?BNK++
    99 C000				ORG RESORIGIN
     2 20BB-20C1> A9 AA		        lda     #?BNK+$80
     3 20BD A0 5F		        ldy     #FX_MEMS
     4 20BF 91 80		        sta     (fxptr),y
    99 20C1 60				RTS
    99 02E2-02E3> BB 20			INI RESORIGIN
    99 20C2				ORG $B000
    99 = 0103				?CNT++
    99 B080				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0104				?CNT++
    99 B1C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0105				?CNT++
    99 B300				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0106				?CNT++
    99 B440				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0107				?CNT++
    99 B580				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0108				?CNT++
    99 B6C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0109				?CNT++
    99 B800				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 010A				?CNT++
    99 B940				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 010B				?CNT++
    99 BA80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 010C				?CNT++
    99 BBC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 010D				?CNT++
    99 BD00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 010E				?CNT++
    99 BE40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 010F				?CNT++
    99 BF80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0080				?TMP = ?BW-(*+?BW)%$C000
    99 = 002B				?BNK++
    99 C000				ORG RESORIGIN
     2 20BB-20C1> A9 AB		        lda     #?BNK+$80
     3 20BD A0 5F		        ldy     #FX_MEMS
     4 20BF 91 80		        sta     (fxptr),y
    99 20C1 60				RTS
    99 02E2-02E3> BB 20			INI RESORIGIN
    99 20C2				ORG $B000
    99 = 0110				?CNT++
    99 B0C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0111				?CNT++
    99 B200				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0112				?CNT++
    99 B340				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0113				?CNT++
    99 B480				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0114				?CNT++
    99 B5C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0115				?CNT++
    99 B700				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0116				?CNT++
    99 B840				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0117				?CNT++
    99 B980				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0118				?CNT++
    99 BAC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0119				?CNT++
    99 BC00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 011A				?CNT++
    99 BD40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 011B				?CNT++
    99 BE80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 011C				?CNT++
    99 BFC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0040				?TMP = ?BW-(*+?BW)%$C000
    99 = 002C				?BNK++
    99 C000				ORG RESORIGIN
     2 20BB-20C1> A9 AC		        lda     #?BNK+$80
     3 20BD A0 5F		        ldy     #FX_MEMS
     4 20BF 91 80		        sta     (fxptr),y
    99 20C1 60				RTS
    99 02E2-02E3> BB 20			INI RESORIGIN
    99 20C2				ORG $B000
    99 = 011D				?CNT++
    99 B100				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 011E				?CNT++
    99 B240				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 011F				?CNT++
    99 B380				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0120				?CNT++
    99 B4C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0121				?CNT++
    99 B600				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0122				?CNT++
    99 B740				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0123				?CNT++
    99 B880				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0124				?CNT++
    99 B9C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0125				?CNT++
    99 BB00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0126				?CNT++
    99 BC40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0127				?CNT++
    99 BD80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0128				?CNT++
    99 BEC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0140				?TMP = ?BW-(*+?BW)%$C000
    99 = 002D				?BNK++
    99 C000				ORG RESORIGIN
     2 20BB-20C1> A9 AD		        lda     #?BNK+$80
     3 20BD A0 5F		        ldy     #FX_MEMS
     4 20BF 91 80		        sta     (fxptr),y
    99 20C1 60				RTS
    99 02E2-02E3> BB 20			INI RESORIGIN
    99 20C2				ORG $B000
    99 = 0129				?CNT++
    99 B000				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 012A				?CNT++
    99 B140				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 012B				?CNT++
    99 B280				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 012C				?CNT++
    99 B3C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 012D				?CNT++
    99 B500				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 012E				?CNT++
    99 B640				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 012F				?CNT++
    99 B780				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0130				?CNT++
    99 B8C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0131				?CNT++
    99 BA00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0132				?CNT++
    99 BB40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0133				?CNT++
    99 BC80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0134				?CNT++
    99 BDC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0135				?CNT++
    99 BF00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0100				?TMP = ?BW-(*+?BW)%$C000
    99 = 002E				?BNK++
    99 C000				ORG RESORIGIN
     2 20BB-20C1> A9 AE		        lda     #?BNK+$80
     3 20BD A0 5F		        ldy     #FX_MEMS
     4 20BF 91 80		        sta     (fxptr),y
    99 20C1 60				RTS
    99 02E2-02E3> BB 20			INI RESORIGIN
    99 20C2				ORG $B000
    99 = 0136				?CNT++
    99 B040				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0137				?CNT++
    99 B180				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0138				?CNT++
    99 B2C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0139				?CNT++
    99 B400				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 013A				?CNT++
    99 B540				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 013B				?CNT++
    99 B680				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 013C				?CNT++
    99 B7C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 013D				?CNT++
    99 B900				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 013E				?CNT++
    99 BA40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 013F				?CNT++
    99 BB80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0140				?CNT++
    99 BCC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0141				?CNT++
    99 BE00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0142				?CNT++
    99 BF40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00C0				?TMP = ?BW-(*+?BW)%$C000
    99 = 002F				?BNK++
    99 C000				ORG RESORIGIN
     2 20BB-20C1> A9 AF		        lda     #?BNK+$80
     3 20BD A0 5F		        ldy     #FX_MEMS
     4 20BF 91 80		        sta     (fxptr),y
    99 20C1 60				RTS
    99 02E2-02E3> BB 20			INI RESORIGIN
    99 20C2				ORG $B000
    99 = 0143				?CNT++
    99 B080				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0144				?CNT++
    99 B1C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0145				?CNT++
    99 B300				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0146				?CNT++
    99 B440				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0147				?CNT++
    99 B580				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0148				?CNT++
    99 B6C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0149				?CNT++
    99 B800				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 014A				?CNT++
    99 B940				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 014B				?CNT++
    99 BA80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 014C				?CNT++
    99 BBC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 014D				?CNT++
    99 BD00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 014E				?CNT++
    99 BE40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 014F				?CNT++
    99 BF80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0080				?TMP = ?BW-(*+?BW)%$C000
    99 = 0030				?BNK++
    99 C000				ORG RESORIGIN
     2 20BB-20C1> A9 B0		        lda     #?BNK+$80
     3 20BD A0 5F		        ldy     #FX_MEMS
     4 20BF 91 80		        sta     (fxptr),y
    99 20C1 60				RTS
    99 02E2-02E3> BB 20			INI RESORIGIN
    99 20C2				ORG $B000
    99 = 0150				?CNT++
    99 B0C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0151				?CNT++
    99 B200				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0152				?CNT++
    99 B340				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0153				?CNT++
    99 B480				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0154				?CNT++
    99 B5C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0155				?CNT++
    99 B700				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0156				?CNT++
    99 B840				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0157				?CNT++
    99 B980				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0158				?CNT++
    99 BAC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0159				?CNT++
    99 BC00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 015A				?CNT++
    99 BD40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 015B				?CNT++
    99 BE80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 015C				?CNT++
    99 BFC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0040				?TMP = ?BW-(*+?BW)%$C000
    99 = 0031				?BNK++
    99 C000				ORG RESORIGIN
     2 20BB-20C1> A9 B1		        lda     #?BNK+$80
     3 20BD A0 5F		        ldy     #FX_MEMS
     4 20BF 91 80		        sta     (fxptr),y
    99 20C1 60				RTS
    99 02E2-02E3> BB 20			INI RESORIGIN
    99 20C2				ORG $B000
    99 = 015D				?CNT++
    99 B100				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 015E				?CNT++
    99 B240				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 015F				?CNT++
    99 B380				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0160				?CNT++
    99 B4C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0161				?CNT++
    99 B600				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0162				?CNT++
    99 B740				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0163				?CNT++
    99 B880				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0164				?CNT++
    99 B9C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0165				?CNT++
    99 BB00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0166				?CNT++
    99 BC40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0167				?CNT++
    99 BD80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0168				?CNT++
    99 BEC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0140				?TMP = ?BW-(*+?BW)%$C000
    99 = 0032				?BNK++
    99 C000				ORG RESORIGIN
     2 20BB-20C1> A9 B2		        lda     #?BNK+$80
     3 20BD A0 5F		        ldy     #FX_MEMS
     4 20BF 91 80		        sta     (fxptr),y
    99 20C1 60				RTS
    99 02E2-02E3> BB 20			INI RESORIGIN
    99 20C2				ORG $B000
    99 = 0169				?CNT++
    99 B000				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 016A				?CNT++
    99 B140				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 016B				?CNT++
    99 B280				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 016C				?CNT++
    99 B3C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 016D				?CNT++
    99 B500				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 016E				?CNT++
    99 B640				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 016F				?CNT++
    99 B780				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0170				?CNT++
    99 B8C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0171				?CNT++
    99 BA00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0172				?CNT++
    99 BB40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0173				?CNT++
    99 BC80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0174				?CNT++
    99 BDC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0175				?CNT++
    99 BF00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0100				?TMP = ?BW-(*+?BW)%$C000
    99 = 0033				?BNK++
    99 C000				ORG RESORIGIN
     2 20BB-20C1> A9 B3		        lda     #?BNK+$80
     3 20BD A0 5F		        ldy     #FX_MEMS
     4 20BF 91 80		        sta     (fxptr),y
    99 20C1 60				RTS
    99 02E2-02E3> BB 20			INI RESORIGIN
    99 20C2				ORG $B000
    99 = 0176				?CNT++
    99 B040				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0177				?CNT++
    99 B180				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0178				?CNT++
    99 B2C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0179				?CNT++
    99 B400				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 017A				?CNT++
    99 B540				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 017B				?CNT++
    99 B680				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 017C				?CNT++
    99 B7C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 017D				?CNT++
    99 B900				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 017E				?CNT++
    99 BA40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 017F				?CNT++
    99 BB80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0180				?CNT++
    99 BCC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0181				?CNT++
    99 BE00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0182				?CNT++
    99 BF40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00C0				?TMP = ?BW-(*+?BW)%$C000
    99 = 0034				?BNK++
    99 C000				ORG RESORIGIN
     2 20BB-20C1> A9 B4		        lda     #?BNK+$80
     3 20BD A0 5F		        ldy     #FX_MEMS
     4 20BF 91 80		        sta     (fxptr),y
    99 20C1 60				RTS
    99 02E2-02E3> BB 20			INI RESORIGIN
    99 20C2				ORG $B000
    99 = 0183				?CNT++
    99 B080				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0184				?CNT++
    99 B1C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0185				?CNT++
    99 B300				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0186				?CNT++
    99 B440				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0187				?CNT++
    99 B580				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0188				?CNT++
    99 B6C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0189				?CNT++
    99 B800				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 018A				?CNT++
    99 B940				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 018B				?CNT++
    99 BA80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 018C				?CNT++
    99 BBC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 018D				?CNT++
    99 BD00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 018E				?CNT++
    99 BE40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 018F				?CNT++
    99 BF80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0080				?TMP = ?BW-(*+?BW)%$C000
    99 = 0035				?BNK++
    99 C000				ORG RESORIGIN
     2 20BB-20C1> A9 B5		        lda     #?BNK+$80
     3 20BD A0 5F		        ldy     #FX_MEMS
     4 20BF 91 80		        sta     (fxptr),y
    99 20C1 60				RTS
    99 02E2-02E3> BB 20			INI RESORIGIN
    99 20C2				ORG $B000
    99 = 0190				?CNT++
    99 B0C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0191				?CNT++
    99 B200				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0192				?CNT++
    99 B340				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0193				?CNT++
    99 B480				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0194				?CNT++
    99 B5C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0195				?CNT++
    99 B700				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0196				?CNT++
    99 B840				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0197				?CNT++
    99 B980				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0198				?CNT++
    99 BAC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0199				?CNT++
    99 BC00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 019A				?CNT++
    99 BD40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 019B				?CNT++
    99 BE80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 019C				?CNT++
    99 BFC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0040				?TMP = ?BW-(*+?BW)%$C000
    99 = 0036				?BNK++
    99 C000				ORG RESORIGIN
     2 20BB-20C1> A9 B6		        lda     #?BNK+$80
     3 20BD A0 5F		        ldy     #FX_MEMS
     4 20BF 91 80		        sta     (fxptr),y
    99 20C1 60				RTS
    99 02E2-02E3> BB 20			INI RESORIGIN
    99 20C2				ORG $B000
    99 = 019D				?CNT++
    99 B100				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 019E				?CNT++
    99 B240				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 019F				?CNT++
    99 B380				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01A0				?CNT++
    99 B4C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01A1				?CNT++
    99 B600				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01A2				?CNT++
    99 B740				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01A3				?CNT++
    99 B880				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01A4				?CNT++
    99 B9C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01A5				?CNT++
    99 BB00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01A6				?CNT++
    99 BC40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01A7				?CNT++
    99 BD80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01A8				?CNT++
    99 BEC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0140				?TMP = ?BW-(*+?BW)%$C000
    99 = 0037				?BNK++
    99 C000				ORG RESORIGIN
     2 20BB-20C1> A9 B7		        lda     #?BNK+$80
     3 20BD A0 5F		        ldy     #FX_MEMS
     4 20BF 91 80		        sta     (fxptr),y
    99 20C1 60				RTS
    99 02E2-02E3> BB 20			INI RESORIGIN
    99 20C2				ORG $B000
    99 = 01A9				?CNT++
    99 B000				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01AA				?CNT++
    99 B140				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01AB				?CNT++
    99 B280				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01AC				?CNT++
    99 B3C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01AD				?CNT++
    99 B500				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01AE				?CNT++
    99 B640				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01AF				?CNT++
    99 B780				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01B0				?CNT++
    99 B8C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01B1				?CNT++
    99 BA00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01B2				?CNT++
    99 BB40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01B3				?CNT++
    99 BC80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01B4				?CNT++
    99 BDC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01B5				?CNT++
    99 BF00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0100				?TMP = ?BW-(*+?BW)%$C000
    99 = 0038				?BNK++
    99 C000				ORG RESORIGIN
     2 20BB-20C1> A9 B8		        lda     #?BNK+$80
     3 20BD A0 5F		        ldy     #FX_MEMS
     4 20BF 91 80		        sta     (fxptr),y
    99 20C1 60				RTS
    99 02E2-02E3> BB 20			INI RESORIGIN
    99 20C2				ORG $B000
    99 = 01B6				?CNT++
    99 B040				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01B7				?CNT++
    99 B180				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01B8				?CNT++
    99 B2C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01B9				?CNT++
    99 B400				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01BA				?CNT++
    99 B540				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01BB				?CNT++
    99 B680				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01BC				?CNT++
    99 B7C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01BD				?CNT++
    99 B900				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01BE				?CNT++
    99 BA40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01BF				?CNT++
    99 BB80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01C0				?CNT++
    99 BCC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01C1				?CNT++
    99 BE00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01C2				?CNT++
    99 BF40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00C0				?TMP = ?BW-(*+?BW)%$C000
    99 = 0039				?BNK++
    99 C000				ORG RESORIGIN
     2 20BB-20C1> A9 B9		        lda     #?BNK+$80
     3 20BD A0 5F		        ldy     #FX_MEMS
     4 20BF 91 80		        sta     (fxptr),y
    99 20C1 60				RTS
    99 02E2-02E3> BB 20			INI RESORIGIN
    99 20C2				ORG $B000
    99 = 01C3				?CNT++
    99 B080				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01C4				?CNT++
    99 B1C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01C5				?CNT++
    99 B300				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01C6				?CNT++
    99 B440				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01C7				?CNT++
    99 B580				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01C8				?CNT++
    99 B6C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01C9				?CNT++
    99 B800				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01CA				?CNT++
    99 B940				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01CB				?CNT++
    99 BA80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01CC				?CNT++
    99 BBC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01CD				?CNT++
    99 BD00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01CE				?CNT++
    99 BE40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01CF				?CNT++
    99 BF80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0080				?TMP = ?BW-(*+?BW)%$C000
    99 = 003A				?BNK++
    99 C000				ORG RESORIGIN
     2 20BB-20C1> A9 BA		        lda     #?BNK+$80
     3 20BD A0 5F		        ldy     #FX_MEMS
     4 20BF 91 80		        sta     (fxptr),y
    99 20C1 60				RTS
    99 02E2-02E3> BB 20			INI RESORIGIN
    99 20C2				ORG $B000
    99 = 01D0				?CNT++
    99 B0C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01D1				?CNT++
    99 B200				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01D2				?CNT++
    99 B340				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01D3				?CNT++
    99 B480				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01D4				?CNT++
    99 B5C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01D5				?CNT++
    99 B700				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01D6				?CNT++
    99 B840				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01D7				?CNT++
    99 B980				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01D8				?CNT++
    99 BAC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01D9				?CNT++
    99 BC00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01DA				?CNT++
    99 BD40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01DB				?CNT++
    99 BE80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01DC				?CNT++
    99 BFC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0040				?TMP = ?BW-(*+?BW)%$C000
    99 = 003B				?BNK++
    99 C000				ORG RESORIGIN
     2 20BB-20C1> A9 BB		        lda     #?BNK+$80
     3 20BD A0 5F		        ldy     #FX_MEMS
     4 20BF 91 80		        sta     (fxptr),y
    99 20C1 60				RTS
    99 02E2-02E3> BB 20			INI RESORIGIN
    99 20C2				ORG $B000
    99 = 01DD				?CNT++
    99 B100				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01DE				?CNT++
    99 B240				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01DF				?CNT++
    99 B380				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01E0				?CNT++
    99 B4C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01E1				?CNT++
    99 B600				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01E2				?CNT++
    99 B740				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01E3				?CNT++
    99 B880				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01E4				?CNT++
    99 B9C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01E5				?CNT++
    99 BB00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01E6				?CNT++
    99 BC40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01E7				?CNT++
    99 BD80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01E8				?CNT++
    99 BEC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0140				?TMP = ?BW-(*+?BW)%$C000
    99 = 003C				?BNK++
    99 C000				ORG RESORIGIN
     2 20BB-20C1> A9 BC		        lda     #?BNK+$80
     3 20BD A0 5F		        ldy     #FX_MEMS
     4 20BF 91 80		        sta     (fxptr),y
    99 20C1 60				RTS
    99 02E2-02E3> BB 20			INI RESORIGIN
    99 20C2				ORG $B000
    99 = 01E9				?CNT++
    99 B000				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01EA				?CNT++
    99 B140				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01EB				?CNT++
    99 B280				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01EC				?CNT++
    99 B3C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01ED				?CNT++
    99 B500				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01EE				?CNT++
    99 B640				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01EF				?CNT++
   121 B780				org RESORIGIN
     2 20BB-20C5> A9 00		        lda     #0
     3 20BD A0 5E		        ldy     #FX_MEMC
     4 20BF 91 80		        sta     (fxptr),y
Source: arkanoid_vbxe.a65
     2 20C1 A0 5F		        ldy     #FX_MEMS
     3 20C3 91 80		        sta     (fxptr),y
Source: arkanoid_vbxe.a65
   124 20C5 60				rts
   125 02E2-02E3> BB 20			ini RESORIGIN
   127 					.print '$R XBMP    ',main.VBXE_DATA,'..',main.VBXE_DATA+ln-1," 'btm.bmp'",' width: ',?bw,' height: ',?bh,' palsel: ',1,' colsel: ',0
   127 				$R XBMP    $015E00..$03C77F 'btm.bmp' width: $0140 height: $01EE palsel: $0001 colsel: $0000
Source: arkanoid_vbxe.a65
   120 				.endl
   121
   122 				; ------------------------------------------------------------
   123
   124 20C6				org CODEORIGIN
   125
   126 2000				STATICDATA
Macro: STATICDATA [Source: arkanoid_vbxe.a65]
     1 2000-9C98> 11 56 42 58 + .by  $11 $56 $42 $58 $45 $20 $6E $6F  $74 $20 $64 $65 $74 $65 $63 $74  $65 $64 $0B $47 $61 $6D $65 $20
     2 2018 50 61 75 73 65 64 + .by  $50 $61 $75 $73 $65 $64 $00 $00  $00 $00 $00 $00 $AA $00 $00 $AA  $00 $00 $00 $55 $AA $00 $AA $00
     3 2030 00 00 AA 00 AA 00 + .by  $00 $00 $AA $00 $AA $00 $AA $AA  $00 $00 $AA $AA $AA $00 $55 $55  $55 $00 $55 $55 $FF $00 $55 $FF
     4 2048 55 00 55 FF FF 00 + .by  $55 $00 $55 $FF $FF $00 $FF $55  $55 $00 $FF $55 $FF $00 $FF $FF  $55 $00 $FF $FF $FF $00 $FF $D4
     5 2060 D3 D2 D1 D0 CF CE + .by  $D3 $D2 $D1 $D0 $CF $CE $CD $CC  $CB $00 $00 $0A $00 $14 $00 $1E  $00 $28 $00 $32 $00 $64 $00 $C8
     6 2078 00 FA 00 F4 01 E8 + .by  $00 $FA $00 $F4 $01 $E8 $03 $00  $02 $13 $24 $35 $12 $23 $34 $45  $D4 $D3 $D2 $D1 $D0 $CF $CE $CD
     7 2090 CC CB 00 3C 5D 80 + .by  $CC $CB $00 $3C $5D $80 $7D $60  $37 $67 $6A $4F $5F $61 $7F $6F  $00 $00 $00 $E8 $03 $2C $01 $64
     8 20A8 00 3C 00 23 00 00 + .by  $00 $3C $00 $23 $00 $00 $10 $14  $03 $12 $14 $14 $03
Source: arkanoid_vbxe.a65
   127
   128 				; ------------------------------------------------------------
   129
   130 20B5			RTLIB
   131 20B5				icl 'rtl6502_a8.asm'
Source: rtl6502_a8.asm
    64 					opt l+
   132
   133 				.print 'ZPAGE: ',zpage,'..',zpend-1
   133 				ZPAGE: $0080..$00D5
   134
   135 				.print 'RTBUF: ',@buf,'..',@buf+255
   135 				RTBUF: $0400..$04FF
   136
   137 				.print 'RTLIB: ',RTLIB,'..',*-1
   137 				RTLIB: $20B5..$29AE
   138
   139 				; ------------------------------------------------------------
   140
   141 29AF			START
   142 29AF BA				tsx
   143 29B0 8E 29 9C			stx MAIN.@halt+1
   144
   145 					.ifdef MAIN.@DEFINES.ROMOFF
   146 29B3				icl 'atari\romoff.asm'
Source: romoff.asm
     1
     2 				// http://atariki.krap.pl/index.php/Programowanie:_U%C5%BCycie_OS-a_przy_wy%C5%82%C4%85czonym_ROM-ie
     3
     4 29B3			.local	rominit
     5
     6 29B3 78			        sei
     7 29B4 A9 00		        lda #%00000000
     8 29B6 8D 0E D4		        sta NMIEN       ;$D40E
     9 29B9 A9 FE		        lda #%11111110
    10 29BB 8D 01 D3		        sta PORTB       ;$D301
    11
    12 				; Wprowadzona zmiana pozwala wyłączyć z poziomu kodu Pascala, kopiowanie czcionek z pamięci ROM do RAM przy wyłączonym ROMie
    13 				; Proces ten (niefortunnie) powoduje nadpisanie danych w obszarze $E000..$E3FF, gdy w zasobach umieścimi dane, które
    14 				; w ten obszar są wczytywane. Za pomocą definicji '{$DEFINE NOROMFONT}` można wyłączyć przerzut danych czcionek z ROM do RAMu,
    15 				; co pozwala zachować, wczytywane zasoby.
    16
    17 				.ifndef MAIN.@DEFINES.NOROMFONT
    18 					ldx #3
    19 					ldy #0
    20 				mv	inc portb
    21 				afnt0	lda $e000,y
    22 					dec portb
    23 				afnt1	sta $e000,y
    24 					iny
    25 					bne mv
    26 					inc afnt0+2
    27 					inc afnt1+2
    28 					dex
    29 					bpl mv
    30 				.endif
    31
    32 29BE A2 DB		        ldx #<nmiint
    33 29C0 A0 29		        ldy #>nmiint
    34 29C2 8E FA FF		        stx NMIVEC      ;$FFFA
    35 29C5 8C FB FF		        sty NMIVEC+1
    36
    37 29C8 A2 E5		        ldx #<irqint
    38 29CA A0 29		        ldy #>irqint
    39 29CC 8E FE FF		        stx IRQVEC      ;$FFFE
    40 29CF 8C FF FF		        sty IRQVEC+1
    41
    42 29D2 A9 40		        lda #%01000000
    43 29D4 8D 0E D4		        sta NMIEN       ;$D40E
    44 29D7 58			        cli
    45
    46 29D8 4C 06 2A			jmp skp
    47
    48
    49 29DB 2C 0F D4		nmiint  bit NMIST        ;$D40F
    50 29DE 10 03		        spl
    51 29E0 6C 00 02		        jmp (VDSLST)     ;$0200
    52
    53 29E3 38			        sec
    54 29E4 24			        .byte $24        ;BIT $18
    55
    56 29E5 18			irqint  clc
    57
    58 				        ;wlaczenie OS ROM
    59
    60 29E6 EE 01 D3		        inc PORTB       ;$D301
    61
    62 29E9 48			        pha
    63 29EA 8A			        txa
    64 29EB 48			        pha
    65 29EC BA			        tsx
    66
    67 				        ;odlozenie na stos danych dla powrotu z przerwania (RTI)
    68
    69 29ED A9 29		        lda #>iret      ;adres procedury iret
    70 29EF 48			        pha
    71 29F0 A9 FF		        lda #<iret
    72 29F2 48			        pha
    73 29F3 BD 03 01		        lda $103,x      ;skopiowanie wartosci rejestru stanu procesora
    74 29F6 48			        pha
    75
    76 				        ;skok przez odpowiedni wektor przerwania
    77
    78 29F7 90 03		        scc
    79 29F9 6C FA FF		        jmp (NMIVEC)    ;$FFFA
    80 29FC 6C FE FF		        jmp (IRQVEC)    ;$FFFE
    81
    82 29FF 68			iret	pla
    83 2A00 AA				tax
    84 2A01 68				pla
    85
    86 				        ;wylaczenie OS ROM
    87
    88 2A02 CE 01 D3		        dec PORTB       ;$D301
    89 2A05 40			        rti
    90
    91 2A06			skp
    92
    93 				.endl
   147 					.fi
   148
   149 = 0445			VLEN	= VARDATASIZE-VARINITSIZE
   150 = 9D26			VADR	= DATAORIGIN+VARINITSIZE
   151
   152 					ift (VADR > $BFFF) && .not(.def MAIN.@DEFINES.ROMOFF)
   153 					ert 'Invalid memory address range ',VADR
   154 					eif
   155
   156 					ift (VLEN > 0) && (VLEN <= 256)
   157 					ldx #256-VLEN
   158 					lda #$00
   159 					sta:rne VADR+VLEN-256,x+
   160 					eli VLEN>256
   161 2A06				m@init
Macro: M@INIT [Source: macros.asm]
     2 2A06 A0 26			ldy <VADR
     3 2A08 A2 9D			ldx >VADR
     5 2A0A A9 00			lda #$00
     6 2A0C F0 07			beq skp_
     8 2A0E 99 00 10		clr	sta adr: $1000,y
    10 2A11 C8				iny
    11 2A12 D0 04			bne skp
    12 2A14 E8				inx
    13 2A15 8E 10 2A		skp_	stx adr+1
    15 2A18 E0 A1		skp	cpx >VADR+VLEN
    16 2A1A D0 F2			bne clr
    17 2A1C C0 6B			cpy <VADR+VLEN
    18 2A1E D0 EE			bne clr
   162 					eif
   163
   164 				.ifdef psptr
   165 					mwa #PROGRAMSTACK psptr
   166 				.fi
   167
   168 2A20 A2 00			ldx #$00					; X = 0
   169 2A22 86 82			stx bp						; BP = 0
   170
   171 2A24 8E 08 D2			stx audctl					; reset POKEY
   172 2A27 8E 18 D2			stx audctl+$10
   173 2A2A A9 03			lda #3
   174 2A2C 8D 0F D2			sta skctl
   175 2A2F 8D 1F D2			sta skctl+$10
   176
   177 2A32 CA				dex						; X = 255
   178
   179 2A33				UNITINITIALIZATION
Macro: UNITINITIALIZATION [Source: arkanoid_vbxe.a65]
     3 2A33 20 1E 33			jsr MAIN.SYSTEM.@UnitInit
    23 2A36 20 AD 38			jsr MAIN.VBXE.@UnitInit
   180
   181 2A39			.local	MAIN						; PROCEDURE
   182
   183 2A39 4C 25 9C			jmp l_0022
   184
   185 				; ------------------------------------------------------------
   186
   187 2A3C			.local	SYSTEM						; UNIT
   188
   189 2A3C			.local	PEEK						; FUNCTION | ASSEMBLER | REGISTER
   190
   191 				; ------------------------------------------------------------
   192
   193 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   194 				; as Pointer
   195 2A3C B5 96			lda :STACKORIGIN,x
   196 2A3E 85 8A			sta A
   197 2A40 B5 A6			lda :STACKORIGIN+STACKWIDTH,x
   198 2A42 85 8B			sta A+1
   199 2A44 CA				dex
   200 2A45			@main
   201
   202 				; -------------------  ASM Block 00000002  -------------------
   203
   204 2A45 A0 00			ldy #0
   205 2A47 B1 8A 85 92			mva (:edx),y Result
   206
   207 2A4B			@exit
   208
   209 				; ------------------------------------------------------------
   210
   211 				; Push BYTE / CHAR / SHORTINT / BOOLEAN
   212 				; as Pointer
   213
   214 2A4B E8				inx
   215 2A4C A5 92 95 96			mva RESULT :STACKORIGIN,x
   216
   217 					.ifdef @new
   218 					lda <@VarData
   219 					sta :ztmp
   220 					lda >@VarData
   221 					ldy #@VarDataSize-1
   222 					jmp @FreeMem
   223 					eif
   224
   225 				; ------------------------------------------------------------
   226
   227 = 008A			A	= :EDX
   228 = 0092			RESULT	= :STACKORIGIN-4
   229
   230 2A50 60				rts						; ret
   231 				.endl
   232
   233 2A51			.local	ABS						; FUNCTION | ASSEMBLER | OVERLOAD | REGISTER
   234 2A51			.local	@010183000
   235 2A51 85 8A			sta X
   236
   237 				; -------------------  ASM Block 00000007  -------------------
   238
   239 2A53 A5 8A			lda :edx
   240 2A55 10 05			bpl @+
   241
   242 2A57 49 FF			eor #$ff
   243 2A59 18 69 01			add #1
   244 				@
   245 2A5C 85 92			sta Result
   246
   247 2A5E			@exit
   248
   249 				; ------------------------------------------------------------
   250
   251 = 008A			X	= :EDX
   252 = 0092			RESULT	= :STACKORIGIN-4
   253
   254 2A5E 60				rts						; ret
   255 				.endl
   256 				.endl							; overload
   257
   258 2A5F			.local	ABS						; FUNCTION | ASSEMBLER | OVERLOAD | REGISTER
   259 2A5F			.local	@010184000
   260
   261 				; -------------------  ASM Block 00000008  -------------------
   262
   263 2A5F A5 8B			lda :edx+1
   264 2A61 10 0D			bpl @+
   265
   266 2A63 A9 00			lda #$00
   267 2A65 38 E5 8A			sub :edx
   268 2A68 85 8A			sta :edx
   269 2A6A A9 00			lda #$00
   270 2A6C E5 8B			sbc :edx+1
   271 2A6E 85 8B			sta :edx+1
   272 				@
   273 2A70 85 93			sta Result+1
   274
   275 2A72 A5 8A 85 92			mva :edx Result
   276
   277 2A76			@exit
   278
   279 				; ------------------------------------------------------------
   280
   281 = 008A			X	= :EDX
   282 = 0092			RESULT	= :STACKORIGIN-4
   283
   284 2A76 60				rts						; ret
   285 				.endl
   286 				.endl							; overload
   287
   288 2A77			.local	ABS						; FUNCTION | ASSEMBLER | OVERLOAD | REGISTER
   289 2A77			.local	@010185000
   290
   291 				; -------------------  ASM Block 00000009  -------------------
   292
   293 2A77 A5 8D			lda :edx+3
   294 2A79 10 03			spl
   295 2A7B 20 E8 20			jsr @negEDX
   296
   297 2A7E 85 95			sta Result+3
   298
   299 2A80 A5 8A 85 92			mva :edx Result
   300 2A84 A5 8B 85 93			mva :edx+1 Result+1
   301 2A88 A5 8C 85 94			mva :edx+2 Result+2
   302
   303 2A8C			@exit
   304
   305 				; ------------------------------------------------------------
   306
   307 = 008A			X	= :EDX
   308 = 0092			RESULT	= :STACKORIGIN-4
   309
   310 2A8C 60				rts						; ret
   311 				.endl
   312 				.endl							; overload
   313
   314 2A8D			.local	ARCTAN						; FUNCTION | OVERLOAD
   315 2A8D			.local	@01018F000
   316
   317 				; optimize OK (SYSTEM), line = 902
   318
   319 2A8D A9 00			lda #$00
   320 2A8F 8D ED 9C			sta SIGN
   321
   322 				; optimize OK (SYSTEM), line = 903
   323
   324 2A92 AD DD 9C			lda VALUE
   325 2A95 8D E5 9C			sta X
   326 2A98 AD DE 9C			lda VALUE+1
   327 2A9B 8D E6 9C			sta X+1
   328 2A9E AD DF 9C			lda VALUE+2
   329 2AA1 8D E7 9C			sta X+2
   330 2AA4 AD E0 9C			lda VALUE+3
   331 2AA7 8D E8 9C			sta X+3
   332
   333 				; optimize OK (SYSTEM), line = 904
   334
   335 2AAA A9 00			lda #$00
   336 2AAC 8D E9 9C			sta Y
   337 2AAF 8D EA 9C			sta Y+1
   338 2AB2 8D EB 9C			sta Y+2
   339 2AB5 8D EC 9C			sta Y+3
   340
   341 				; optimize OK (SYSTEM), line = 906
   342
   343 2AB8 AD E0 9C			lda VALUE+3
   344 2ABB D0 0D			bne @+
   345 2ABD AD DF 9C			lda VALUE+2
   346 2AC0 D0 08			bne @+
   347 2AC2 AD DE 9C			lda VALUE+1
   348 2AC5 D0 03			bne @+
   349 2AC7 AD DD 9C			lda VALUE
   350 				@
   351 2ACA D0 11			jne l_0054
   352
   353 				; optimize OK (SYSTEM), line = 907
   354
   355 2ACC A9 00			lda #$00
   356 2ACE 8D E1 9C			sta RESULT
   357 2AD1 8D E2 9C			sta RESULT+1
   358 2AD4 8D E3 9C			sta RESULT+2
   359 2AD7 8D E4 9C			sta RESULT+3
   360 2ADA 4C B6 2E			jmp @exit
   361 2ADD			l_0054
   362
   363 				; optimize OK (SYSTEM), line = 910
   364
   365 2ADD AD E8 9C			lda X+3
   366 2AE0 10 0D			jpl l_0072
   367
   368 				; optimize OK (SYSTEM), line = 911
   369
   370 2AE2 A9 01			lda #$01
   371 2AE4 8D ED 9C			sta SIGN
   372
   373 				; optimize OK (SYSTEM), line = 912
   374
   375 2AE7 AD E8 9C			lda X+3
   376 2AEA 49 80			eor #$80
   377 2AEC 8D E8 9C			sta X+3
   378 2AEF			l_0072
   379 2AEF			l_0062
   380
   381 				; optimize OK (SYSTEM), line = 915
   382
   383 2AEF A9 00			lda #$00
   384 2AF1 85 8A			sta :FP2MAN0
   385 2AF3 85 8B			sta :FP2MAN1
   386 2AF5 A9 80			lda #$80
   387 2AF7 85 8C			sta :FP2MAN2
   388 2AF9 A9 3F			lda #$3F
   389 2AFB 85 8D			sta :FP2MAN3
   390 2AFD AD E5 9C			lda X
   391 2B00 85 86			sta :FP1MAN0
   392 2B02 AD E6 9C			lda X+1
   393 2B05 85 87			sta :FP1MAN1
   394 2B07 AD E7 9C			lda X+2
   395 2B0A 85 88			sta :FP1MAN2
   396 2B0C AD E8 9C			lda X+3
   397 2B0F 85 89			sta :FP1MAN3
   398 2B11 20 E3 23			jsr @FSUB
   399 2B14 A5 8E			lda :FPMAN0
   400 2B16 85 9F			sta :STACKORIGIN+9
   401 2B18 A5 8F			lda :FPMAN1
   402 2B1A 85 AF			sta :STACKORIGIN+STACKWIDTH+9
   403 2B1C A5 90			lda :FPMAN2
   404 2B1E 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
   405 2B20 A5 91			lda :FPMAN3
   406 2B22 85 CF			sta :STACKORIGIN+STACKWIDTH*3+9
   407 2B24 A9 00			lda #$00
   408 2B26 85 8A			sta :FP2MAN0
   409 2B28 85 8B			sta :FP2MAN1
   410 2B2A A9 80			lda #$80
   411 2B2C 85 8C			sta :FP2MAN2
   412 2B2E A9 3F			lda #$3F
   413 2B30 85 8D			sta :FP2MAN3
   414 2B32 AD E5 9C			lda X
   415 2B35 85 86			sta :FP1MAN0
   416 2B37 AD E6 9C			lda X+1
   417 2B3A 85 87			sta :FP1MAN1
   418 2B3C AD E7 9C			lda X+2
   419 2B3F 85 88			sta :FP1MAN2
   420 2B41 AD E8 9C			lda X+3
   421 2B44 85 89			sta :FP1MAN3
   422 2B46 20 DE 23			jsr @FADD
   423 2B49 A5 8E			lda :FPMAN0
   424 2B4B 85 8A			sta :FP2MAN0
   425 2B4D A5 8F			lda :FPMAN1
   426 2B4F 85 8B			sta :FP2MAN1
   427 2B51 A5 90			lda :FPMAN2
   428 2B53 85 8C			sta :FP2MAN2
   429 2B55 A5 91			lda :FPMAN3
   430 2B57 85 8D			sta :FP2MAN3
   431 2B59 A5 9F			lda :STACKORIGIN+9
   432 2B5B 85 86			sta :FP1MAN0
   433 2B5D A5 AF			lda :STACKORIGIN+STACKWIDTH+9
   434 2B5F 85 87			sta :FP1MAN1
   435 2B61 A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
   436 2B63 85 88			sta :FP1MAN2
   437 2B65 A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
   438 2B67 85 89			sta :FP1MAN3
   439 2B69 20 EB 25			jsr @FDIV
   440 2B6C A5 8E			lda :FPMAN0
   441 2B6E 8D E5 9C			sta X
   442 2B71 A5 8F			lda :FPMAN1
   443 2B73 8D E6 9C			sta X+1
   444 2B76 A5 90			lda :FPMAN2
   445 2B78 8D E7 9C			sta X+2
   446 2B7B A5 91			lda :FPMAN3
   447 2B7D 8D E8 9C			sta X+3
   448
   449 				; optimize OK (SYSTEM), line = 916
   450
   451 2B80 AD E5 9C			lda X
   452 2B83 85 8A			sta :FP2MAN0
   453 2B85 AD E6 9C			lda X+1
   454 2B88 85 8B			sta :FP2MAN1
   455 2B8A AD E7 9C			lda X+2
   456 2B8D 85 8C			sta :FP2MAN2
   457 2B8F AD E8 9C			lda X+3
   458 2B92 85 8D			sta :FP2MAN3
   459 2B94 AD E5 9C			lda X
   460 2B97 85 86			sta :FP1MAN0
   461 2B99 AD E6 9C			lda X+1
   462 2B9C 85 87			sta :FP1MAN1
   463 2B9E AD E7 9C			lda X+2
   464 2BA1 85 88			sta :FP1MAN2
   465 2BA3 AD E8 9C			lda X+3
   466 2BA6 85 89			sta :FP1MAN3
   467 2BA8 20 4A 25			jsr @FMUL
   468 2BAB A5 8E			lda :FPMAN0
   469 2BAD 8D E9 9C			sta Y
   470 2BB0 A5 8F			lda :FPMAN1
   471 2BB2 8D EA 9C			sta Y+1
   472 2BB5 A5 90			lda :FPMAN2
   473 2BB7 8D EB 9C			sta Y+2
   474 2BBA A5 91			lda :FPMAN3
   475 2BBC 8D EC 9C			sta Y+3
   476
   477 				; optimize OK (SYSTEM), line = 917
   478
   479 2BBF AD E9 9C			lda Y
   480 2BC2 85 8A			sta :FP2MAN0
   481 2BC4 AD EA 9C			lda Y+1
   482 2BC7 85 8B			sta :FP2MAN1
   483 2BC9 AD EB 9C			lda Y+2
   484 2BCC 85 8C			sta :FP2MAN2
   485 2BCE AD EC 9C			lda Y+3
   486 2BD1 85 8D			sta :FP2MAN3
   487 2BD3 A9 4A			lda #$4A
   488 2BD5 85 86			sta :FP1MAN0
   489 2BD7 A9 D7			lda #$D7
   490 2BD9 85 87			sta :FP1MAN1
   491 2BDB A9 3B			lda #$3B
   492 2BDD 85 88			sta :FP1MAN2
   493 2BDF 85 89			sta :FP1MAN3
   494 2BE1 20 4A 25			jsr @FMUL
   495 2BE4 A5 8E			lda :FPMAN0
   496 2BE6 85 86			sta :FP1MAN0
   497 2BE8 A5 8F			lda :FPMAN1
   498 2BEA 85 87			sta :FP1MAN1
   499 2BEC A5 90			lda :FPMAN2
   500 2BEE 85 88			sta :FP1MAN2
   501 2BF0 A5 91			lda :FPMAN3
   502 2BF2 85 89			sta :FP1MAN3
   503 2BF4 A9 02			lda #$02
   504 2BF6 85 8A			sta :FP2MAN0
   505 2BF8 A9 6E			lda #$6E
   506 2BFA 85 8B			sta :FP2MAN1
   507 2BFC A9 84			lda #$84
   508 2BFE 85 8C			sta :FP2MAN2
   509 2C00 A9 3C			lda #$3C
   510 2C02 85 8D			sta :FP2MAN3
   511 2C04 20 E3 23			jsr @FSUB
   512 2C07 A5 8E			lda :FPMAN0
   513 2C09 85 86			sta :FP1MAN0
   514 2C0B A5 8F			lda :FPMAN1
   515 2C0D 85 87			sta :FP1MAN1
   516 2C0F A5 90			lda :FPMAN2
   517 2C11 85 88			sta :FP1MAN2
   518 2C13 A5 91			lda :FPMAN3
   519 2C15 85 89			sta :FP1MAN3
   520 2C17 AD E9 9C			lda Y
   521 2C1A 85 8A			sta :FP2MAN0
   522 2C1C AD EA 9C			lda Y+1
   523 2C1F 85 8B			sta :FP2MAN1
   524 2C21 AD EB 9C			lda Y+2
   525 2C24 85 8C			sta :FP2MAN2
   526 2C26 AD EC 9C			lda Y+3
   527 2C29 85 8D			sta :FP2MAN3
   528 2C2B 20 4A 25			jsr @FMUL
   529 2C2E A5 8E			lda :FPMAN0
   530 2C30 85 86			sta :FP1MAN0
   531 2C32 A5 8F			lda :FPMAN1
   532 2C34 85 87			sta :FP1MAN1
   533 2C36 A5 90			lda :FPMAN2
   534 2C38 85 88			sta :FP1MAN2
   535 2C3A A5 91			lda :FPMAN3
   536 2C3C 85 89			sta :FP1MAN3
   537 2C3E A9 FE			lda #$FE
   538 2C40 85 8A			sta :FP2MAN0
   539 2C42 A9 C1			lda #$C1
   540 2C44 85 8B			sta :FP2MAN1
   541 2C46 A9 2F			lda #$2F
   542 2C48 85 8C			sta :FP2MAN2
   543 2C4A A9 3D			lda #$3D
   544 2C4C 85 8D			sta :FP2MAN3
   545 2C4E 20 DE 23			jsr @FADD
   546 2C51 A5 8E			lda :FPMAN0
   547 2C53 85 86			sta :FP1MAN0
   548 2C55 A5 8F			lda :FPMAN1
   549 2C57 85 87			sta :FP1MAN1
   550 2C59 A5 90			lda :FPMAN2
   551 2C5B 85 88			sta :FP1MAN2
   552 2C5D A5 91			lda :FPMAN3
   553 2C5F 85 89			sta :FP1MAN3
   554 2C61 AD E9 9C			lda Y
   555 2C64 85 8A			sta :FP2MAN0
   556 2C66 AD EA 9C			lda Y+1
   557 2C69 85 8B			sta :FP2MAN1
   558 2C6B AD EB 9C			lda Y+2
   559 2C6E 85 8C			sta :FP2MAN2
   560 2C70 AD EC 9C			lda Y+3
   561 2C73 85 8D			sta :FP2MAN3
   562 2C75 20 4A 25			jsr @FMUL
   563 2C78 A5 8E			lda :FPMAN0
   564 2C7A 85 86			sta :FP1MAN0
   565 2C7C A5 8F			lda :FPMAN1
   566 2C7E 85 87			sta :FP1MAN1
   567 2C80 A5 90			lda :FPMAN2
   568 2C82 85 88			sta :FP1MAN2
   569 2C84 A5 91			lda :FPMAN3
   570 2C86 85 89			sta :FP1MAN3
   571 2C88 A9 74			lda #$74
   572 2C8A 85 8A			sta :FP2MAN0
   573 2C8C A9 31			lda #$31
   574 2C8E 85 8B			sta :FP2MAN1
   575 2C90 A9 9A			lda #$9A
   576 2C92 85 8C			sta :FP2MAN2
   577 2C94 A9 3D			lda #$3D
   578 2C96 85 8D			sta :FP2MAN3
   579 2C98 20 E3 23			jsr @FSUB
   580 2C9B A5 8E			lda :FPMAN0
   581 2C9D 85 86			sta :FP1MAN0
   582 2C9F A5 8F			lda :FPMAN1
   583 2CA1 85 87			sta :FP1MAN1
   584 2CA3 A5 90			lda :FPMAN2
   585 2CA5 85 88			sta :FP1MAN2
   586 2CA7 A5 91			lda :FPMAN3
   587 2CA9 85 89			sta :FP1MAN3
   588 2CAB AD E9 9C			lda Y
   589 2CAE 85 8A			sta :FP2MAN0
   590 2CB0 AD EA 9C			lda Y+1
   591 2CB3 85 8B			sta :FP2MAN1
   592 2CB5 AD EB 9C			lda Y+2
   593 2CB8 85 8C			sta :FP2MAN2
   594 2CBA AD EC 9C			lda Y+3
   595 2CBD 85 8D			sta :FP2MAN3
   596 2CBF 20 4A 25			jsr @FMUL
   597 2CC2 A5 8E			lda :FPMAN0
   598 2CC4 85 86			sta :FP1MAN0
   599 2CC6 A5 8F			lda :FPMAN1
   600 2CC8 85 87			sta :FP1MAN1
   601 2CCA A5 90			lda :FPMAN2
   602 2CCC 85 88			sta :FP1MAN2
   603 2CCE A5 91			lda :FPMAN3
   604 2CD0 85 89			sta :FP1MAN3
   605 2CD2 A9 83			lda #$83
   606 2CD4 85 8A			sta :FP2MAN0
   607 2CD6 A9 3D			lda #$3D
   608 2CD8 85 8B			sta :FP2MAN1
   609 2CDA A9 DA			lda #$DA
   610 2CDC 85 8C			sta :FP2MAN2
   611 2CDE A9 3D			lda #$3D
   612 2CE0 85 8D			sta :FP2MAN3
   613 2CE2 20 DE 23			jsr @FADD
   614 2CE5 A5 8E			lda :FPMAN0
   615 2CE7 85 86			sta :FP1MAN0
   616 2CE9 A5 8F			lda :FPMAN1
   617 2CEB 85 87			sta :FP1MAN1
   618 2CED A5 90			lda :FPMAN2
   619 2CEF 85 88			sta :FP1MAN2
   620 2CF1 A5 91			lda :FPMAN3
   621 2CF3 85 89			sta :FP1MAN3
   622 2CF5 AD E9 9C			lda Y
   623 2CF8 85 8A			sta :FP2MAN0
   624 2CFA AD EA 9C			lda Y+1
   625 2CFD 85 8B			sta :FP2MAN1
   626 2CFF AD EB 9C			lda Y+2
   627 2D02 85 8C			sta :FP2MAN2
   628 2D04 AD EC 9C			lda Y+3
   629 2D07 85 8D			sta :FP2MAN3
   630 2D09 20 4A 25			jsr @FMUL
   631 2D0C A5 8E			lda :FPMAN0
   632 2D0E 85 86			sta :FP1MAN0
   633 2D10 A5 8F			lda :FPMAN1
   634 2D12 85 87			sta :FP1MAN1
   635 2D14 A5 90			lda :FPMAN2
   636 2D16 85 88			sta :FP1MAN2
   637 2D18 A5 91			lda :FPMAN3
   638 2D1A 85 89			sta :FP1MAN3
   639 2D1C A9 C7			lda #$C7
   640 2D1E 85 8A			sta :FP2MAN0
   641 2D20 A9 7F			lda #$7F
   642 2D22 85 8B			sta :FP2MAN1
   643 2D24 A9 11			lda #$11
   644 2D26 85 8C			sta :FP2MAN2
   645 2D28 A9 3E			lda #$3E
   646 2D2A 85 8D			sta :FP2MAN3
   647 2D2C 20 E3 23			jsr @FSUB
   648 2D2F A5 8E			lda :FPMAN0
   649 2D31 85 86			sta :FP1MAN0
   650 2D33 A5 8F			lda :FPMAN1
   651 2D35 85 87			sta :FP1MAN1
   652 2D37 A5 90			lda :FPMAN2
   653 2D39 85 88			sta :FP1MAN2
   654 2D3B A5 91			lda :FPMAN3
   655 2D3D 85 89			sta :FP1MAN3
   656 2D3F AD E9 9C			lda Y
   657 2D42 85 8A			sta :FP2MAN0
   658 2D44 AD EA 9C			lda Y+1
   659 2D47 85 8B			sta :FP2MAN1
   660 2D49 AD EB 9C			lda Y+2
   661 2D4C 85 8C			sta :FP2MAN2
   662 2D4E AD EC 9C			lda Y+3
   663 2D51 85 8D			sta :FP2MAN3
   664 2D53 20 4A 25			jsr @FMUL
   665 2D56 A5 8E			lda :FPMAN0
   666 2D58 85 86			sta :FP1MAN0
   667 2D5A A5 8F			lda :FPMAN1
   668 2D5C 85 87			sta :FP1MAN1
   669 2D5E A5 90			lda :FPMAN2
   670 2D60 85 88			sta :FP1MAN2
   671 2D62 A5 91			lda :FPMAN3
   672 2D64 85 89			sta :FP1MAN3
   673 2D66 A9 E5			lda #$E5
   674 2D68 85 8A			sta :FP2MAN0
   675 2D6A A9 BB			lda #$BB
   676 2D6C 85 8B			sta :FP2MAN1
   677 2D6E A9 4C			lda #$4C
   678 2D70 85 8C			sta :FP2MAN2
   679 2D72 A9 3E			lda #$3E
   680 2D74 85 8D			sta :FP2MAN3
   681 2D76 20 DE 23			jsr @FADD
   682 2D79 A5 8E			lda :FPMAN0
   683 2D7B 85 86			sta :FP1MAN0
   684 2D7D A5 8F			lda :FPMAN1
   685 2D7F 85 87			sta :FP1MAN1
   686 2D81 A5 90			lda :FPMAN2
   687 2D83 85 88			sta :FP1MAN2
   688 2D85 A5 91			lda :FPMAN3
   689 2D87 85 89			sta :FP1MAN3
   690 2D89 AD E9 9C			lda Y
   691 2D8C 85 8A			sta :FP2MAN0
   692 2D8E AD EA 9C			lda Y+1
   693 2D91 85 8B			sta :FP2MAN1
   694 2D93 AD EB 9C			lda Y+2
   695 2D96 85 8C			sta :FP2MAN2
   696 2D98 AD EC 9C			lda Y+3
   697 2D9B 85 8D			sta :FP2MAN3
   698 2D9D 20 4A 25			jsr @FMUL
   699 2DA0 A5 8E			lda :FPMAN0
   700 2DA2 85 86			sta :FP1MAN0
   701 2DA4 A5 8F			lda :FPMAN1
   702 2DA6 85 87			sta :FP1MAN1
   703 2DA8 A5 90			lda :FPMAN2
   704 2DAA 85 88			sta :FP1MAN2
   705 2DAC A5 91			lda :FPMAN3
   706 2DAE 85 89			sta :FP1MAN3
   707 2DB0 A9 6C			lda #$6C
   708 2DB2 85 8A			sta :FP2MAN0
   709 2DB4 A9 AA			lda #$AA
   710 2DB6 85 8B			sta :FP2MAN1
   711 2DB8 85 8C			sta :FP2MAN2
   712 2DBA A9 3E			lda #$3E
   713 2DBC 85 8D			sta :FP2MAN3
   714 2DBE 20 E3 23			jsr @FSUB
   715 2DC1 A5 8E			lda :FPMAN0
   716 2DC3 85 86			sta :FP1MAN0
   717 2DC5 A5 8F			lda :FPMAN1
   718 2DC7 85 87			sta :FP1MAN1
   719 2DC9 A5 90			lda :FPMAN2
   720 2DCB 85 88			sta :FP1MAN2
   721 2DCD A5 91			lda :FPMAN3
   722 2DCF 85 89			sta :FP1MAN3
   723 2DD1 AD E9 9C			lda Y
   724 2DD4 85 8A			sta :FP2MAN0
   725 2DD6 AD EA 9C			lda Y+1
   726 2DD9 85 8B			sta :FP2MAN1
   727 2DDB AD EB 9C			lda Y+2
   728 2DDE 85 8C			sta :FP2MAN2
   729 2DE0 AD EC 9C			lda Y+3
   730 2DE3 85 8D			sta :FP2MAN3
   731 2DE5 20 4A 25			jsr @FMUL
   732 2DE8 A5 8E			lda :FPMAN0
   733 2DEA 85 86			sta :FP1MAN0
   734 2DEC A5 8F			lda :FPMAN1
   735 2DEE 85 87			sta :FP1MAN1
   736 2DF0 A5 90			lda :FPMAN2
   737 2DF2 85 88			sta :FP1MAN2
   738 2DF4 A5 91			lda :FPMAN3
   739 2DF6 85 89			sta :FP1MAN3
   740 2DF8 A9 00			lda #$00
   741 2DFA 85 8A			sta :FP2MAN0
   742 2DFC 85 8B			sta :FP2MAN1
   743 2DFE A9 80			lda #$80
   744 2E00 85 8C			sta :FP2MAN2
   745 2E02 A9 3F			lda #$3F
   746 2E04 85 8D			sta :FP2MAN3
   747 2E06 20 DE 23			jsr @FADD
   748 2E09 A5 8E			lda :FPMAN0
   749 2E0B 85 86			sta :FP1MAN0
   750 2E0D A5 8F			lda :FPMAN1
   751 2E0F 85 87			sta :FP1MAN1
   752 2E11 A5 90			lda :FPMAN2
   753 2E13 85 88			sta :FP1MAN2
   754 2E15 A5 91			lda :FPMAN3
   755 2E17 85 89			sta :FP1MAN3
   756 2E19 AD E5 9C			lda X
   757 2E1C 85 8A			sta :FP2MAN0
   758 2E1E AD E6 9C			lda X+1
   759 2E21 85 8B			sta :FP2MAN1
   760 2E23 AD E7 9C			lda X+2
   761 2E26 85 8C			sta :FP2MAN2
   762 2E28 AD E8 9C			lda X+3
   763 2E2B 85 8D			sta :FP2MAN3
   764 2E2D 20 4A 25			jsr @FMUL
   765 2E30 A5 8E			lda :FPMAN0
   766 2E32 8D E5 9C			sta X
   767 2E35 A5 8F			lda :FPMAN1
   768 2E37 8D E6 9C			sta X+1
   769 2E3A A5 90			lda :FPMAN2
   770 2E3C 8D E7 9C			sta X+2
   771 2E3F A5 91			lda :FPMAN3
   772 2E41 8D E8 9C			sta X+3
   773
   774 				; optimize OK (SYSTEM), line = 920
   775
   776 2E44 AD E5 9C			lda X
   777 2E47 85 8A			sta :FP2MAN0
   778 2E49 AD E6 9C			lda X+1
   779 2E4C 85 8B			sta :FP2MAN1
   780 2E4E AD E7 9C			lda X+2
   781 2E51 85 8C			sta :FP2MAN2
   782 2E53 AD E8 9C			lda X+3
   783 2E56 85 8D			sta :FP2MAN3
   784 2E58 A9 DB			lda #$DB
   785 2E5A 85 86			sta :FP1MAN0
   786 2E5C A9 0F			lda #$0F
   787 2E5E 85 87			sta :FP1MAN1
   788 2E60 A9 49			lda #$49
   789 2E62 85 88			sta :FP1MAN2
   790 2E64 A9 3F			lda #$3F
   791 2E66 85 89			sta :FP1MAN3
   792 2E68 20 DE 23			jsr @FADD
   793 2E6B A5 8E			lda :FPMAN0
   794 2E6D 8D E5 9C			sta X
   795 2E70 A5 8F			lda :FPMAN1
   796 2E72 8D E6 9C			sta X+1
   797 2E75 A5 90			lda :FPMAN2
   798 2E77 8D E7 9C			sta X+2
   799 2E7A A5 91			lda :FPMAN3
   800 2E7C 8D E8 9C			sta X+3
   801
   802 				; optimize OK (SYSTEM), line = 922
   803
   804 2E7F AD ED 9C			lda SIGN
   805 2E82 F0 1A			jeq l_00F4
   806
   807 				; optimize OK (SYSTEM), line = 923
   808
   809 2E84 AD E5 9C			lda X
   810 2E87 8D E1 9C			sta RESULT
   811 2E8A AD E6 9C			lda X+1
   812 2E8D 8D E2 9C			sta RESULT+1
   813 2E90 AD E7 9C			lda X+2
   814 2E93 8D E3 9C			sta RESULT+2
   815 2E96 AD E8 9C			lda X+3
   816 2E99 49 80			eor #$80
   817 2E9B 4C B3 2E			jmp l_0105
   818 2E9E			l_00F4
   819
   820 				; optimize OK (SYSTEM), line = 925
   821
   822 2E9E AD E5 9C			lda X
   823 2EA1 8D E1 9C			sta RESULT
   824 2EA4 AD E6 9C			lda X+1
   825 2EA7 8D E2 9C			sta RESULT+1
   826 2EAA AD E7 9C			lda X+2
   827 2EAD 8D E3 9C			sta RESULT+2
   828 2EB0 AD E8 9C			lda X+3
   829 2EB3			l_0105
   830 2EB3 8D E4 9C			sta RESULT+3
   831 2EB6			@exit
   832
   833 				; ------------------------------------------------------------
   834
   835 = 9CDD			VALUE	= DATAORIGIN+$000B
   836 = 9CE1			RESULT	= DATAORIGIN+$000F
   837 = 9CE5			X	= DATAORIGIN+$0013
   838 = 9CE9			Y	= DATAORIGIN+$0017
   839 = 9CED			SIGN	= DATAORIGIN+$001B
   840
   841 = 9CDD			@VarData	= VALUE
   842 = 000D			@VarDataSize	= 13
   843
   844 2EB6 60				rts						; ret
   845 				.endl
   846 				.endl							; overload
   847
   848 2EB7			.local	POKE						; PROCEDURE | ASSEMBLER | REGISTER
   849
   850 				; ------------------------------------------------------------
   851
   852 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   853 				; as Pointer
   854 2EB7 B5 96			lda :STACKORIGIN,x
   855 2EB9 85 8A			sta A
   856 2EBB B5 A6			lda :STACKORIGIN+STACKWIDTH,x
   857 2EBD 85 8B			sta A+1
   858 2EBF CA				dex
   859 2EC0 30 05			jmi @main
   860
   861 				; ------------------------------------------------------------
   862
   863 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
   864 				; as Pointer
   865 2EC2 B5 96			lda :STACKORIGIN,x
   866 2EC4 85 8E			sta VALUE
   867 2EC6 CA				dex
   868 2EC7			@main
   869
   870 				; -------------------  ASM Block 00000025  -------------------
   871
   872 2EC7 A0 00			ldy #0
   873 2EC9 A5 8E 91 8A			mva value (:edx),y
   874
   875 				; ------------------------------------------------------------
   876
   877 = 008A			A	= :EDX
   878 = 008E			VALUE	= :ECX
   879
   880 2ECD			@exit
   881 					.ifdef @new
   882 					lda <@VarData
   883 					sta :ztmp
   884 					lda >@VarData
   885 					ldy #@VarDataSize-1
   886 					jmp @FreeMem
   887 					els
   888 2ECD 60				rts						; ret
   889 					eif
   890 				.endl
   891
   892 2ECE			.local	FILLBYTE					; PROCEDURE | ASSEMBLER | OVERLOAD | REGISTER | INLINE
   893 2ECE			.local	@03018000001810000300000
   894
   895 					.MACRO m@INLINE
   896 				
   897 				; -------------------  ASM Block 00000033  -------------------
   898 				
   899 					jsr @fill
   900 				
   901 					.ENDM
   902
   903 				; ------------------------------------------------------------
   904
   905 = 008A			A	= :EDX
   906 = 008E			COUNT	= :ECX
   907 = 0086			VALUE	= :EAX
   908
   909 2ECE			@exit
   910 				.endl
   911 				.endl							; overload
   912
   913 2ECE			.local	FSINCOS						; FUNCTION
   914
   915 				; --- WhileProlog
   916 2ECE 4C 0C 2F			jmp l_015B
   917 2ED1			l_015C
   918
   919 				; optimize OK (SYSTEM), line = 1907
   920
   921 2ED1 A9 DB			lda #$DB
   922 2ED3 85 8A			sta :FP2MAN0
   923 2ED5 A9 0F			lda #$0F
   924 2ED7 85 8B			sta :FP2MAN1
   925 2ED9 A9 C9			lda #$C9
   926 2EDB 85 8C			sta :FP2MAN2
   927 2EDD A9 40			lda #$40
   928 2EDF 85 8D			sta :FP2MAN3
   929 2EE1 AD EE 9C			lda X
   930 2EE4 85 86			sta :FP1MAN0
   931 2EE6 AD EF 9C			lda X+1
   932 2EE9 85 87			sta :FP1MAN1
   933 2EEB AD F0 9C			lda X+2
   934 2EEE 85 88			sta :FP1MAN2
   935 2EF0 AD F1 9C			lda X+3
   936 2EF3 85 89			sta :FP1MAN3
   937 2EF5 20 E3 23			jsr @FSUB
   938 2EF8 A5 8E			lda :FPMAN0
   939 2EFA 8D EE 9C			sta X
   940 2EFD A5 8F			lda :FPMAN1
   941 2EFF 8D EF 9C			sta X+1
   942 2F02 A5 90			lda :FPMAN2
   943 2F04 8D F0 9C			sta X+2
   944 2F07 A5 91			lda :FPMAN3
   945 2F09 8D F1 9C			sta X+3
   946 2F0C			l_015B
   947 2F0C A9 DB			lda #$DB
   948 2F0E 85 86			sta @FCMPL.A
   949 2F10 A9 0F			lda #$0F
   950 2F12 85 87			sta @FCMPL.A+1
   951 2F14 A9 C9			lda #$C9
   952 2F16 85 88			sta @FCMPL.A+2
   953 2F18 A9 40			lda #$40
   954 2F1A 85 89			sta @FCMPL.A+3
   955 2F1C AD EE 9C			lda X
   956 2F1F 85 8E			sta @FCMPL.B
   957 2F21 AD EF 9C			lda X+1
   958 2F24 85 8F			sta @FCMPL.B+1
   959 2F26 AD F0 9C			lda X+2
   960 2F29 85 90			sta @FCMPL.B+2
   961 2F2B AD F1 9C			lda X+3
   962 2F2E 85 91			sta @FCMPL.B+3
   963 2F30 20 67 26			jsr @FCMPL
   964 2F33 30 02			smi
   965 2F35 D0 9A			jne l_015C
   966
   967 				; --- WhileProlog
   968 2F37 4C 75 2F			jmp l_0170
   969 2F3A			l_0171
   970
   971 				; optimize OK (SYSTEM), line = 1908
   972
   973 2F3A A9 DB			lda #$DB
   974 2F3C 85 8A			sta :FP2MAN0
   975 2F3E A9 0F			lda #$0F
   976 2F40 85 8B			sta :FP2MAN1
   977 2F42 A9 C9			lda #$C9
   978 2F44 85 8C			sta :FP2MAN2
   979 2F46 A9 40			lda #$40
   980 2F48 85 8D			sta :FP2MAN3
   981 2F4A AD EE 9C			lda X
   982 2F4D 85 86			sta :FP1MAN0
   983 2F4F AD EF 9C			lda X+1
   984 2F52 85 87			sta :FP1MAN1
   985 2F54 AD F0 9C			lda X+2
   986 2F57 85 88			sta :FP1MAN2
   987 2F59 AD F1 9C			lda X+3
   988 2F5C 85 89			sta :FP1MAN3
   989 2F5E 20 DE 23			jsr @FADD
   990 2F61 A5 8E			lda :FPMAN0
   991 2F63 8D EE 9C			sta X
   992 2F66 A5 8F			lda :FPMAN1
   993 2F68 8D EF 9C			sta X+1
   994 2F6B A5 90			lda :FPMAN2
   995 2F6D 8D F0 9C			sta X+2
   996 2F70 A5 91			lda :FPMAN3
   997 2F72 8D F1 9C			sta X+3
   998 2F75			l_0170
   999 2F75 AD F1 9C			lda X+3
  1000 2F78 30 C0			jmi l_0171
  1001
  1002 				; optimize OK (SYSTEM), line = 1911
  1003
  1004 2F7A A9 83			lda #$83
  1005 2F7C 85 8A			sta :FP2MAN0
  1006 2F7E A9 F9			lda #$F9
  1007 2F80 85 8B			sta :FP2MAN1
  1008 2F82 A9 22			lda #$22
  1009 2F84 85 8C			sta :FP2MAN2
  1010 2F86 A9 3F			lda #$3F
  1011 2F88 85 8D			sta :FP2MAN3
  1012 2F8A AD EE 9C			lda X
  1013 2F8D 85 86			sta :FP1MAN0
  1014 2F8F AD EF 9C			lda X+1
  1015 2F92 85 87			sta :FP1MAN1
  1016 2F94 AD F0 9C			lda X+2
  1017 2F97 85 88			sta :FP1MAN2
  1018 2F99 AD F1 9C			lda X+3
  1019 2F9C 85 89			sta :FP1MAN3
  1020 2F9E 20 4A 25			jsr @FMUL
  1021 2FA1 A5 8E			lda :FPMAN0
  1022 2FA3 8D EE 9C			sta X
  1023 2FA6 A5 8F			lda :FPMAN1
  1024 2FA8 8D EF 9C			sta X+1
  1025 2FAB A5 90			lda :FPMAN2
  1026 2FAD 8D F0 9C			sta X+2
  1027 2FB0 A5 91			lda :FPMAN3
  1028 2FB2 8D F1 9C			sta X+3
  1029
  1030 				; optimize OK (SYSTEM), line = 1914
  1031
  1032 2FB5 AD EE 9C			lda X
  1033 2FB8 85 8E			sta :FPMAN0
  1034 2FBA AD EF 9C			lda X+1
  1035 2FBD 85 8F			sta :FPMAN1
  1036 2FBF AD F0 9C			lda X+2
  1037 2FC2 85 90			sta :FPMAN2
  1038 2FC4 AD F1 9C			lda X+3
  1039 2FC7 85 91			sta :FPMAN3
  1040 2FC9 20 B3 26			jsr @F2I
  1041 2FCC A5 8E			lda :FPMAN0
  1042 2FCE 8D F7 9C			sta I
  1043
  1044 				; optimize OK (SYSTEM), line = 1917
  1045
  1046 2FD1 AD F1 9C			lda X+3
  1047 2FD4 10 03			jpl l_019F
  1048 2FD6 CE F7 9C			dec I
  1049 2FD9			l_019F
  1050
  1051 				; optimize OK (SYSTEM), line = 1920
  1052
  1053 2FD9 A0 00			ldy #$00
  1054 2FDB AD F7 9C			lda I
  1055 2FDE 10 01			spl
  1056 2FE0 88				dey
  1057 2FE1 85 8E			sta :FPMAN0
  1058 2FE3 84 8F			sty :FPMAN1
  1059 2FE5 84 90			sty :FPMAN2
  1060 2FE7 84 91			sty :FPMAN3
  1061 2FE9 20 24 27			jsr @I2F
  1062 2FEC A5 8E			lda :FPMAN0
  1063 2FEE 85 8A			sta :FP2MAN0
  1064 2FF0 A5 8F			lda :FPMAN1
  1065 2FF2 85 8B			sta :FP2MAN1
  1066 2FF4 A5 90			lda :FPMAN2
  1067 2FF6 85 8C			sta :FP2MAN2
  1068 2FF8 A5 91			lda :FPMAN3
  1069 2FFA 85 8D			sta :FP2MAN3
  1070 2FFC AD EE 9C			lda X
  1071 2FFF 85 86			sta :FP1MAN0
  1072 3001 AD EF 9C			lda X+1
  1073 3004 85 87			sta :FP1MAN1
  1074 3006 AD F0 9C			lda X+2
  1075 3009 85 88			sta :FP1MAN2
  1076 300B AD F1 9C			lda X+3
  1077 300E 85 89			sta :FP1MAN3
  1078 3010 20 E3 23			jsr @FSUB
  1079 3013 A5 8E			lda :FPMAN0
  1080 3015 8D EE 9C			sta X
  1081 3018 A5 8F			lda :FPMAN1
  1082 301A 8D EF 9C			sta X+1
  1083 301D A5 90			lda :FPMAN2
  1084 301F 8D F0 9C			sta X+2
  1085 3022 A5 91			lda :FPMAN3
  1086 3024 8D F1 9C			sta X+3
  1087
  1088 				; optimize OK (SYSTEM), line = 1923
  1089
  1090 3027 AD F2 9C			lda SC
  1091 302A F0 03			jeq l_01BC
  1092 302C EE F7 9C			inc I
  1093 302F			l_01BC
  1094
  1095 				; optimize OK (SYSTEM), line = 1926
  1096
  1097 302F AD F7 9C			lda I
  1098 3032 29 01			and #$01
  1099 3034 D0 39			jne l_01D9
  1100 3036 AD EE 9C			lda X
  1101 3039 85 8A			sta :FP2MAN0
  1102 303B AD EF 9C			lda X+1
  1103 303E 85 8B			sta :FP2MAN1
  1104 3040 AD F0 9C			lda X+2
  1105 3043 85 8C			sta :FP2MAN2
  1106 3045 AD F1 9C			lda X+3
  1107 3048 85 8D			sta :FP2MAN3
  1108 304A A9 00			lda #$00
  1109 304C 85 86			sta :FP1MAN0
  1110 304E 85 87			sta :FP1MAN1
  1111 3050 A9 80			lda #$80
  1112 3052 85 88			sta :FP1MAN2
  1113 3054 A9 3F			lda #$3F
  1114 3056 85 89			sta :FP1MAN3
  1115 3058 20 E3 23			jsr @FSUB
  1116 305B A5 8E			lda :FPMAN0
  1117 305D 8D EE 9C			sta X
  1118 3060 A5 8F			lda :FPMAN1
  1119 3062 8D EF 9C			sta X+1
  1120 3065 A5 90			lda :FPMAN2
  1121 3067 8D F0 9C			sta X+2
  1122 306A A5 91			lda :FPMAN3
  1123 306C 8D F1 9C			sta X+3
  1124 306F			l_01D9
  1125
  1126 				; optimize OK (SYSTEM), line = 1929
  1127
  1128 306F AD EE 9C			lda X
  1129 3072 85 8A			sta :FP2MAN0
  1130 3074 AD EF 9C			lda X+1
  1131 3077 85 8B			sta :FP2MAN1
  1132 3079 AD F0 9C			lda X+2
  1133 307C 85 8C			sta :FP2MAN2
  1134 307E AD F1 9C			lda X+3
  1135 3081 85 8D			sta :FP2MAN3
  1136 3083 AD EE 9C			lda X
  1137 3086 85 86			sta :FP1MAN0
  1138 3088 AD EF 9C			lda X+1
  1139 308B 85 87			sta :FP1MAN1
  1140 308D AD F0 9C			lda X+2
  1141 3090 85 88			sta :FP1MAN2
  1142 3092 AD F1 9C			lda X+3
  1143 3095 85 89			sta :FP1MAN3
  1144 3097 20 4A 25			jsr @FMUL
  1145 309A A5 8E			lda :FPMAN0
  1146 309C 8D EE 9C			sta X
  1147 309F A5 8F			lda :FPMAN1
  1148 30A1 8D EF 9C			sta X+1
  1149 30A4 A5 90			lda :FPMAN2
  1150 30A6 8D F0 9C			sta X+2
  1151 30A9 A5 91			lda :FPMAN3
  1152 30AB 8D F1 9C			sta X+3
  1153
  1154 				; optimize OK (SYSTEM), line = 1930
  1155
  1156 30AE A9 42			lda #$42
  1157 30B0 85 8A			sta :FP2MAN0
  1158 30B2 A9 01			lda #$01
  1159 30B4 85 8B			sta :FP2MAN1
  1160 30B6 A9 5E			lda #$5E
  1161 30B8 85 8C			sta :FP2MAN2
  1162 30BA A9 3A			lda #$3A
  1163 30BC 85 8D			sta :FP2MAN3
  1164 30BE AD EE 9C			lda X
  1165 30C1 85 86			sta :FP1MAN0
  1166 30C3 AD EF 9C			lda X+1
  1167 30C6 85 87			sta :FP1MAN1
  1168 30C8 AD F0 9C			lda X+2
  1169 30CB 85 88			sta :FP1MAN2
  1170 30CD AD F1 9C			lda X+3
  1171 30D0 85 89			sta :FP1MAN3
  1172 30D2 20 4A 25			jsr @FMUL
  1173 30D5 A5 8E			lda :FPMAN0
  1174 30D7 85 8A			sta :FP2MAN0
  1175 30D9 A5 8F			lda :FPMAN1
  1176 30DB 85 8B			sta :FP2MAN1
  1177 30DD A5 90			lda :FPMAN2
  1178 30DF 85 8C			sta :FP2MAN2
  1179 30E1 A5 91			lda :FPMAN3
  1180 30E3 85 8D			sta :FP2MAN3
  1181 30E5 A9 D3			lda #$D3
  1182 30E7 85 86			sta :FP1MAN0
  1183 30E9 A9 59			lda #$59
  1184 30EB 85 87			sta :FP1MAN1
  1185 30ED A9 A3			lda #$A3
  1186 30EF 85 88			sta :FP1MAN2
  1187 30F1 A9 3C			lda #$3C
  1188 30F3 85 89			sta :FP1MAN3
  1189 30F5 20 E3 23			jsr @FSUB
  1190 30F8 A5 8E			lda :FPMAN0
  1191 30FA 85 86			sta :FP1MAN0
  1192 30FC A5 8F			lda :FPMAN1
  1193 30FE 85 87			sta :FP1MAN1
  1194 3100 A5 90			lda :FPMAN2
  1195 3102 85 88			sta :FP1MAN2
  1196 3104 A5 91			lda :FPMAN3
  1197 3106 85 89			sta :FP1MAN3
  1198 3108 AD EE 9C			lda X
  1199 310B 85 8A			sta :FP2MAN0
  1200 310D AD EF 9C			lda X+1
  1201 3110 85 8B			sta :FP2MAN1
  1202 3112 AD F0 9C			lda X+2
  1203 3115 85 8C			sta :FP2MAN2
  1204 3117 AD F1 9C			lda X+3
  1205 311A 85 8D			sta :FP2MAN3
  1206 311C 20 4A 25			jsr @FMUL
  1207 311F A5 8E			lda :FPMAN0
  1208 3121 85 86			sta :FP1MAN0
  1209 3123 A5 8F			lda :FPMAN1
  1210 3125 85 87			sta :FP1MAN1
  1211 3127 A5 90			lda :FPMAN2
  1212 3129 85 88			sta :FP1MAN2
  1213 312B A5 91			lda :FPMAN3
  1214 312D 85 89			sta :FP1MAN3
  1215 312F A9 DE			lda #$DE
  1216 3131 85 8A			sta :FP2MAN0
  1217 3133 A9 4D			lda #$4D
  1218 3135 85 8B			sta :FP2MAN1
  1219 3137 A9 6F			lda #$6F
  1220 3139 85 8C			sta :FP2MAN2
  1221 313B A9 3E			lda #$3E
  1222 313D 85 8D			sta :FP2MAN3
  1223 313F 20 E3 23			jsr @FSUB
  1224 3142 A5 8E			lda :FPMAN0
  1225 3144 85 86			sta :FP1MAN0
  1226 3146 A5 8F			lda :FPMAN1
  1227 3148 85 87			sta :FP1MAN1
  1228 314A A5 90			lda :FPMAN2
  1229 314C 85 88			sta :FP1MAN2
  1230 314E A5 91			lda :FPMAN3
  1231 3150 85 89			sta :FP1MAN3
  1232 3152 AD EE 9C			lda X
  1233 3155 85 8A			sta :FP2MAN0
  1234 3157 AD EF 9C			lda X+1
  1235 315A 85 8B			sta :FP2MAN1
  1236 315C AD F0 9C			lda X+2
  1237 315F 85 8C			sta :FP2MAN2
  1238 3161 AD F1 9C			lda X+3
  1239 3164 85 8D			sta :FP2MAN3
  1240 3166 20 4A 25			jsr @FMUL
  1241 3169 A5 8E			lda :FPMAN0
  1242 316B 85 86			sta :FP1MAN0
  1243 316D A5 8F			lda :FPMAN1
  1244 316F 85 87			sta :FP1MAN1
  1245 3171 A5 90			lda :FPMAN2
  1246 3173 85 88			sta :FP1MAN2
  1247 3175 A5 91			lda :FPMAN3
  1248 3177 85 89			sta :FP1MAN3
  1249 3179 A9 00			lda #$00
  1250 317B 85 8A			sta :FP2MAN0
  1251 317D 85 8B			sta :FP2MAN1
  1252 317F A9 80			lda #$80
  1253 3181 85 8C			sta :FP2MAN2
  1254 3183 A9 3F			lda #$3F
  1255 3185 85 8D			sta :FP2MAN3
  1256 3187 20 DE 23			jsr @FADD
  1257 318A A5 8E			lda :FPMAN0
  1258 318C 85 9F			sta :STACKORIGIN+9
  1259 318E A5 8F			lda :FPMAN1
  1260 3190 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  1261 3192 A5 90			lda :FPMAN2
  1262 3194 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
  1263 3196 A5 91			lda :FPMAN3
  1264 3198 85 CF			sta :STACKORIGIN+STACKWIDTH*3+9
  1265 319A AD EE 9C			lda X
  1266 319D 85 8A			sta :FP2MAN0
  1267 319F AD EF 9C			lda X+1
  1268 31A2 85 8B			sta :FP2MAN1
  1269 31A4 AD F0 9C			lda X+2
  1270 31A7 85 8C			sta :FP2MAN2
  1271 31A9 AD F1 9C			lda X+3
  1272 31AC 85 8D			sta :FP2MAN3
  1273 31AE A9 00			lda #$00
  1274 31B0 85 86			sta :FP1MAN0
  1275 31B2 85 87			sta :FP1MAN1
  1276 31B4 A9 80			lda #$80
  1277 31B6 85 88			sta :FP1MAN2
  1278 31B8 A9 3F			lda #$3F
  1279 31BA 85 89			sta :FP1MAN3
  1280 31BC 20 E3 23			jsr @FSUB
  1281 31BF A5 8E			lda :FPMAN0
  1282 31C1 85 8A			sta :FP2MAN0
  1283 31C3 A5 8F			lda :FPMAN1
  1284 31C5 85 8B			sta :FP2MAN1
  1285 31C7 A5 90			lda :FPMAN2
  1286 31C9 85 8C			sta :FP2MAN2
  1287 31CB A5 91			lda :FPMAN3
  1288 31CD 85 8D			sta :FP2MAN3
  1289 31CF A5 9F			lda :STACKORIGIN+9
  1290 31D1 85 86			sta :FP1MAN0
  1291 31D3 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  1292 31D5 85 87			sta :FP1MAN1
  1293 31D7 A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
  1294 31D9 85 88			sta :FP1MAN2
  1295 31DB A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
  1296 31DD 85 89			sta :FP1MAN3
  1297 31DF 20 4A 25			jsr @FMUL
  1298 31E2 A5 8E			lda :FPMAN0
  1299 31E4 8D F3 9C			sta RESULT
  1300 31E7 A5 8F			lda :FPMAN1
  1301 31E9 8D F4 9C			sta RESULT+1
  1302 31EC A5 90			lda :FPMAN2
  1303 31EE 8D F5 9C			sta RESULT+2
  1304 31F1 A5 91			lda :FPMAN3
  1305 31F3 8D F6 9C			sta RESULT+3
  1306
  1307 				; optimize OK (SYSTEM), line = 1933
  1308
  1309 31F6 AD F7 9C			lda I
  1310 31F9 29 02			and #$02
  1311 31FB C9 02			cmp #$02
  1312 31FD D0 08			jne l_0226
  1313 31FF AD F6 9C			lda RESULT+3
  1314 3202 49 80			eor #$80
  1315 3204 8D F6 9C			sta RESULT+3
  1316 3207			l_0226
  1317 3207			@exit
  1318
  1319 				; ------------------------------------------------------------
  1320
  1321 = 9CEE			X	= DATAORIGIN+$001C
  1322 = 9CF2			SC	= DATAORIGIN+$0020
  1323 = 9CF3			RESULT	= DATAORIGIN+$0021
  1324 = 9CF7			I	= DATAORIGIN+$0025
  1325
  1326 = 9CEE			@VarData	= X
  1327 = 0006			@VarDataSize	= 6
  1328
  1329 3207 60				rts						; ret
  1330 				.endl
  1331
  1332 3208			.local	SIN						; FUNCTION | OVERLOAD
  1333 3208			.local	@01018F000
  1334
  1335 				; optimize OK (SYSTEM), line = 1947
  1336
  1337 3208 AD F8 9C			lda X
  1338 320B 8D EE 9C			sta FSINCOS.X
  1339 320E AD F9 9C			lda X+1
  1340 3211 8D EF 9C			sta FSINCOS.X+1
  1341 3214 AD FA 9C			lda X+2
  1342 3217 8D F0 9C			sta FSINCOS.X+2
  1343 321A AD FB 9C			lda X+3
  1344 321D 8D F1 9C			sta FSINCOS.X+3
  1345 3220 A9 00			lda #$00
  1346 3222 8D F2 9C			sta FSINCOS.SC
  1347 3225 20 CE 2E			jsr FSINCOS
  1348 3228 AD F3 9C			lda FSINCOS.RESULT
  1349 322B 8D FC 9C			sta RESULT
  1350 322E AD F4 9C			lda FSINCOS.RESULT+1
  1351 3231 8D FD 9C			sta RESULT+1
  1352 3234 AD F5 9C			lda FSINCOS.RESULT+2
  1353 3237 8D FE 9C			sta RESULT+2
  1354 323A AD F6 9C			lda FSINCOS.RESULT+3
  1355 323D 8D FF 9C			sta RESULT+3
  1356 3240			@exit
  1357
  1358 				; ------------------------------------------------------------
  1359
  1360 = 9CF8			X	= DATAORIGIN+$0026
  1361 = 9CFC			RESULT	= DATAORIGIN+$002A
  1362
  1363 = 9CF8			@VarData	= X
  1364 = 0004			@VarDataSize	= 4
  1365
  1366 3240 60				rts						; ret
  1367 				.endl
  1368 				.endl							; overload
  1369
  1370 3241			.local	COS						; FUNCTION | OVERLOAD
  1371 3241			.local	@01018F000
  1372
  1373 				; optimize OK (SYSTEM), line = 1961
  1374
  1375 3241 AD 00 9D			lda X
  1376 3244 8D EE 9C			sta FSINCOS.X
  1377 3247 AD 01 9D			lda X+1
  1378 324A 8D EF 9C			sta FSINCOS.X+1
  1379 324D AD 02 9D			lda X+2
  1380 3250 8D F0 9C			sta FSINCOS.X+2
  1381 3253 AD 03 9D			lda X+3
  1382 3256 8D F1 9C			sta FSINCOS.X+3
  1383 3259 A9 01			lda #$01
  1384 325B 8D F2 9C			sta FSINCOS.SC
  1385 325E 20 CE 2E			jsr FSINCOS
  1386 3261 AD F3 9C			lda FSINCOS.RESULT
  1387 3264 8D 04 9D			sta RESULT
  1388 3267 AD F4 9C			lda FSINCOS.RESULT+1
  1389 326A 8D 05 9D			sta RESULT+1
  1390 326D AD F5 9C			lda FSINCOS.RESULT+2
  1391 3270 8D 06 9D			sta RESULT+2
  1392 3273 AD F6 9C			lda FSINCOS.RESULT+3
  1393 3276 8D 07 9D			sta RESULT+3
  1394 3279			@exit
  1395
  1396 				; ------------------------------------------------------------
  1397
  1398 = 9D00			X	= DATAORIGIN+$002E
  1399 = 9D04			RESULT	= DATAORIGIN+$0032
  1400
  1401 = 9D00			@VarData	= X
  1402 = 0004			@VarDataSize	= 4
  1403
  1404 3279 60				rts						; ret
  1405 				.endl
  1406 				.endl							; overload
  1407
  1408 327A			.local	PAUSE						; PROCEDURE | ASSEMBLER | OVERLOAD
  1409 327A			.local	@00
  1410
  1411 				; -------------------  ASM Block 00000043  -------------------
  1412
  1413 327A 2C 0B D4			bit VCOUNT
  1414 327D 30 FB			bmi *-3
  1415 327F 2C 0B D4			bit VCOUNT
  1416 3282 10 FB			bpl *-3
  1417
  1418 3284			@exit
  1419 					.ifdef @new
  1420 					lda <@VarData
  1421 					sta :ztmp
  1422 					lda >@VarData
  1423 					ldy #@VarDataSize-1
  1424 					jmp @FreeMem
  1425 					els
  1426 3284 60				rts						; ret
  1427 					eif
  1428 				.endl
  1429 				.endl							; overload
  1430
  1431 3285			.local	RANDOMIZE					; PROCEDURE | ASSEMBLER
  1432
  1433 				; -------------------  ASM Block 00000045  -------------------
  1434
  1435
  1436 3285 AD 0A D2 8D DB 9C	  mva $d20a RndSeed
  1437 328B A9 00 8D DC 9C	  mva #$00  RndSeed+1
  1438
  1439
  1440 3290			@exit
  1441 					.ifdef @new
  1442 					lda <@VarData
  1443 					sta :ztmp
  1444 					lda >@VarData
  1445 					ldy #@VarDataSize-1
  1446 					jmp @FreeMem
  1447 					els
  1448 3290 60				rts						; ret
  1449 					eif
  1450 				.endl
  1451
  1452 3291			.local	RANDOM						; FUNCTION | ASSEMBLER | OVERLOAD
  1453 3291			.local	@010180000
  1454 3291 8D 08 9D			sta RANGE
  1455
  1456 				; -------------------  ASM Block 00000049  -------------------
  1457
  1458
  1459 				;BYTE FUNC Rand(BYTE range)
  1460 				; returns random number between 0 and
  1461 				; range-1.  If range=0, then a random
  1462 				; number between 0 and 255 is returned
  1463
  1464 3294 AC 0A D2		  ldy $d20a   ; RANDOM
  1465
  1466 3297 AD 08 9D		  lda range
  1467 329A F0 08		  beq stop
  1468
  1469 329C 85 8E		  sta :ecx
  1470 329E 84 86		  sty :eax
  1471
  1472 32A0 20 3F 22		  jsr imulCL
  1473 32A3 A8			  tay
  1474
  1475 32A4 8C 09 9D		stop  sty Result
  1476
  1477
  1478 32A7			@exit
  1479
  1480 				; ------------------------------------------------------------
  1481
  1482 = 9D08			RANGE	= DATAORIGIN+$0036
  1483 = 9D09			RESULT	= DATAORIGIN+$0037
  1484
  1485 = 9D08			@VarData	= RANGE
  1486 = 0001			@VarDataSize	= 1
  1487
  1488 32A7 60				rts						; ret
  1489 				.endl
  1490 				.endl							; overload
  1491
  1492 32A8			.local	RANDOM						; FUNCTION | OVERLOAD
  1493 32A8			.local	@010184000
  1494
  1495 				; optimize OK (system_atari.inc), line = 179
  1496
  1497 32A8 AD 0B 9D			lda RANGE+1
  1498 32AB 0D 0A 9D			ora RANGE
  1499 32AE D0 0B			jne l_0266
  1500
  1501 				; optimize OK (system_atari.inc), line = 180
  1502
  1503 32B0 A9 00			lda #$00
  1504 32B2 8D 0C 9D			sta RESULT
  1505 32B5 8D 0D 9D			sta RESULT+1
  1506 32B8 4C 1D 33			jmp l_0274
  1507 32BB			l_0266
  1508
  1509 				; optimize OK (system_atari.inc), line = 183
  1510
  1511 32BB AD DB 9C			lda RNDSEED
  1512 32BE 85 8E			sta :ecx
  1513 32C0 AD DC 9C			lda RNDSEED+1
  1514 32C3 85 8F			sta :ecx+1
  1515 32C5 A9 95			lda #$95
  1516 32C7 85 86			sta :eax
  1517 32C9 A9 45			lda #$45
  1518 32CB 85 87			sta :eax+1
  1519 					.ifdef fmulinit
  1520 					fmulu_16
  1521 					els
  1522 32CD 20 8B 22			imulCX
  1523 					eif
  1524 32D0 A5 86			lda :eax
  1525 32D2 8D DB 9C			sta RNDSEED
  1526 32D5 A5 87			lda :eax+1
  1527 32D7 8D DC 9C			sta RNDSEED+1
  1528
  1529 				; optimize OK (system_atari.inc), line = 184
  1530
  1531 32DA AD 0A 9D			lda RANGE
  1532 32DD 85 8E			sta @SMALLINT.MOD.B
  1533 32DF AD 0B 9D			lda RANGE+1
  1534 32E2 85 8F			sta @SMALLINT.MOD.B+1
  1535 32E4 AD DB 9C			lda RNDSEED
  1536 32E7 85 86			sta @SMALLINT.MOD.A
  1537 32E9 AD DC 9C			lda RNDSEED+1
  1538 32EC 85 87			sta @SMALLINT.MOD.A+1
  1539 32EE 20 1C 22			jsr @SMALLINT.MOD
  1540 32F1 A5 92			lda @SMALLINT.MOD.RESULT
  1541 32F3 8D 0C 9D			sta RESULT
  1542 32F6 A5 93			lda @SMALLINT.MOD.RESULT+1
  1543 32F8 8D 0D 9D			sta RESULT+1
  1544
  1545 				; -------------------  ASM Block 00000050  -------------------
  1546
  1547 32FB AD 0B 9D			lda range+1
  1548 32FE 10 07			bpl plus
  1549
  1550 3300 AD 0D 9D			lda Result+1
  1551 3303 30 18			bmi ok
  1552 3305 10 05			bpl sign
  1553
  1554 3307 AD 0D 9D		plus	lda Result+1
  1555 330A 10 11			bpl ok
  1556
  1557 330C A9 00		sign 	lda #0
  1558 330E 38 ED 0C 9D			sub Result
  1559 3312 8D 0C 9D			sta Result
  1560
  1561 3315 A9 00			lda #0
  1562 3317 ED 0D 9D			sbc Result+1
  1563 331A 8D 0D 9D			sta Result+1
  1564 331D			ok
  1565
  1566 331D			l_0274
  1567 331D			@exit
  1568
  1569 				; ------------------------------------------------------------
  1570
  1571 = 9D0A			RANGE	= DATAORIGIN+$0038
  1572 = 9D0C			RESULT	= DATAORIGIN+$003A
  1573
  1574 = 9D0A			@VarData	= RANGE
  1575 = 0002			@VarDataSize	= 2
  1576
  1577 331D 60				rts						; ret
  1578 				.endl
  1579 				.endl							; overload
  1580
  1581 				; ------------------------------------------------------------
  1582 				; ------------------------------------------------------------
  1583 331E			@UnitInit
  1584
  1585 				; -------------------  ASM Block 00000060  -------------------
  1586
  1587 					.ifdef @CmdLine
  1588
  1589 					ldx #$0F
  1590 					mva:rpl $340,x IOCB@COPY,x-
  1591 					rts
  1592
  1593 				IOCB@COPY	:16 brk
  1594 					eif
  1595
  1596
  1597 331E 60				rts
  1598
  1599 				; ------------------------------------------------------------
  1600
  1601 = 0648			M_PI_2	= $0648
  1602 = 0192			D_PI_2	= $0192
  1603 = 0004			D_PI_180	= $04
  1604 = 0101			__PORTB_BANKS	= $0101
  1605 = 0000			MGTIA	= $00
  1606 = 0080			MVBXE	= $80
  1607 = 0000			VBXE_XDLADR	= $00
  1608 = 00E0			VBXE_BCBTMP	= $E0
  1609 = 0100			VBXE_BCBADR	= $0100
  1610 = 1000			VBXE_MAPADR	= $1000
  1611 = 1000			VBXE_CHBASE	= $1000
  1612 = 5000			VBXE_OVRADR	= $5000
  1613 = B000			VBXE_WINDOW	= $B000
  1614 = 0000			IDLI	= $00
  1615 = 0001			IVBL	= $01
  1616 = 0001			IVBLD	= $01
  1617 = 0002			IVBLI	= $02
  1618 = 0003			ITIM1	= $03
  1619 = 0004			ITIM2	= $04
  1620 = 0005			ITIM4	= $05
  1621 = 00FE			CH_DELCHR	= $FE
  1622 = 009B			CH_ENTER	= $9B
  1623 = 001B			CH_ESC	= $1B
  1624 = 001C			CH_CURS_UP	= $1C
  1625 = 001D			CH_CURS_DOWN	= $1D
  1626 = 001E			CH_CURS_LEFT	= $1E
  1627 = 001F			CH_CURS_RIGHT	= $1F
  1628 = 007F			CH_TAB	= $7F
  1629 = 009B			CH_EOL	= $9B
  1630 = 007D			CH_CLR	= $7D
  1631 = 00FD			CH_BELL	= $FD
  1632 = 007E			CH_DEL	= $7E
  1633 = 009C			CH_DELLINE	= $9C
  1634 = 009D			CH_INSLINE	= $9D
  1635 = 0000			PAL_PMCOLOR0	= $00
  1636 = 0001			PAL_PMCOLOR1	= $01
  1637 = 0002			PAL_PMCOLOR2	= $02
  1638 = 0003			PAL_PMCOLOR3	= $03
  1639 = 0004			PAL_COLOR0	= $04
  1640 = 0005			PAL_COLOR1	= $05
  1641 = 0006			PAL_COLOR2	= $06
  1642 = 0007			PAL_COLOR3	= $07
  1643 = 0008			PAL_COLBAK	= $08
  1644 = 0000			COLOR_BLACK	= $00
  1645 = 000E			COLOR_WHITE	= $0E
  1646 = 0032			COLOR_RED	= $32
  1647 = 0096			COLOR_CYAN	= $96
  1648 = 0068			COLOR_VIOLET	= $68
  1649 = 00C4			COLOR_GREEN	= $C4
  1650 = 0074			COLOR_BLUE	= $74
  1651 = 00EE			COLOR_YELLOW	= $EE
  1652 = 0028			COLOR_ORANGE	= $28
  1653 = 00E4			COLOR_BROWN	= $E4
  1654 = 003C			COLOR_LIGHTRED	= $3C
  1655 = 0004			COLOR_GRAY1	= $04
  1656 = 0006			COLOR_GRAY2	= $06
  1657 = 000A			COLOR_GRAY3	= $0A
  1658 = 00CC			COLOR_LIGHTGREEN	= $CC
  1659 = 007C			COLOR_LIGHTBLUE	= $7C
  1660 = 0004			FMOPENREAD	= $04
  1661 = 0008			FMOPENWRITE	= $08
  1662 = 0009			FMOPENAPPEND	= $09
  1663 = 000C			FMOPENREADWRITE	= $0C
  1664 = 9CD2			DATESEPARATOR	= DATAORIGIN+$0000
  1665 = D20A			RND	= $D20A
  1666 = 02C0			adr.PALETTE	= $02C0
  1667 331F			.var PALETTE	= adr.PALETTE .word
  1668 = D012			adr.HPALETTE	= $D012
  1669 331F			.var HPALETTE	= adr.HPALETTE .word
  1670 = 9CD3			FILEMODE	= DATAORIGIN+$0001
  1671 = 9CD4			GRAPHMODE	= DATAORIGIN+$0002
  1672 = 9CD5			IORESULT	= DATAORIGIN+$0003
  1673 = 9CD6			EOLN	= DATAORIGIN+$0004
  1674 = 9CD7			SCREENWIDTH	= DATAORIGIN+$0005
  1675 = 9CD9			SCREENHEIGHT	= DATAORIGIN+$0007
  1676 = 0000			adr.MEM	= $00
  1677 331F			.var MEM	= adr.MEM .word
  1678 = 9CDB			RNDSEED	= DATAORIGIN+$0009
  1679
  1680 = 331F C0 02		PALETTE
  1680 = 3321 12 D0		HPALETTE
  1680 = 3323 00 00		MEM
  1680 				.endl							; UNIT SYSTEM
  1681
  1682 				; ------------------------------------------------------------
  1683
  1684 3325			.local	ATARI						; UNIT
  1685
  1686 				; ------------------------------------------------------------
  1687
  1688 = 0000			DL_BLANK1	= $00
  1689 = 0010			DL_BLANK2	= $10
  1690 = 0020			DL_BLANK3	= $20
  1691 = 0030			DL_BLANK4	= $30
  1692 = 0040			DL_BLANK5	= $40
  1693 = 0050			DL_BLANK6	= $50
  1694 = 0060			DL_BLANK7	= $60
  1695 = 0070			DL_BLANK8	= $70
  1696 = 0080			DL_DLI	= $80
  1697 = 0040			DL_LMS	= $40
  1698 = 0020			DL_VSCROLL	= $20
  1699 = 0010			DL_HSCROLL	= $10
  1700 = 0001			DL_JMP	= $01
  1701 = 0041			DL_JVB	= $41
  1702 = 0002			DL_MODE_2	= $02
  1703 = 0003			DL_MODE_3	= $03
  1704 = 0004			DL_MODE_4	= $04
  1705 = 0005			DL_MODE_5	= $05
  1706 = 000E			DL_MODE_E	= $0E
  1707 = 000F			DL_MODE_F	= $0F
  1708 = 0010			IRQENS	= $10
  1709 = 0012			RTCLOK	= $12
  1710 = 0012			RTCLOK1	= $12
  1711 = 0013			RTCLOK2	= $13
  1712 = 0014			RTCLOK3	= $14
  1713 = 004D			ATRACT	= $4D
  1714 = 0052			LMARGIN	= $52
  1715 = 0053			RMARGIN	= $53
  1716 = 0054			ROWCRS	= $54
  1717 = 0055			COLCRS	= $55
  1718 = 0057			DINDEX	= $57
  1719 = 0058			SAVMSC	= $58
  1720 = 0062			PALNTS	= $62
  1721 = 006A			RAMTOP	= $6A
  1722 = 0200			VDSLST	= $0200
  1723 = 0230			SDLSTL	= $0230
  1724 = 0290			TXTROW	= $0290
  1725 = 0291			TXTCOL	= $0291
  1726 = 0293			TINDEX	= $0293
  1727 = 0294			TXTMSC	= $0294
  1728 = 022F			SDMCTL	= $022F
  1729 = 026F			GPRIOR	= $026F
  1730 = 02F0			CRSINH	= $02F0
  1731 = 02F3			CHACT	= $02F3
  1732 = 02F4			CHBAS	= $02F4
  1733 = 02FC			CH	= $02FC
  1734 = 02FD			FILDAT	= $02FD
  1735 = 02C0			PCOLR0	= $02C0
  1736 = 02C1			PCOLR1	= $02C1
  1737 = 02C2			PCOLR2	= $02C2
  1738 = 02C3			PCOLR3	= $02C3
  1739 = 02C4			COLOR0	= $02C4
  1740 = 02C5			COLOR1	= $02C5
  1741 = 02C6			COLOR2	= $02C6
  1742 = 02C7			COLOR3	= $02C7
  1743 = 02C8			COLOR4	= $02C8
  1744 = 02C8			COLBAKS	= $02C8
  1745 = D000			HPOSP0	= $D000
  1746 = D001			HPOSP1	= $D001
  1747 = D002			HPOSP2	= $D002
  1748 = D003			HPOSP3	= $D003
  1749 = D004			HPOSM0	= $D004
  1750 = D005			HPOSM1	= $D005
  1751 = D006			HPOSM2	= $D006
  1752 = D007			HPOSM3	= $D007
  1753 = D008			SIZEP0	= $D008
  1754 = D009			SIZEP1	= $D009
  1755 = D00A			SIZEP2	= $D00A
  1756 = D00B			SIZEP3	= $D00B
  1757 = D00C			SIZEM	= $D00C
  1758 = D00D			GRAFP0	= $D00D
  1759 = D00E			GRAFP1	= $D00E
  1760 = D00F			GRAFP2	= $D00F
  1761 = D010			GRAFP3	= $D010
  1762 = D011			GRAFM	= $D011
  1763 = D004			P0PF	= $D004
  1764 = D014			PAL	= $D014
  1765 = D013			TRIG3	= $D013
  1766 = D012			COLPM0	= $D012
  1767 = D013			COLPM1	= $D013
  1768 = D014			COLPM2	= $D014
  1769 = D015			COLPM3	= $D015
  1770 = D016			COLPF0	= $D016
  1771 = D017			COLPF1	= $D017
  1772 = D018			COLPF2	= $D018
  1773 = D019			COLPF3	= $D019
  1774 = D01A			COLBAK	= $D01A
  1775 = D01A			COLBK	= $D01A
  1776 = D01B			PRIOR	= $D01B
  1777 = D01D			GRACTL	= $D01D
  1778 = D01D			PMCNTL	= $D01D
  1779 = D01E			HITCLR	= $D01E
  1780 = D01F			CONSOL	= $D01F
  1781 = D200			AUDF1	= $D200
  1782 = D201			AUDC1	= $D201
  1783 = D202			AUDF2	= $D202
  1784 = D203			AUDC2	= $D203
  1785 = D204			AUDF3	= $D204
  1786 = D205			AUDC3	= $D205
  1787 = D206			AUDF4	= $D206
  1788 = D207			AUDC4	= $D207
  1789 = D208			AUDCTL	= $D208
  1790 = D209			KBCODE	= $D209
  1791 = D20E			IRQEN	= $D20E
  1792 = D20F			SKSTAT	= $D20F
  1793 = D300			PORTA	= $D300
  1794 = D301			PORTB	= $D301
  1795 = D302			PACTL	= $D302
  1796 = D400			DMACTL	= $D400
  1797 = D401			CHACTL	= $D401
  1798 = D402			DLISTL	= $D402
  1799 = D404			HSCROL	= $D404
  1800 = D405			VSCROL	= $D405
  1801 = D407			PMBASE	= $D407
  1802 = D409			CHBASE	= $D409
  1803 = D40A			WSYNC	= $D40A
  1804 = D40B			VCOUNT	= $D40B
  1805 = D40C			PENH	= $D40C
  1806 = D40D			PENV	= $D40D
  1807 = D40E			NMIEN	= $D40E
  1808 = FFFA			NMIVEC	= $FFFA
  1809 = FFFC			RESETVEC	= $FFFC
  1810 = FFFE			IRQVEC	= $FFFE
  1811
  1812 				.endl							; UNIT ATARI
  1813
  1814 				; ------------------------------------------------------------
  1815
  1816 3325			.local	CRT						; UNIT
  1817
  1818 				; ------------------------------------------------------------
  1819
  1820 = 9D0E			TEXTATTR	= DATAORIGIN+$003C
  1821 = D01F			CONSOL	= $D01F
  1822 = 0000			CN_START_SELECT_OPTION	= $00
  1823 = 0001			CN_SELECT_OPTION	= $01
  1824 = 0002			CN_START_OPTION	= $02
  1825 = 0003			CN_OPTION	= $03
  1826 = 0004			CN_START_SELECT	= $04
  1827 = 0005			CN_SELECT	= $05
  1828 = 0006			CN_START	= $06
  1829 = 0007			CN_NONE	= $07
  1830 = 0000			BLACK	= $00
  1831 = 000F			WHITE	= $0F
  1832 = 0026			RED	= $26
  1833 = 00AC			CYAN	= $AC
  1834 = 0048			PURPLE	= $48
  1835 = 00B6			GREEN	= $B6
  1836 = 0086			BLUE	= $86
  1837 = 00DC			YELLOW	= $DC
  1838 = 0018			ORANGE	= $18
  1839 = 00F4			BROWN	= $F4
  1840 = 002A			LIGHT_RED	= $2A
  1841 = 0004			DARK_GREY	= $04
  1842 = 0008			GREY	= $08
  1843 = 00BC			LIGHT_GREEN	= $BC
  1844 = 009A			LIGHT_BLUE	= $9A
  1845 = 000C			LIGHT_GREY	= $0C
  1846 = 0000			BW40	= $00
  1847 = 0001			CO40	= $01
  1848 = 0002			BW80	= $02
  1849 = 0003			CO80	= $03
  1850 = 0007			MONO	= $07
  1851 = 0001			C40	= $01
  1852 = 0003			C80	= $03
  1853 = 0080			BLINK	= $80
  1854
  1855 				.endl							; UNIT CRT
  1856
  1857 				; ------------------------------------------------------------
  1858
  1859 3325			.local	TYPES						; UNIT
  1860
  1861 				; ------------------------------------------------------------
  1862
  1863 				.endl							; UNIT TYPES
  1864
  1865 				; ------------------------------------------------------------
  1866
  1867 3325			.local	GRAPH						; UNIT
  1868
  1869 				; ------------------------------------------------------------
  1870
  1871 = 0080			CURRENTDRIVER	= $80
  1872 = 0000			DETECT	= $00
  1873 = 0001			CGA	= $01
  1874 = 0002			MCGA	= $02
  1875 = 0003			EGA	= $03
  1876 = 0004			EGA64	= $04
  1877 = 0005			EGAMONO	= $05
  1878 = 0006			LOWRES	= $06
  1879 = 0007			HERCMONO	= $07
  1880 = 0009			VGA	= $09
  1881 = 000A			VESA	= $0A
  1882 = 000B			D1BIT	= $0B
  1883 = 000C			D2BIT	= $0C
  1884 = 000D			D4BIT	= $0D
  1885 = 000E			D6BIT	= $0E
  1886 = 000F			D8BIT	= $0F
  1887 = 0010			D12BIT	= $10
  1888 = 0018			M640X400	= $18
  1889 = 0018			M640X480	= $18
  1890 = 0001			GROK	= $01
  1891 = 00FF			GRNOINITGRAPH	= $FF
  1892 = 00FE			GRNOTDETECTED	= $FE
  1893 = 00FD			GRFILENOTFOUND	= $FD
  1894 = 00FC			GRINVALIDDRIVER	= $FC
  1895 = 00FB			GRNOLOADMEM	= $FB
  1896 = 00FA			GRNOSCANMEM	= $FA
  1897 = 00F9			GRNOFLOODMEM	= $F9
  1898 = 00F8			GRFONTNOTFOUND	= $F8
  1899 = 00F7			GRNOFONTMEM	= $F7
  1900 = 00F6			GRINVALIDMODE	= $F6
  1901 = 00F5			GRERROR	= $F5
  1902 = 00F4			GRIOERROR	= $F4
  1903 = 00F3			GRINVALIDFONT	= $F3
  1904 = 00F2			GRINVALIDFONTNUM	= $F2
  1905 = 00EE			GRINVALIDVERSION	= $EE
  1906 = 0000			CGAC0	= $00
  1907 = 0001			CGAC1	= $01
  1908 = 0002			CGAC2	= $02
  1909 = 0003			CGAC3	= $03
  1910 = 0004			CGAHI	= $04
  1911 = 0000			MCGAC0	= $00
  1912 = 0001			MCGAC1	= $01
  1913 = 0002			MCGAC2	= $02
  1914 = 0003			MCGAC3	= $03
  1915 = 0004			MCGAMED	= $04
  1916 = 0005			MCGAHI	= $05
  1917 = 0000			EGALO	= $00
  1918 = 0001			EGAHI	= $01
  1919 = 0000			EGA64LO	= $00
  1920 = 0001			EGA64HI	= $01
  1921 = 0003			EGAMONOHI	= $03
  1922 = 000A			VGALO	= $0A
  1923 = 001F			VGAMED	= $1F
  1924 = 0018			VGAHI	= $18
  1925 = 9D0F			GRAPHRESULT	= DATAORIGIN+$003D
  1926 = 9D10			GETCOLOR	= DATAORIGIN+$003E
  1927 = 9D11			VIDEORAM	= DATAORIGIN+$003F
  1928 = 9D13			adr.LASTARCCOORDS	= DATAORIGIN+$0041	; [12] RECORD
  1929 3325			.var LASTARCCOORDS	= adr.LASTARCCOORDS .word
  1930 = 9D13			LASTARCCOORDS.X	= DATAORIGIN+$0041
  1931 = 9D15			LASTARCCOORDS.Y	= DATAORIGIN+$0043
  1932 = 9D17			LASTARCCOORDS.XSTART	= DATAORIGIN+$0045
  1933 = 9D19			LASTARCCOORDS.YSTART	= DATAORIGIN+$0047
  1934 = 9D1B			LASTARCCOORDS.XEND	= DATAORIGIN+$0049
  1935 = 9D1D			LASTARCCOORDS.YEND	= DATAORIGIN+$004B
  1936 = 9D1F			WIN_LEFT	= DATAORIGIN+$004D
  1937 = 9D21			WIN_RIGHT	= DATAORIGIN+$004F
  1938 = 9D23			WIN_TOP	= DATAORIGIN+$0051
  1939 = 9D25			WIN_BOTTOM	= DATAORIGIN+$0053
  1940 = 9D27			SCANLINE_WIDTH	= DATAORIGIN+$0055
  1941 = 9D28			CURRENTX	= DATAORIGIN+$0056
  1942 = 9D2A			CURRENTY	= DATAORIGIN+$0058
  1943
  1944 = 3325 13 9D		LASTARCCOORDS
  1944 				.endl							; UNIT GRAPH
  1945
  1946 				; ------------------------------------------------------------
  1947
  1948 3327			.local	VBXE						; UNIT
  1949
  1950 3327			.local	SETTOPBORDER					; PROCEDURE | ASSEMBLER | REGISTER
  1951 3327 85 8A			sta A
  1952
  1953 				; -------------------  ASM Block 00000100  -------------------
  1954
  1955 3329				fxs FX_MEMS #$80+MAIN.SYSTEM.VBXE_XDLADR/$1000
Macro: FXS [Source: vbxe.hea]
     2 3329 A9 80		        lda     #$80+MAIN.SYSTEM.VBXE_XDLADR/$1000
     3 332B A0 5F		        ldy     #FX_MEMS
     4 332D 91 80		        sta     (fxptr),y
  1956
  1957 332F A5 8A			lda a
  1958 3331 38 E9 01			sub #1
  1959
  1960 3334 A0 02			ldy #s@xdl.RPTL_
  1961 3336 99 00 B0			sta MAIN.SYSTEM.VBXE_WINDOW,y
  1962
  1963 3339				fxs FX_MEMS #$00
Macro: FXS [Source: vbxe.hea]
     2 3339 A9 00		        lda     #$00
     3 333B A0 5F		        ldy     #FX_MEMS
     4 333D 91 80		        sta     (fxptr),y
  1964
  1965 				; ------------------------------------------------------------
  1966
  1967 = 008A			A	= :EDX
  1968
  1969 333F			@exit
  1970 					.ifdef @new
  1971 					lda <@VarData
  1972 					sta :ztmp
  1973 					lda >@VarData
  1974 					ldy #@VarDataSize-1
  1975 					jmp @FreeMem
  1976 					els
  1977 333F 60				rts						; ret
  1978 					eif
  1979 				.endl
  1980
  1981 3340			.local	SETXDLHEIGHT					; PROCEDURE | ASSEMBLER | REGISTER
  1982 3340 85 8A			sta A
  1983
  1984 				; -------------------  ASM Block 00000101  -------------------
  1985
  1986 3342				fxs FX_MEMS #$80+MAIN.SYSTEM.VBXE_XDLADR/$1000
Macro: FXS [Source: vbxe.hea]
     2 3342 A9 80		        lda     #$80+MAIN.SYSTEM.VBXE_XDLADR/$1000
     3 3344 A0 5F		        ldy     #FX_MEMS
     4 3346 91 80		        sta     (fxptr),y
  1987
  1988 3348 A5 8A			lda a
  1989 334A 38 E9 01			sub #1
  1990
  1991 334D A0 05			ldy #s@xdl.RPTL
  1992 334F 99 00 B0			sta MAIN.SYSTEM.VBXE_WINDOW,y
  1993
  1994 3352				fxs FX_MEMS #$00
Macro: FXS [Source: vbxe.hea]
     2 3352 A9 00		        lda     #$00
     3 3354 A0 5F		        ldy     #FX_MEMS
     4 3356 91 80		        sta     (fxptr),y
  1995
  1996 				; ------------------------------------------------------------
  1997
  1998 = 008A			A	= :EDX
  1999
  2000 3358			@exit
  2001 					.ifdef @new
  2002 					lda <@VarData
  2003 					sta :ztmp
  2004 					lda >@VarData
  2005 					ldy #@VarDataSize-1
  2006 					jmp @FreeMem
  2007 					els
  2008 3358 60				rts						; ret
  2009 					eif
  2010 				.endl
  2011
  2012 3359			.local	VBXEMEMORYBANK					; PROCEDURE | ASSEMBLER
  2013 3359 8D 40 9D			sta B
  2014
  2015 				; -------------------  ASM Block 00000113  -------------------
  2016
  2017 335C				fxs FX_MEMS b
Macro: FXS [Source: vbxe.hea]
     2 335C AD 40 9D		        lda     B
     3 335F A0 5F		        ldy     #FX_MEMS
     4 3361 91 80		        sta     (fxptr),y
  2018
  2019 				; ------------------------------------------------------------
  2020
  2021 = 9D40			B	= DATAORIGIN+$006E
  2022
  2023 = 9D40			@VarData	= B
  2024 = 0001			@VarDataSize	= 1
  2025
  2026 3363			@exit
  2027 					.ifdef @new
  2028 					lda <@VarData
  2029 					sta :ztmp
  2030 					lda >@VarData
  2031 					ldy #@VarDataSize-1
  2032 					jmp @FreeMem
  2033 					els
  2034 3363 60				rts						; ret
  2035 					eif
  2036 				.endl
  2037
  2038 3364			.local	READVBXEMEMORYBYTE				; FUNCTION
  2039
  2040 				; optimize OK (vbxe_memorystream.inc), line = 20
  2041
  2042 3364 AC 41 9D 84 84 AC + 	mwy POSITION :bp2
  2043 336E A0 02			ldy #$02
  2044 3370 B1 84			lda (:bp2),y
  2045 3372 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  2046 3374 88				dey
  2047 3375 B1 84			lda (:bp2),y
  2048 3377 46 AF			lsr :STACKORIGIN+STACKWIDTH+9
  2049 3379 6A				ror @
  2050 337A 46 AF			lsr :STACKORIGIN+STACKWIDTH+9
  2051 337C 6A				ror @
  2052 337D 46 AF			lsr :STACKORIGIN+STACKWIDTH+9
  2053 337F 6A				ror @
  2054 3380 46 AF			lsr :STACKORIGIN+STACKWIDTH+9
  2055 3382 6A				ror @
  2056 3383 09 80			ora #$80
  2057 3385 8D 44 9D			sta BNK
  2058
  2059 				; optimize OK (vbxe_memorystream.inc), line = 21
  2060
  2061 3388 88				dey
  2062 3389 B1 84			lda (:bp2),y
  2063 338B 8D 45 9D			sta ADR
  2064 338E C8				iny
  2065 338F B1 84			lda (:bp2),y
  2066 3391 29 0F			and #$0F
  2067 3393 09 B0			ora #$B0
  2068 3395 8D 46 9D			sta ADR+1
  2069
  2070 				; optimize OK (vbxe_memorystream.inc), line = 23
  2071
  2072 3398 AD 44 9D			lda BNK
  2073 339B 20 59 33			jsr VBXEMEMORYBANK
  2074
  2075 				; optimize OK (vbxe_memorystream.inc), line = 25
  2076
  2077 339E AC 46 9D			ldy ADR+1
  2078 33A1 84 83			sty :bp+1
  2079 33A3 AC 45 9D			ldy ADR
  2080 33A6 B1 82			lda (:bp),y
  2081 33A8 8D 43 9D			sta RESULT
  2082
  2083 				; optimize OK (vbxe_memorystream.inc), line = 27
  2084
  2085 33AB AC 41 9D 84 84 AC + 	mwy POSITION :bp2
  2086 33B5 A0 00			ldy #$00
  2087 33B7 B1 84			lda (:bp2),y
  2088 33B9 18 69 01			add #$01
  2089 33BC 91 84			sta (:bp2),y
  2090 33BE C8				iny
  2091 33BF B1 84			lda (:bp2),y
  2092 33C1 69 00			adc #$00
  2093 33C3 91 84			sta (:bp2),y
  2094 33C5 C8				iny
  2095 33C6 B1 84			lda (:bp2),y
  2096 33C8 69 00			adc #$00
  2097 33CA 91 84			sta (:bp2),y
  2098 33CC C8				iny
  2099 33CD B1 84			lda (:bp2),y
  2100 33CF 69 00			adc #$00
  2101 33D1 91 84			sta (:bp2),y
  2102 33D3			@exit
  2103
  2104 				; ------------------------------------------------------------
  2105
  2106 = 9D41			POSITION	= DATAORIGIN+$006F
  2107 = 9D43			RESULT	= DATAORIGIN+$0071
  2108 = 9D44			BNK	= DATAORIGIN+$0072
  2109 = 9D45			ADR	= DATAORIGIN+$0073
  2110
  2111 = 9D41			@VarData	= POSITION
  2112 = 0005			@VarDataSize	= 5
  2113
  2114 33D3 60				rts						; ret
  2115 				.endl
  2116
  2117 33D4			.local	WRITEVBXEMEMORYBYTE				; PROCEDURE
  2118
  2119 				; optimize OK (vbxe_memorystream.inc), line = 39
  2120
  2121 33D4 AC 47 9D 84 84 AC + 	mwy POSITION :bp2
  2122 33DE A0 02			ldy #$02
  2123 33E0 B1 84			lda (:bp2),y
  2124 33E2 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  2125 33E4 88				dey
  2126 33E5 B1 84			lda (:bp2),y
  2127 33E7 46 AF			lsr :STACKORIGIN+STACKWIDTH+9
  2128 33E9 6A				ror @
  2129 33EA 46 AF			lsr :STACKORIGIN+STACKWIDTH+9
  2130 33EC 6A				ror @
  2131 33ED 46 AF			lsr :STACKORIGIN+STACKWIDTH+9
  2132 33EF 6A				ror @
  2133 33F0 46 AF			lsr :STACKORIGIN+STACKWIDTH+9
  2134 33F2 6A				ror @
  2135 33F3 09 80			ora #$80
  2136 33F5 8D 4A 9D			sta BNK
  2137
  2138 				; optimize OK (vbxe_memorystream.inc), line = 40
  2139
  2140 33F8 88				dey
  2141 33F9 B1 84			lda (:bp2),y
  2142 33FB 8D 4B 9D			sta ADR
  2143 33FE C8				iny
  2144 33FF B1 84			lda (:bp2),y
  2145 3401 29 0F			and #$0F
  2146 3403 09 B0			ora #$B0
  2147 3405 8D 4C 9D			sta ADR+1
  2148
  2149 				; optimize OK (vbxe_memorystream.inc), line = 42
  2150
  2151 3408 AD 4A 9D			lda BNK
  2152 340B 20 59 33			jsr VBXEMEMORYBANK
  2153
  2154 				; optimize OK (vbxe_memorystream.inc), line = 44
  2155
  2156 340E AC 4C 9D			ldy ADR+1
  2157 3411 84 83			sty :bp+1
  2158 3413 AC 4B 9D			ldy ADR
  2159 3416 AD 49 9D			lda A
  2160 3419 91 82			sta (:bp),y
  2161
  2162 				; optimize OK (vbxe_memorystream.inc), line = 46
  2163
  2164 341B AC 47 9D 84 84 AC + 	mwy POSITION :bp2
  2165 3425 A0 00			ldy #$00
  2166 3427 B1 84			lda (:bp2),y
  2167 3429 18 69 01			add #$01
  2168 342C 91 84			sta (:bp2),y
  2169 342E C8				iny
  2170 342F B1 84			lda (:bp2),y
  2171 3431 69 00			adc #$00
  2172 3433 91 84			sta (:bp2),y
  2173 3435 C8				iny
  2174 3436 B1 84			lda (:bp2),y
  2175 3438 69 00			adc #$00
  2176 343A 91 84			sta (:bp2),y
  2177 343C C8				iny
  2178 343D B1 84			lda (:bp2),y
  2179 343F 69 00			adc #$00
  2180 3441 91 84			sta (:bp2),y
  2181
  2182 				; ------------------------------------------------------------
  2183
  2184 = 9D47			POSITION	= DATAORIGIN+$0075
  2185 = 9D49			A	= DATAORIGIN+$0077
  2186 = 9D4A			BNK	= DATAORIGIN+$0078
  2187 = 9D4B			ADR	= DATAORIGIN+$0079
  2188
  2189 = 9D47			@VarData	= POSITION
  2190 = 0006			@VarDataSize	= 6
  2191
  2192 3443			@exit
  2193 					.ifdef @new
  2194 					lda <@VarData
  2195 					sta :ztmp
  2196 					lda >@VarData
  2197 					ldy #@VarDataSize-1
  2198 					jmp @FreeMem
  2199 					els
  2200 3443 60				rts						; ret
  2201 					eif
  2202 				.endl
  2203
  2204 3444			.local	TVBXEMEMORYSTREAM.READBUFFER			; PROCEDURE
  2205 3444 8D 55 9D			sta TVBXEMEMORYSTREAM
  2206 3447 8C 56 9D			sty TVBXEMEMORYSTREAM+1
  2207 344A 8D 5B 9D			sta POSITION
  2208 344D 8C 5C 9D			sty POSITION+1
  2209 3450 18 69 04			add #4
  2210 3453 90 01			scc
  2211 3455 C8				iny
  2212 3456 8D 5D 9D			sta SIZE
  2213 3459 8C 5E 9D			sty SIZE+1
  2214
  2215 				; optimize OK (vbxe_memorystream.inc), line = 87
  2216
  2217 345C AC 5B 9D 84 84 AC + 	mwy POSITION :bp2
  2218 3466 A0 02			ldy #$02
  2219 3468 B1 84			lda (:bp2),y
  2220 346A 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  2221 346C 88				dey
  2222 346D B1 84			lda (:bp2),y
  2223 346F 46 AF			lsr :STACKORIGIN+STACKWIDTH+9
  2224 3471 6A				ror @
  2225 3472 46 AF			lsr :STACKORIGIN+STACKWIDTH+9
  2226 3474 6A				ror @
  2227 3475 46 AF			lsr :STACKORIGIN+STACKWIDTH+9
  2228 3477 6A				ror @
  2229 3478 46 AF			lsr :STACKORIGIN+STACKWIDTH+9
  2230 347A 6A				ror @
  2231 347B 09 80			ora #$80
  2232 347D 8D 5F 9D			sta BNK
  2233
  2234 				; optimize OK (vbxe_memorystream.inc), line = 88
  2235
  2236 3480 88				dey
  2237 3481 B1 84			lda (:bp2),y
  2238 3483 8D 60 9D			sta ADR
  2239 3486 C8				iny
  2240 3487 B1 84			lda (:bp2),y
  2241 3489 29 0F			and #$0F
  2242 348B 09 B0			ora #$B0
  2243 348D 8D 61 9D			sta ADR+1
  2244
  2245 				; optimize OK (vbxe_memorystream.inc), line = 90
  2246
  2247 3490 AD 5F 9D			lda BNK
  2248 3493 20 59 33			jsr VBXEMEMORYBANK
  2249
  2250 				; optimize OK (vbxe_memorystream.inc), line = 92
  2251
  2252 3496 AD 57 9D			lda BUFFER
  2253 3499 8D 64 9D			sta DST
  2254 349C AD 58 9D			lda BUFFER+1
  2255 349F 8D 65 9D			sta DST+1
  2256
  2257 				; optimize OK (vbxe_memorystream.inc), line = 94
  2258
  2259 34A2 A9 00			lda #$00
  2260 34A4 8D 62 9D			sta I
  2261 34A7 8D 63 9D			sta I+1
  2262 34AA AD 59 9D			lda COUNT
  2263 34AD 38 E9 01			sub #$01
  2264 34B0 8D C3 34			sta @FORTMP_0393_0
  2265 34B3 AD 5A 9D			lda COUNT+1
  2266 34B6 E9 00			sbc #$00
  2267 34B8 8D BC 34			sta @FORTMP_0393_1
  2268
  2269 34BB			l_0396
  2270 				; --- ForToDoCondition
  2271 34BB A9 00			lda @FORTMP_0393_1::#$00
  2272 34BD CD 63 9D			cmp I+1
  2273 34C0 D0 05			bne @+
  2274 34C2 A9 00			lda @FORTMP_0393_0::#$00
  2275 34C4 CD 62 9D			cmp I
  2276 				@
  2277 34C7 90 4F			jcc l_03A2
  2278
  2279 				; optimize OK (vbxe_memorystream.inc), line = 96
  2280
  2281 34C9 AC 61 9D			ldy ADR+1
  2282 34CC 84 83			sty :bp+1
  2283 34CE AC 60 9D			ldy ADR
  2284 34D1 B1 82			lda (:bp),y
  2285 34D3 AC 65 9D 84 83		mvy DST+1 :bp+1
  2286 34D8 AC 64 9D			ldy DST
  2287 34DB 91 82			sta (:bp),y
  2288
  2289 				; optimize FAIL (0, vbxe_memorystream.inc), line = 98
  2290
  2291 34DD EE 60 9D			inc ADR
  2292 34E0 D0 03			sne
  2293 34E2 EE 61 9D			inc ADR+1
  2294
  2295 				; optimize FAIL (0, vbxe_memorystream.inc), line = 99
  2296
  2297 34E5 EE 64 9D			inc DST
  2298 34E8 D0 03			sne
  2299 34EA EE 65 9D			inc DST+1
  2300
  2301 				; optimize OK (vbxe_memorystream.inc), line = 101
  2302
  2303 34ED AD 61 9D			lda ADR+1
  2304 34F0 C9 C0			cmp #$C0
  2305 34F2 90 1A			jcc l_03C1
  2306 34F4 D0 05			bne @+
  2307 34F6 AD 60 9D			lda ADR
  2308 34F9 90 13			jcc l_03C1
  2309 				@
  2310
  2311 				; optimize FAIL (0, vbxe_memorystream.inc), line = 102
  2312
  2313 34FB EE 5F 9D			inc BNK
  2314
  2315 				; optimize OK (vbxe_memorystream.inc), line = 103
  2316
  2317 34FE AD 5F 9D			lda BNK
  2318 3501 20 59 33			jsr VBXEMEMORYBANK
  2319
  2320 				; optimize OK (vbxe_memorystream.inc), line = 104
  2321
  2322 3504 A9 00			lda #$00
  2323 3506 8D 60 9D			sta ADR
  2324 3509 A9 B0			lda #$B0
  2325 350B 8D 61 9D			sta ADR+1
  2326 350E			l_03C1
  2327
  2328 				; --- ForToDoEpilog
  2329 350E EE 62 9D			inc I
  2330 3511 D0 A8			jne l_0396
  2331 3513 EE 63 9D			inc I+1
  2332 3516 D0 A3			jne l_0396
  2333 3518			l_03A2
  2334
  2335 				; optimize OK (vbxe_memorystream.inc), line = 109
  2336
  2337 3518 A9 00			lda #$00
  2338 351A 20 59 33			jsr VBXEMEMORYBANK
  2339
  2340 				; optimize OK (vbxe_memorystream.inc), line = 111
  2341
  2342 351D AC 5B 9D 84 84 AC + 	mwy POSITION :bp2
  2343 3527 A0 00			ldy #$00
  2344 3529 B1 84			lda (:bp2),y
  2345 352B 18 6D 59 9D			add COUNT
  2346 352F 91 84			sta (:bp2),y
  2347 3531 C8				iny
  2348 3532 B1 84			lda (:bp2),y
  2349 3534 6D 5A 9D			adc COUNT+1
  2350 3537 91 84			sta (:bp2),y
  2351 3539 C8				iny
  2352 353A B1 84			lda (:bp2),y
  2353 353C 69 00			adc #$00
  2354 353E 91 84			sta (:bp2),y
  2355 3540 C8				iny
  2356 3541 B1 84			lda (:bp2),y
  2357 3543 69 00			adc #$00
  2358 3545 91 84			sta (:bp2),y
  2359
  2360 				; ------------------------------------------------------------
  2361
  2362 = 9D55			TVBXEMEMORYSTREAM	= DATAORIGIN+$0083
  2363 = 9D57			BUFFER	= DATAORIGIN+$0085
  2364 = 9D59			COUNT	= DATAORIGIN+$0087
  2365 = 9D5B			POSITION	= DATAORIGIN+$0089
  2366 = 9D5D			SIZE	= DATAORIGIN+$008B
  2367 = 9D5F			BNK	= DATAORIGIN+$008D
  2368 = 9D60			ADR	= DATAORIGIN+$008E
  2369 = 9D62			I	= DATAORIGIN+$0090
  2370 = 9D64			DST	= DATAORIGIN+$0092
  2371
  2372 = 9D55			@VarData	= TVBXEMEMORYSTREAM
  2373 = 0011			@VarDataSize	= 17
  2374
  2375 3547			@exit
  2376 					.ifdef @new
  2377 					lda <@VarData
  2378 					sta :ztmp
  2379 					lda >@VarData
  2380 					ldy #@VarDataSize-1
  2381 					jmp @FreeMem
  2382 					els
  2383 3547 60				rts						; ret
  2384 					eif
  2385 				.endl
  2386
  2387 3548			.local	TVBXEMEMORYSTREAM.WRITEBUFFER			; PROCEDURE
  2388 3548 8D 68 9D			sta TVBXEMEMORYSTREAM
  2389 354B 8C 69 9D			sty TVBXEMEMORYSTREAM+1
  2390 354E 8D 6E 9D			sta POSITION
  2391 3551 8C 6F 9D			sty POSITION+1
  2392 3554 18 69 04			add #4
  2393 3557 90 01			scc
  2394 3559 C8				iny
  2395 355A 8D 70 9D			sta SIZE
  2396 355D 8C 71 9D			sty SIZE+1
  2397
  2398 				; optimize OK (vbxe_memorystream.inc), line = 124
  2399
  2400 3560 AC 6E 9D 84 84 AC + 	mwy POSITION :bp2
  2401 356A A0 02			ldy #$02
  2402 356C B1 84			lda (:bp2),y
  2403 356E 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  2404 3570 88				dey
  2405 3571 B1 84			lda (:bp2),y
  2406 3573 46 AF			lsr :STACKORIGIN+STACKWIDTH+9
  2407 3575 6A				ror @
  2408 3576 46 AF			lsr :STACKORIGIN+STACKWIDTH+9
  2409 3578 6A				ror @
  2410 3579 46 AF			lsr :STACKORIGIN+STACKWIDTH+9
  2411 357B 6A				ror @
  2412 357C 46 AF			lsr :STACKORIGIN+STACKWIDTH+9
  2413 357E 6A				ror @
  2414 357F 09 80			ora #$80
  2415 3581 8D 72 9D			sta BNK
  2416
  2417 				; optimize OK (vbxe_memorystream.inc), line = 125
  2418
  2419 3584 88				dey
  2420 3585 B1 84			lda (:bp2),y
  2421 3587 8D 73 9D			sta ADR
  2422 358A C8				iny
  2423 358B B1 84			lda (:bp2),y
  2424 358D 29 0F			and #$0F
  2425 358F 09 B0			ora #$B0
  2426 3591 8D 74 9D			sta ADR+1
  2427
  2428 				; optimize OK (vbxe_memorystream.inc), line = 127
  2429
  2430 3594 AD 72 9D			lda BNK
  2431 3597 20 59 33			jsr VBXEMEMORYBANK
  2432
  2433 				; optimize OK (vbxe_memorystream.inc), line = 129
  2434
  2435 359A AD 6A 9D			lda BUFFER
  2436 359D 8D 77 9D			sta SRC
  2437 35A0 AD 6B 9D			lda BUFFER+1
  2438 35A3 8D 78 9D			sta SRC+1
  2439
  2440 				; optimize OK (vbxe_memorystream.inc), line = 131
  2441
  2442 35A6 A9 00			lda #$00
  2443 35A8 8D 75 9D			sta I
  2444 35AB 8D 76 9D			sta I+1
  2445 35AE AD 6C 9D			lda COUNT
  2446 35B1 38 E9 01			sub #$01
  2447 35B4 8D C7 35			sta @FORTMP_0409_0
  2448 35B7 AD 6D 9D			lda COUNT+1
  2449 35BA E9 00			sbc #$00
  2450 35BC 8D C0 35			sta @FORTMP_0409_1
  2451
  2452 35BF			l_040C
  2453 				; --- ForToDoCondition
  2454 35BF A9 00			lda @FORTMP_0409_1::#$00
  2455 35C1 CD 76 9D			cmp I+1
  2456 35C4 D0 05			bne @+
  2457 35C6 A9 00			lda @FORTMP_0409_0::#$00
  2458 35C8 CD 75 9D			cmp I
  2459 				@
  2460 35CB 90 53			jcc l_0418
  2461
  2462 				; optimize OK (vbxe_memorystream.inc), line = 133
  2463
  2464 35CD AC 77 9D 84 84 AC + 	mwy SRC :bp2
  2465 35D7 A0 00			ldy #$00
  2466 35D9 B1 84			lda (:bp2),y
  2467 35DB AC 74 9D			ldy ADR+1
  2468 35DE 84 83			sty :bp+1
  2469 35E0 AC 73 9D			ldy ADR
  2470 35E3 91 82			sta (:bp),y
  2471
  2472 				; optimize FAIL (0, vbxe_memorystream.inc), line = 135
  2473
  2474 35E5 EE 73 9D			inc ADR
  2475 35E8 D0 03			sne
  2476 35EA EE 74 9D			inc ADR+1
  2477
  2478 				; optimize FAIL (0, vbxe_memorystream.inc), line = 136
  2479
  2480 35ED EE 77 9D			inc SRC
  2481 35F0 D0 03			sne
  2482 35F2 EE 78 9D			inc SRC+1
  2483
  2484 				; optimize OK (vbxe_memorystream.inc), line = 138
  2485
  2486 35F5 AD 74 9D			lda ADR+1
  2487 35F8 C9 C0			cmp #$C0
  2488 35FA 90 1A			jcc l_0437
  2489 35FC D0 05			bne @+
  2490 35FE AD 73 9D			lda ADR
  2491 3601 90 13			jcc l_0437
  2492 				@
  2493
  2494 				; optimize FAIL (0, vbxe_memorystream.inc), line = 139
  2495
  2496 3603 EE 72 9D			inc BNK
  2497
  2498 				; optimize OK (vbxe_memorystream.inc), line = 140
  2499
  2500 3606 AD 72 9D			lda BNK
  2501 3609 20 59 33			jsr VBXEMEMORYBANK
  2502
  2503 				; optimize OK (vbxe_memorystream.inc), line = 141
  2504
  2505 360C A9 00			lda #$00
  2506 360E 8D 73 9D			sta ADR
  2507 3611 A9 B0			lda #$B0
  2508 3613 8D 74 9D			sta ADR+1
  2509 3616			l_0437
  2510
  2511 				; --- ForToDoEpilog
  2512 3616 EE 75 9D			inc I
  2513 3619 D0 A4			jne l_040C
  2514 361B EE 76 9D			inc I+1
  2515 361E D0 9F			jne l_040C
  2516 3620			l_0418
  2517
  2518 				; optimize OK (vbxe_memorystream.inc), line = 146
  2519
  2520 3620 A9 00			lda #$00
  2521 3622 20 59 33			jsr VBXEMEMORYBANK
  2522
  2523 				; optimize OK (vbxe_memorystream.inc), line = 148
  2524
  2525 3625 AC 6E 9D 84 84 AC + 	mwy POSITION :bp2
  2526 362F A0 00			ldy #$00
  2527 3631 B1 84			lda (:bp2),y
  2528 3633 18 6D 6C 9D			add COUNT
  2529 3637 91 84			sta (:bp2),y
  2530 3639 C8				iny
  2531 363A B1 84			lda (:bp2),y
  2532 363C 6D 6D 9D			adc COUNT+1
  2533 363F 91 84			sta (:bp2),y
  2534 3641 C8				iny
  2535 3642 B1 84			lda (:bp2),y
  2536 3644 69 00			adc #$00
  2537 3646 91 84			sta (:bp2),y
  2538 3648 C8				iny
  2539 3649 B1 84			lda (:bp2),y
  2540 364B 69 00			adc #$00
  2541 364D 91 84			sta (:bp2),y
  2542
  2543 				; ------------------------------------------------------------
  2544
  2545 = 9D68			TVBXEMEMORYSTREAM	= DATAORIGIN+$0096
  2546 = 9D6A			BUFFER	= DATAORIGIN+$0098
  2547 = 9D6C			COUNT	= DATAORIGIN+$009A
  2548 = 9D6E			POSITION	= DATAORIGIN+$009C
  2549 = 9D70			SIZE	= DATAORIGIN+$009E
  2550 = 9D72			BNK	= DATAORIGIN+$00A0
  2551 = 9D73			ADR	= DATAORIGIN+$00A1
  2552 = 9D75			I	= DATAORIGIN+$00A3
  2553 = 9D77			SRC	= DATAORIGIN+$00A5
  2554
  2555 = 9D68			@VarData	= TVBXEMEMORYSTREAM
  2556 = 0011			@VarDataSize	= 17
  2557
  2558 364F			@exit
  2559 					.ifdef @new
  2560 					lda <@VarData
  2561 					sta :ztmp
  2562 					lda >@VarData
  2563 					ldy #@VarDataSize-1
  2564 					jmp @FreeMem
  2565 					els
  2566 364F 60				rts						; ret
  2567 					eif
  2568 				.endl
  2569
  2570 3650			.local	TVBXEMEMORYSTREAM.READBYTE			; FUNCTION
  2571 3650 8D 7B 9D			sta TVBXEMEMORYSTREAM
  2572 3653 8C 7C 9D			sty TVBXEMEMORYSTREAM+1
  2573 3656 8D 7E 9D			sta POSITION
  2574 3659 8C 7F 9D			sty POSITION+1
  2575 365C 18 69 04			add #4
  2576 365F 90 01			scc
  2577 3661 C8				iny
  2578 3662 8D 80 9D			sta SIZE
  2579 3665 8C 81 9D			sty SIZE+1
  2580
  2581 				; optimize OK (vbxe_memorystream.inc), line = 158
  2582
  2583 3668 AD 7E 9D			lda POSITION
  2584 366B 8D 41 9D			sta READVBXEMEMORYBYTE.POSITION
  2585 366E AD 7F 9D			lda POSITION+1
  2586 3671 8D 42 9D			sta READVBXEMEMORYBYTE.POSITION+1
  2587 3674 20 64 33			jsr READVBXEMEMORYBYTE
  2588 3677 AD 43 9D			lda READVBXEMEMORYBYTE.RESULT
  2589 367A 8D 7D 9D			sta RESULT
  2590
  2591 				; optimize OK (vbxe_memorystream.inc), line = 160
  2592
  2593 367D A9 00			lda #$00
  2594 367F 20 59 33			jsr VBXEMEMORYBANK
  2595 3682			@exit
  2596
  2597 				; ------------------------------------------------------------
  2598
  2599 = 9D7B			TVBXEMEMORYSTREAM	= DATAORIGIN+$00A9
  2600 = 9D7D			RESULT	= DATAORIGIN+$00AB
  2601 = 9D7E			POSITION	= DATAORIGIN+$00AC
  2602 = 9D80			SIZE	= DATAORIGIN+$00AE
  2603
  2604 = 9D7B			@VarData	= TVBXEMEMORYSTREAM
  2605 = 0006			@VarDataSize	= 6
  2606
  2607 3682 60				rts						; ret
  2608 				.endl
  2609
  2610 3683			.local	TVBXEMEMORYSTREAM.WRITEBYTE			; PROCEDURE
  2611 3683 8D 8A 9D			sta TVBXEMEMORYSTREAM
  2612 3686 8C 8B 9D			sty TVBXEMEMORYSTREAM+1
  2613 3689 8D 8D 9D			sta POSITION
  2614 368C 8C 8E 9D			sty POSITION+1
  2615 368F 18 69 04			add #4
  2616 3692 90 01			scc
  2617 3694 C8				iny
  2618 3695 8D 8F 9D			sta SIZE
  2619 3698 8C 90 9D			sty SIZE+1
  2620
  2621 				; optimize OK (vbxe_memorystream.inc), line = 198
  2622
  2623 369B AD 8D 9D			lda POSITION
  2624 369E 8D 47 9D			sta WRITEVBXEMEMORYBYTE.POSITION
  2625 36A1 AD 8E 9D			lda POSITION+1
  2626 36A4 8D 48 9D			sta WRITEVBXEMEMORYBYTE.POSITION+1
  2627 36A7 AD 8C 9D			lda B
  2628 36AA 8D 49 9D			sta WRITEVBXEMEMORYBYTE.A
  2629 36AD 20 D4 33			jsr WRITEVBXEMEMORYBYTE
  2630
  2631 				; optimize OK (vbxe_memorystream.inc), line = 200
  2632
  2633 36B0 A9 00			lda #$00
  2634 36B2 20 59 33			jsr VBXEMEMORYBANK
  2635
  2636 				; ------------------------------------------------------------
  2637
  2638 = 9D8A			TVBXEMEMORYSTREAM	= DATAORIGIN+$00B8
  2639 = 9D8C			B	= DATAORIGIN+$00BA
  2640 = 9D8D			POSITION	= DATAORIGIN+$00BB
  2641 = 9D8F			SIZE	= DATAORIGIN+$00BD
  2642
  2643 = 9D8A			@VarData	= TVBXEMEMORYSTREAM
  2644 = 0007			@VarDataSize	= 7
  2645
  2646 36B5			@exit
  2647 					.ifdef @new
  2648 					lda <@VarData
  2649 					sta :ztmp
  2650 					lda >@VarData
  2651 					ldy #@VarDataSize-1
  2652 					jmp @FreeMem
  2653 					els
  2654 36B5 60				rts						; ret
  2655 					eif
  2656 				.endl
  2657
  2658 36B6			.local	TVBXEMEMORYSTREAM.CLEAR				; PROCEDURE
  2659 36B6 8D 99 9D			sta TVBXEMEMORYSTREAM
  2660 36B9 8C 9A 9D			sty TVBXEMEMORYSTREAM+1
  2661 36BC 8D 9B 9D			sta POSITION
  2662 36BF 8C 9C 9D			sty POSITION+1
  2663 36C2 18 69 04			add #4
  2664 36C5 90 01			scc
  2665 36C7 C8				iny
  2666 36C8 8D 9D 9D			sta SIZE
  2667 36CB 8C 9E 9D			sty SIZE+1
  2668
  2669 				; optimize OK (vbxe_memorystream.inc), line = 239
  2670
  2671 36CE AC 9B 9D 84 84 AC + 	mwy POSITION :bp2
  2672 36D8 A0 00			ldy #$00
  2673 36DA B1 84			lda (:bp2),y
  2674 36DC 8D 9F 9D			sta ADR
  2675 36DF C8				iny
  2676 36E0 B1 84			lda (:bp2),y
  2677 36E2 8D A0 9D			sta ADR+1
  2678 36E5 C8				iny
  2679 36E6 B1 84			lda (:bp2),y
  2680 36E8 8D A1 9D			sta ADR+2
  2681 36EB C8				iny
  2682 36EC B1 84			lda (:bp2),y
  2683 36EE 8D A2 9D			sta ADR+3
  2684
  2685 				; optimize OK (vbxe_memorystream.inc), line = 240
  2686
  2687 36F1 AC 9D 9D 84 84 AC + 	mwy SIZE :bp2
  2688 36FB A0 00			ldy #$00
  2689 36FD B1 84			lda (:bp2),y
  2690 36FF 8D A3 9D			sta SIZ
  2691 3702 C8				iny
  2692 3703 B1 84			lda (:bp2),y
  2693 3705 8D A4 9D			sta SIZ+1
  2694 3708 C8				iny
  2695 3709 B1 84			lda (:bp2),y
  2696 370B 8D A5 9D			sta SIZ+2
  2697 370E C8				iny
  2698 370F B1 84			lda (:bp2),y
  2699 3711 8D A6 9D			sta SIZ+3
  2700
  2701 				; -------------------  ASM Block 00000114  -------------------
  2702
  2703 3714 8A 48			txa:pha
  2704
  2705 3716 AD 9F 9D 8D 84 37		mva adr _adr
  2706 371C AD A0 9D 8D 85 37		mva adr+1 _adr+1
  2707 3722 AD A1 9D 8D 86 37		mva adr+2 _adr+2
  2708
  2709 3728				fxs FX_MEMS #$80+MAIN.SYSTEM.VBXE_XDLADR/$1000
Macro: FXS [Source: vbxe.hea]
     2 3728 A9 80		        lda     #$80+MAIN.SYSTEM.VBXE_XDLADR/$1000
     3 372A A0 5F		        ldy     #FX_MEMS
     4 372C 91 80		        sta     (fxptr),y
  2710
  2711 372E AD 86 37 CD A5 9D + loop	cpw _adr+1 siz+1
  2712 373C B0 37			bcs skp
  2713
  2714 373E A0 14			ldy #20
  2715 3740 B9 7E 37 99 E0 B0 + 	mva:rpl bltClr,y MAIN.SYSTEM.VBXE_WINDOW+MAIN.SYSTEM.VBXE_BCBTMP,y-
  2716
  2717 3749				fxs FX_BL_ADR0 #MAIN.SYSTEM.VBXE_BCBTMP	; program blittera od adresu MAIN.SYSTEM.VBXE_BCBTMP
Macro: FXS [Source: vbxe.hea]
     2 3749 A9 E0		        lda     #MAIN.SYSTEM.VBXE_BCBTMP
     3 374B A0 50		        ldy     #FX_BL_ADR0
     4 374D 91 80		        sta     (fxptr),y
  2718 374F				fxs FX_BL_ADR1 #$00			; zaraz za programem VBXE Display List
Macro: FXS [Source: vbxe.hea]
     2 374F A9 00		        lda     #$00
     3 3751 A0 51		        ldy     #FX_BL_ADR1
     4 3753 91 80		        sta     (fxptr),y
  2719 3755				fxsa FX_BL_ADR2
Macro: FXSA [Source: vbxe.hea]
     2 3755 A0 52		        ldy     #FX_BL_ADR2
     3 3757 91 80		        sta     (fxptr),y
  2720
  2721 3759				fxs FX_BLITTER_START #$01	; !!! start gdy 1 !!!
Macro: FXS [Source: vbxe.hea]
     2 3759 A9 01		        lda     #$01
     3 375B A0 53		        ldy     #FX_BLITTER_START
     4 375D 91 80		        sta     (fxptr),y
  2722
  2723 375F			wait	fxla FX_BLITTER_BUSY
Macro: FXLA [Source: vbxe.hea]
     2 375F A0 53		        ldy     #FX_BLITTER_BUSY
     3 3761 B1 80		        lda     (fxptr),y
  2724 3763 D0 FA			bne wait
  2725
  2726 3765 A9 00			lda #$00
  2727 3767 8D 84 37			sta _adr
  2728 376A EE 85 37 D0 03 EE + 	inw _adr+1
  2729
  2730 3772 4C 2E 37			jmp loop
  2731
  2732 3775			skp	fxs FX_MEMS #$00		; disable VBXE bank
Macro: FXS [Source: vbxe.hea]
     2 3775 A9 00		        lda     #$00
     3 3777 A0 5F		        ldy     #FX_MEMS
     4 3779 91 80		        sta     (fxptr),y
  2733
  2734 377B 4C 93 37			jmp stop
  2735
  2736 377E 00 00 00		bltClr	.long 0x00	; source address
  2737 3781 00 00			.word 0x00	; source step y
  2738 3783 00				.byte 0x00	; source step x
  2739 3784 00 00 00		_adr	.long 0x00	; destination address
  2740 3787 00 01			.word 0x0100	; destination step y
  2741 3789 01				.byte 0x01	; destination step x
  2742 378A FF 00		_siz	.word 0xff	; width
  2743 378C 00				.byte 0x00	; height
  2744 378D 00				dta 0x00	; and mask (and mask equal to 0, memory will be filled with xor mask)
  2745 378E 00				dta 0x00	; xor mask
  2746 378F 00				dta 0x00	; collision and mask
  2747 3790 00				dta 0x00	; zoom
  2748 3791 00				dta 0x00	; pattern feature
  2749 3792 00				dta 0x00	; control
  2750
  2751 3793 68 AA		stop	pla:tax
  2752
  2753 				; optimize OK (vbxe_memorystream.inc), line = 292
  2754
  2755 3795 AC 9B 9D 84 84 AC + 	mwy POSITION :bp2
  2756 379F A0 00			ldy #$00
  2757 37A1 98				tya
  2758 37A2 91 84			sta (:bp2),y
  2759 37A4 C8				iny
  2760 37A5 91 84			sta (:bp2),y
  2761 37A7 C8				iny
  2762 37A8 91 84			sta (:bp2),y
  2763 37AA C8				iny
  2764 37AB 91 84			sta (:bp2),y
  2765
  2766 				; optimize OK (vbxe_memorystream.inc), line = 293
  2767
  2768 37AD AC 9D 9D 84 84 AC + 	mwy SIZE :bp2
  2769 37B7 A0 00			ldy #$00
  2770 37B9 91 84			sta (:bp2),y
  2771 37BB C8				iny
  2772 37BC 91 84			sta (:bp2),y
  2773 37BE C8				iny
  2774 37BF A9 08			lda #$08
  2775 37C1 91 84			sta (:bp2),y
  2776 37C3 C8				iny
  2777 37C4 A9 00			lda #$00
  2778 37C6 91 84			sta (:bp2),y
  2779
  2780 				; ------------------------------------------------------------
  2781
  2782 = 9D99			TVBXEMEMORYSTREAM	= DATAORIGIN+$00C7
  2783 = 9D9B			POSITION	= DATAORIGIN+$00C9
  2784 = 9D9D			SIZE	= DATAORIGIN+$00CB
  2785 = 9D9F			ADR	= DATAORIGIN+$00CD
  2786 = 9DA3			SIZ	= DATAORIGIN+$00D1
  2787
  2788 = 9D99			@VarData	= TVBXEMEMORYSTREAM
  2789 = 000E			@VarDataSize	= 14
  2790
  2791 37C8			@exit
  2792 					.ifdef @new
  2793 					lda <@VarData
  2794 					sta :ztmp
  2795 					lda >@VarData
  2796 					ldy #@VarDataSize-1
  2797 					jmp @FreeMem
  2798 					els
  2799 37C8 60				rts						; ret
  2800 					eif
  2801 				.endl
  2802
  2803 37C9			.local	COLORMAPOFF					; PROCEDURE | ASSEMBLER
  2804
  2805 				; -------------------  ASM Block 00000123  -------------------
  2806
  2807 					@setxdl #e@xdl.mapoff
  2807 				 LDA# E@XDL.MAPOFF\ JSR @SETXDL
  2807 37C9 A9 05		 LDA# E@XDL.MAPOFF
  2807 37CB 20 E6 28		 JSR @SETXDL
  2808
  2809 37CE			@exit
  2810 					.ifdef @new
  2811 					lda <@VarData
  2812 					sta :ztmp
  2813 					lda >@VarData
  2814 					ldy #@VarDataSize-1
  2815 					jmp @FreeMem
  2816 					els
  2817 37CE 60				rts						; ret
  2818 					eif
  2819 				.endl
  2820
  2821 37CF			.local	SETHORIZONTALRES				; PROCEDURE | OVERLOAD
  2822 37CF			.local	@0201810000180000
  2823
  2824 				; optimize OK (VBXE), line = 643
  2825
  2826 37CF AD A7 9D			lda A
  2827 37D2 8D D4 9C			sta SYSTEM.GRAPHMODE
  2828
  2829 				; optimize OK (VBXE), line = 645
  2830
  2831 37D5 A9 C0			lda #$C0
  2832 37D7 8D D9 9C			sta SYSTEM.SCREENHEIGHT
  2833 37DA A9 00			lda #$00
  2834 37DC 8D DA 9C			sta SYSTEM.SCREENHEIGHT+1
  2835
  2836 				; optimize OK (VBXE), line = 647
  2837
  2838 37DF AD A7 9D			lda A
  2839 37E2 8D AA 9D			sta @CASETMP_0005
  2840 37E5 C9 0A			cmp #$0A
  2841 37E7 D0 12			jne l_04AE
  2842 				@
  2843
  2844 				; optimize OK (VBXE), line = 648
  2845
  2846 37E9 A9 A0			lda #$A0
  2847 37EB 8D D7 9C			sta SYSTEM.SCREENWIDTH
  2848 37EE A9 00			lda #$00
  2849 37F0 8D D8 9C			sta SYSTEM.SCREENWIDTH+1
  2850 37F3 A9 01			lda #$01
  2851 37F5 8D A7 9D			sta A
  2852 37F8 4C 40 38			jmp a_0005
  2853 37FB			l_04AE
  2854 37FB C9 1F			cmp #$1F
  2855 37FD D0 12			jne l_04BD
  2856
  2857 				; optimize OK (VBXE), line = 649
  2858
  2859 37FF A9 40			lda #$40
  2860 3801 8D D7 9C			sta SYSTEM.SCREENWIDTH
  2861 3804 A9 01			lda #$01
  2862 3806 8D D8 9C			sta SYSTEM.SCREENWIDTH+1
  2863 3809 A9 02			lda #$02
  2864 380B 8D A7 9D			sta A
  2865 380E 4C 40 38			jmp a_0005
  2866 3811			l_04BD
  2867 3811 C9 18			cmp #$18
  2868 3813 D0 12			jne l_04CC
  2869
  2870 				; optimize OK (VBXE), line = 650
  2871
  2872 3815 A9 80			lda #$80
  2873 3817 8D D7 9C			sta SYSTEM.SCREENWIDTH
  2874 381A A9 02			lda #$02
  2875 381C 8D D8 9C			sta SYSTEM.SCREENWIDTH+1
  2876 381F A9 03			lda #$03
  2877 3821 8D A7 9D			sta A
  2878 3824 4C 40 38			jmp a_0005
  2879 3827			l_04CC
  2880
  2881 				; optimize OK (VBXE), line = 654
  2882
  2883 3827 A9 50			lda #$50
  2884 3829 8D D7 9C			sta SYSTEM.SCREENWIDTH
  2885 382C A9 00			lda #$00
  2886 382E 8D D8 9C			sta SYSTEM.SCREENWIDTH+1
  2887
  2888 				; optimize OK (VBXE), line = 655
  2889
  2890 3831 A9 18			lda #$18
  2891 3833 8D D9 9C			sta SYSTEM.SCREENHEIGHT
  2892 3836 A9 00			lda #$00
  2893 3838 8D DA 9C			sta SYSTEM.SCREENHEIGHT+1
  2894
  2895 				; optimize OK (VBXE), line = 656
  2896
  2897 383B A9 02			lda #$02
  2898 383D 8D A7 9D			sta A
  2899 3840			a_0005
  2900
  2901 				; -------------------  ASM Block 00000124  -------------------
  2902
  2903 3840 8A 48			txa:pha
  2904
  2905 3842 AD D7 9C			lda MAIN.SYSTEM.ScreenWidth
  2906 3845 AE D8 9C			ldx MAIN.SYSTEM.ScreenWidth+1
  2907
  2908 3848 AC D9 9C			ldy MAIN.SYSTEM.ScreenHeight
  2909
  2910 384B 20 29 21			@SCREENSIZE
  2911
  2912 					@setxdl a
  2912 				 LDA A\ JSR @SETXDL
  2912 384E AD A7 9D		 LDA A
  2912 3851 20 E6 28		 JSR @SETXDL
  2913
  2914 3854				fxs FX_MEMS #$80+MAIN.SYSTEM.VBXE_XDLADR/$1000
Macro: FXS [Source: vbxe.hea]
     2 3854 A9 80		        lda     #$80+MAIN.SYSTEM.VBXE_XDLADR/$1000
     3 3856 A0 5F		        ldy     #FX_MEMS
     4 3858 91 80		        sta     (fxptr),y
Source: arkanoid_vbxe.a65
  2915
  2916 385A A0 09			ldy #s@xdl.ovstep
  2917
  2918 385C AD A8 9D			lda s
  2919 385F 99 00 B0			sta MAIN.SYSTEM.VBXE_WINDOW,y
  2920
  2921 3862 AD A9 9D			lda s+1
  2922 3865 99 01 B0			sta MAIN.SYSTEM.VBXE_WINDOW+1,y
  2923
  2924 3868				fxs FX_MEMS #$00
Macro: FXS [Source: vbxe.hea]
     2 3868 A9 00		        lda     #$00
     3 386A A0 5F		        ldy     #FX_MEMS
     4 386C 91 80		        sta     (fxptr),y
Source: arkanoid_vbxe.a65
  2925
  2926 386E 68 AA			pla:tax
  2927
  2928 				; ------------------------------------------------------------
  2929
  2930 = 9DA7			A	= DATAORIGIN+$00D5
  2931 = 9DA8			S	= DATAORIGIN+$00D6
  2932 = 9DAA			@CASETMP_0005	= DATAORIGIN+$00D8
  2933
  2934 = 9DA7			@VarData	= A
  2935 = 0004			@VarDataSize	= 4
  2936
  2937 3870			@exit
  2938 					.ifdef @new
  2939 					lda <@VarData
  2940 					sta :ztmp
  2941 					lda >@VarData
  2942 					ldy #@VarDataSize-1
  2943 					jmp @FreeMem
  2944 					els
  2945 3870 60				rts						; ret
  2946 					eif
  2947 				.endl
  2948 				.endl							; overload
  2949
  2950 3871			.local	SETHORIZONTALRES				; PROCEDURE | OVERLOAD
  2951 3871			.local	@010180000
  2952 3871 8D AB 9D			sta A
  2953
  2954 				; optimize OK (VBXE), line = 698
  2955
  2956 3874 8D A7 9D			sta SETHORIZONTALRES.@0201810000180000.A
  2957 3877 A9 40			lda #$40
  2958 3879 8D A8 9D			sta SETHORIZONTALRES.@0201810000180000.S
  2959 387C A9 01			lda #$01
  2960 387E 8D A9 9D			sta SETHORIZONTALRES.@0201810000180000.S+1
  2961 3881 20 CF 37			jsr SETHORIZONTALRES.@0201810000180000
  2962
  2963 				; ------------------------------------------------------------
  2964
  2965 = 9DAB			A	= DATAORIGIN+$00D9
  2966
  2967 = 9DAB			@VarData	= A
  2968 = 0001			@VarDataSize	= 1
  2969
  2970 3884			@exit
  2971 					.ifdef @new
  2972 					lda <@VarData
  2973 					sta :ztmp
  2974 					lda >@VarData
  2975 					ldy #@VarDataSize-1
  2976 					jmp @FreeMem
  2977 					els
  2978 3884 60				rts						; ret
  2979 					eif
  2980 				.endl
  2981 				.endl							; overload
  2982
  2983 3885			.local	RUNBCB						; PROCEDURE | ASSEMBLER
  2984
  2985 				; -------------------  ASM Block 00000126  -------------------
  2986
  2987 3885				fxs	FX_BL_ADR0	a
Macro: FXS [Source: vbxe.hea]
     2 3885 AD AC 9D		        lda     A
     3 3888 A0 50		        ldy     #FX_BL_ADR0
     4 388A 91 80		        sta     (fxptr),y
Source: arkanoid_vbxe.a65
  2988 388C AD AD 9D			lda	a+1
  2989 388F 29 0F			and	#$0f
  2990 3891				fxsa	FX_BL_ADR1
Macro: FXSA [Source: vbxe.hea]
     2 3891 A0 51		        ldy     #FX_BL_ADR1
     3 3893 91 80		        sta     (fxptr),y
Source: arkanoid_vbxe.a65
  2991 3895				fxs	FX_BL_ADR2	#$00
Macro: FXS [Source: vbxe.hea]
     2 3895 A9 00		        lda     #$00
     3 3897 A0 52		        ldy     #FX_BL_ADR2
     4 3899 91 80		        sta     (fxptr),y
Source: arkanoid_vbxe.a65
  2992
  2993 389B				fxs	FX_BLITTER_START #$01		; !!! start gdy 1 !!!
Macro: FXS [Source: vbxe.hea]
     2 389B A9 01		        lda     #$01
     3 389D A0 53		        ldy     #FX_BLITTER_START
     4 389F 91 80		        sta     (fxptr),y
Source: arkanoid_vbxe.a65
  2994
  2995 				;wait	fxla	FX_BLITTER_BUSY
  2996 				;	bne	wait
  2997
  2998 				; ------------------------------------------------------------
  2999
  3000 = 9DAC			A	= DATAORIGIN+$00DA
  3001 = 9CD2			A.SRC_ADR	= DATAORIGIN+$0000
  3002 = 9CD2			A.SRC_ADR.BYTE0	= DATAORIGIN+$0000
  3003 = 9CD3			A.SRC_ADR.BYTE1	= DATAORIGIN+$0001
  3004 = 9CD4			A.SRC_ADR.BYTE2	= DATAORIGIN+$0002
  3005 = 9CD5			A.SRC_STEP_Y	= DATAORIGIN+$0003
  3006 = 9CD7			A.SRC_STEP_X	= DATAORIGIN+$0005
  3007 = 9CD8			A.DST_ADR	= DATAORIGIN+$0006
  3008 = 9CD8			A.DST_ADR.BYTE0	= DATAORIGIN+$0006
  3009 = 9CD9			A.DST_ADR.BYTE1	= DATAORIGIN+$0007
  3010 = 9CDA			A.DST_ADR.BYTE2	= DATAORIGIN+$0008
  3011 = 9CDB			A.DST_STEP_Y	= DATAORIGIN+$0009
  3012 = 9CDD			A.DST_STEP_X	= DATAORIGIN+$000B
  3013 = 9CDE			A.BLT_WIDTH	= DATAORIGIN+$000C
  3014 = 9CE0			A.BLT_HEIGHT	= DATAORIGIN+$000E
  3015 = 9CE1			A.BLT_AND_MASK	= DATAORIGIN+$000F
  3016 = 9CE2			A.BLT_XOR_MASK	= DATAORIGIN+$0010
  3017 = 9CE3			A.BLT_COLLISION_MASK	= DATAORIGIN+$0011
  3018 = 9CE4			A.BLT_ZOOM	= DATAORIGIN+$0012
  3019 = 9CE5			A.PATTERN_FEATURE	= DATAORIGIN+$0013
  3020 = 9CE6			A.BLT_CONTROL	= DATAORIGIN+$0014
  3021
  3022 = 9DAC			@VarData	= A
  3023 = 0002			@VarDataSize	= 2
  3024
  3025 38A1			@exit
  3026 					.ifdef @new
  3027 					lda <@VarData
  3028 					sta :ztmp
  3029 					lda >@VarData
  3030 					ldy #@VarDataSize-1
  3031 					jmp @FreeMem
  3032 					els
  3033 38A1 60				rts						; ret
  3034 					eif
  3035 				.endl
  3036
  3037 38A2			.local	VBXECONTROL					; PROCEDURE | ASSEMBLER
  3038 38A2 8D B0 9D			sta A
  3039
  3040 				; -------------------  ASM Block 00000130  -------------------
  3041
  3042 38A5				fxs FX_VIDEO_CONTROL a
Macro: FXS [Source: vbxe.hea]
     2 38A5 AD B0 9D		        lda     A
     3 38A8 A0 40		        ldy     #FX_VIDEO_CONTROL
     4 38AA 91 80		        sta     (fxptr),y
Source: arkanoid_vbxe.a65
  3043
  3044 				; ------------------------------------------------------------
  3045
  3046 = 9DB0			A	= DATAORIGIN+$00DE
  3047
  3048 = 9DB0			@VarData	= A
  3049 = 0001			@VarDataSize	= 1
  3050
  3051 38AC			@exit
  3052 					.ifdef @new
  3053 					lda <@VarData
  3054 					sta :ztmp
  3055 					lda >@VarData
  3056 					ldy #@VarDataSize-1
  3057 					jmp @FreeMem
  3058 					els
  3059 38AC 60				rts						; ret
  3060 					eif
  3061 				.endl
  3062
  3063 				; ------------------------------------------------------------
  3064 				; ------------------------------------------------------------
  3065 38AD			@UnitInit
  3066
  3067 				; -------------------  ASM Block 00000138  -------------------
  3068
  3069 38AD 8A 48			txa:pha
  3070
  3071 38AF 20 9A 27			jsr @vbxe_detect
  3072 38B2 90 04			bcc ok
  3073
  3074 38B4 A2 FF			ldx #MAIN.GRAPH.grNoInitGraph
  3075 38B6 D0 05			bne status
  3076
  3077 38B8 20 F0 27		ok	jsr @vbxe_init
  3078
  3079 38BB A2 01			ldx #MAIN.GRAPH.grOK
  3080 38BD 8E 0F 9D		status	stx MAIN.GRAPH.GraphResult
  3081
  3082 38C0 68 AA			pla:tax
  3083
  3084 38C2 60				rts
  3085
  3086 				; ------------------------------------------------------------
  3087
  3088 = 0001			VC_XDL	= $01
  3089 = 0002			VC_XCOLOR	= $02
  3090 = 0004			VC_NO_TRANS	= $04
  3091 = 0008			VC_TRANS15	= $08
  3092 = 0000			TCBLACK	= $00
  3093 = 0001			TCRED	= $01
  3094 = 0002			TCGREEN	= $02
  3095 = 0003			TCYELLOW	= $03
  3096 = 0004			TCBLUE	= $04
  3097 = 0005			TCMAGENTA	= $05
  3098 = 0006			TCCYAN	= $06
  3099 = 0007			TCWHITE	= $07
  3100 = 0008			TCBRIGHTBLACK	= $08
  3101 = 0009			TCBRIGHTRED	= $09
  3102 = 000A			TCBRIGHTGREEN	= $0A
  3103 = 000B			TCBRIGHTYELLOW	= $0B
  3104 = 000C			TCBRIGHTBLUE	= $0C
  3105 = 000D			TCBRIGHTMAGENTA	= $0D
  3106 = 000E			TCBRIGHTCYAN	= $0E
  3107 = 000F			TCBRIGHTWHITE	= $0F
  3108 = 0080			TBBLACK	= $80
  3109 = 0090			TBRED	= $90
  3110 = 00A0			TBGREEN	= $A0
  3111 = 00B0			TBYELLOW	= $B0
  3112 = 00C0			TBBLUE	= $C0
  3113 = 00D0			TBMAGENTA	= $D0
  3114 = 00E0			TBCYAN	= $E0
  3115 = 00F0			TBWHITE	= $F0
  3116 = 9D38			adr.VRAM	= DATAORIGIN+$0066	; [8] OBJECT
  3117 38C3			.var VRAM	= adr.VRAM .word
  3118 = 9D38			VRAM.POSITION	= DATAORIGIN+$0066
  3119 = 9D3C			VRAM.SIZE	= DATAORIGIN+$006A
  3120 = 0063			SCROLLBACK_FILL	= $63
  3121 = 28DC			COLORMAPCONTROL = @VBXE_CMAP.CONFIG
  3122 = 0400			adr.SCROLLBACK_BUFFER	= $0400
  3123 38C3			.var SCROLLBACK_BUFFER	= adr.SCROLLBACK_BUFFER .word
  3124 = 02FD			FILDAT	= $02FD
  3125 = 0054			ROWCRS	= $54
  3126 = 0055			COLCRS	= $55
  3127 = 0068			CRSADR	= $68
  3128
  3129 = 38C3 38 9D		VRAM
  3129 = 38C5 00 04		SCROLLBACK_BUFFER
  3129 				.endl							; UNIT VBXE
  3130
  3131 				; ------------------------------------------------------------
  3132
  3133 38C7			.local	JOYSTICK					; UNIT
  3134
  3135 				; ------------------------------------------------------------
  3136
  3137 = 000F			JOY_NONE	= $0F
  3138 = 000E			JOY_UP	= $0E
  3139 = 000D			JOY_DOWN	= $0D
  3140 = 000B			JOY_LEFT	= $0B
  3141 = 000A			JOY_LEFT_UP	= $0A
  3142 = 0009			JOY_LEFT_DOWN	= $09
  3143 = 0007			JOY_RIGHT	= $07
  3144 = 0006			JOY_RIGHT_UP	= $06
  3145 = 0005			JOY_RIGHT_DOWN	= $05
  3146 = 0278			JOY_1	= $0278
  3147 = 0279			JOY_2	= $0279
  3148 = 0278			adr.STICK	= $0278
  3149 38C7			.var STICK	= adr.STICK .word
  3150 = 0278			STICK0	= $0278
  3151 = 0279			STICK1	= $0279
  3152 = 0284			adr.STRIG	= $0284
  3153 38C7			.var STRIG	= adr.STRIG .word
  3154 = 0284			STRIG0	= $0284
  3155 = 0285			STRIG1	= $0285
  3156 = 0270			adr.PADDL	= $0270
  3157 38C7			.var PADDL	= adr.PADDL .word
  3158 = 0270			PADDL0	= $0270
  3159 = 0271			PADDL1	= $0271
  3160 = 0272			PADDL2	= $0272
  3161 = 0273			PADDL3	= $0273
  3162 = 0274			PADDL4	= $0274
  3163 = 0275			PADDL5	= $0275
  3164 = 0276			PADDL6	= $0276
  3165 = 0277			PADDL7	= $0277
  3166 = 027C			adr.PTRIG	= $027C
  3167 38C7			.var PTRIG	= adr.PTRIG .word
  3168 = 027C			PTRIG0	= $027C
  3169 = 027D			PTRIG1	= $027D
  3170 = 027E			PTRIG2	= $027E
  3171 = 027F			PTRIG3	= $027F
  3172 = 0280			PTRIG4	= $0280
  3173 = 0281			PTRIG5	= $0281
  3174 = 0282			PTRIG6	= $0282
  3175 = 0283			PTRIG7	= $0283
  3176 = D010			TRIG0	= $D010
  3177 = D011			TRIG1	= $D011
  3178 = D200			POT0	= $D200
  3179 = D208			ALLPOT	= $D208
  3180 = D20B			POTGO	= $D20B
  3181
  3182 = 38C7 78 02		STICK
  3182 = 38C9 84 02		STRIG
  3182 = 38CB 70 02		PADDL
  3182 = 38CD 7C 02		PTRIG
  3182 				.endl							; UNIT JOYSTICK
  3183
  3184 38CF			.local	START_LEVEL					; PROCEDURE
  3185
  3186 38CF			@exit
  3187 					.ifdef @new
  3188 					lda <@VarData
  3189 					sta :ztmp
  3190 					lda >@VarData
  3191 					ldy #@VarDataSize-1
  3192 					jmp @FreeMem
  3193 					els
  3194 38CF 60				rts						; ret
  3195 					eif
  3196 				.endl
  3197
  3198 38D0			.local	DEATH_SOUND					; PROCEDURE
  3199
  3200 				; ------------------------------------------------------------
  3201
  3202 = 9DB9			A	= DATAORIGIN+$00E7
  3203
  3204 = 9DB9			@VarData	= A
  3205 = 0002			@VarDataSize	= 2
  3206
  3207 38D0			@exit
  3208 					.ifdef @new
  3209 					lda <@VarData
  3210 					sta :ztmp
  3211 					lda >@VarData
  3212 					ldy #@VarDataSize-1
  3213 					jmp @FreeMem
  3214 					els
  3215 38D0 60				rts						; ret
  3216 					eif
  3217 				.endl
  3218
  3219 38D1			.local	BALL_BLOCK_SOUND				; PROCEDURE
  3220
  3221 				; ------------------------------------------------------------
  3222
  3223 = 9DBB			A	= DATAORIGIN+$00E9
  3224 = 9DBD			B	= DATAORIGIN+$00EB
  3225
  3226 = 9DBB			@VarData	= A
  3227 = 0004			@VarDataSize	= 4
  3228
  3229 38D1			@exit
  3230 					.ifdef @new
  3231 					lda <@VarData
  3232 					sta :ztmp
  3233 					lda >@VarData
  3234 					ldy #@VarDataSize-1
  3235 					jmp @FreeMem
  3236 					els
  3237 38D1 60				rts						; ret
  3238 					eif
  3239 				.endl
  3240
  3241 38D2			.local	SQRT32						; FUNCTION
  3242
  3243 				; optimize OK (arkanoid_vbxe.pas), line = 90
  3244
  3245 38D2 AD BF 9D			lda V
  3246 38D5 8D CD 9D			sta R
  3247 38D8 AD C0 9D			lda V+1
  3248 38DB 8D CE 9D			sta R+1
  3249 38DE AD C1 9D			lda V+2
  3250 38E1 8D CF 9D			sta R+2
  3251 38E4 AD C2 9D			lda V+3
  3252 38E7 8D D0 9D			sta R+3
  3253
  3254 				; optimize OK (arkanoid_vbxe.pas), line = 91
  3255
  3256 38EA A9 00			lda #$00
  3257 38EC 8D C9 9D			sta Q
  3258 38EF 8D CA 9D			sta Q+1
  3259 38F2 8D CB 9D			sta Q+2
  3260 38F5 8D CC 9D			sta Q+3
  3261
  3262 				; optimize OK (arkanoid_vbxe.pas), line = 92
  3263
  3264 38F8 8D C5 9D			sta B
  3265 38FB 8D C6 9D			sta B+1
  3266 38FE 8D C7 9D			sta B+2
  3267 3901 A9 40			lda #$40
  3268
  3269 				; --- WhileProlog
  3270 3903 4C 3B 39			jmp l_0513
  3271 3906			l_0514
  3272
  3273 				; optimize OK (arkanoid_vbxe.pas), line = 94
  3274
  3275 3906 AD C5 9D			lda B
  3276 3909 85 9F			sta :STACKORIGIN+9
  3277 390B AD C6 9D			lda B+1
  3278 390E 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  3279 3910 AD C7 9D			lda B+2
  3280 3913 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
  3281 3915 AD C8 9D			lda B+3
  3282 3918 85 CF			sta :STACKORIGIN+STACKWIDTH*3+9
  3283 391A 46 CF			lsr :STACKORIGIN+STACKWIDTH*3+9
  3284 391C 66 BF			ror :STACKORIGIN+STACKWIDTH*2+9
  3285 391E 66 AF			ror :STACKORIGIN+STACKWIDTH+9
  3286 3920 66 9F			ror :STACKORIGIN+9
  3287 3922 46 CF			lsr :STACKORIGIN+STACKWIDTH*3+9
  3288 3924 66 BF			ror :STACKORIGIN+STACKWIDTH*2+9
  3289 3926 66 AF			ror :STACKORIGIN+STACKWIDTH+9
  3290 3928 66 9F			ror :STACKORIGIN+9
  3291 392A A5 9F			lda :STACKORIGIN+9
  3292 392C 8D C5 9D			sta B
  3293 392F A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  3294 3931 8D C6 9D			sta B+1
  3295 3934 A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
  3296 3936 8D C7 9D			sta B+2
  3297 3939 A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
  3298 393B			l_0513
  3299 393B 8D C8 9D			sta B+3
  3300 393E CD D0 9D			cmp R+3
  3301 3941 D0 16			bne @+
  3302 3943 AD C7 9D			lda B+2
  3303 3946 CD CF 9D			cmp R+2
  3304 3949 D0 0E			bne @+
  3305 394B AD C6 9D			lda B+1
  3306 394E CD CE 9D			cmp R+1
  3307 3951 D0 06			bne @+
  3308 3953 AD C5 9D			lda B
  3309 3956 CD CD 9D			cmp R
  3310 				@
  3311 3959 F0 02			beq @+
  3312 395B B0 A9			jcs l_0514
  3313 				@
  3314
  3315 				; --- WhileProlog
  3316 395D 4C 32 3A			jmp l_0528
  3317 3960			l_0529
  3318
  3319 				; optimize OK (arkanoid_vbxe.pas), line = 97
  3320
  3321 3960 AD C9 9D			lda Q
  3322 3963 18 6D C5 9D			add B
  3323 3967 8D D1 9D			sta T
  3324 396A AD CA 9D			lda Q+1
  3325 396D 6D C6 9D			adc B+1
  3326 3970 8D D2 9D			sta T+1
  3327 3973 AD CB 9D			lda Q+2
  3328 3976 6D C7 9D			adc B+2
  3329 3979 8D D3 9D			sta T+2
  3330 397C AD CC 9D			lda Q+3
  3331 397F 6D C8 9D			adc B+3
  3332 3982 8D D4 9D			sta T+3
  3333
  3334 				; optimize OK (arkanoid_vbxe.pas), line = 99
  3335
  3336 3985 4E CC 9D			lsr Q+3
  3337 3988 6E CB 9D			ror Q+2
  3338 398B 6E CA 9D			ror Q+1
  3339 398E 6E C9 9D			ror Q
  3340
  3341 				; optimize OK (arkanoid_vbxe.pas), line = 101
  3342
  3343 3991 AD D0 9D			lda R+3
  3344 3994 CD D4 9D			cmp T+3
  3345 3997 D0 16			bne @+
  3346 3999 AD CF 9D			lda R+2
  3347 399C CD D3 9D			cmp T+2
  3348 399F D0 0E			bne @+
  3349 39A1 AD CE 9D			lda R+1
  3350 39A4 CD D2 9D			cmp T+1
  3351 39A7 D0 06			bne @+
  3352 39A9 AD CD 9D			lda R
  3353 39AC CD D1 9D			cmp T
  3354 				@
  3355 39AF 90 49			jcc l_0549
  3356
  3357 				; optimize OK (arkanoid_vbxe.pas), line = 102
  3358
  3359 39B1 AD CD 9D			lda R
  3360 39B4 ED D1 9D			sbc T
  3361 39B7 8D CD 9D			sta R
  3362 39BA AD CE 9D			lda R+1
  3363 39BD ED D2 9D			sbc T+1
  3364 39C0 8D CE 9D			sta R+1
  3365 39C3 AD CF 9D			lda R+2
  3366 39C6 ED D3 9D			sbc T+2
  3367 39C9 8D CF 9D			sta R+2
  3368 39CC AD D0 9D			lda R+3
  3369 39CF ED D4 9D			sbc T+3
  3370 39D2 8D D0 9D			sta R+3
  3371
  3372 				; optimize OK (arkanoid_vbxe.pas), line = 103
  3373
  3374 39D5 AD C9 9D			lda Q
  3375 39D8 18 6D C5 9D			add B
  3376 39DC 8D C9 9D			sta Q
  3377 39DF AD CA 9D			lda Q+1
  3378 39E2 6D C6 9D			adc B+1
  3379 39E5 8D CA 9D			sta Q+1
  3380 39E8 AD CB 9D			lda Q+2
  3381 39EB 6D C7 9D			adc B+2
  3382 39EE 8D CB 9D			sta Q+2
  3383 39F1 AD CC 9D			lda Q+3
  3384 39F4 6D C8 9D			adc B+3
  3385 39F7 8D CC 9D			sta Q+3
  3386 39FA			l_0549
  3387
  3388 				; optimize OK (arkanoid_vbxe.pas), line = 106
  3389
  3390 39FA AD C5 9D			lda B
  3391 39FD 85 9F			sta :STACKORIGIN+9
  3392 39FF AD C6 9D			lda B+1
  3393 3A02 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  3394 3A04 AD C7 9D			lda B+2
  3395 3A07 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
  3396 3A09 AD C8 9D			lda B+3
  3397 3A0C 85 CF			sta :STACKORIGIN+STACKWIDTH*3+9
  3398 3A0E 46 CF			lsr :STACKORIGIN+STACKWIDTH*3+9
  3399 3A10 66 BF			ror :STACKORIGIN+STACKWIDTH*2+9
  3400 3A12 66 AF			ror :STACKORIGIN+STACKWIDTH+9
  3401 3A14 66 9F			ror :STACKORIGIN+9
  3402 3A16 46 CF			lsr :STACKORIGIN+STACKWIDTH*3+9
  3403 3A18 66 BF			ror :STACKORIGIN+STACKWIDTH*2+9
  3404 3A1A 66 AF			ror :STACKORIGIN+STACKWIDTH+9
  3405 3A1C 66 9F			ror :STACKORIGIN+9
  3406 3A1E A5 9F			lda :STACKORIGIN+9
  3407 3A20 8D C5 9D			sta B
  3408 3A23 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  3409 3A25 8D C6 9D			sta B+1
  3410 3A28 A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
  3411 3A2A 8D C7 9D			sta B+2
  3412 3A2D A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
  3413 3A2F 8D C8 9D			sta B+3
  3414 3A32			l_0528
  3415
  3416 				; optimize OK (arkanoid_vbxe.pas), line = 96
  3417
  3418 3A32 AD C8 9D			lda B+3
  3419 3A35 C9 00			cmp #$00
  3420 3A37 D0 13			bne @+
  3421 3A39 AD C7 9D			lda B+2
  3422 3A3C C9 00			cmp #$00
  3423 3A3E D0 0C			bne @+
  3424 3A40 AD C6 9D			lda B+1
  3425 3A43 C9 00			cmp #$00
  3426 3A45 D0 05			bne @+
  3427 3A47 AD C5 9D			lda B
  3428 3A4A C9 00			cmp #$00
  3429 				@
  3430 3A4C F0 05			beq @+
  3431 3A4E 90 03 4C 60 39		jcs l_0529
  3432 				@
  3433
  3434 				; optimize OK (arkanoid_vbxe.pas), line = 110
  3435
  3436 3A53 AD C9 9D			lda Q
  3437 3A56 8D C3 9D			sta RESULT
  3438 3A59 AD CA 9D			lda Q+1
  3439 3A5C 8D C4 9D			sta RESULT+1
  3440 3A5F			@exit
  3441
  3442 				; ------------------------------------------------------------
  3443
  3444 = 9DBF			V	= DATAORIGIN+$00ED
  3445 = 9DC3			RESULT	= DATAORIGIN+$00F1
  3446 = 9DC5			B	= DATAORIGIN+$00F3
  3447 = 9DC9			Q	= DATAORIGIN+$00F7
  3448 = 9DCD			R	= DATAORIGIN+$00FB
  3449 = 9DD1			T	= DATAORIGIN+$00FF
  3450
  3451 = 9DBF			@VarData	= V
  3452 = 0014			@VarDataSize	= 20
  3453
  3454 3A5F 60				rts						; ret
  3455 				.endl
  3456
  3457 3A60			.local	MOUSECOORDS					; PROCEDURE
  3458
  3459 				; optimize OK (service.pas), line = 301
  3460
  3461 3A60 AD 00 D3			lda ATARI.PORTA
  3462 3A63 29 0F			and #$0F
  3463 3A65 8D E0 9E			sta A
  3464
  3465 				; optimize OK (service.pas), line = 303
  3466
  3467 3A68 8D E1 9E			sta @CASETMP_0007
  3468 3A6B C9 0B			cmp #$0B
  3469 3A6D D0 38			jne l_058B
  3470 				@
  3471
  3472 				; optimize OK (service.pas), line = 304
  3473
  3474 3A6F AC DE 9E 84 84 AC + 	mwy X :bp2
  3475 3A79 A0 00			ldy #$00
  3476 3A7B B1 84			lda (:bp2),y
  3477 3A7D C8				iny
  3478 3A7E C9 0B			cmp #$0B
  3479 3A80 B1 84			lda (:bp2),y
  3480 3A82 E9 00			sbc #$00
  3481 3A84 50 02			svc
  3482 3A86 49 80			eor #$80
  3483 3A88 30 1A			jmi l_059C
  3484 3A8A AC DE 9E 84 84 AC + 	mwy X :bp2
  3485 3A94 A0 00			ldy #$00
  3486 3A96 B1 84			lda (:bp2),y
  3487 3A98 38 E9 04			sub #$04
  3488 3A9B 91 84			sta (:bp2),y
  3489 3A9D C8				iny
  3490 3A9E B1 84			lda (:bp2),y
  3491 3AA0 E9 00			sbc #$00
  3492 3AA2 91 84			sta (:bp2),y
  3493 3AA4			l_059C
  3494 3AA4 4C E0 3A			jmp a_0007
  3495 3AA7			l_058B
  3496 3AA7 C9 07			cmp #$07
  3497 3AA9 D0 35			jne l_05A7
  3498
  3499 				; optimize OK (service.pas), line = 305
  3500
  3501 3AAB AC DE 9E 84 84 AC + 	mwy X :bp2
  3502 3AB5 A0 00			ldy #$00
  3503 3AB7 B1 84			lda (:bp2),y
  3504 3AB9 C8				iny
  3505 3ABA C9 D8			cmp #$D8
  3506 3ABC B1 84			lda (:bp2),y
  3507 3ABE E9 00			sbc #$00
  3508 3AC0 50 02			svc
  3509 3AC2 49 80			eor #$80
  3510 3AC4 10 1A			jpl l_05B8
  3511 3AC6 AC DE 9E 84 84 AC + 	mwy X :bp2
  3512 3AD0 A0 00			ldy #$00
  3513 3AD2 B1 84			lda (:bp2),y
  3514 3AD4 18 69 04			add #$04
  3515 3AD7 91 84			sta (:bp2),y
  3516 3AD9 C8				iny
  3517 3ADA B1 84			lda (:bp2),y
  3518 3ADC 69 00			adc #$00
  3519 3ADE 91 84			sta (:bp2),y
  3520 3AE0			l_05B8
  3521 3AE0			l_05A7
  3522 3AE0			a_0007
  3523
  3524 				; ------------------------------------------------------------
  3525
  3526 = 9EDE			X	= DATAORIGIN+$020C
  3527 = 9EE0			A	= DATAORIGIN+$020E
  3528 = 9EE1			@CASETMP_0007	= DATAORIGIN+$020F
  3529
  3530 = 9EDE			@VarData	= X
  3531 = 0004			@VarDataSize	= 4
  3532
  3533 3AE0			@exit
  3534 					.ifdef @new
  3535 					lda <@VarData
  3536 					sta :ztmp
  3537 					lda >@VarData
  3538 					ldy #@VarDataSize-1
  3539 					jmp @FreeMem
  3540 					els
  3541 3AE0 60				rts						; ret
  3542 					eif
  3543 				.endl
  3544
  3545 3AE1			.local	MOUSECLICK					; FUNCTION
  3546
  3547 				; optimize OK (service.pas), line = 315
  3548
  3549 3AE1			?volatile:
  3550 3AE1 AD 10 D0			lda JOYSTICK.TRIG0
  3551 3AE4 49 01			eor #$01
  3552 3AE6 8D E2 9E			sta RESULT
  3553 3AE9			@exit
  3554
  3555 				; ------------------------------------------------------------
  3556
  3557 = 9EE2			RESULT	= DATAORIGIN+$0210
  3558
  3559 3AE9 60				rts						; ret
  3560 				.endl
  3561
  3562 3AEA			.local	BLITBOX						; PROCEDURE
  3563
  3564 				; -------------------  ASM Block 00000141  -------------------
  3565
  3566 3AEA				  fxs FX_MEMS #$80
Macro: FXS [Source: vbxe.hea]
     2 3AEA A9 80		        lda     #$80
     3 3AEC A0 5F		        ldy     #FX_MEMS
     4 3AEE 91 80		        sta     (fxptr),y
Source: arkanoid_vbxe.a65
  3567 					
  3568 				; optimize OK (service.pas), line = 328
  3569
  3570 3AF0 AD E5 9E			lda SRC+2
  3571 3AF3 8D 02 B1			sta BLT.SRC_ADR.BYTE2
  3572
  3573 				; optimize OK (service.pas), line = 329
  3574
  3575 3AF6 AD E4 9E			lda SRC+1
  3576 3AF9 8D 01 B1			sta BLT.SRC_ADR.BYTE1
  3577
  3578 				; optimize OK (service.pas), line = 330
  3579
  3580 3AFC AD E3 9E			lda SRC
  3581 3AFF 8D 00 B1			sta BLT.SRC_ADR.BYTE0
  3582
  3583 				; optimize OK (service.pas), line = 332
  3584
  3585 3B02 AD E9 9E			lda DST+2
  3586 3B05 8D 08 B1			sta BLT.DST_ADR.BYTE2
  3587
  3588 				; optimize OK (service.pas), line = 333
  3589
  3590 3B08 AD E8 9E			lda DST+1
  3591 3B0B 8D 07 B1			sta BLT.DST_ADR.BYTE1
  3592
  3593 				; optimize OK (service.pas), line = 334
  3594
  3595 3B0E AD E7 9E			lda DST
  3596 3B11 8D 06 B1			sta BLT.DST_ADR.BYTE0
  3597
  3598 				; optimize OK (service.pas), line = 336
  3599
  3600 3B14 A9 01			lda #$01
  3601 3B16 8D 05 B1			sta BLT.SRC_STEP_X
  3602
  3603 				; optimize OK (service.pas), line = 337
  3604
  3605 3B19 8D 0B B1			sta BLT.DST_STEP_X
  3606
  3607 				; optimize OK (service.pas), line = 339
  3608
  3609 3B1C A9 40			lda #$40
  3610 3B1E 8D 09 B1			sta BLT.DST_STEP_Y
  3611 3B21 A9 01			lda #$01
  3612 3B23 8D 0A B1			sta BLT.DST_STEP_Y+1
  3613
  3614 				; optimize OK (service.pas), line = 340
  3615
  3616 3B26 A9 40			lda #$40
  3617 3B28 8D 03 B1			sta BLT.SRC_STEP_Y
  3618 3B2B A9 01			lda #$01
  3619 3B2D 8D 04 B1			sta BLT.SRC_STEP_Y+1
  3620
  3621 				; optimize OK (service.pas), line = 342
  3622
  3623 3B30 AD EB 9E			lda W
  3624 3B33 38 E9 01			sub #$01
  3625 3B36 8D 0C B1			sta BLT.BLT_WIDTH
  3626 3B39 AD EC 9E			lda W+1
  3627 3B3C E9 00			sbc #$00
  3628 3B3E 8D 0D B1			sta BLT.BLT_WIDTH+1
  3629
  3630 				; optimize OK (service.pas), line = 343
  3631
  3632 3B41 AC ED 9E			ldy H
  3633 3B44 88				dey
  3634 3B45 8C 0E B1			sty BLT.BLT_HEIGHT
  3635
  3636 				; optimize OK (service.pas), line = 345
  3637
  3638 3B48 A9 FF			lda #$FF
  3639 3B4A 8D 0F B1			sta BLT.BLT_AND_MASK
  3640
  3641 				; optimize OK (service.pas), line = 347
  3642
  3643 3B4D A9 00			lda #$00
  3644 3B4F 8D 12 B1			sta BLT.BLT_ZOOM
  3645
  3646 				; optimize OK (service.pas), line = 349
  3647
  3648 3B52 8D 14 B1			sta BLT.BLT_CONTROL
  3649
  3650 				; -------------------  ASM Block 00000142  -------------------
  3651
  3652 3B55				  fxs FX_MEMS #$00
Macro: FXS [Source: vbxe.hea]
     2 3B55 A9 00		        lda     #$00
     3 3B57 A0 5F		        ldy     #FX_MEMS
     4 3B59 91 80		        sta     (fxptr),y
Source: arkanoid_vbxe.a65
  3653 					
  3654 				; optimize OK (service.pas), line = 355
  3655
  3656 3B5B AD 31 9C			lda BLT
  3657 3B5E 8D AC 9D			sta VBXE.RUNBCB.A
  3658 3B61 AD 32 9C			lda BLT+1
  3659 3B64 8D AD 9D			sta VBXE.RUNBCB.A+1
  3660 3B67 20 85 38			jsr VBXE.RUNBCB
  3661
  3662 				; ------------------------------------------------------------
  3663
  3664 = 9EE3			SRC	= DATAORIGIN+$0211
  3665 = 9EE7			DST	= DATAORIGIN+$0215
  3666 = 9EEB			W	= DATAORIGIN+$0219
  3667 = 9EED			H	= DATAORIGIN+$021B
  3668
  3669 = 9EE3			@VarData	= SRC
  3670 = 000B			@VarDataSize	= 11
  3671
  3672 3B6A			@exit
  3673 					.ifdef @new
  3674 					lda <@VarData
  3675 					sta :ztmp
  3676 					lda >@VarData
  3677 					ldy #@VarDataSize-1
  3678 					jmp @FreeMem
  3679 					els
  3680 3B6A 60				rts						; ret
  3681 					eif
  3682 				.endl
  3683
  3684 3B6B			.local	BLITZERO					; PROCEDURE
  3685
  3686 				; -------------------  ASM Block 00000143  -------------------
  3687
  3688 3B6B				  fxs FX_MEMS #$80
Macro: FXS [Source: vbxe.hea]
     2 3B6B A9 80		        lda     #$80
     3 3B6D A0 5F		        ldy     #FX_MEMS
     4 3B6F 91 80		        sta     (fxptr),y
Source: arkanoid_vbxe.a65
  3689 					
  3690 				; optimize OK (service.pas), line = 371
  3691
  3692 3B71 AD F0 9E			lda SRC+2
  3693 3B74 8D 02 B1			sta BLT.SRC_ADR.BYTE2
  3694
  3695 				; optimize OK (service.pas), line = 372
  3696
  3697 3B77 AD EF 9E			lda SRC+1
  3698 3B7A 8D 01 B1			sta BLT.SRC_ADR.BYTE1
  3699
  3700 				; optimize OK (service.pas), line = 373
  3701
  3702 3B7D AD EE 9E			lda SRC
  3703 3B80 8D 00 B1			sta BLT.SRC_ADR.BYTE0
  3704
  3705 				; optimize OK (service.pas), line = 375
  3706
  3707 3B83 AD F4 9E			lda DST+2
  3708 3B86 8D 08 B1			sta BLT.DST_ADR.BYTE2
  3709
  3710 				; optimize OK (service.pas), line = 376
  3711
  3712 3B89 AD F3 9E			lda DST+1
  3713 3B8C 8D 07 B1			sta BLT.DST_ADR.BYTE1
  3714
  3715 				; optimize OK (service.pas), line = 377
  3716
  3717 3B8F AD F2 9E			lda DST
  3718 3B92 8D 06 B1			sta BLT.DST_ADR.BYTE0
  3719
  3720 				; optimize OK (service.pas), line = 379
  3721
  3722 3B95 A9 01			lda #$01
  3723 3B97 8D 05 B1			sta BLT.SRC_STEP_X
  3724
  3725 				; optimize OK (service.pas), line = 380
  3726
  3727 3B9A 8D 0B B1			sta BLT.DST_STEP_X
  3728
  3729 				; optimize OK (service.pas), line = 382
  3730
  3731 3B9D 8D 14 B1			sta BLT.BLT_CONTROL
  3732
  3733 				; optimize OK (service.pas), line = 384
  3734
  3735 3BA0 A9 40			lda #$40
  3736 3BA2 8D 09 B1			sta BLT.DST_STEP_Y
  3737 3BA5 A9 01			lda #$01
  3738 3BA7 8D 0A B1			sta BLT.DST_STEP_Y+1
  3739
  3740 				; optimize OK (service.pas), line = 385
  3741
  3742 3BAA AD F6 9E			lda W
  3743 3BAD 8D 03 B1			sta BLT.SRC_STEP_Y
  3744 3BB0 AD F7 9E			lda W+1
  3745 3BB3 8D 04 B1			sta BLT.SRC_STEP_Y+1
  3746
  3747 				; optimize OK (service.pas), line = 387
  3748
  3749 3BB6 AC F8 9E			ldy H
  3750 3BB9 88				dey
  3751 3BBA 8C 0E B1			sty BLT.BLT_HEIGHT
  3752
  3753 				; optimize OK (service.pas), line = 389
  3754
  3755 3BBD AD F6 9E			lda W
  3756 3BC0 38 E9 01			sub #$01
  3757 3BC3 8D 0C B1			sta BLT.BLT_WIDTH
  3758 3BC6 AD F7 9E			lda W+1
  3759 3BC9 E9 00			sbc #$00
  3760 3BCB 8D 0D B1			sta BLT.BLT_WIDTH+1
  3761
  3762 				; optimize OK (service.pas), line = 391
  3763
  3764 3BCE A9 FF			lda #$FF
  3765 3BD0 8D 0F B1			sta BLT.BLT_AND_MASK
  3766
  3767 				; -------------------  ASM Block 00000144  -------------------
  3768
  3769 3BD3				  fxs FX_MEMS #$00
Macro: FXS [Source: vbxe.hea]
     2 3BD3 A9 00		        lda     #$00
     3 3BD5 A0 5F		        ldy     #FX_MEMS
     4 3BD7 91 80		        sta     (fxptr),y
Source: arkanoid_vbxe.a65
  3770 					
  3771 				; optimize OK (service.pas), line = 398
  3772
  3773 3BD9 AD 31 9C			lda BLT
  3774 3BDC 8D AC 9D			sta VBXE.RUNBCB.A
  3775 3BDF AD 32 9C			lda BLT+1
  3776 3BE2 8D AD 9D			sta VBXE.RUNBCB.A+1
  3777 3BE5 20 85 38			jsr VBXE.RUNBCB
  3778
  3779 				; ------------------------------------------------------------
  3780
  3781 = 9EEE			SRC	= DATAORIGIN+$021C
  3782 = 9EF2			DST	= DATAORIGIN+$0220
  3783 = 9EF6			W	= DATAORIGIN+$0224
  3784 = 9EF8			H	= DATAORIGIN+$0226
  3785
  3786 = 9EEE			@VarData	= SRC
  3787 = 000B			@VarDataSize	= 11
  3788
  3789 3BE8			@exit
  3790 					.ifdef @new
  3791 					lda <@VarData
  3792 					sta :ztmp
  3793 					lda >@VarData
  3794 					ldy #@VarDataSize-1
  3795 					jmp @FreeMem
  3796 					els
  3797 3BE8 60				rts						; ret
  3798 					eif
  3799 				.endl
  3800
  3801 3BE9			.local	BLITTMP						; PROCEDURE
  3802
  3803 				; optimize OK (service.pas), line = 410
  3804
  3805 3BE9 AD F9 9E			lda DST
  3806 3BEC 8D B1 9D			sta VBXE_RAM.POSITION
  3807 3BEF AD FA 9E			lda DST+1
  3808 3BF2 8D B2 9D			sta VBXE_RAM.POSITION+1
  3809 3BF5 AD FB 9E			lda DST+2
  3810 3BF8 8D B3 9D			sta VBXE_RAM.POSITION+2
  3811 3BFB AD FC 9E			lda DST+3
  3812 3BFE 8D B4 9D			sta VBXE_RAM.POSITION+3
  3813
  3814 				; optimize OK (service.pas), line = 412
  3815
  3816 3C01 AD 89 9C			lda TMP
  3817 3C04 8D 6A 9D			sta VBXE.TVBXEMEMORYSTREAM.WRITEBUFFER.BUFFER
  3818 3C07 AD 8A 9C			lda TMP+1
  3819 3C0A 8D 6B 9D			sta VBXE.TVBXEMEMORYSTREAM.WRITEBUFFER.BUFFER+1
  3820 3C0D AD FD 9E			lda SIZE
  3821 3C10 8D 6C 9D			sta VBXE.TVBXEMEMORYSTREAM.WRITEBUFFER.COUNT
  3822 3C13 A9 00			lda #$00
  3823 3C15 8D 6D 9D			sta VBXE.TVBXEMEMORYSTREAM.WRITEBUFFER.COUNT+1
  3824 3C18 AD 37 9C			lda VBXE_RAM
  3825 3C1B AC 38 9C			ldy VBXE_RAM+1
  3826 3C1E 20 48 35			jsr VBXE.TVBXEMEMORYSTREAM.WRITEBUFFER
  3827
  3828 				; ------------------------------------------------------------
  3829
  3830 = 9EF9			DST	= DATAORIGIN+$0227
  3831 = 9EFD			SIZE	= DATAORIGIN+$022B
  3832
  3833 = 9EF9			@VarData	= DST
  3834 = 0005			@VarDataSize	= 5
  3835
  3836 3C21			@exit
  3837 					.ifdef @new
  3838 					lda <@VarData
  3839 					sta :ztmp
  3840 					lda >@VarData
  3841 					ldy #@VarDataSize-1
  3842 					jmp @FreeMem
  3843 					els
  3844 3C21 60				rts						; ret
  3845 					eif
  3846 				.endl
  3847
  3848 3C22			.local	BLITROW						; PROCEDURE
  3849
  3850 				; -------------------  ASM Block 00000145  -------------------
  3851
  3852 3C22				  fxs FX_MEMS #$80
Macro: FXS [Source: vbxe.hea]
     2 3C22 A9 80		        lda     #$80
     3 3C24 A0 5F		        ldy     #FX_MEMS
     4 3C26 91 80		        sta     (fxptr),y
Source: arkanoid_vbxe.a65
  3853 					
  3854 				; optimize OK (service.pas), line = 428
  3855
  3856 3C28 AD 00 9F			lda SRC+2
  3857 3C2B 8D 02 B1			sta BLT.SRC_ADR.BYTE2
  3858
  3859 				; optimize OK (service.pas), line = 429
  3860
  3861 3C2E AD FF 9E			lda SRC+1
  3862 3C31 8D 01 B1			sta BLT.SRC_ADR.BYTE1
  3863
  3864 				; optimize OK (service.pas), line = 430
  3865
  3866 3C34 AD FE 9E			lda SRC
  3867 3C37 8D 00 B1			sta BLT.SRC_ADR.BYTE0
  3868
  3869 				; optimize OK (service.pas), line = 432
  3870
  3871 3C3A AD 04 9F			lda DST+2
  3872 3C3D 8D 08 B1			sta BLT.DST_ADR.BYTE2
  3873
  3874 				; optimize OK (service.pas), line = 433
  3875
  3876 3C40 AD 03 9F			lda DST+1
  3877 3C43 8D 07 B1			sta BLT.DST_ADR.BYTE1
  3878
  3879 				; optimize OK (service.pas), line = 434
  3880
  3881 3C46 AD 02 9F			lda DST
  3882 3C49 8D 06 B1			sta BLT.DST_ADR.BYTE0
  3883
  3884 				; optimize OK (service.pas), line = 436
  3885
  3886 3C4C A9 01			lda #$01
  3887 3C4E 8D 05 B1			sta BLT.SRC_STEP_X
  3888
  3889 				; optimize OK (service.pas), line = 437
  3890
  3891 3C51 8D 0B B1			sta BLT.DST_STEP_X
  3892
  3893 				; optimize OK (service.pas), line = 439
  3894
  3895 3C54 A9 00			lda #$00
  3896 3C56 8D 03 B1			sta BLT.SRC_STEP_Y
  3897 3C59 8D 04 B1			sta BLT.SRC_STEP_Y+1
  3898
  3899 				; optimize OK (service.pas), line = 440
  3900
  3901 3C5C 8D 09 B1			sta BLT.DST_STEP_Y
  3902 3C5F 8D 0A B1			sta BLT.DST_STEP_Y+1
  3903
  3904 				; optimize OK (service.pas), line = 442
  3905
  3906 3C62 8D 0E B1			sta BLT.BLT_HEIGHT
  3907
  3908 				; optimize OK (service.pas), line = 443
  3909
  3910 3C65 8D 14 B1			sta BLT.BLT_CONTROL
  3911
  3912 				; optimize OK (service.pas), line = 445
  3913
  3914 3C68 AD 06 9F			lda SIZE
  3915 3C6B 38 E9 01			sub #$01
  3916 3C6E 8D 0C B1			sta BLT.BLT_WIDTH
  3917 3C71 AD 07 9F			lda SIZE+1
  3918 3C74 E9 00			sbc #$00
  3919 3C76 8D 0D B1			sta BLT.BLT_WIDTH+1
  3920
  3921 				; optimize OK (service.pas), line = 447
  3922
  3923 3C79 A9 FF			lda #$FF
  3924 3C7B 8D 0F B1			sta BLT.BLT_AND_MASK
  3925
  3926 				; -------------------  ASM Block 00000146  -------------------
  3927
  3928 3C7E				  fxs FX_MEMS #$00
Macro: FXS [Source: vbxe.hea]
     2 3C7E A9 00		        lda     #$00
     3 3C80 A0 5F		        ldy     #FX_MEMS
     4 3C82 91 80		        sta     (fxptr),y
Source: arkanoid_vbxe.a65
  3929 					
  3930 				; optimize OK (service.pas), line = 453
  3931
  3932 3C84 AD 31 9C			lda BLT
  3933 3C87 8D AC 9D			sta VBXE.RUNBCB.A
  3934 3C8A AD 32 9C			lda BLT+1
  3935 3C8D 8D AD 9D			sta VBXE.RUNBCB.A+1
  3936 3C90 20 85 38			jsr VBXE.RUNBCB
  3937
  3938 				; ------------------------------------------------------------
  3939
  3940 = 9EFE			SRC	= DATAORIGIN+$022C
  3941 = 9F02			DST	= DATAORIGIN+$0230
  3942 = 9F06			SIZE	= DATAORIGIN+$0234
  3943
  3944 = 9EFE			@VarData	= SRC
  3945 = 000A			@VarDataSize	= 10
  3946
  3947 3C93			@exit
  3948 					.ifdef @new
  3949 					lda <@VarData
  3950 					sta :ztmp
  3951 					lda >@VarData
  3952 					ldy #@VarDataSize-1
  3953 					jmp @FreeMem
  3954 					els
  3955 3C93 60				rts						; ret
  3956 					eif
  3957 				.endl
  3958
  3959 3C94			.local	PUTBYTE						; PROCEDURE
  3960
  3961 				; optimize OK (service.pas), line = 480
  3962
  3963 3C94 AD 08 9F			lda DST
  3964 3C97 8D B1 9D			sta VBXE_RAM.POSITION
  3965 3C9A AD 09 9F			lda DST+1
  3966 3C9D 8D B2 9D			sta VBXE_RAM.POSITION+1
  3967 3CA0 AD 0A 9F			lda DST+2
  3968 3CA3 8D B3 9D			sta VBXE_RAM.POSITION+2
  3969 3CA6 AD 0B 9F			lda DST+3
  3970 3CA9 8D B4 9D			sta VBXE_RAM.POSITION+3
  3971
  3972 				; optimize OK (service.pas), line = 481
  3973
  3974 3CAC AD 0C 9F			lda V
  3975 3CAF 8D 8C 9D			sta VBXE.TVBXEMEMORYSTREAM.WRITEBYTE.B
  3976 3CB2 AD 37 9C			lda VBXE_RAM
  3977 3CB5 AC 38 9C			ldy VBXE_RAM+1
  3978 3CB8 20 83 36			jsr VBXE.TVBXEMEMORYSTREAM.WRITEBYTE
  3979
  3980 				; ------------------------------------------------------------
  3981
  3982 = 9F08			DST	= DATAORIGIN+$0236
  3983 = 9F0C			V	= DATAORIGIN+$023A
  3984
  3985 = 9F08			@VarData	= DST
  3986 = 0005			@VarDataSize	= 5
  3987
  3988 3CBB			@exit
  3989 					.ifdef @new
  3990 					lda <@VarData
  3991 					sta :ztmp
  3992 					lda >@VarData
  3993 					ldy #@VarDataSize-1
  3994 					jmp @FreeMem
  3995 					els
  3996 3CBB 60				rts						; ret
  3997 					eif
  3998 				.endl
  3999
  4000 3CBC			.local	GETBYTE						; FUNCTION
  4001
  4002 				; optimize OK (service.pas), line = 491
  4003
  4004 3CBC AD 0D 9F			lda SRC
  4005 3CBF 8D B1 9D			sta VBXE_RAM.POSITION
  4006 3CC2 AD 0E 9F			lda SRC+1
  4007 3CC5 8D B2 9D			sta VBXE_RAM.POSITION+1
  4008 3CC8 AD 0F 9F			lda SRC+2
  4009 3CCB 8D B3 9D			sta VBXE_RAM.POSITION+2
  4010 3CCE AD 10 9F			lda SRC+3
  4011 3CD1 8D B4 9D			sta VBXE_RAM.POSITION+3
  4012
  4013 				; optimize FAIL ('VBXE.TVBXEMEMORYSTREAM.READBYTE', service.pas), line = 492
  4014
  4015 3CD4 AD 37 9C			lda VBXE_RAM
  4016 3CD7 AC 38 9C			ldy VBXE_RAM+1
  4017 3CDA 20 50 36			jsr VBXE.TVBXEMEMORYSTREAM.READBYTE
  4018 3CDD AD 7D 9D			lda VBXE.TVBXEMEMORYSTREAM.READBYTE.RESULT
  4019 3CE0 8D 11 9F			sta RESULT
  4020 3CE3			@exit
  4021
  4022 				; ------------------------------------------------------------
  4023
  4024 = 9F0D			SRC	= DATAORIGIN+$023B
  4025 = 9F11			RESULT	= DATAORIGIN+$023F
  4026
  4027 = 9F0D			@VarData	= SRC
  4028 = 0004			@VarDataSize	= 4
  4029
  4030 3CE3 60				rts						; ret
  4031 				.endl
  4032
  4033 3CE4			.local	NOSOUND						; PROCEDURE
  4034
  4035 3CE4			@exit
  4036 					.ifdef @new
  4037 					lda <@VarData
  4038 					sta :ztmp
  4039 					lda >@VarData
  4040 					ldy #@VarDataSize-1
  4041 					jmp @FreeMem
  4042 					els
  4043 3CE4 60				rts						; ret
  4044 					eif
  4045 				.endl
  4046
  4047 3CE5			.local	MYDELAY						; PROCEDURE
  4048
  4049 				; ------------------------------------------------------------
  4050
  4051 = 9F12			A	= DATAORIGIN+$0240
  4052
  4053 = 9F12			@VarData	= A
  4054 = 0002			@VarDataSize	= 2
  4055
  4056 3CE5			@exit
  4057 					.ifdef @new
  4058 					lda <@VarData
  4059 					sta :ztmp
  4060 					lda >@VarData
  4061 					ldy #@VarDataSize-1
  4062 					jmp @FreeMem
  4063 					els
  4064 3CE5 60				rts						; ret
  4065 					eif
  4066 				.endl
  4067
  4068 3CE6			.local	MAX						; FUNCTION
  4069
  4070 				; optimize OK (service.pas), line = 618
  4071
  4072 3CE6 AD 16 9F			lda B
  4073 3CE9 CD 14 9F			cmp A
  4074 3CEC AD 17 9F			lda B+1
  4075 3CEF ED 15 9F			sbc A+1
  4076 3CF2 50 02			svc
  4077 3CF4 49 80			eor #$80
  4078 3CF6 10 0C			jpl l_071F
  4079 3CF8 AD 14 9F			lda A
  4080 3CFB 8D 18 9F			sta RESULT
  4081 3CFE AD 15 9F			lda A+1
  4082 3D01 4C 0D 3D			jmp l_072E
  4083 3D04			l_071F
  4084
  4085 				; optimize OK (service.pas), line = 619
  4086
  4087 3D04 AD 16 9F			lda B
  4088 3D07 8D 18 9F			sta RESULT
  4089 3D0A AD 17 9F			lda B+1
  4090 3D0D			l_072E
  4091 3D0D 8D 19 9F			sta RESULT+1
  4092 3D10			@exit
  4093
  4094 				; ------------------------------------------------------------
  4095
  4096 = 9F14			A	= DATAORIGIN+$0242
  4097 = 9F16			B	= DATAORIGIN+$0244
  4098 = 9F18			RESULT	= DATAORIGIN+$0246
  4099
  4100 = 9F14			@VarData	= A
  4101 = 0004			@VarDataSize	= 4
  4102
  4103 3D10 60				rts						; ret
  4104 				.endl
  4105
  4106 3D11			.local	MIN						; FUNCTION
  4107
  4108 				; optimize OK (service.pas), line = 625
  4109
  4110 3D11 AD 1A 9F			lda A
  4111 3D14 CD 1C 9F			cmp B
  4112 3D17 AD 1B 9F			lda A+1
  4113 3D1A ED 1D 9F			sbc B+1
  4114 3D1D 50 02			svc
  4115 3D1F 49 80			eor #$80
  4116 3D21 10 0C			jpl l_0749
  4117 3D23 AD 1A 9F			lda A
  4118 3D26 8D 1E 9F			sta RESULT
  4119 3D29 AD 1B 9F			lda A+1
  4120 3D2C 4C 38 3D			jmp l_0758
  4121 3D2F			l_0749
  4122
  4123 				; optimize OK (service.pas), line = 626
  4124
  4125 3D2F AD 1C 9F			lda B
  4126 3D32 8D 1E 9F			sta RESULT
  4127 3D35 AD 1D 9F			lda B+1
  4128 3D38			l_0758
  4129 3D38 8D 1F 9F			sta RESULT+1
  4130 3D3B			@exit
  4131
  4132 				; ------------------------------------------------------------
  4133
  4134 = 9F1A			A	= DATAORIGIN+$0248
  4135 = 9F1C			B	= DATAORIGIN+$024A
  4136 = 9F1E			RESULT	= DATAORIGIN+$024C
  4137
  4138 = 9F1A			@VarData	= A
  4139 = 0004			@VarDataSize	= 4
  4140
  4141 3D3B 60				rts						; ret
  4142 				.endl
  4143
  4144 3D3C			.local	FATAL_ERROR					; PROCEDURE
  4145 3D3C 8D 20 9F			sta ERR_TYPE
  4146
  4147 				; optimize OK (service.pas), line = 635
  4148
  4149 3D3F 8D 92 9E			sta STATUS
  4150
  4151 				; -------------------  ASM Block 00000147  -------------------
  4152
  4153 3D42 8D 00 01		      sta $100
  4154 				      
  4155 3D45 AD 0A D2		      kk: lda $d20a
  4156 3D48 8D 1A D0		      sta $d01a
  4157 3D4B 4C 45 3D		      jmp kk
  4158 				    
  4159 				    
  4160 				; ------------------------------------------------------------
  4161
  4162 = 9F20			ERR_TYPE	= DATAORIGIN+$024E
  4163
  4164 = 9F20			@VarData	= ERR_TYPE
  4165 = 0001			@VarDataSize	= 1
  4166
  4167 3D4E			@exit
  4168 					.ifdef @new
  4169 					lda <@VarData
  4170 					sta :ztmp
  4171 					lda >@VarData
  4172 					ldy #@VarDataSize-1
  4173 					jmp @FreeMem
  4174 					els
  4175 3D4E 60				rts						; ret
  4176 					eif
  4177 				.endl
  4178
  4179 3D4F			.local	INITROWARRAY					; PROCEDURE
  4180
  4181 				; optimize OK (service.pas), line = 683
  4182
  4183 3D4F A9 00			lda #$00
  4184 3D51 8D D8 9E			sta HLP
  4185 3D54 8D D9 9E			sta HLP+1
  4186
  4187 				; optimize OK (service.pas), line = 685
  4188
  4189 3D57 8D 21 9F			sta Y
  4190
  4191 3D5A			l_0778
  4192 				; --- ForToDoCondition
  4193 3D5A AC 21 9F			ldy Y
  4194 3D5D C0 C8			cpy #$C8
  4195 3D5F 90 0A			jcc l_0798
  4196
  4197 				; optimize OK (service.pas), line = 688
  4198
  4199 3D61 A9 00			lda #$00
  4200 3D63 99 00 C0			sta adr.ROW,y
  4201 3D66 A9 FA			lda #$FA
  4202 3D68 4C 77 3D			jmp l_07A9
  4203 3D6B			l_0798
  4204
  4205 				; optimize OK (service.pas), line = 690
  4206
  4207 3D6B AC 21 9F			ldy Y
  4208 3D6E AD D8 9E			lda HLP
  4209 3D71 99 00 C0			sta adr.ROW,y
  4210 3D74 AD D9 9E			lda HLP+1
  4211 3D77			l_07A9
  4212 3D77 99 00 C1			sta adr.ROW+256,y
  4213
  4214 				; optimize OK (service.pas), line = 692
  4215
  4216 3D7A AD D8 9E			lda HLP
  4217 3D7D 18 69 40			add #$40
  4218 3D80 8D D8 9E			sta HLP
  4219 3D83 AD D9 9E			lda HLP+1
  4220 3D86 69 01			adc #$01
  4221 3D88 8D D9 9E			sta HLP+1
  4222
  4223 				; --- ForToDoEpilog
  4224 3D8B EE 21 9F			inc Y
  4225 3D8E D0 CA			jne l_0778
  4226 3D90			l_0786
  4227
  4228 				; ------------------------------------------------------------
  4229
  4230 = 9F21			Y	= DATAORIGIN+$024F
  4231
  4232 = 9F21			@VarData	= Y
  4233 = 0001			@VarDataSize	= 1
  4234
  4235 3D90			@exit
  4236 					.ifdef @new
  4237 					lda <@VarData
  4238 					sta :ztmp
  4239 					lda >@VarData
  4240 					ldy #@VarDataSize-1
  4241 					jmp @FreeMem
  4242 					els
  4243 3D90 60				rts						; ret
  4244 					eif
  4245 				.endl
  4246
  4247 3D91			.local	INITSVGA					; PROCEDURE
  4248
  4249 				; optimize OK (service.pas), line = 708
  4250
  4251 3D91 AD 0F 9D			lda GRAPH.GRAPHRESULT
  4252 3D94 C9 01			cmp #$01
  4253 3D96 F0 0F			jeq l_07CD
  4254
  4255 				; optimize FAIL ('@print', service.pas), line = 709
  4256
  4257 					@printSTRING #CODEORIGIN+$0000
  4257 				 LDY> CODEORIGIN+$0000\ LDA< CODEORIGIN+$0000\ JSR @PRINTSTRING
  4257 3D98 A0 20		 LDY> CODEORIGIN+$0000
  4257 3D9A A9 00		 LDA< CODEORIGIN+$0000
  4257 3D9C 20 50 27		 JSR @PRINTSTRING
  4258 3D9F 20 3A 27			@printEOL
  4259 3DA2 A9 00			lda #$00
  4260 3DA4 4C 28 9C			jmp @halt
  4261 3DA7			l_07CD
  4262
  4263 				; optimize OK (service.pas), line = 713
  4264
  4265 3DA7 A9 1F			lda #$1F
  4266 3DA9 20 71 38			jsr VBXE.SETHORIZONTALRES.@010180000
  4267
  4268 				; optimize FAIL ('VBXE.COLORMAPOFF', service.pas), line = 714
  4269
  4270 3DAC 20 C9 37			jsr VBXE.COLORMAPOFF
  4271
  4272 				; optimize OK (service.pas), line = 716
  4273
  4274 3DAF A9 07			lda #$07
  4275 3DB1 20 A2 38			jsr VBXE.VBXECONTROL
  4276
  4277 				; optimize OK (service.pas), line = 718
  4278
  4279 3DB4 A9 14			lda #$14
  4280 3DB6 20 27 33			jsr VBXE.SETTOPBORDER
  4281
  4282 				; optimize OK (service.pas), line = 719
  4283
  4284 3DB9 A9 C8			lda #$C8
  4285 3DBB 20 40 33			jsr VBXE.SETXDLHEIGHT
  4286
  4287 				; optimize OK (service.pas), line = 721
  4288
  4289 3DBE A9 00			lda #$00
  4290 3DC0 8D B1 9D			sta VBXE_RAM.POSITION
  4291 3DC3 A9 50			lda #$50
  4292 3DC5 8D B2 9D			sta VBXE_RAM.POSITION+1
  4293 3DC8 A9 00			lda #$00
  4294 3DCA 8D B3 9D			sta VBXE_RAM.POSITION+2
  4295 3DCD 8D B4 9D			sta VBXE_RAM.POSITION+3
  4296
  4297 				; optimize OK (service.pas), line = 722
  4298
  4299 3DD0 8D B5 9D			sta VBXE_RAM.SIZE
  4300 3DD3 A9 FA			lda #$FA
  4301 3DD5 8D B6 9D			sta VBXE_RAM.SIZE+1
  4302 3DD8 A9 00			lda #$00
  4303 3DDA 8D B7 9D			sta VBXE_RAM.SIZE+2
  4304 3DDD 8D B8 9D			sta VBXE_RAM.SIZE+3
  4305
  4306 				; optimize FAIL ('VBXE.TVBXEMEMORYSTREAM.CLEAR', service.pas), line = 723
  4307
  4308 3DE0 AD 37 9C			lda VBXE_RAM
  4309 3DE3 AC 38 9C			ldy VBXE_RAM+1
  4310 3DE6 20 B6 36			jsr VBXE.TVBXEMEMORYSTREAM.CLEAR
  4311
  4312 				; optimize OK (service.pas), line = 725
  4313
  4314 3DE9 A9 00			lda #$00
  4315 3DEB 8D 00 D4			sta ATARI.DMACTL
  4316
  4317 				; -------------------  ASM Block 00000148  -------------------
  4318
  4319 3DEE				  fxs FX_MEMS #$80
Macro: FXS [Source: vbxe.hea]
     2 3DEE A9 80		        lda     #$80
     3 3DF0 A0 5F		        ldy     #FX_MEMS
     4 3DF2 91 80		        sta     (fxptr),y
Source: arkanoid_vbxe.a65
  4320 					
  4321 				; optimize OK (service.pas), line = 731
  4322
  4323 3DF4 AD 31 9C			lda BLT
  4324 3DF7 85 84			sta :bp2
  4325 3DF9 AD 32 9C			lda BLT+1
  4326 3DFC 85 85			sta :bp2+1
  4327 3DFE A9 00			lda #$00
  4328 3E00 A0 14			ldy #$14
  4329 3E02 91 84 88 10 FB		sta:rpl (:bp2),y-
  4330
  4331 				; -------------------  ASM Block 00000149  -------------------
  4332
  4333 3E07				  fxs FX_MEMS #$00
Macro: FXS [Source: vbxe.hea]
     2 3E07 A9 00		        lda     #$00
     3 3E09 A0 5F		        ldy     #FX_MEMS
     4 3E0B 91 80		        sta     (fxptr),y
Source: arkanoid_vbxe.a65
  4334 					
  4335 3E0D			@exit
  4336 					.ifdef @new
  4337 					lda <@VarData
  4338 					sta :ztmp
  4339 					lda >@VarData
  4340 					ldy #@VarDataSize-1
  4341 					jmp @FreeMem
  4342 					els
  4343 3E0D 60				rts						; ret
  4344 					eif
  4345 				.endl
  4346
  4347 3E0E			.local	SHINE_BLOCK					; PROCEDURE
  4348
  4349 				; optimize OK (service.pas), line = 775
  4350
  4351 3E0E AD B2 9E			lda SHINEREC.XB
  4352 3E11 8D 22 9F			sta XB
  4353 3E14 A9 00			lda #$00
  4354 3E16 8D 23 9F			sta XB+1
  4355
  4356 				; optimize OK (service.pas), line = 776
  4357
  4358 3E19 AD B3 9E			lda SHINEREC.YB
  4359 3E1C 8D 24 9F			sta YB
  4360 3E1F A9 00			lda #$00
  4361 3E21 8D 25 9F			sta YB+1
  4362
  4363 				; optimize OK (service.pas), line = 778
  4364
  4365 3E24 AD 24 9F			lda YB
  4366 3E27 0A				asl @
  4367 3E28 0A				asl @
  4368 3E29 0A				asl @
  4369 3E2A 0A				asl @
  4370 3E2B 18 6D 22 9F			add XB
  4371 3E2F 8D 31 9F			sta I
  4372
  4373 				; optimize OK (service.pas), line = 780
  4374
  4375 3E32 A8				tay
  4376 3E33 B9 00 DB			lda adr.WALL,y
  4377 3E36 C9 09			cmp #$09
  4378 3E38 B0 03 4C 8B 3F		jcc l_0820
  4379
  4380 				; optimize OK (service.pas), line = 782
  4381
  4382 3E3D AD B4 9E			lda SHINEREC.FRAME
  4383 3E40 4A				lsr @
  4384 3E41 8D 26 9F			sta FRAME
  4385 3E44 A9 00			lda #$00
  4386 3E46 8D 27 9F			sta FRAME+1
  4387
  4388 				; optimize OK (service.pas), line = 783
  4389
  4390 3E49 B9 00 DB			lda adr.WALL,y
  4391 3E4C C9 0A			cmp #$0A
  4392 3E4E F0 0E			jeq l_0840
  4393 3E50 AD 26 9F			lda FRAME
  4394 3E53 18 69 05			add #$05
  4395 3E56 8D 26 9F			sta FRAME
  4396 3E59 90 03			scc
  4397 3E5B EE 27 9F			inc FRAME+1
  4398 3E5E			l_0840
  4399
  4400 				; optimize OK (service.pas), line = 785
  4401
  4402 3E5E AD 22 9F			lda XB
  4403 3E61 85 A0			sta :STACKORIGIN+10
  4404 3E63 AD 23 9F			lda XB+1
  4405 3E66 85 B0			sta :STACKORIGIN+STACKWIDTH+10
  4406 3E68 06 A0			asl :STACKORIGIN+10
  4407 3E6A 26 B0			rol :STACKORIGIN+STACKWIDTH+10
  4408 3E6C 06 A0			asl :STACKORIGIN+10
  4409 3E6E 26 B0			rol :STACKORIGIN+STACKWIDTH+10
  4410 3E70 06 A0			asl :STACKORIGIN+10
  4411 3E72 26 B0			rol :STACKORIGIN+STACKWIDTH+10
  4412 3E74 06 A0			asl :STACKORIGIN+10
  4413 3E76 26 B0			rol :STACKORIGIN+STACKWIDTH+10
  4414 3E78 A9 09			lda #$09
  4415 3E7A 18 65 A0			add :STACKORIGIN+10
  4416 3E7D 8D 28 9F			sta XF
  4417 3E80 A9 00			lda #$00
  4418 3E82 65 B0			adc :STACKORIGIN+STACKWIDTH+10
  4419 3E84 8D 29 9F			sta XF+1
  4420
  4421 				; optimize OK (service.pas), line = 786
  4422
  4423 3E87 AD 24 9F			lda YB
  4424 3E8A 85 A0			sta :STACKORIGIN+10
  4425 3E8C AD 25 9F			lda YB+1
  4426 3E8F 85 B0			sta :STACKORIGIN+STACKWIDTH+10
  4427 3E91 06 A0			asl :STACKORIGIN+10
  4428 3E93 26 B0			rol :STACKORIGIN+STACKWIDTH+10
  4429 3E95 06 A0			asl :STACKORIGIN+10
  4430 3E97 26 B0			rol :STACKORIGIN+STACKWIDTH+10
  4431 3E99 06 A0			asl :STACKORIGIN+10
  4432 3E9B 26 B0			rol :STACKORIGIN+STACKWIDTH+10
  4433 3E9D A9 16			lda #$16
  4434 3E9F 18 65 A0			add :STACKORIGIN+10
  4435 3EA2 8D 2A 9F			sta YF
  4436 3EA5 A9 00			lda #$00
  4437 3EA7 65 B0			adc :STACKORIGIN+STACKWIDTH+10
  4438 3EA9 8D 2B 9F			sta YF+1
  4439
  4440 				; optimize OK (service.pas), line = 787
  4441
  4442 3EAC AD 26 9F			lda FRAME
  4443 3EAF 85 9F			sta :STACKORIGIN+9
  4444 3EB1 AD 27 9F			lda FRAME+1
  4445 3EB4 06 9F			asl :STACKORIGIN+9
  4446 3EB6 2A				rol @
  4447 3EB7 06 9F			asl :STACKORIGIN+9
  4448 3EB9 2A				rol @
  4449 3EBA 06 9F			asl :STACKORIGIN+9
  4450 3EBC 2A				rol @
  4451 3EBD 06 9F			asl :STACKORIGIN+9
  4452 3EBF 2A				rol @
  4453 3EC0 06 9F			asl :STACKORIGIN+9
  4454 3EC2 2A				rol @
  4455 3EC3 06 9F			asl :STACKORIGIN+9
  4456 3EC5 2A				rol @
  4457 3EC6 06 9F			asl :STACKORIGIN+9
  4458 3EC8 2A				rol @
  4459 3EC9 8D 2D 9F			sta FR+1
  4460 3ECC A5 9F			lda :STACKORIGIN+9
  4461 3ECE 8D 2C 9F			sta FR
  4462
  4463 				; optimize OK (service.pas), line = 789
  4464
  4465 3ED1 A9 00			lda #$00
  4466 3ED3 8D 30 9F			sta Y
  4467
  4468 3ED6			l_0870
  4469 				; --- ForToDoCondition
  4470 3ED6 AD 30 9F			lda Y
  4471 3ED9 C9 08			cmp #$08
  4472 3EDB 90 03 4C 8B 3F		jcs l_087E
  4473
  4474 				; optimize OK (service.pas), line = 791
  4475
  4476 3EE0 85 9F			sta :STACKORIGIN+9
  4477 3EE2 A9 00			lda #$00
  4478 3EE4 06 9F			asl :STACKORIGIN+9
  4479 3EE6 2A				rol @
  4480 3EE7 06 9F			asl :STACKORIGIN+9
  4481 3EE9 2A				rol @
  4482 3EEA 06 9F			asl :STACKORIGIN+9
  4483 3EEC 2A				rol @
  4484 3EED 06 9F			asl :STACKORIGIN+9
  4485 3EEF 2A				rol @
  4486 3EF0 8D 2F 9F			sta OG+1
  4487 3EF3 A5 9F			lda :STACKORIGIN+9
  4488 3EF5 8D 2E 9F			sta OG
  4489
  4490 				; optimize OK (service.pas), line = 794
  4491
  4492 3EF8 AD 28 9F			lda XF
  4493 3EFB 85 A0			sta :STACKORIGIN+10
  4494 3EFD A9 50			lda #$50
  4495 3EFF 18 6D 29 9F			add XF+1
  4496 3F03 85 B0			sta :STACKORIGIN+STACKWIDTH+10
  4497 3F05 A9 00			lda #$00
  4498 3F07 69 00			adc #$00
  4499 3F09 85 C0			sta :STACKORIGIN+STACKWIDTH*2+10
  4500 3F0B A9 00			lda #$00
  4501 3F0D 69 00			adc #$00
  4502 3F0F 85 D0			sta :STACKORIGIN+STACKWIDTH*3+10
  4503 3F11 AD 2A 9F			lda YF
  4504 3F14 18 6D 30 9F			add Y
  4505 3F18 A8				tay
  4506 3F19 A5 A0			lda :STACKORIGIN+10
  4507 3F1B 18 79 00 C0			add adr.ROW,y
  4508 3F1F 8D 02 9F			sta BLITROW.DST
  4509 3F22 A5 B0			lda :STACKORIGIN+STACKWIDTH+10
  4510 3F24 79 00 C1			adc adr.ROW+256,y
  4511 3F27 8D 03 9F			sta BLITROW.DST+1
  4512 3F2A A5 C0			lda :STACKORIGIN+STACKWIDTH*2+10
  4513 3F2C 69 00			adc #$00
  4514 3F2E 8D 04 9F			sta BLITROW.DST+2
  4515 3F31 A5 D0			lda :STACKORIGIN+STACKWIDTH*3+10
  4516 3F33 69 00			adc #$00
  4517 3F35 8D 05 9F			sta BLITROW.DST+3
  4518 3F38 AD 29 9E			lda SHINEWALL.OFS
  4519 3F3B 18 6D 2C 9F			add FR
  4520 3F3F 85 A1			sta :STACKORIGIN+11
  4521 3F41 AD 2A 9E			lda SHINEWALL.OFS+1
  4522 3F44 6D 2D 9F			adc FR+1
  4523 3F47 85 B1			sta :STACKORIGIN+STACKWIDTH+11
  4524 3F49 AD 2B 9E			lda SHINEWALL.OFS+2
  4525 3F4C 69 00			adc #$00
  4526 3F4E 85 C1			sta :STACKORIGIN+STACKWIDTH*2+11
  4527 3F50 AD 2C 9E			lda SHINEWALL.OFS+3
  4528 3F53 69 00			adc #$00
  4529 3F55 85 D1			sta :STACKORIGIN+STACKWIDTH*3+11
  4530 3F57 A5 A1			lda :STACKORIGIN+11
  4531 3F59 18 6D 2E 9F			add OG
  4532 3F5D 8D FE 9E			sta BLITROW.SRC
  4533 3F60 A5 B1			lda :STACKORIGIN+STACKWIDTH+11
  4534 3F62 6D 2F 9F			adc OG+1
  4535 3F65 8D FF 9E			sta BLITROW.SRC+1
  4536 3F68 A5 C1			lda :STACKORIGIN+STACKWIDTH*2+11
  4537 3F6A 69 00			adc #$00
  4538 3F6C 8D 00 9F			sta BLITROW.SRC+2
  4539 3F6F A5 D1			lda :STACKORIGIN+STACKWIDTH*3+11
  4540 3F71 69 00			adc #$00
  4541 3F73 8D 01 9F			sta BLITROW.SRC+3
  4542 3F76 A9 10			lda #$10
  4543 3F78 8D 06 9F			sta BLITROW.SIZE
  4544 3F7B A9 00			lda #$00
  4545 3F7D 8D 07 9F			sta BLITROW.SIZE+1
  4546 3F80 20 22 3C			jsr BLITROW
  4547
  4548 				; --- ForToDoEpilog
  4549 3F83 EE 30 9F			inc Y
  4550 3F86 F0 03 4C D6 3E		jne l_0870
  4551 3F8B			l_087E
  4552 3F8B			l_0820
  4553
  4554 				; optimize FAIL (0, service.pas), line = 798
  4555
  4556 3F8B EE B4 9E			inc SHINEREC.FRAME
  4557
  4558 				; optimize OK (service.pas), line = 799
  4559
  4560 3F8E AD B4 9E			lda SHINEREC.FRAME
  4561 3F91 C9 0A			cmp #$0A
  4562 3F93 D0 05			jne l_08C5
  4563 3F95 A9 00			lda #$00
  4564 3F97 8D B6 9E			sta SHINEREC.ACTIVE
  4565 3F9A			l_08C5
  4566
  4567 				; ------------------------------------------------------------
  4568
  4569 = 9F22			XB	= DATAORIGIN+$0250
  4570 = 9F24			YB	= DATAORIGIN+$0252
  4571 = 9F26			FRAME	= DATAORIGIN+$0254
  4572 = 9F28			XF	= DATAORIGIN+$0256
  4573 = 9F2A			YF	= DATAORIGIN+$0258
  4574 = 9F2C			FR	= DATAORIGIN+$025A
  4575 = 9F2E			OG	= DATAORIGIN+$025C
  4576 = 9F30			Y	= DATAORIGIN+$025E
  4577 = 9F31			I	= DATAORIGIN+$025F
  4578
  4579 = 9F22			@VarData	= XB
  4580 = 0010			@VarDataSize	= 16
  4581
  4582 3F9A			@exit
  4583 					.ifdef @new
  4584 					lda <@VarData
  4585 					sta :ztmp
  4586 					lda >@VarData
  4587 					ldy #@VarDataSize-1
  4588 					jmp @FreeMem
  4589 					els
  4590 3F9A 60				rts						; ret
  4591 					eif
  4592 				.endl
  4593
  4594 3F9B			.local	UNSHINE_BLOCK					; PROCEDURE
  4595
  4596 				; optimize OK (service.pas), line = 808
  4597
  4598 3F9B A9 09			lda #$09
  4599 3F9D 8D B4 9E			sta SHINEREC.FRAME
  4600
  4601 				; optimize FAIL ('SHINE_BLOCK', service.pas), line = 809
  4602
  4603 3FA0 20 0E 3E			jsr SHINE_BLOCK
  4604
  4605 3FA3			@exit
  4606 					.ifdef @new
  4607 					lda <@VarData
  4608 					sta :ztmp
  4609 					lda >@VarData
  4610 					ldy #@VarDataSize-1
  4611 					jmp @FreeMem
  4612 					els
  4613 3FA3 60				rts						; ret
  4614 					eif
  4615 				.endl
  4616
  4617 3FA4			.local	SHINE						; PROCEDURE
  4618
  4619 				; optimize OK (service.pas), line = 816
  4620
  4621 3FA4 AD B6 9E			lda SHINEREC.ACTIVE
  4622 3FA7 F0 03			jeq l_08E5
  4623 3FA9 20 9B 3F			jsr UNSHINE_BLOCK
  4624 3FAC			l_08E5
  4625
  4626 				; optimize OK (service.pas), line = 818
  4627
  4628 3FAC AD 32 9F			lda XB
  4629 3FAF 8D B2 9E			sta SHINEREC.XB
  4630
  4631 				; optimize OK (service.pas), line = 819
  4632
  4633 3FB2 AD 33 9F			lda YB
  4634 3FB5 8D B3 9E			sta SHINEREC.YB
  4635
  4636 				; optimize OK (service.pas), line = 820
  4637
  4638 3FB8 A9 00			lda #$00
  4639 3FBA 8D B4 9E			sta SHINEREC.FRAME
  4640
  4641 				; optimize OK (service.pas), line = 821
  4642
  4643 3FBD A9 01			lda #$01
  4644 3FBF 8D B6 9E			sta SHINEREC.ACTIVE
  4645
  4646 				; optimize OK (service.pas), line = 822
  4647
  4648 3FC2 AD 33 9F			lda YB
  4649 3FC5 0A				asl @
  4650 3FC6 0A				asl @
  4651 3FC7 0A				asl @
  4652 3FC8 0A				asl @
  4653 3FC9 18 6D 32 9F			add XB
  4654 3FCD A8				tay
  4655 3FCE B9 00 DB			lda adr.WALL,y
  4656 3FD1 8D B5 9E			sta SHINEREC.BLOCK
  4657
  4658 				; ------------------------------------------------------------
  4659
  4660 = 9F32			XB	= DATAORIGIN+$0260
  4661 = 9F33			YB	= DATAORIGIN+$0261
  4662
  4663 = 9F32			@VarData	= XB
  4664 = 0002			@VarDataSize	= 2
  4665
  4666 3FD4			@exit
  4667 					.ifdef @new
  4668 					lda <@VarData
  4669 					sta :ztmp
  4670 					lda >@VarData
  4671 					ldy #@VarDataSize-1
  4672 					jmp @FreeMem
  4673 					els
  4674 3FD4 60				rts						; ret
  4675 					eif
  4676 				.endl
  4677
  4678 3FD5			.local	CHECKSHINE					; PROCEDURE
  4679
  4680 				; optimize OK (service.pas), line = 828
  4681
  4682 3FD5 AD B6 9E			lda SHINEREC.ACTIVE
  4683 3FD8 C9 01			cmp #$01
  4684 3FDA D0 03			jne l_0926
  4685 3FDC 20 0E 3E			jsr SHINE_BLOCK
  4686 3FDF			l_0926
  4687
  4688 3FDF			@exit
  4689 					.ifdef @new
  4690 					lda <@VarData
  4691 					sta :ztmp
  4692 					lda >@VarData
  4693 					ldy #@VarDataSize-1
  4694 					jmp @FreeMem
  4695 					els
  4696 3FDF 60				rts						; ret
  4697 					eif
  4698 				.endl
  4699
  4700 3FE0			.local	RANDOM_LETTER_DROP				; FUNCTION
  4701
  4702 				; --- RepeatUntilProlog
  4703 3FE0			l_092F
  4704
  4705 				; optimize OK (service.pas), line = 836
  4706
  4707 3FE0 A9 64			lda #$64
  4708 3FE2 20 91 32			jsr SYSTEM.RANDOM.@010180000
  4709 3FE5 AD 09 9D			lda SYSTEM.RANDOM.@010180000.RESULT
  4710 3FE8 8D 36 9F			sta RN
  4711 3FEB A9 00			lda #$00
  4712 3FED 8D 37 9F			sta RN+1
  4713
  4714 				; optimize OK (service.pas), line = 837
  4715
  4716 3FF0 A9 00			lda #$00
  4717 3FF2 8D 38 9F			sta SUM
  4718 3FF5 8D 39 9F			sta SUM+1
  4719
  4720 				; optimize OK (service.pas), line = 838
  4721
  4722 3FF8 8D 3A 9F			sta LETTER
  4723 3FFB 8D 3B 9F			sta LETTER+1
  4724
  4725 				; --- RepeatUntilProlog
  4726 3FFE			l_093D
  4727
  4728 				; optimize FAIL (0, service.pas), line = 843
  4729
  4730 3FFE EE 3A 9F			inc LETTER
  4731 4001 D0 03			sne
  4732 4003 EE 3B 9F			inc LETTER+1
  4733
  4734 				; optimize OK (service.pas), line = 844
  4735
  4736 4006 AC 3A 9F			ldy LETTER
  4737 4009 B9 AD 20			lda adr.LETTER_DIS,y
  4738 400C 18 6D 38 9F			add SUM
  4739 4010 8D 38 9F			sta SUM
  4740 4013 AD 39 9F			lda SUM+1
  4741 4016 69 00			adc #$00
  4742 4018 8D 39 9F			sta SUM+1
  4743
  4744 				; optimize OK (service.pas), line = 847
  4745
  4746 401B AD 37 9F			lda RN+1
  4747 401E CD 39 9F			cmp SUM+1
  4748 4021 D0 06			bne @+
  4749 4023 AD 36 9F			lda RN
  4750 4026 CD 38 9F			cmp SUM
  4751 				@
  4752 4029 B0 D3			jcs l_093D
  4753
  4754 				; optimize OK (service.pas), line = 851
  4755
  4756 402B AD 3A 9F			lda LETTER
  4757 402E 38 E9 01			sub #$01
  4758 4031 85 9F			sta :STACKORIGIN+9
  4759 4033 AD 3B 9F			lda LETTER+1
  4760 4036 E9 00			sbc #$00
  4761 4038 CD CA 9E			cmp LETT.LAST+1
  4762 403B D0 05			bne @+
  4763 403D A5 9F			lda :STACKORIGIN+9
  4764 403F CD C9 9E			cmp LETT.LAST
  4765 				@
  4766 4042 F0 9C			jeq l_092F
  4767
  4768 				; optimize OK (service.pas), line = 853
  4769
  4770 4044 AD 3A 9F			lda LETTER
  4771 4047 38 E9 01			sub #$01
  4772 404A 8D 34 9F			sta RESULT
  4773 404D AD 3B 9F			lda LETTER+1
  4774 4050 E9 00			sbc #$00
  4775 4052 8D 35 9F			sta RESULT+1
  4776 4055			@exit
  4777
  4778 				; ------------------------------------------------------------
  4779
  4780 = 9F34			RESULT	= DATAORIGIN+$0262
  4781 = 9F36			RN	= DATAORIGIN+$0264
  4782 = 9F38			SUM	= DATAORIGIN+$0266
  4783 = 9F3A			LETTER	= DATAORIGIN+$0268
  4784
  4785 = 9F36			@VarData	= RN
  4786 = 0006			@VarDataSize	= 6
  4787
  4788 4055 60				rts						; ret
  4789 				.endl
  4790
  4791 4056			.local	PUT_LETTER					; PROCEDURE
  4792
  4793 4056 4C D5 40			jmp l_0971
  4794
  4795 4059			.local	BLITLETTER					; PROCEDURE
  4796
  4797 				; -------------------  ASM Block 00000150  -------------------
  4798
  4799 4059				  fxs FX_MEMS #$80
Macro: FXS [Source: vbxe.hea]
     2 4059 A9 80		        lda     #$80
     3 405B A0 5F		        ldy     #FX_MEMS
     4 405D 91 80		        sta     (fxptr),y
Source: arkanoid_vbxe.a65
  4800 					
  4801 				; optimize OK (service.pas), line = 870
  4802
  4803 405F AD 43 9F			lda SRC+2
  4804 4062 8D 02 B1			sta BLT.SRC_ADR.BYTE2
  4805
  4806 				; optimize OK (service.pas), line = 871
  4807
  4808 4065 AD 42 9F			lda SRC+1
  4809 4068 8D 01 B1			sta BLT.SRC_ADR.BYTE1
  4810
  4811 				; optimize OK (service.pas), line = 872
  4812
  4813 406B AD 41 9F			lda SRC
  4814 406E 8D 00 B1			sta BLT.SRC_ADR.BYTE0
  4815
  4816 				; optimize OK (service.pas), line = 874
  4817
  4818 4071 AD 47 9F			lda DST+2
  4819 4074 8D 08 B1			sta BLT.DST_ADR.BYTE2
  4820
  4821 				; optimize OK (service.pas), line = 875
  4822
  4823 4077 AD 46 9F			lda DST+1
  4824 407A 8D 07 B1			sta BLT.DST_ADR.BYTE1
  4825
  4826 				; optimize OK (service.pas), line = 876
  4827
  4828 407D AD 45 9F			lda DST
  4829 4080 8D 06 B1			sta BLT.DST_ADR.BYTE0
  4830
  4831 				; optimize OK (service.pas), line = 878
  4832
  4833 4083 A9 01			lda #$01
  4834 4085 8D 05 B1			sta BLT.SRC_STEP_X
  4835
  4836 				; optimize OK (service.pas), line = 879
  4837
  4838 4088 8D 0B B1			sta BLT.DST_STEP_X
  4839
  4840 				; optimize OK (service.pas), line = 881
  4841
  4842 408B 8D 14 B1			sta BLT.BLT_CONTROL
  4843
  4844 				; optimize OK (service.pas), line = 883
  4845
  4846 408E A9 40			lda #$40
  4847 4090 8D 09 B1			sta BLT.DST_STEP_Y
  4848 4093 A9 01			lda #$01
  4849 4095 8D 0A B1			sta BLT.DST_STEP_Y+1
  4850
  4851 				; optimize OK (service.pas), line = 884
  4852
  4853 4098 A9 80			lda #$80
  4854 409A 8D 03 B1			sta BLT.SRC_STEP_Y
  4855 409D A9 00			lda #$00
  4856 409F 8D 04 B1			sta BLT.SRC_STEP_Y+1
  4857
  4858 				; optimize OK (service.pas), line = 886
  4859
  4860 40A2 AC 4B 9F			ldy H
  4861 40A5 88				dey
  4862 40A6 8C 0E B1			sty BLT.BLT_HEIGHT
  4863
  4864 				; optimize OK (service.pas), line = 888
  4865
  4866 40A9 AD 49 9F			lda W
  4867 40AC 38 E9 01			sub #$01
  4868 40AF 8D 0C B1			sta BLT.BLT_WIDTH
  4869 40B2 AD 4A 9F			lda W+1
  4870 40B5 E9 00			sbc #$00
  4871 40B7 8D 0D B1			sta BLT.BLT_WIDTH+1
  4872
  4873 				; optimize OK (service.pas), line = 890
  4874
  4875 40BA A9 FF			lda #$FF
  4876 40BC 8D 0F B1			sta BLT.BLT_AND_MASK
  4877
  4878 				; -------------------  ASM Block 00000151  -------------------
  4879
  4880 40BF				  fxs FX_MEMS #$00
Macro: FXS [Source: vbxe.hea]
     2 40BF A9 00		        lda     #$00
     3 40C1 A0 5F		        ldy     #FX_MEMS
     4 40C3 91 80		        sta     (fxptr),y
Source: arkanoid_vbxe.a65
  4881 					
  4882 				; optimize OK (service.pas), line = 897
  4883
  4884 40C5 AD 31 9C			lda BLT
  4885 40C8 8D AC 9D			sta VBXE.RUNBCB.A
  4886 40CB AD 32 9C			lda BLT+1
  4887 40CE 8D AD 9D			sta VBXE.RUNBCB.A+1
  4888 40D1 20 85 38			jsr VBXE.RUNBCB
  4889
  4890 				; ------------------------------------------------------------
  4891
  4892 = 9F41			SRC	= DATAORIGIN+$026F
  4893 = 9F45			DST	= DATAORIGIN+$0273
  4894 = 9F49			W	= DATAORIGIN+$0277
  4895 = 9F4B			H	= DATAORIGIN+$0279
  4896
  4897 = 9F41			@VarData	= SRC
  4898 = 000B			@VarDataSize	= 11
  4899
  4900 40D4			@exit
  4901 					.ifdef @new
  4902 					lda <@VarData
  4903 					sta :ztmp
  4904 					lda >@VarData
  4905 					ldy #@VarDataSize-1
  4906 					jmp @FreeMem
  4907 					els
  4908 40D4 60				rts						; ret
  4909 					eif
  4910 				.endl
  4911 40D5			l_0971
  4912
  4913 				; optimize OK (service.pas), line = 904
  4914
  4915 40D5 A9 00			lda #$00
  4916 40D7 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
  4917 40D9 AD BD 9E			lda LETT.TYP+1
  4918 40DC 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  4919 40DE AD BC 9E			lda LETT.TYP
  4920 40E1 0A				asl @
  4921 40E2 26 AF			rol :STACKORIGIN+STACKWIDTH+9
  4922 40E4 26 BF			rol :STACKORIGIN+STACKWIDTH*2+9
  4923 40E6 0A				asl @
  4924 40E7 26 AF			rol :STACKORIGIN+STACKWIDTH+9
  4925 40E9 26 BF			rol :STACKORIGIN+STACKWIDTH*2+9
  4926 40EB 85 9F			sta :STACKORIGIN+9
  4927 40ED A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  4928 40EF 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
  4929 40F1 A5 9F			lda :STACKORIGIN+9
  4930 40F3 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  4931 40F5 AD BE 9E			lda LETT.FRAME
  4932 40F8 85 A0			sta :STACKORIGIN+10
  4933 40FA A9 00			lda #$00
  4934 40FC 06 A0			asl :STACKORIGIN+10
  4935 40FE 2A				rol @
  4936 40FF 06 A0			asl :STACKORIGIN+10
  4937 4101 2A				rol @
  4938 4102 06 A0			asl :STACKORIGIN+10
  4939 4104 2A				rol @
  4940 4105 06 A0			asl :STACKORIGIN+10
  4941 4107 2A				rol @
  4942 4108 18 65 AF			add :STACKORIGIN+STACKWIDTH+9
  4943 410B 8D 3D 9F			sta FL+1
  4944 410E A5 A0			lda :STACKORIGIN+10
  4945 4110 8D 3C 9F			sta FL
  4946
  4947 				; optimize OK (service.pas), line = 906
  4948
  4949 4113 AC BB 9E			ldy LETT.Y
  4950 4116 AD BA 9E			lda LETT.X
  4951 4119 18 79 00 C0			add adr.ROW,y
  4952 411D 8D 45 9F			sta BLITLETTER.DST
  4953 4120 A9 50			lda #$50
  4954 4122 79 00 C1			adc adr.ROW+256,y
  4955 4125 8D 46 9F			sta BLITLETTER.DST+1
  4956 4128 A9 00			lda #$00
  4957 412A 69 00			adc #$00
  4958 412C 8D 47 9F			sta BLITLETTER.DST+2
  4959 412F A9 00			lda #$00
  4960 4131 69 00			adc #$00
  4961 4133 8D 48 9F			sta BLITLETTER.DST+3
  4962 4136 AD 41 9E			lda LETTERS.OFS
  4963 4139 18 6D 3C 9F			add FL
  4964 413D 8D 41 9F			sta BLITLETTER.SRC
  4965 4140 AD 42 9E			lda LETTERS.OFS+1
  4966 4143 6D 3D 9F			adc FL+1
  4967 4146 8D 42 9F			sta BLITLETTER.SRC+1
  4968 4149 AD 43 9E			lda LETTERS.OFS+2
  4969 414C 69 00			adc #$00
  4970 414E 8D 43 9F			sta BLITLETTER.SRC+2
  4971 4151 AD 44 9E			lda LETTERS.OFS+3
  4972 4154 69 00			adc #$00
  4973 4156 8D 44 9F			sta BLITLETTER.SRC+3
  4974 4159 A9 10			lda #$10
  4975 415B 8D 49 9F			sta BLITLETTER.W
  4976 415E A9 00			lda #$00
  4977 4160 8D 4A 9F			sta BLITLETTER.W+1
  4978 4163 A9 08			lda #$08
  4979 4165 8D 4B 9F			sta BLITLETTER.H
  4980 4168 20 59 40			jsr BLITLETTER
  4981
  4982 				; ------------------------------------------------------------
  4983
  4984 = 9F3C			FL	= DATAORIGIN+$026A
  4985 = 9F3E			FW	= DATAORIGIN+$026C
  4986 = 9F40			YL	= DATAORIGIN+$026E
  4987
  4988 = 9F3C			@VarData	= FL
  4989 = 0005			@VarDataSize	= 5
  4990
  4991 416B			@exit
  4992 					.ifdef @new
  4993 					lda <@VarData
  4994 					sta :ztmp
  4995 					lda >@VarData
  4996 					ldy #@VarDataSize-1
  4997 					jmp @FreeMem
  4998 					els
  4999 416B 60				rts						; ret
  5000 					eif
  5001 				.endl
  5002
  5003 416C			.local	REMOVE_LETTER					; PROCEDURE
  5004
  5005 				; optimize OK (service.pas), line = 926
  5006
  5007 416C AC BB 9E			ldy LETT.Y
  5008 416F AD BA 9E			lda LETT.X
  5009 4172 18 79 00 C0			add adr.ROW,y
  5010 4176 8D D8 9E			sta HLP
  5011 4179 A9 00			lda #$00
  5012 417B 79 00 C1			adc adr.ROW+256,y
  5013 417E 8D D9 9E			sta HLP+1
  5014
  5015 				; optimize OK (service.pas), line = 928
  5016
  5017 4181 AD BB 9E			lda LETT.Y
  5018 4184 C9 C8			cmp #$C8
  5019 4186 B0 52			jcs l_0A1A
  5020
  5021 				; optimize OK (service.pas), line = 929
  5022
  5023 4188 AD D8 9E			lda HLP
  5024 418B 8D E7 9E			sta BLITBOX.DST
  5025 418E A9 50			lda #$50
  5026 4190 18 6D D9 9E			add HLP+1
  5027 4194 8D E8 9E			sta BLITBOX.DST+1
  5028 4197 A9 00			lda #$00
  5029 4199 69 00			adc #$00
  5030 419B 8D E9 9E			sta BLITBOX.DST+2
  5031 419E A9 00			lda #$00
  5032 41A0 69 00			adc #$00
  5033 41A2 8D EA 9E			sta BLITBOX.DST+3
  5034 41A5 AD E1 9D			lda PLAYSCREEN.OFS
  5035 41A8 18 6D D8 9E			add HLP
  5036 41AC 8D E3 9E			sta BLITBOX.SRC
  5037 41AF AD E2 9D			lda PLAYSCREEN.OFS+1
  5038 41B2 6D D9 9E			adc HLP+1
  5039 41B5 8D E4 9E			sta BLITBOX.SRC+1
  5040 41B8 AD E3 9D			lda PLAYSCREEN.OFS+2
  5041 41BB 69 00			adc #$00
  5042 41BD 8D E5 9E			sta BLITBOX.SRC+2
  5043 41C0 AD E4 9D			lda PLAYSCREEN.OFS+3
  5044 41C3 69 00			adc #$00
  5045 41C5 8D E6 9E			sta BLITBOX.SRC+3
  5046 41C8 A9 10			lda #$10
  5047 41CA 8D EB 9E			sta BLITBOX.W
  5048 41CD A9 00			lda #$00
  5049 41CF 8D EC 9E			sta BLITBOX.W+1
  5050 41D2 A9 08			lda #$08
  5051 41D4 8D ED 9E			sta BLITBOX.H
  5052 41D7 20 EA 3A			jsr BLITBOX
  5053 41DA			l_0A1A
  5054
  5055 				; ------------------------------------------------------------
  5056
  5057 = 9F4C			YL	= DATAORIGIN+$027A
  5058
  5059 = 9F4C			@VarData	= YL
  5060 = 0001			@VarDataSize	= 1
  5061
  5062 41DA			@exit
  5063 					.ifdef @new
  5064 					lda <@VarData
  5065 					sta :ztmp
  5066 					lda >@VarData
  5067 					ldy #@VarDataSize-1
  5068 					jmp @FreeMem
  5069 					els
  5070 41DA 60				rts						; ret
  5071 					eif
  5072 				.endl
  5073
  5074 41DB			.local	DISABLE_LETTER					; PROCEDURE
  5075
  5076 				; optimize FAIL ('REMOVE_LETTER', service.pas), line = 947
  5077
  5078 41DB 20 6C 41			jsr REMOVE_LETTER
  5079
  5080 				; optimize OK (service.pas), line = 948
  5081
  5082 41DE A9 00			lda #$00
  5083 41E0 8D C0 9E			sta LETT.ACTIVE
  5084
  5085 41E3			@exit
  5086 					.ifdef @new
  5087 					lda <@VarData
  5088 					sta :ztmp
  5089 					lda >@VarData
  5090 					ldy #@VarDataSize-1
  5091 					jmp @FreeMem
  5092 					els
  5093 41E3 60				rts						; ret
  5094 					eif
  5095 				.endl
  5096
  5097 41E4			.local	START_LETTER					; PROCEDURE
  5098
  5099 				; optimize OK (service.pas), line = 954
  5100
  5101 41E4 AD C0 9E			lda LETT.ACTIVE
  5102 41E7 F0 03			jeq l_0A45
  5103 41E9 20 DB 41			jsr DISABLE_LETTER
  5104 41EC			l_0A45
  5105
  5106 				; optimize OK (service.pas), line = 956
  5107
  5108 41EC AD 4D 9F			lda XL
  5109 41EF 8D BA 9E			sta LETT.X
  5110
  5111 				; optimize OK (service.pas), line = 957
  5112
  5113 41F2 AD 4F 9F			lda YL
  5114 41F5 8D BB 9E			sta LETT.Y
  5115
  5116 				; optimize OK (service.pas), line = 958
  5117
  5118 41F8 AD 51 9F			lda LETTER
  5119 41FB 8D BC 9E			sta LETT.TYP
  5120 41FE AD 52 9F			lda LETTER+1
  5121 4201 8D BD 9E			sta LETT.TYP+1
  5122
  5123 				; optimize OK (service.pas), line = 959
  5124
  5125 4204 A9 00			lda #$00
  5126 4206 8D BE 9E			sta LETT.FRAME
  5127
  5128 				; optimize OK (service.pas), line = 960
  5129
  5130 4209 8D BF 9E			sta LETT.SUBFRAME
  5131
  5132 				; optimize OK (service.pas), line = 961
  5133
  5134 420C A9 01			lda #$01
  5135 420E 8D C0 9E			sta LETT.ACTIVE
  5136
  5137 				; ------------------------------------------------------------
  5138
  5139 = 9F4D			XL	= DATAORIGIN+$027B
  5140 = 9F4F			YL	= DATAORIGIN+$027D
  5141 = 9F51			LETTER	= DATAORIGIN+$027F
  5142
  5143 = 9F4D			@VarData	= XL
  5144 = 0006			@VarDataSize	= 6
  5145
  5146 4211			@exit
  5147 					.ifdef @new
  5148 					lda <@VarData
  5149 					sta :ztmp
  5150 					lda >@VarData
  5151 					ldy #@VarDataSize-1
  5152 					jmp @FreeMem
  5153 					els
  5154 4211 60				rts						; ret
  5155 					eif
  5156 				.endl
  5157
  5158 4212			.local	CHECK_LETTER					; PROCEDURE
  5159
  5160 				; optimize OK (service.pas), line = 967
  5161
  5162 4212 AD C0 9E			lda LETT.ACTIVE
  5163 4215 D0 03 4C 0B 43		jeq l_0A74
  5164
  5165 				; optimize FAIL ('REMOVE_LETTER', service.pas), line = 969
  5166
  5167 421A 20 6C 41			jsr REMOVE_LETTER
  5168
  5169 				; optimize FAIL (0, service.pas), line = 970
  5170
  5171 421D EE BB 9E			inc LETT.Y
  5172
  5173 				; optimize OK (service.pas), line = 971
  5174
  5175 4220 AD BB 9E			lda LETT.Y
  5176 4223 C9 C8			cmp #$C8
  5177 4225 90 03			jcc l_0A8C
  5178 				; optimize FAIL ('DISABLE_LETTER', service.pas), line = 972
  5179 4227 4C FD 42			jmp l_0A97
  5180 422A			l_0A8C
  5181
  5182 				; optimize FAIL ('PUT_LETTER', service.pas), line = 974
  5183
  5184 422A 20 56 40			jsr PUT_LETTER
  5185
  5186 				; optimize FAIL (0, service.pas), line = 975
  5187
  5188 422D EE BF 9E			inc LETT.SUBFRAME
  5189
  5190 				; optimize OK (service.pas), line = 976
  5191
  5192 4230 AD BF 9E			lda LETT.SUBFRAME
  5193 4233 C9 05			cmp #$05
  5194 4235 D0 08			jne l_0AAE
  5195
  5196 				; optimize OK (service.pas), line = 978
  5197
  5198 4237 A9 00			lda #$00
  5199 4239 8D BF 9E			sta LETT.SUBFRAME
  5200
  5201 				; optimize FAIL (0, service.pas), line = 979
  5202
  5203 423C EE BE 9E			inc LETT.FRAME
  5204 423F			l_0AAE
  5205
  5206 				; optimize OK (service.pas), line = 982
  5207
  5208 423F AD BE 9E			lda LETT.FRAME
  5209 4242 C9 08			cmp #$08
  5210 4244 D0 05			jne l_0ACB
  5211 4246 A9 00			lda #$00
  5212 4248 8D BE 9E			sta LETT.FRAME
  5213 424B			l_0ACB
  5214
  5215 				; optimize OK (service.pas), line = 984
  5216
  5217 424B AD BA 9E			lda LETT.X
  5218 424E 18 69 10			add #$10
  5219 4251 85 A0			sta :STACKORIGIN+10
  5220 4253 A9 00			lda #$00
  5221 4255 69 00			adc #$00
  5222 4257 85 B0			sta :STACKORIGIN+STACKWIDTH+10
  5223 4259 A9 00			lda #$00
  5224 425B C5 B0			cmp :STACKORIGIN+STACKWIDTH+10
  5225 425D D0 05			bne @+
  5226 425F AD 55 9E			lda VAUS.X
  5227 4262 C5 A0			cmp :STACKORIGIN+10
  5228 				@
  5229 4264 90 03 4C 00 43		jcs l_0B24
  5230 				@
  5231 4269 AD 55 9E			lda VAUS.X
  5232 426C 18 6D 5D 9E			add VAUS.WIDTH
  5233 4270 85 A0			sta :STACKORIGIN+10
  5234 4272 A9 00			lda #$00
  5235 4274 69 00			adc #$00
  5236 4276 C9 00			cmp #$00
  5237 4278 D0 05			bne @+
  5238 427A A5 A0			lda :STACKORIGIN+10
  5239 427C CD BA 9E			cmp LETT.X
  5240 				@
  5241 427F 90 7F			jcc l_0B24
  5242 4281 F0 7D			jeq l_0B24
  5243 				@
  5244 4283 AD BB 9E			lda LETT.Y
  5245 4286 18 69 08			add #$08
  5246 4289 85 A1			sta :STACKORIGIN+11
  5247 428B A9 00			lda #$00
  5248 428D 69 00			adc #$00
  5249 428F 85 B1			sta :STACKORIGIN+STACKWIDTH+11
  5250 4291 A9 00			lda #$00
  5251 4293 C5 B1			cmp :STACKORIGIN+STACKWIDTH+11
  5252 4295 D0 05			bne @+
  5253 4297 AD 56 9E			lda VAUS.Y
  5254 429A C5 A1			cmp :STACKORIGIN+11
  5255 				@
  5256 429C B0 62			jcs l_0B24
  5257 				@
  5258 429E AD 56 9E			lda VAUS.Y
  5259 42A1 18 6D 5E 9E			add VAUS.HEIGHT
  5260 42A5 85 A0			sta :STACKORIGIN+10
  5261 42A7 A9 00			lda #$00
  5262 42A9 69 00			adc #$00
  5263 42AB C9 00			cmp #$00
  5264 42AD D0 05			bne @+
  5265 42AF A5 A0			lda :STACKORIGIN+10
  5266 42B1 CD BB 9E			cmp LETT.Y
  5267 				@
  5268 42B4 90 4A			jcc l_0B24
  5269 42B6 F0 48			jeq l_0B24
  5270 				@
  5271
  5272 				; optimize OK (service.pas), line = 987
  5273
  5274 42B8 A9 64			lda #$64
  5275 42BA 8D BB 9D			sta BALL_BLOCK_SOUND.A
  5276 42BD A9 00			lda #$00
  5277 42BF 8D BC 9D			sta BALL_BLOCK_SOUND.A+1
  5278 42C2 A9 0A			lda #$0A
  5279 42C4 8D BD 9D			sta BALL_BLOCK_SOUND.B
  5280 42C7 A9 00			lda #$00
  5281 42C9 8D BE 9D			sta BALL_BLOCK_SOUND.B+1
  5282 42CC 20 D1 38			jsr BALL_BLOCK_SOUND
  5283
  5284 				; optimize OK (service.pas), line = 988
  5285
  5286 42CF AC BC 9E			ldy LETT.TYP
  5287 42D2 C8				iny
  5288 42D3 8C 61 9E			sty VAUS.LETTER
  5289
  5290 				; optimize OK (service.pas), line = 989
  5291
  5292 42D6 AD B1 9E			lda CUR_PLAYER
  5293 42D9 0A				asl @
  5294 42DA 0A				asl @
  5295 42DB A8				tay
  5296 42DC B9 96 9E			lda adr.SCORE.PLAYER,y
  5297 42DF 18 69 E8			add #$E8
  5298 42E2 99 96 9E			sta adr.SCORE.PLAYER,y
  5299 42E5 B9 97 9E			lda adr.SCORE.PLAYER+1,y
  5300 42E8 69 03			adc #$03
  5301 42EA 99 97 9E			sta adr.SCORE.PLAYER+1,y
  5302 42ED B9 98 9E			lda adr.SCORE.PLAYER+2,y
  5303 42F0 69 00			adc #$00
  5304 42F2 99 98 9E			sta adr.SCORE.PLAYER+2,y
  5305 42F5 B9 99 9E			lda adr.SCORE.PLAYER+3,y
  5306 42F8 69 00			adc #$00
  5307 42FA 99 99 9E			sta adr.SCORE.PLAYER+3,y
  5308 42FD			l_0A97
  5309
  5310 				; optimize FAIL ('DISABLE_LETTER', service.pas), line = 990
  5311
  5312 42FD 20 DB 41			jsr DISABLE_LETTER
  5313 4300			l_0B24
  5314
  5315 				; optimize OK (service.pas), line = 994
  5316
  5317 4300 A9 00			lda #$00
  5318 4302 8D C1 9E			sta LETT.INCOMING
  5319 4305 8D C2 9E			sta LETT.INCOMING+1
  5320 4308 4C 42 43			jmp l_0B45
  5321 430B			l_0A74
  5322
  5323 				; optimize OK (service.pas), line = 996
  5324
  5325 430B AD C1 9E			lda LETT.INCOMING
  5326 430E C9 E9			cmp #$E9
  5327 4310 AD C2 9E			lda LETT.INCOMING+1
  5328 4313 E9 03			sbc #$03
  5329 4315 50 02			svc
  5330 4317 49 80			eor #$80
  5331 4319 30 27			jmi l_0B56
  5332
  5333 				; optimize OK (service.pas), line = 997
  5334
  5335 431B AD C3 9E			lda LETT.NEXTX
  5336 431E 8D 4D 9F			sta START_LETTER.XL
  5337 4321 AD C4 9E			lda LETT.NEXTX+1
  5338 4324 8D 4E 9F			sta START_LETTER.XL+1
  5339 4327 AD C5 9E			lda LETT.NEXTY
  5340 432A 8D 4F 9F			sta START_LETTER.YL
  5341 432D AD C6 9E			lda LETT.NEXTY+1
  5342 4330 8D 50 9F			sta START_LETTER.YL+1
  5343 4333 AD C7 9E			lda LETT.NEXTTYPE
  5344 4336 8D 51 9F			sta START_LETTER.LETTER
  5345 4339 AD C8 9E			lda LETT.NEXTTYPE+1
  5346 433C 8D 52 9F			sta START_LETTER.LETTER+1
  5347 433F 20 E4 41			jsr START_LETTER
  5348 4342			l_0B45
  5349 4342			l_0B56
  5350
  5351 4342			@exit
  5352 					.ifdef @new
  5353 					lda <@VarData
  5354 					sta :ztmp
  5355 					lda >@VarData
  5356 					ldy #@VarDataSize-1
  5357 					jmp @FreeMem
  5358 					els
  5359 4342 60				rts						; ret
  5360 					eif
  5361 				.endl
  5362
  5363 4343			.local	SHOWBTMPICTURE					; PROCEDURE
  5364
  5365 				; ------------------------------------------------------------
  5366
  5367 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
  5368 				; as Pointer
  5369 4343 B5 96			lda :STACKORIGIN,x
  5370 4345 85 84			sta :bp2
  5371 4347 B5 A6			lda :STACKORIGIN+STACKWIDTH,x
  5372 4349 85 85			sta :bp2+1
  5373 434B A0 07			ldy #$07
  5374 434D B1 84 99 53 9F 88 + 	mva:rpl (:bp2),y adr.BTM,y-
  5375 4355 CA				dex
  5376 4356			@main
  5377
  5378 				; optimize OK (service.pas), line = 1007
  5379
  5380 4356 AD 57 9F			lda BTM.OFS
  5381 4359 8D E3 9E			sta BLITBOX.SRC
  5382 435C AD 58 9F			lda BTM.OFS+1
  5383 435F 8D E4 9E			sta BLITBOX.SRC+1
  5384 4362 AD 59 9F			lda BTM.OFS+2
  5385 4365 8D E5 9E			sta BLITBOX.SRC+2
  5386 4368 AD 5A 9F			lda BTM.OFS+3
  5387 436B 8D E6 9E			sta BLITBOX.SRC+3
  5388 436E A9 00			lda #$00
  5389 4370 8D E7 9E			sta BLITBOX.DST
  5390 4373 A9 50			lda #$50
  5391 4375 8D E8 9E			sta BLITBOX.DST+1
  5392 4378 A9 00			lda #$00
  5393 437A 8D E9 9E			sta BLITBOX.DST+2
  5394 437D 8D EA 9E			sta BLITBOX.DST+3
  5395 4380 AD 53 9F			lda BTM.WIDTH
  5396 4383 8D EB 9E			sta BLITBOX.W
  5397 4386 AD 54 9F			lda BTM.WIDTH+1
  5398 4389 8D EC 9E			sta BLITBOX.W+1
  5399 438C AD 55 9F			lda BTM.HEIGHT
  5400 438F 8D ED 9E			sta BLITBOX.H
  5401 4392 20 EA 3A			jsr BLITBOX
  5402
  5403 				; ------------------------------------------------------------
  5404
  5405 = 9F53			adr.BTM	= DATAORIGIN+$0281	; [8] RECORD
  5406 4395			.var BTM	= adr.BTM .word
  5407 = 9F53			BTM.WIDTH	= DATAORIGIN+$0281
  5408 = 9F55			BTM.HEIGHT	= DATAORIGIN+$0283
  5409 = 9F57			BTM.OFS	= DATAORIGIN+$0285
  5410
  5411 = 9F53			@VarData	= BTM.WIDTH
  5412 = 0008			@VarDataSize	= 8
  5413
  5414 4395			@exit
  5415 					.ifdef @new
  5416 					lda <@VarData
  5417 					sta :ztmp
  5418 					lda >@VarData
  5419 					ldy #@VarDataSize-1
  5420 					jmp @FreeMem
  5421 					els
  5422 4395 60				rts						; ret
  5423 					eif
  5424 = 4396 53 9F		BTM
  5424 				.endl
  5425
  5426 4398			.local	PLACE_BALL					; PROCEDURE
  5427
  5428 				; optimize OK (service.pas), line = 1028
  5429
  5430 4398 AC 5B 9F 84 84 AC + 	mwy BALL :bp2
  5431 43A2 A0 00			ldy #BALL.X-DATAORIGIN
  5432 43A4 B1 84			lda (:bp2),y
  5433 43A6 38 E9 03			sub #$03
  5434 43A9 85 9F			sta :STACKORIGIN+9
  5435 43AB C8				iny
  5436 43AC B1 84			lda (:bp2),y
  5437 43AE E9 00			sbc #$00
  5438 43B0 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  5439 43B2 A0 02			ldy #BALL.Y-DATAORIGIN
  5440 43B4 B1 84			lda (:bp2),y
  5441 43B6 38 E9 03			sub #$03
  5442 43B9 A8				tay
  5443 43BA A5 9F			lda :STACKORIGIN+9
  5444 43BC 18 79 00 C0			add adr.ROW,y
  5445 43C0 8D D8 9E			sta HLP
  5446 43C3 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  5447 43C5 79 00 C1			adc adr.ROW+256,y
  5448 43C8 8D D9 9E			sta HLP+1
  5449
  5450 				; optimize OK (service.pas), line = 1030
  5451
  5452 43CB AD D8 9E			lda HLP
  5453 43CE 8D F2 9E			sta BLITZERO.DST
  5454 43D1 A9 50			lda #$50
  5455 43D3 18 6D D9 9E			add HLP+1
  5456 43D7 8D F3 9E			sta BLITZERO.DST+1
  5457 43DA A9 00			lda #$00
  5458 43DC 69 00			adc #$00
  5459 43DE 8D F4 9E			sta BLITZERO.DST+2
  5460 43E1 A9 00			lda #$00
  5461 43E3 69 00			adc #$00
  5462 43E5 8D F5 9E			sta BLITZERO.DST+3
  5463 43E8 AD D9 9D			lda BALLDATA.OFS
  5464 43EB 8D EE 9E			sta BLITZERO.SRC
  5465 43EE AD DA 9D			lda BALLDATA.OFS+1
  5466 43F1 8D EF 9E			sta BLITZERO.SRC+1
  5467 43F4 AD DB 9D			lda BALLDATA.OFS+2
  5468 43F7 8D F0 9E			sta BLITZERO.SRC+2
  5469 43FA AD DC 9D			lda BALLDATA.OFS+3
  5470 43FD 8D F1 9E			sta BLITZERO.SRC+3
  5471 4400 A9 05			lda #$05
  5472 4402 8D F6 9E			sta BLITZERO.W
  5473 4405 A9 00			lda #$00
  5474 4407 8D F7 9E			sta BLITZERO.W+1
  5475 440A A9 05			lda #$05
  5476 440C 8D F8 9E			sta BLITZERO.H
  5477 440F 20 6B 3B			jsr BLITZERO
  5478
  5479 				; ------------------------------------------------------------
  5480
  5481 = 9F5B			BALL	= DATAORIGIN+$0289
  5482 = 9CD2			BALL.X	= DATAORIGIN+$0000
  5483 = 9CD4			BALL.Y	= DATAORIGIN+$0002
  5484 = 9CD6			BALL.FINEX	= DATAORIGIN+$0004
  5485 = 9CD8			BALL.FINEY	= DATAORIGIN+$0006
  5486 = 9CDA			BALL.OLDX	= DATAORIGIN+$0008
  5487 = 9CDC			BALL.OLDY	= DATAORIGIN+$000A
  5488 = 9CDE			BALL.SPEED	= DATAORIGIN+$000C
  5489 = 9CE0			BALL.FINESPEED	= DATAORIGIN+$000E
  5490 = 9CE2			BALL.SPEEDX	= DATAORIGIN+$0010
  5491 = 9CE4			BALL.SPEEDY	= DATAORIGIN+$0012
  5492 = 9CE6			BALL.SBD	= DATAORIGIN+$0014
  5493 = 9CE8			BALL.BRWHIT	= DATAORIGIN+$0016
  5494 = 9CE9			BALL.INPLAY	= DATAORIGIN+$0017
  5495 = 9CEA			BALL.LAUNCH	= DATAORIGIN+$0018
  5496 = 9CEB			BALL.ONVAUS	= DATAORIGIN+$0019
  5497 = 9CED			BALL.STM	= DATAORIGIN+$001B
  5498
  5499 = 9F5B			@VarData	= BALL
  5500 = 0002			@VarDataSize	= 2
  5501
  5502 4412			@exit
  5503 					.ifdef @new
  5504 					lda <@VarData
  5505 					sta :ztmp
  5506 					lda >@VarData
  5507 					ldy #@VarDataSize-1
  5508 					jmp @FreeMem
  5509 					els
  5510 4412 60				rts						; ret
  5511 					eif
  5512 				.endl
  5513
  5514 4413			.local	REMOVE_BALL					; PROCEDURE
  5515
  5516 				; optimize OK (service.pas), line = 1057
  5517
  5518 4413 AC 5F 9F 84 84 AC + 	mwy BALL :bp2
  5519 441D A0 08			ldy #BALL.OLDX-DATAORIGIN
  5520 441F B1 84			lda (:bp2),y
  5521 4421 38 E9 03			sub #$03
  5522 4424 85 9F			sta :STACKORIGIN+9
  5523 4426 C8				iny
  5524 4427 B1 84			lda (:bp2),y
  5525 4429 E9 00			sbc #$00
  5526 442B 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  5527 442D A0 0A			ldy #BALL.OLDY-DATAORIGIN
  5528 442F B1 84			lda (:bp2),y
  5529 4431 38 E9 03			sub #$03
  5530 4434 A8				tay
  5531 4435 A5 9F			lda :STACKORIGIN+9
  5532 4437 18 79 00 C0			add adr.ROW,y
  5533 443B 8D D8 9E			sta HLP
  5534 443E A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  5535 4440 79 00 C1			adc adr.ROW+256,y
  5536 4443 8D D9 9E			sta HLP+1
  5537
  5538 				; optimize OK (service.pas), line = 1059
  5539
  5540 4446 AD D8 9E			lda HLP
  5541 4449 8D E7 9E			sta BLITBOX.DST
  5542 444C A9 50			lda #$50
  5543 444E 18 6D D9 9E			add HLP+1
  5544 4452 8D E8 9E			sta BLITBOX.DST+1
  5545 4455 A9 00			lda #$00
  5546 4457 69 00			adc #$00
  5547 4459 8D E9 9E			sta BLITBOX.DST+2
  5548 445C A9 00			lda #$00
  5549 445E 69 00			adc #$00
  5550 4460 8D EA 9E			sta BLITBOX.DST+3
  5551 4463 AD E1 9D			lda PLAYSCREEN.OFS
  5552 4466 18 6D D8 9E			add HLP
  5553 446A 8D E3 9E			sta BLITBOX.SRC
  5554 446D AD E2 9D			lda PLAYSCREEN.OFS+1
  5555 4470 6D D9 9E			adc HLP+1
  5556 4473 8D E4 9E			sta BLITBOX.SRC+1
  5557 4476 AD E3 9D			lda PLAYSCREEN.OFS+2
  5558 4479 69 00			adc #$00
  5559 447B 8D E5 9E			sta BLITBOX.SRC+2
  5560 447E AD E4 9D			lda PLAYSCREEN.OFS+3
  5561 4481 69 00			adc #$00
  5562 4483 8D E6 9E			sta BLITBOX.SRC+3
  5563 4486 A9 05			lda #$05
  5564 4488 8D EB 9E			sta BLITBOX.W
  5565 448B A9 00			lda #$00
  5566 448D 8D EC 9E			sta BLITBOX.W+1
  5567 4490 A9 05			lda #$05
  5568 4492 8D ED 9E			sta BLITBOX.H
  5569 4495 20 EA 3A			jsr BLITBOX
  5570
  5571 				; ------------------------------------------------------------
  5572
  5573 = 9F5F			BALL	= DATAORIGIN+$028D
  5574 = 9CD2			BALL.X	= DATAORIGIN+$0000
  5575 = 9CD4			BALL.Y	= DATAORIGIN+$0002
  5576 = 9CD6			BALL.FINEX	= DATAORIGIN+$0004
  5577 = 9CD8			BALL.FINEY	= DATAORIGIN+$0006
  5578 = 9CDA			BALL.OLDX	= DATAORIGIN+$0008
  5579 = 9CDC			BALL.OLDY	= DATAORIGIN+$000A
  5580 = 9CDE			BALL.SPEED	= DATAORIGIN+$000C
  5581 = 9CE0			BALL.FINESPEED	= DATAORIGIN+$000E
  5582 = 9CE2			BALL.SPEEDX	= DATAORIGIN+$0010
  5583 = 9CE4			BALL.SPEEDY	= DATAORIGIN+$0012
  5584 = 9CE6			BALL.SBD	= DATAORIGIN+$0014
  5585 = 9CE8			BALL.BRWHIT	= DATAORIGIN+$0016
  5586 = 9CE9			BALL.INPLAY	= DATAORIGIN+$0017
  5587 = 9CEA			BALL.LAUNCH	= DATAORIGIN+$0018
  5588 = 9CEB			BALL.ONVAUS	= DATAORIGIN+$0019
  5589 = 9CED			BALL.STM	= DATAORIGIN+$001B
  5590
  5591 = 9F5F			@VarData	= BALL
  5592 = 0002			@VarDataSize	= 2
  5593
  5594 4498			@exit
  5595 					.ifdef @new
  5596 					lda <@VarData
  5597 					sta :ztmp
  5598 					lda >@VarData
  5599 					ldy #@VarDataSize-1
  5600 					jmp @FreeMem
  5601 					els
  5602 4498 60				rts						; ret
  5603 					eif
  5604 				.endl
  5605
  5606 4499			.local	WAIT_VBL					; PROCEDURE
  5607
  5608 				; optimize FAIL ('SYSTEM.PAUSE.@00', service.pas), line = 1093
  5609
  5610 4499 20 7A 32			jsr SYSTEM.PAUSE.@00
  5611
  5612 449C			@exit
  5613 					.ifdef @new
  5614 					lda <@VarData
  5615 					sta :ztmp
  5616 					lda >@VarData
  5617 					ldy #@VarDataSize-1
  5618 					jmp @FreeMem
  5619 					els
  5620 449C 60				rts						; ret
  5621 					eif
  5622 				.endl
  5623
  5624 449D			.local	SET_BALL					; PROCEDURE
  5625
  5626 				; optimize OK (service.pas), line = 1105
  5627
  5628 449D AC 63 9F 84 84 AC + 	mwy BALL :bp2
  5629 44A7 A0 09			ldy #BALL.OLDX-DATAORIGIN+$01
  5630 44A9 B1 84			lda (:bp2),y
  5631 44AB C9 FF			cmp #$FF
  5632 44AD D0 05			bne @+
  5633 44AF 88				dey
  5634 44B0 B1 84			lda (:bp2),y
  5635 44B2 C9 FF			cmp #$FF
  5636 				@
  5637 44B4 F0 13			jeq l_0BD6s
  5638 44B6 A0 0B			ldy #BALL.OLDY-DATAORIGIN+$01
  5639 44B8 B1 84			lda (:bp2),y
  5640 44BA C9 FF			cmp #$FF
  5641 44BC D0 05			bne @+
  5642 44BE 88				dey
  5643 44BF B1 84			lda (:bp2),y
  5644 44C1 C9 FF			cmp #$FF
  5645 				@
  5646 44C3 F0 04			jeq l_0BD6s
  5647 44C5 A9 01 D0 02			lda:sne #$01
  5648 44C9 A9 00		l_0BD6s	lda #$00
  5649 44CB 8D 67 9F			sta B0
  5650
  5651 				; optimize OK (service.pas), line = 1106
  5652
  5653 44CE AC 63 9F 84 84 AC + 	mwy BALL :bp2
  5654 44D8 A0 08			ldy #BALL.OLDX-DATAORIGIN
  5655 44DA B1 84			lda (:bp2),y
  5656 44DC 85 9F			sta :STACKORIGIN+9
  5657 44DE C8				iny
  5658 44DF B1 84			lda (:bp2),y
  5659 44E1 A0 01			ldy #BALL.X-DATAORIGIN+$01
  5660 44E3 D1 84			cmp (:bp2),y
  5661 44E5 D0 05			bne @+
  5662 44E7 88				dey
  5663 44E8 A5 9F			lda :STACKORIGIN+9
  5664 44EA D1 84			cmp (:bp2),y
  5665 				@
  5666 44EC D0 03			bne @+
  5667 44EE 4C F4 44			jmp *+6
  5668 				@\	jmp l_0BEEs
  5668 				@
  5668 44F1 4C 14 45			JMP L_0BEES
  5669 44F4 A0 0A			ldy #BALL.OLDY-DATAORIGIN
  5670 44F6 B1 84			lda (:bp2),y
  5671 44F8 85 A0			sta :STACKORIGIN+10
  5672 44FA C8				iny
  5673 44FB B1 84			lda (:bp2),y
  5674 44FD A0 03			ldy #BALL.Y-DATAORIGIN+$01
  5675 44FF D1 84			cmp (:bp2),y
  5676 4501 D0 05			bne @+
  5677 4503 88				dey
  5678 4504 A5 A0			lda :STACKORIGIN+10
  5679 4506 D1 84			cmp (:bp2),y
  5680 				@
  5681 4508 D0 03			bne @+
  5682 450A 4C 10 45			jmp *+6
  5683 				@\	jmp l_0BEEs
  5683 				@
  5683 450D 4C 14 45			JMP L_0BEES
  5684 4510 A9 00 F0 02			lda:seq #$00
  5685 4514 A9 01		l_0BEEs	lda #$01
  5686 4516 8D 68 9F			sta B1
  5687
  5688 				; optimize OK (service.pas), line = 1108
  5689
  5690 4519 AD 67 9F			lda B0
  5691 451C 2D 68 9F			and B1
  5692 451F F0 0F			jeq l_0C00
  5693
  5694 				; optimize OK (service.pas), line = 1109
  5695
  5696 4521 AD 63 9F			lda BALL
  5697 4524 8D 5F 9F			sta REMOVE_BALL.BALL
  5698 4527 AD 64 9F			lda BALL+1
  5699 452A 8D 60 9F			sta REMOVE_BALL.BALL+1
  5700 452D 20 13 44			jsr REMOVE_BALL
  5701 4530			l_0C00
  5702
  5703 				; optimize OK (service.pas), line = 1111
  5704
  5705 4530 AD 63 9F			lda BALL
  5706 4533 8D 5B 9F			sta PLACE_BALL.BALL
  5707 4536 AD 64 9F			lda BALL+1
  5708 4539 8D 5C 9F			sta PLACE_BALL.BALL+1
  5709 453C 20 98 43			jsr PLACE_BALL
  5710
  5711 				; optimize OK (service.pas), line = 1113
  5712
  5713 453F AC 63 9F 84 84 AC + 	mwy BALL :bp2
  5714 4549 A0 00			ldy #BALL.X-DATAORIGIN
  5715 454B B1 84			lda (:bp2),y
  5716 454D 85 9F			sta :STACKORIGIN+9
  5717 454F C8				iny
  5718 4550 B1 84			lda (:bp2),y
  5719 4552 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  5720 4554 A0 08			ldy #BALL.OLDX-DATAORIGIN
  5721 4556 A5 9F			lda :STACKORIGIN+9
  5722 4558 91 84			sta (:bp2),y
  5723 455A C8				iny
  5724 455B A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  5725 455D 91 84			sta (:bp2),y
  5726
  5727 				; optimize OK (service.pas), line = 1114
  5728
  5729 455F A0 02			ldy #BALL.Y-DATAORIGIN
  5730 4561 B1 84			lda (:bp2),y
  5731 4563 85 9F			sta :STACKORIGIN+9
  5732 4565 C8				iny
  5733 4566 B1 84			lda (:bp2),y
  5734 4568 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  5735 456A A0 0A			ldy #BALL.OLDY-DATAORIGIN
  5736 456C A5 9F			lda :STACKORIGIN+9
  5737 456E 91 84			sta (:bp2),y
  5738 4570 C8				iny
  5739 4571 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  5740 4573 91 84			sta (:bp2),y
  5741
  5742 				; ------------------------------------------------------------
  5743
  5744 = 9F63			BALL	= DATAORIGIN+$0291
  5745 = 9CD2			BALL.X	= DATAORIGIN+$0000
  5746 = 9CD4			BALL.Y	= DATAORIGIN+$0002
  5747 = 9CD6			BALL.FINEX	= DATAORIGIN+$0004
  5748 = 9CD8			BALL.FINEY	= DATAORIGIN+$0006
  5749 = 9CDA			BALL.OLDX	= DATAORIGIN+$0008
  5750 = 9CDC			BALL.OLDY	= DATAORIGIN+$000A
  5751 = 9CDE			BALL.SPEED	= DATAORIGIN+$000C
  5752 = 9CE0			BALL.FINESPEED	= DATAORIGIN+$000E
  5753 = 9CE2			BALL.SPEEDX	= DATAORIGIN+$0010
  5754 = 9CE4			BALL.SPEEDY	= DATAORIGIN+$0012
  5755 = 9CE6			BALL.SBD	= DATAORIGIN+$0014
  5756 = 9CE8			BALL.BRWHIT	= DATAORIGIN+$0016
  5757 = 9CE9			BALL.INPLAY	= DATAORIGIN+$0017
  5758 = 9CEA			BALL.LAUNCH	= DATAORIGIN+$0018
  5759 = 9CEB			BALL.ONVAUS	= DATAORIGIN+$0019
  5760 = 9CED			BALL.STM	= DATAORIGIN+$001B
  5761 = 9F67			B0	= DATAORIGIN+$0295
  5762 = 9F68			B1	= DATAORIGIN+$0296
  5763
  5764 = 9F63			@VarData	= BALL
  5765 = 0004			@VarDataSize	= 4
  5766
  5767 4575			@exit
  5768 					.ifdef @new
  5769 					lda <@VarData
  5770 					sta :ztmp
  5771 					lda >@VarData
  5772 					ldy #@VarDataSize-1
  5773 					jmp @FreeMem
  5774 					els
  5775 4575 60				rts						; ret
  5776 					eif
  5777 				.endl
  5778
  5779 4576			.local	SET_BALL_SPEED					; PROCEDURE
  5780
  5781 				; optimize OK (service.pas), line = 1127
  5782
  5783 4576 AC 69 9F 84 84 AC + 	mwy BALL :bp2
  5784 4580 A0 10			ldy #BALL.SPEEDX-DATAORIGIN
  5785 4582 B1 84			lda (:bp2),y
  5786 4584 8D 6F 9F			sta SX
  5787 4587 C8				iny
  5788 4588 B1 84			lda (:bp2),y
  5789 458A 8D 70 9F			sta SX+1
  5790
  5791 				; optimize OK (service.pas), line = 1128
  5792
  5793 458D A0 12			ldy #BALL.SPEEDY-DATAORIGIN
  5794 458F B1 84			lda (:bp2),y
  5795 4591 8D 71 9F			sta SY
  5796 4594 C8				iny
  5797 4595 B1 84			lda (:bp2),y
  5798 4597 8D 72 9F			sta SY+1
  5799
  5800 				; optimize OK (service.pas), line = 1130
  5801
  5802 459A AD 6F 9F			lda SX
  5803 459D 85 8A			sta SYSTEM.ABS.@010184000.X
  5804 459F AD 70 9F			lda SX+1
  5805 45A2 85 8B			sta SYSTEM.ABS.@010184000.X+1
  5806 45A4 20 5F 2A			jsr SYSTEM.ABS.@010184000
  5807 45A7 A5 92			lda SYSTEM.ABS.@010184000.RESULT
  5808 45A9 8D 7B 9F			sta A
  5809 45AC A5 93			lda SYSTEM.ABS.@010184000.RESULT+1
  5810 45AE 8D 7C 9F			sta A+1
  5811
  5812 				; optimize OK (service.pas), line = 1131
  5813
  5814 45B1 AD 71 9F			lda SY
  5815 45B4 85 8A			sta SYSTEM.ABS.@010184000.X
  5816 45B6 AD 72 9F			lda SY+1
  5817 45B9 85 8B			sta SYSTEM.ABS.@010184000.X+1
  5818 45BB 20 5F 2A			jsr SYSTEM.ABS.@010184000
  5819 45BE A5 92			lda SYSTEM.ABS.@010184000.RESULT
  5820 45C0 8D 7D 9F			sta B
  5821 45C3 A5 93			lda SYSTEM.ABS.@010184000.RESULT+1
  5822 45C5 8D 7E 9F			sta B+1
  5823
  5824 				; optimize OK (service.pas), line = 1133
  5825
  5826 45C8 AD 7B 9F			lda A
  5827 45CB 85 8E			sta :ecx
  5828 45CD 85 86			sta :eax
  5829 45CF AD 7C 9F			lda A+1
  5830 45D2 85 8F			sta :ecx+1
  5831 45D4 85 87			sta :eax+1
  5832 					.ifdef fmulinit
  5833 					fmulu_16
  5834 					els
  5835 45D6 20 8B 22			imulCX
  5836 					eif
  5837 45D9 A5 86			lda :eax
  5838 45DB 85 9F			sta :STACKORIGIN+9
  5839 45DD A5 87			lda :eax+1
  5840 45DF 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  5841 45E1 A5 88			lda :eax+2
  5842 45E3 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
  5843 45E5 A5 89			lda :eax+3
  5844 45E7 85 CF			sta :STACKORIGIN+STACKWIDTH*3+9
  5845 45E9 AD 7D 9F			lda B
  5846 45EC 85 8E			sta :ecx
  5847 45EE 85 86			sta :eax
  5848 45F0 AD 7E 9F			lda B+1
  5849 45F3 85 8F			sta :ecx+1
  5850 45F5 85 87			sta :eax+1
  5851 					.ifdef fmulinit
  5852 					fmulu_16
  5853 					els
  5854 45F7 20 8B 22			imulCX
  5855 					eif
  5856 45FA A5 9F			lda :STACKORIGIN+9
  5857 45FC 18 65 86			add :eax
  5858 45FF 8D 77 9F			sta I
  5859 4602 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  5860 4604 65 87			adc :eax+1
  5861 4606 8D 78 9F			sta I+1
  5862 4609 A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
  5863 460B 65 88			adc :eax+2
  5864 460D 8D 79 9F			sta I+2
  5865 4610 A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
  5866 4612 65 89			adc :eax+3
  5867 4614 8D 7A 9F			sta I+3
  5868
  5869 				; optimize OK (service.pas), line = 1135
  5870
  5871 4617 AD 77 9F			lda I
  5872 461A 8D BF 9D			sta SQRT32.V
  5873 461D AD 78 9F			lda I+1
  5874 4620 8D C0 9D			sta SQRT32.V+1
  5875 4623 AD 79 9F			lda I+2
  5876 4626 8D C1 9D			sta SQRT32.V+2
  5877 4629 AD 7A 9F			lda I+3
  5878 462C 8D C2 9D			sta SQRT32.V+3
  5879 462F 20 D2 38			jsr SQRT32
  5880 4632 AD C3 9D			lda SQRT32.RESULT
  5881 4635 8D D8 9E			sta HLP
  5882 4638 AD C4 9D			lda SQRT32.RESULT+1
  5883 463B 8D D9 9E			sta HLP+1
  5884
  5885 				; optimize OK (service.pas), line = 1137
  5886
  5887 463E AD D8 9E			lda HLP
  5888 4641 85 8E			sta :FPMAN0
  5889 4643 AD D9 9E			lda HLP+1
  5890 4646 85 8F			sta :FPMAN1
  5891 4648 A9 00			lda #$00
  5892 464A 85 90			sta :FPMAN2
  5893 464C 85 91			sta :FPMAN3
  5894 464E 20 24 27			jsr @I2F
  5895 4651 A5 8E			lda :FPMAN0
  5896 4653 85 A0			sta :STACKORIGIN+10
  5897 4655 A5 8F			lda :FPMAN1
  5898 4657 85 B0			sta :STACKORIGIN+STACKWIDTH+10
  5899 4659 A5 90			lda :FPMAN2
  5900 465B 85 C0			sta :STACKORIGIN+STACKWIDTH*2+10
  5901 465D A5 91			lda :FPMAN3
  5902 465F 85 D0			sta :STACKORIGIN+STACKWIDTH*3+10
  5903 4661 AD 6D 9F			lda SPEED
  5904 4664 85 8E			sta :FPMAN0
  5905 4666 A0 00			ldy #$00
  5906 4668 AD 6E 9F			lda SPEED+1
  5907 466B 10 01			spl
  5908 466D 88				dey
  5909 466E 85 8F			sta :FPMAN1
  5910 4670 84 90			sty :FPMAN2
  5911 4672 84 91			sty :FPMAN3
  5912 4674 20 24 27			jsr @I2F
  5913 4677 A5 8E			lda :FPMAN0
  5914 4679 85 86			sta :FP1MAN0
  5915 467B A5 8F			lda :FPMAN1
  5916 467D 85 87			sta :FP1MAN1
  5917 467F A5 90			lda :FPMAN2
  5918 4681 85 88			sta :FP1MAN2
  5919 4683 A5 91			lda :FPMAN3
  5920 4685 85 89			sta :FP1MAN3
  5921 4687 A5 A0			lda :STACKORIGIN+10
  5922 4689 85 8A			sta :FP2MAN0
  5923 468B A5 B0			lda :STACKORIGIN+STACKWIDTH+10
  5924 468D 85 8B			sta :FP2MAN1
  5925 468F A5 C0			lda :STACKORIGIN+STACKWIDTH*2+10
  5926 4691 85 8C			sta :FP2MAN2
  5927 4693 A5 D0			lda :STACKORIGIN+STACKWIDTH*3+10
  5928 4695 85 8D			sta :FP2MAN3
  5929 4697 20 EB 25			jsr @FDIV
  5930 469A A5 8E			lda :FPMAN0
  5931 469C 8D 73 9F			sta VM
  5932 469F A5 8F			lda :FPMAN1
  5933 46A1 8D 74 9F			sta VM+1
  5934 46A4 A5 90			lda :FPMAN2
  5935 46A6 8D 75 9F			sta VM+2
  5936 46A9 A5 91			lda :FPMAN3
  5937 46AB 8D 76 9F			sta VM+3
  5938
  5939 				; optimize OK (service.pas), line = 1142
  5940
  5941 46AE AD 6F 9F			lda SX
  5942 46B1 85 8E			sta :FPMAN0
  5943 46B3 A0 00			ldy #$00
  5944 46B5 AD 70 9F			lda SX+1
  5945 46B8 10 01			spl
  5946 46BA 88				dey
  5947 46BB 85 8F			sta :FPMAN1
  5948 46BD 84 90			sty :FPMAN2
  5949 46BF 84 91			sty :FPMAN3
  5950 46C1 20 24 27			jsr @I2F
  5951 46C4 A5 8E			lda :FPMAN0
  5952 46C6 85 86			sta :FP1MAN0
  5953 46C8 A5 8F			lda :FPMAN1
  5954 46CA 85 87			sta :FP1MAN1
  5955 46CC A5 90			lda :FPMAN2
  5956 46CE 85 88			sta :FP1MAN2
  5957 46D0 A5 91			lda :FPMAN3
  5958 46D2 85 89			sta :FP1MAN3
  5959 46D4 AD 73 9F			lda VM
  5960 46D7 85 8A			sta :FP2MAN0
  5961 46D9 AD 74 9F			lda VM+1
  5962 46DC 85 8B			sta :FP2MAN1
  5963 46DE AD 75 9F			lda VM+2
  5964 46E1 85 8C			sta :FP2MAN2
  5965 46E3 AD 76 9F			lda VM+3
  5966 46E6 85 8D			sta :FP2MAN3
  5967 46E8 20 4A 25			jsr @FMUL
  5968 46EB 20 B3 26			jsr @F2I
  5969 46EE AC 69 9F 84 84 AC + 	mwy BALL :bp2
  5970 46F8 A0 10			ldy #BALL.SPEEDX-DATAORIGIN
  5971 46FA A5 8E			lda :FPMAN0
  5972 46FC 91 84			sta (:bp2),y
  5973 46FE C8				iny
  5974 46FF A5 8F			lda :FPMAN1
  5975 4701 91 84			sta (:bp2),y
  5976
  5977 				; optimize OK (service.pas), line = 1143
  5978
  5979 4703 AD 71 9F			lda SY
  5980 4706 85 8E			sta :FPMAN0
  5981 4708 A0 00			ldy #$00
  5982 470A AD 72 9F			lda SY+1
  5983 470D 10 01			spl
  5984 470F 88				dey
  5985 4710 85 8F			sta :FPMAN1
  5986 4712 84 90			sty :FPMAN2
  5987 4714 84 91			sty :FPMAN3
  5988 4716 20 24 27			jsr @I2F
  5989 4719 A5 8E			lda :FPMAN0
  5990 471B 85 86			sta :FP1MAN0
  5991 471D A5 8F			lda :FPMAN1
  5992 471F 85 87			sta :FP1MAN1
  5993 4721 A5 90			lda :FPMAN2
  5994 4723 85 88			sta :FP1MAN2
  5995 4725 A5 91			lda :FPMAN3
  5996 4727 85 89			sta :FP1MAN3
  5997 4729 AD 73 9F			lda VM
  5998 472C 85 8A			sta :FP2MAN0
  5999 472E AD 74 9F			lda VM+1
  6000 4731 85 8B			sta :FP2MAN1
  6001 4733 AD 75 9F			lda VM+2
  6002 4736 85 8C			sta :FP2MAN2
  6003 4738 AD 76 9F			lda VM+3
  6004 473B 85 8D			sta :FP2MAN3
  6005 473D 20 4A 25			jsr @FMUL
  6006 4740 20 B3 26			jsr @F2I
  6007 4743 AC 69 9F 84 84 AC + 	mwy BALL :bp2
  6008 474D A0 12			ldy #BALL.SPEEDY-DATAORIGIN
  6009 474F A5 8E			lda :FPMAN0
  6010 4751 91 84			sta (:bp2),y
  6011 4753 C8				iny
  6012 4754 A5 8F			lda :FPMAN1
  6013 4756 91 84			sta (:bp2),y
  6014
  6015 				; ------------------------------------------------------------
  6016
  6017 = 9F69			BALL	= DATAORIGIN+$0297
  6018 = 9CD2			BALL.X	= DATAORIGIN+$0000
  6019 = 9CD4			BALL.Y	= DATAORIGIN+$0002
  6020 = 9CD6			BALL.FINEX	= DATAORIGIN+$0004
  6021 = 9CD8			BALL.FINEY	= DATAORIGIN+$0006
  6022 = 9CDA			BALL.OLDX	= DATAORIGIN+$0008
  6023 = 9CDC			BALL.OLDY	= DATAORIGIN+$000A
  6024 = 9CDE			BALL.SPEED	= DATAORIGIN+$000C
  6025 = 9CE0			BALL.FINESPEED	= DATAORIGIN+$000E
  6026 = 9CE2			BALL.SPEEDX	= DATAORIGIN+$0010
  6027 = 9CE4			BALL.SPEEDY	= DATAORIGIN+$0012
  6028 = 9CE6			BALL.SBD	= DATAORIGIN+$0014
  6029 = 9CE8			BALL.BRWHIT	= DATAORIGIN+$0016
  6030 = 9CE9			BALL.INPLAY	= DATAORIGIN+$0017
  6031 = 9CEA			BALL.LAUNCH	= DATAORIGIN+$0018
  6032 = 9CEB			BALL.ONVAUS	= DATAORIGIN+$0019
  6033 = 9CED			BALL.STM	= DATAORIGIN+$001B
  6034 = 9F6D			SPEED	= DATAORIGIN+$029B
  6035 = 9F6F			SX	= DATAORIGIN+$029D
  6036 = 9F71			SY	= DATAORIGIN+$029F
  6037 = 9F73			VM	= DATAORIGIN+$02A1
  6038 = 9F77			I	= DATAORIGIN+$02A5
  6039 = 9F7B			A	= DATAORIGIN+$02A9
  6040 = 9F7D			B	= DATAORIGIN+$02AB
  6041
  6042 = 9F69			@VarData	= BALL
  6043 = 0014			@VarDataSize	= 20
  6044
  6045 4758			@exit
  6046 					.ifdef @new
  6047 					lda <@VarData
  6048 					sta :ztmp
  6049 					lda >@VarData
  6050 					ldy #@VarDataSize-1
  6051 					jmp @FreeMem
  6052 					els
  6053 4758 60				rts						; ret
  6054 					eif
  6055 				.endl
  6056
  6057 4759			.local	SET_BALL_DIRECTION				; PROCEDURE
  6058
  6059 				; optimize OK (service.pas), line = 1151
  6060
  6061 4759 AD 83 9F			lda ANGLE
  6062 475C 85 8E			sta :FPMAN0
  6063 475E A0 00			ldy #$00
  6064 4760 AD 84 9F			lda ANGLE+1
  6065 4763 10 01			spl
  6066 4765 88				dey
  6067 4766 85 8F			sta :FPMAN1
  6068 4768 84 90			sty :FPMAN2
  6069 476A 84 91			sty :FPMAN3
  6070 476C 20 24 27			jsr @I2F
  6071 476F A5 8E			lda :FPMAN0
  6072 4771 85 86			sta :FP1MAN0
  6073 4773 A5 8F			lda :FPMAN1
  6074 4775 85 87			sta :FP1MAN1
  6075 4777 A5 90			lda :FPMAN2
  6076 4779 85 88			sta :FP1MAN2
  6077 477B A5 91			lda :FPMAN3
  6078 477D 85 89			sta :FP1MAN3
  6079 477F A9 35			lda #$35
  6080 4781 85 8A			sta :FP2MAN0
  6081 4783 A9 FA			lda #$FA
  6082 4785 85 8B			sta :FP2MAN1
  6083 4787 A9 8E			lda #$8E
  6084 4789 85 8C			sta :FP2MAN2
  6085 478B A9 3C			lda #$3C
  6086 478D 85 8D			sta :FP2MAN3
  6087 478F 20 4A 25			jsr @FMUL
  6088 4792 A5 8E			lda :FPMAN0
  6089 4794 8D 85 9F			sta W
  6090 4797 A5 8F			lda :FPMAN1
  6091 4799 8D 86 9F			sta W+1
  6092 479C A5 90			lda :FPMAN2
  6093 479E 8D 87 9F			sta W+2
  6094 47A1 A5 91			lda :FPMAN3
  6095 47A3 8D 88 9F			sta W+3
  6096
  6097 				; optimize FAIL (1, service.pas), line = 1153
  6098
  6099 47A6 E8				inx
  6100 47A7 A9 00 95 96			mva #$00 :STACKORIGIN,x
  6101 47AB A9 01 95 A6			mva #$01 :STACKORIGIN+STACKWIDTH,x
  6102 47AF AD 85 9F			lda W
  6103 47B2 8D 00 9D			sta SYSTEM.COS.@01018F000.X
  6104 47B5 AD 86 9F			lda W+1
  6105 47B8 8D 01 9D			sta SYSTEM.COS.@01018F000.X+1
  6106 47BB AD 87 9F			lda W+2
  6107 47BE 8D 02 9D			sta SYSTEM.COS.@01018F000.X+2
  6108 47C1 AD 88 9F			lda W+3
  6109 47C4 8D 03 9D			sta SYSTEM.COS.@01018F000.X+3
  6110 47C7 20 41 32			jsr SYSTEM.COS.@01018F000
  6111 47CA E8				inx
  6112 47CB AD 04 9D 95 96		mva SYSTEM.COS.@01018F000.RESULT :STACKORIGIN,x
  6113 47D0 AD 05 9D 95 A6		mva SYSTEM.COS.@01018F000.RESULT+1 :STACKORIGIN+STACKWIDTH,x
  6114 47D5 AD 06 9D 95 B6		mva SYSTEM.COS.@01018F000.RESULT+2 :STACKORIGIN+STACKWIDTH*2,x
  6115 47DA AD 07 9D 95 C6		mva SYSTEM.COS.@01018F000.RESULT+3 :STACKORIGIN+STACKWIDTH*3,x
  6116 47DF A9 00 95 B5			mva #$00 :STACKORIGIN-1+STACKWIDTH*2,x
  6117 47E3 95 C5			sta :STACKORIGIN-1+STACKWIDTH*3,x
  6118 47E5 B5 95			lda :STACKORIGIN-1,x
  6119 47E7 85 8E			sta :FPMAN0
  6120 47E9 B5 A5			lda :STACKORIGIN-1+STACKWIDTH,x
  6121 47EB 85 8F			sta :FPMAN1
  6122 47ED B5 B5			lda :STACKORIGIN-1+STACKWIDTH*2,x
  6123 47EF 85 90			sta :FPMAN2
  6124 47F1 B5 C5			lda :STACKORIGIN-1+STACKWIDTH*3,x
  6125 47F3 85 91			sta :FPMAN3
  6126 47F5 20 24 27			jsr @I2F
  6127 47F8 A5 8E			lda :FPMAN0
  6128 47FA 95 95			sta :STACKORIGIN-1,x
  6129 47FC A5 8F			lda :FPMAN1
  6130 47FE 95 A5			sta :STACKORIGIN-1+STACKWIDTH,x
  6131 4800 A5 90			lda :FPMAN2
  6132 4802 95 B5			sta :STACKORIGIN-1+STACKWIDTH*2,x
  6133 4804 A5 91			lda :FPMAN3
  6134 4806 95 C5			sta :STACKORIGIN-1+STACKWIDTH*3,x
  6135 4808 B5 96			lda :STACKORIGIN,x
  6136 480A 85 8A			sta :FP2MAN0
  6137 480C B5 A6			lda :STACKORIGIN+STACKWIDTH,x
  6138 480E 85 8B			sta :FP2MAN1
  6139 4810 B5 B6			lda :STACKORIGIN+STACKWIDTH*2,x
  6140 4812 85 8C			sta :FP2MAN2
  6141 4814 B5 C6			lda :STACKORIGIN+STACKWIDTH*3,x
  6142 4816 85 8D			sta :FP2MAN3
  6143 4818 B5 95			lda :STACKORIGIN-1,x
  6144 481A 85 86			sta :FP1MAN0
  6145 481C B5 A5			lda :STACKORIGIN-1+STACKWIDTH,x
  6146 481E 85 87			sta :FP1MAN1
  6147 4820 B5 B5			lda :STACKORIGIN-1+STACKWIDTH*2,x
  6148 4822 85 88			sta :FP1MAN2
  6149 4824 B5 C5			lda :STACKORIGIN-1+STACKWIDTH*3,x
  6150 4826 85 89			sta :FP1MAN3
  6151 4828 20 4A 25			jsr @FMUL
  6152 482B CA				dex
  6153 482C A5 8E			lda :FPMAN0
  6154 482E 85 8E			sta :FPMAN0
  6155 4830 A5 8F			lda :FPMAN1
  6156 4832 85 8F			sta :FPMAN1
  6157 4834 A5 90			lda :FPMAN2
  6158 4836 85 90			sta :FPMAN2
  6159 4838 A5 91			lda :FPMAN3
  6160 483A 85 91			sta :FPMAN3
  6161 483C 20 B3 26			jsr @F2I
  6162 483F A5 8E			lda :FPMAN0
  6163 4841 95 96			sta :STACKORIGIN,x
  6164 4843 A5 8F			lda :FPMAN1
  6165 4845 95 A6			sta :STACKORIGIN+STACKWIDTH,x
  6166 4847 A5 90			lda :FPMAN2
  6167 4849 95 B6			sta :STACKORIGIN+STACKWIDTH*2,x
  6168 484B A5 91			lda :FPMAN3
  6169 484D 95 C6			sta :STACKORIGIN+STACKWIDTH*3,x
  6170 484F AC 7F 9F 84 84 AC + 	mwy BALL :bp2
  6171 4859 A0 10			ldy #BALL.SPEEDX-DATAORIGIN
  6172 485B B5 96			lda :STACKORIGIN,x
  6173 485D 91 84			sta (:bp2),y
  6174 485F C8				iny
  6175 4860 B5 A6			lda :STACKORIGIN+STACKWIDTH,x
  6176 4862 91 84			sta (:bp2),y
  6177
  6178 				; optimize FAIL (1, service.pas), line = 1154
  6179
  6180 4864 A9 00 95 96			mva #$00 :STACKORIGIN,x
  6181 4868 A9 01 95 A6			mva #$01 :STACKORIGIN+STACKWIDTH,x
  6182 486C AD 85 9F			lda W
  6183 486F 8D F8 9C			sta SYSTEM.SIN.@01018F000.X
  6184 4872 AD 86 9F			lda W+1
  6185 4875 8D F9 9C			sta SYSTEM.SIN.@01018F000.X+1
  6186 4878 AD 87 9F			lda W+2
  6187 487B 8D FA 9C			sta SYSTEM.SIN.@01018F000.X+2
  6188 487E AD 88 9F			lda W+3
  6189 4881 8D FB 9C			sta SYSTEM.SIN.@01018F000.X+3
  6190 4884 20 08 32			jsr SYSTEM.SIN.@01018F000
  6191 4887 E8				inx
  6192 4888 AD FC 9C 95 96		mva SYSTEM.SIN.@01018F000.RESULT :STACKORIGIN,x
  6193 488D AD FD 9C 95 A6		mva SYSTEM.SIN.@01018F000.RESULT+1 :STACKORIGIN+STACKWIDTH,x
  6194 4892 AD FE 9C 95 B6		mva SYSTEM.SIN.@01018F000.RESULT+2 :STACKORIGIN+STACKWIDTH*2,x
  6195 4897 AD FF 9C 95 C6		mva SYSTEM.SIN.@01018F000.RESULT+3 :STACKORIGIN+STACKWIDTH*3,x
  6196 489C A9 00 95 B5			mva #$00 :STACKORIGIN-1+STACKWIDTH*2,x
  6197 48A0 95 C5			sta :STACKORIGIN-1+STACKWIDTH*3,x
  6198 48A2 B5 95			lda :STACKORIGIN-1,x
  6199 48A4 85 8E			sta :FPMAN0
  6200 48A6 B5 A5			lda :STACKORIGIN-1+STACKWIDTH,x
  6201 48A8 85 8F			sta :FPMAN1
  6202 48AA B5 B5			lda :STACKORIGIN-1+STACKWIDTH*2,x
  6203 48AC 85 90			sta :FPMAN2
  6204 48AE B5 C5			lda :STACKORIGIN-1+STACKWIDTH*3,x
  6205 48B0 85 91			sta :FPMAN3
  6206 48B2 20 24 27			jsr @I2F
  6207 48B5 A5 8E			lda :FPMAN0
  6208 48B7 95 95			sta :STACKORIGIN-1,x
  6209 48B9 A5 8F			lda :FPMAN1
  6210 48BB 95 A5			sta :STACKORIGIN-1+STACKWIDTH,x
  6211 48BD A5 90			lda :FPMAN2
  6212 48BF 95 B5			sta :STACKORIGIN-1+STACKWIDTH*2,x
  6213 48C1 A5 91			lda :FPMAN3
  6214 48C3 95 C5			sta :STACKORIGIN-1+STACKWIDTH*3,x
  6215 48C5 B5 96			lda :STACKORIGIN,x
  6216 48C7 85 8A			sta :FP2MAN0
  6217 48C9 B5 A6			lda :STACKORIGIN+STACKWIDTH,x
  6218 48CB 85 8B			sta :FP2MAN1
  6219 48CD B5 B6			lda :STACKORIGIN+STACKWIDTH*2,x
  6220 48CF 85 8C			sta :FP2MAN2
  6221 48D1 B5 C6			lda :STACKORIGIN+STACKWIDTH*3,x
  6222 48D3 85 8D			sta :FP2MAN3
  6223 48D5 B5 95			lda :STACKORIGIN-1,x
  6224 48D7 85 86			sta :FP1MAN0
  6225 48D9 B5 A5			lda :STACKORIGIN-1+STACKWIDTH,x
  6226 48DB 85 87			sta :FP1MAN1
  6227 48DD B5 B5			lda :STACKORIGIN-1+STACKWIDTH*2,x
  6228 48DF 85 88			sta :FP1MAN2
  6229 48E1 B5 C5			lda :STACKORIGIN-1+STACKWIDTH*3,x
  6230 48E3 85 89			sta :FP1MAN3
  6231 48E5 20 4A 25			jsr @FMUL
  6232 48E8 CA				dex
  6233 48E9 A5 8E			lda :FPMAN0
  6234 48EB 85 8E			sta :FPMAN0
  6235 48ED A5 8F			lda :FPMAN1
  6236 48EF 85 8F			sta :FPMAN1
  6237 48F1 A5 90			lda :FPMAN2
  6238 48F3 85 90			sta :FPMAN2
  6239 48F5 A5 91			lda :FPMAN3
  6240 48F7 85 91			sta :FPMAN3
  6241 48F9 20 B3 26			jsr @F2I
  6242 48FC A5 8E			lda :FPMAN0
  6243 48FE 95 96			sta :STACKORIGIN,x
  6244 4900 A5 8F			lda :FPMAN1
  6245 4902 95 A6			sta :STACKORIGIN+STACKWIDTH,x
  6246 4904 A5 90			lda :FPMAN2
  6247 4906 95 B6			sta :STACKORIGIN+STACKWIDTH*2,x
  6248 4908 A5 91			lda :FPMAN3
  6249 490A 95 C6			sta :STACKORIGIN+STACKWIDTH*3,x
  6250 490C A9 00			lda #$00
  6251 490E 38 F5 96			sub :STACKORIGIN,x
  6252 4911 95 96			sta :STACKORIGIN,x
  6253 4913 A9 00			lda #$00
  6254 4915 F5 A6			sbc :STACKORIGIN+STACKWIDTH,x
  6255 4917 95 A6			sta :STACKORIGIN+STACKWIDTH,x
  6256 4919 A9 00			lda #$00
  6257 491B F5 B6			sbc :STACKORIGIN+STACKWIDTH*2,x
  6258 491D 95 B6			sta :STACKORIGIN+STACKWIDTH*2,x
  6259 491F A9 00			lda #$00
  6260 4921 F5 C6			sbc :STACKORIGIN+STACKWIDTH*3,x
  6261 4923 95 C6			sta :STACKORIGIN+STACKWIDTH*3,x
  6262 4925 AC 7F 9F 84 84 AC + 	mwy BALL :bp2
  6263 492F A0 12			ldy #BALL.SPEEDY-DATAORIGIN
  6264 4931 B5 96			lda :STACKORIGIN,x
  6265 4933 91 84			sta (:bp2),y
  6266 4935 C8				iny
  6267 4936 B5 A6			lda :STACKORIGIN+STACKWIDTH,x
  6268 4938 91 84			sta (:bp2),y
  6269 493A CA				dex
  6270
  6271 				; ------------------------------------------------------------
  6272
  6273 = 9F7F			BALL	= DATAORIGIN+$02AD
  6274 = 9CD2			BALL.X	= DATAORIGIN+$0000
  6275 = 9CD4			BALL.Y	= DATAORIGIN+$0002
  6276 = 9CD6			BALL.FINEX	= DATAORIGIN+$0004
  6277 = 9CD8			BALL.FINEY	= DATAORIGIN+$0006
  6278 = 9CDA			BALL.OLDX	= DATAORIGIN+$0008
  6279 = 9CDC			BALL.OLDY	= DATAORIGIN+$000A
  6280 = 9CDE			BALL.SPEED	= DATAORIGIN+$000C
  6281 = 9CE0			BALL.FINESPEED	= DATAORIGIN+$000E
  6282 = 9CE2			BALL.SPEEDX	= DATAORIGIN+$0010
  6283 = 9CE4			BALL.SPEEDY	= DATAORIGIN+$0012
  6284 = 9CE6			BALL.SBD	= DATAORIGIN+$0014
  6285 = 9CE8			BALL.BRWHIT	= DATAORIGIN+$0016
  6286 = 9CE9			BALL.INPLAY	= DATAORIGIN+$0017
  6287 = 9CEA			BALL.LAUNCH	= DATAORIGIN+$0018
  6288 = 9CEB			BALL.ONVAUS	= DATAORIGIN+$0019
  6289 = 9CED			BALL.STM	= DATAORIGIN+$001B
  6290 = 9F83			ANGLE	= DATAORIGIN+$02B1
  6291 = 9F85			W	= DATAORIGIN+$02B3
  6292
  6293 = 9F7F			@VarData	= BALL
  6294 = 0008			@VarDataSize	= 8
  6295
  6296 493B			@exit
  6297 					.ifdef @new
  6298 					lda <@VarData
  6299 					sta :ztmp
  6300 					lda >@VarData
  6301 					ldy #@VarDataSize-1
  6302 					jmp @FreeMem
  6303 					els
  6304 493B 60				rts						; ret
  6305 					eif
  6306 				.endl
  6307
  6308 493C			.local	GET_BALL_DIRECTION				; FUNCTION
  6309
  6310 				; optimize OK (service.pas), line = 1162
  6311
  6312 493C AC 89 9F 84 84 AC + 	mwy BALL :bp2
  6313 4946 A0 11			ldy #BALL.SPEEDX-DATAORIGIN+$01
  6314 4948 B1 84			lda (:bp2),y
  6315 494A 88				dey
  6316 494B 11 84			ora (:bp2),y
  6317 494D D0 75			jne l_0C99
  6318 494F E8				inx
  6319 4950 A9 5A 95 96			mva #$5A :STACKORIGIN,x
  6320 4954 E8				inx
  6321 4955 AC 89 9F 84 84 AC + 	mwy BALL :bp2
  6322 495F A0 12			ldy #BALL.SPEEDY-DATAORIGIN
  6323 4961 B1 84 95 96			mva (:bp2),y :STACKORIGIN,x
  6324 4965 C8				iny
  6325 4966 B1 84 95 A6			mva (:bp2),y :STACKORIGIN+STACKWIDTH,x
  6326 496A A0 12			ldy #BALL.SPEEDY-DATAORIGIN
  6327 496C B1 84			lda (:bp2),y
  6328 496E 85 8A			sta SYSTEM.ABS.@010184000.X
  6329 4970 C8				iny
  6330 4971 B1 84			lda (:bp2),y
  6331 4973 85 8B			sta SYSTEM.ABS.@010184000.X+1
  6332 4975 20 5F 2A			jsr SYSTEM.ABS.@010184000
  6333 4978 E8				inx
  6334 4979 A5 92			lda SYSTEM.ABS.@010184000.RESULT
  6335 497B 85 8E			sta @SMALLINT.DIV.B
  6336 497D A5 93			lda SYSTEM.ABS.@010184000.RESULT+1
  6337 497F 85 8F			sta @SMALLINT.DIV.B+1
  6338 4981 B5 95			lda :STACKORIGIN-1,x
  6339 4983 85 86			sta @SMALLINT.DIV.A
  6340 4985 B5 A5			lda :STACKORIGIN-1+STACKWIDTH,x
  6341 4987 85 87			sta @SMALLINT.DIV.A+1
  6342 4989 20 FF 21			jsr @SMALLINT.DIV
  6343 498C A5 86			lda :eax
  6344 498E 95 95			sta :STACKORIGIN-1,x
  6345 4990 A5 87			lda :eax+1
  6346 4992 95 A5			sta :STACKORIGIN-1+STACKWIDTH,x
  6347 4994 CA				dex
  6348 4995 A9 00 95 A5			mva #$00 :STACKORIGIN-1+STACKWIDTH,x
  6349 4999 20 D7 21			jsr mulSMALLINT
  6350 499C CA				dex
  6351 499D A9 00			lda #$00
  6352 499F 38 F5 96			sub :STACKORIGIN,x
  6353 49A2 95 96			sta :STACKORIGIN,x
  6354 49A4 A9 00			lda #$00
  6355 49A6 F5 A6			sbc :STACKORIGIN+STACKWIDTH,x
  6356 49A8 95 A6			sta :STACKORIGIN+STACKWIDTH,x
  6357 49AA A9 00			lda #$00
  6358 49AC F5 B6			sbc :STACKORIGIN+STACKWIDTH*2,x
  6359 49AE 95 B6			sta :STACKORIGIN+STACKWIDTH*2,x
  6360 49B0 A9 00			lda #$00
  6361 49B2 F5 C6			sbc :STACKORIGIN+STACKWIDTH*3,x
  6362 49B4 95 C6			sta :STACKORIGIN+STACKWIDTH*3,x
  6363 49B6 B5 96			lda :STACKORIGIN,x
  6364 49B8 8D 8F 9F			sta W
  6365 49BB B5 A6			lda :STACKORIGIN+STACKWIDTH,x
  6366 49BD 8D 90 9F			sta W+1
  6367 49C0 CA				dex
  6368 49C1 4C 4D 4B			jmp l_0CB5
  6369 49C4			l_0C99
  6370
  6371 				; optimize OK (service.pas), line = 1168
  6372
  6373 49C4 AC 89 9F 84 84 AC + 	mwy BALL :bp2
  6374 49CE A0 12			ldy #BALL.SPEEDY-DATAORIGIN
  6375 49D0 B1 84			lda (:bp2),y
  6376 49D2 85 9F			sta :STACKORIGIN+9
  6377 49D4 C8				iny
  6378 49D5 B1 84			lda (:bp2),y
  6379 49D7 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  6380 49D9 A0 10			ldy #BALL.SPEEDX-DATAORIGIN
  6381 49DB B1 84			lda (:bp2),y
  6382 49DD 85 8E			sta :FPMAN0
  6383 49DF C8				iny
  6384 49E0 B1 84			lda (:bp2),y
  6385 49E2 85 B0			sta :STACKORIGIN+STACKWIDTH+10
  6386 49E4 A0 00			ldy #$00
  6387 49E6 A5 B0			lda :STACKORIGIN+STACKWIDTH+10
  6388 49E8 10 01			spl
  6389 49EA 88				dey
  6390 49EB 85 8F			sta :FPMAN1
  6391 49ED 84 90			sty :FPMAN2
  6392 49EF 84 91			sty :FPMAN3
  6393 49F1 20 24 27			jsr @I2F
  6394 49F4 A5 8E			lda :FPMAN0
  6395 49F6 85 A0			sta :STACKORIGIN+10
  6396 49F8 A5 8F			lda :FPMAN1
  6397 49FA 85 B0			sta :STACKORIGIN+STACKWIDTH+10
  6398 49FC A5 90			lda :FPMAN2
  6399 49FE 85 C0			sta :STACKORIGIN+STACKWIDTH*2+10
  6400 4A00 A5 91			lda :FPMAN3
  6401 4A02 85 D0			sta :STACKORIGIN+STACKWIDTH*3+10
  6402 4A04 A0 00			ldy #$00
  6403 4A06 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  6404 4A08 10 01			spl
  6405 4A0A 88				dey
  6406 4A0B 85 8F			sta :FPMAN1
  6407 4A0D 84 90			sty :FPMAN2
  6408 4A0F 84 91			sty :FPMAN3
  6409 4A11 A5 9F			lda :STACKORIGIN+9
  6410 4A13 85 8E			sta :FPMAN0
  6411 4A15 20 24 27			jsr @I2F
  6412 4A18 A5 8E			lda :FPMAN0
  6413 4A1A 85 86			sta :FP1MAN0
  6414 4A1C A5 8F			lda :FPMAN1
  6415 4A1E 85 87			sta :FP1MAN1
  6416 4A20 A5 90			lda :FPMAN2
  6417 4A22 85 88			sta :FP1MAN2
  6418 4A24 A5 91			lda :FPMAN3
  6419 4A26 85 89			sta :FP1MAN3
  6420 4A28 A5 A0			lda :STACKORIGIN+10
  6421 4A2A 85 8A			sta :FP2MAN0
  6422 4A2C A5 B0			lda :STACKORIGIN+STACKWIDTH+10
  6423 4A2E 85 8B			sta :FP2MAN1
  6424 4A30 A5 C0			lda :STACKORIGIN+STACKWIDTH*2+10
  6425 4A32 85 8C			sta :FP2MAN2
  6426 4A34 A5 D0			lda :STACKORIGIN+STACKWIDTH*3+10
  6427 4A36 85 8D			sta :FP2MAN3
  6428 4A38 20 EB 25			jsr @FDIV
  6429 4A3B A5 8E			lda :FPMAN0
  6430 4A3D 8D DA 9E			sta F_HLP
  6431 4A40 A5 8F			lda :FPMAN1
  6432 4A42 8D DB 9E			sta F_HLP+1
  6433 4A45 A5 90			lda :FPMAN2
  6434 4A47 8D DC 9E			sta F_HLP+2
  6435 4A4A A5 91			lda :FPMAN3
  6436 4A4C 49 80			eor #$80
  6437 4A4E 8D DD 9E			sta F_HLP+3
  6438
  6439 				; optimize OK (service.pas), line = 1170
  6440
  6441 4A51 AD DA 9E			lda F_HLP
  6442 4A54 8D DD 9C			sta SYSTEM.ARCTAN.@01018F000.VALUE
  6443 4A57 AD DB 9E			lda F_HLP+1
  6444 4A5A 8D DE 9C			sta SYSTEM.ARCTAN.@01018F000.VALUE+1
  6445 4A5D AD DC 9E			lda F_HLP+2
  6446 4A60 8D DF 9C			sta SYSTEM.ARCTAN.@01018F000.VALUE+2
  6447 4A63 AD DD 9E			lda F_HLP+3
  6448 4A66 8D E0 9C			sta SYSTEM.ARCTAN.@01018F000.VALUE+3
  6449 4A69 20 8D 2A			jsr SYSTEM.ARCTAN.@01018F000
  6450 4A6C E8				inx
  6451 4A6D E8				inx
  6452 4A6E A9 00			lda #$00
  6453 4A70 85 8A			sta :FP2MAN0
  6454 4A72 A9 00			lda #$00
  6455 4A74 85 8B			sta :FP2MAN1
  6456 4A76 A9 34			lda #$34
  6457 4A78 85 8C			sta :FP2MAN2
  6458 4A7A A9 43			lda #$43
  6459 4A7C 85 8D			sta :FP2MAN3
  6460 4A7E AD E1 9C			lda SYSTEM.ARCTAN.@01018F000.RESULT
  6461 4A81 85 86			sta :FP1MAN0
  6462 4A83 AD E2 9C			lda SYSTEM.ARCTAN.@01018F000.RESULT+1
  6463 4A86 85 87			sta :FP1MAN1
  6464 4A88 AD E3 9C			lda SYSTEM.ARCTAN.@01018F000.RESULT+2
  6465 4A8B 85 88			sta :FP1MAN2
  6466 4A8D AD E4 9C			lda SYSTEM.ARCTAN.@01018F000.RESULT+3
  6467 4A90 85 89			sta :FP1MAN3
  6468 4A92 20 4A 25			jsr @FMUL
  6469 4A95 A5 8E			lda :FPMAN0
  6470 4A97 95 95			sta :STACKORIGIN-1,x
  6471 4A99 A5 8F			lda :FPMAN1
  6472 4A9B 95 A5			sta :STACKORIGIN-1+STACKWIDTH,x
  6473 4A9D A5 90			lda :FPMAN2
  6474 4A9F 95 B5			sta :STACKORIGIN-1+STACKWIDTH*2,x
  6475 4AA1 A5 91			lda :FPMAN3
  6476 4AA3 95 C5			sta :STACKORIGIN-1+STACKWIDTH*3,x
  6477 4AA5 A9 DB			lda #$DB
  6478 4AA7 85 8A			sta :FP2MAN0
  6479 4AA9 A9 0F			lda #$0F
  6480 4AAB 85 8B			sta :FP2MAN1
  6481 4AAD A9 49			lda #$49
  6482 4AAF 85 8C			sta :FP2MAN2
  6483 4AB1 A9 40			lda #$40
  6484 4AB3 85 8D			sta :FP2MAN3
  6485 4AB5 B5 95			lda :STACKORIGIN-1,x
  6486 4AB7 85 86			sta :FP1MAN0
  6487 4AB9 B5 A5			lda :STACKORIGIN-1+STACKWIDTH,x
  6488 4ABB 85 87			sta :FP1MAN1
  6489 4ABD B5 B5			lda :STACKORIGIN-1+STACKWIDTH*2,x
  6490 4ABF 85 88			sta :FP1MAN2
  6491 4AC1 B5 C5			lda :STACKORIGIN-1+STACKWIDTH*3,x
  6492 4AC3 85 89			sta :FP1MAN3
  6493 4AC5 20 EB 25			jsr @FDIV
  6494 4AC8 CA				dex
  6495 4AC9 A5 8E			lda :FPMAN0
  6496 4ACB 8D DA 9E			sta F_HLP
  6497 4ACE A5 8F			lda :FPMAN1
  6498 4AD0 8D DB 9E			sta F_HLP+1
  6499 4AD3 A5 90			lda :FPMAN2
  6500 4AD5 8D DC 9E			sta F_HLP+2
  6501 4AD8 A5 91			lda :FPMAN3
  6502 4ADA 8D DD 9E			sta F_HLP+3
  6503 4ADD CA				dex
  6504
  6505 				; optimize OK (service.pas), line = 1172
  6506
  6507 4ADE AD DA 9E			lda F_HLP
  6508 4AE1 85 8E			sta :FPMAN0
  6509 4AE3 AD DB 9E			lda F_HLP+1
  6510 4AE6 85 8F			sta :FPMAN1
  6511 4AE8 AD DC 9E			lda F_HLP+2
  6512 4AEB 85 90			sta :FPMAN2
  6513 4AED AD DD 9E			lda F_HLP+3
  6514 4AF0 85 91			sta :FPMAN3
  6515 4AF2 20 B3 26			jsr @F2I
  6516 4AF5 A5 8E			lda :FPMAN0
  6517 4AF7 8D 8F 9F			sta W
  6518 4AFA A5 8F			lda :FPMAN1
  6519 4AFC 8D 90 9F			sta W+1
  6520
  6521 				; optimize OK (service.pas), line = 1174
  6522
  6523 4AFF AC 89 9F 84 84 AC + 	mwy BALL :bp2
  6524 4B09 A0 00			ldy #$00
  6525 4B0B B1 84			lda (:bp2),y
  6526 4B0D 10 0E			jpl l_0CE4
  6527 4B0F AD 8F 9F			lda W
  6528 4B12 18 69 B4			add #$B4
  6529 4B15 8D 8F 9F			sta W
  6530 4B18 90 03			scc
  6531 4B1A EE 90 9F			inc W+1
  6532 4B1D			l_0CE4
  6533
  6534 				; optimize OK (service.pas), line = 1176
  6535
  6536 4B1D AD 8F 9F			lda W
  6537 4B20 18 69 68			add #$68
  6538 4B23 8D 8F 9F			sta W
  6539 4B26 AD 90 9F			lda W+1
  6540 4B29 69 01			adc #$01
  6541 4B2B 8D 90 9F			sta W+1
  6542
  6543 				; optimize OK (service.pas), line = 1177
  6544
  6545 4B2E A9 68			lda #$68
  6546 4B30 85 8E			sta @SMALLINT.MOD.B
  6547 4B32 A9 01			lda #$01
  6548 4B34 85 8F			sta @SMALLINT.MOD.B+1
  6549 4B36 AD 8F 9F			lda W
  6550 4B39 85 86			sta @SMALLINT.MOD.A
  6551 4B3B AD 90 9F			lda W+1
  6552 4B3E 85 87			sta @SMALLINT.MOD.A+1
  6553 4B40 20 1C 22			jsr @SMALLINT.MOD
  6554 4B43 A5 92			lda @SMALLINT.MOD.RESULT
  6555 4B45 8D 8F 9F			sta W
  6556 4B48 A5 93			lda @SMALLINT.MOD.RESULT+1
  6557 4B4A 8D 90 9F			sta W+1
  6558 4B4D			l_0CB5
  6559
  6560 				; optimize OK (service.pas), line = 1180
  6561
  6562 4B4D AD 8F 9F			lda W
  6563 4B50 8D 8D 9F			sta RESULT
  6564 4B53 AD 90 9F			lda W+1
  6565 4B56 8D 8E 9F			sta RESULT+1
  6566 4B59			@exit
  6567
  6568 				; ------------------------------------------------------------
  6569
  6570 = 9F89			BALL	= DATAORIGIN+$02B7
  6571 = 9CD2			BALL.X	= DATAORIGIN+$0000
  6572 = 9CD4			BALL.Y	= DATAORIGIN+$0002
  6573 = 9CD6			BALL.FINEX	= DATAORIGIN+$0004
  6574 = 9CD8			BALL.FINEY	= DATAORIGIN+$0006
  6575 = 9CDA			BALL.OLDX	= DATAORIGIN+$0008
  6576 = 9CDC			BALL.OLDY	= DATAORIGIN+$000A
  6577 = 9CDE			BALL.SPEED	= DATAORIGIN+$000C
  6578 = 9CE0			BALL.FINESPEED	= DATAORIGIN+$000E
  6579 = 9CE2			BALL.SPEEDX	= DATAORIGIN+$0010
  6580 = 9CE4			BALL.SPEEDY	= DATAORIGIN+$0012
  6581 = 9CE6			BALL.SBD	= DATAORIGIN+$0014
  6582 = 9CE8			BALL.BRWHIT	= DATAORIGIN+$0016
  6583 = 9CE9			BALL.INPLAY	= DATAORIGIN+$0017
  6584 = 9CEA			BALL.LAUNCH	= DATAORIGIN+$0018
  6585 = 9CEB			BALL.ONVAUS	= DATAORIGIN+$0019
  6586 = 9CED			BALL.STM	= DATAORIGIN+$001B
  6587 = 9F8D			RESULT	= DATAORIGIN+$02BB
  6588 = 9F8F			W	= DATAORIGIN+$02BD
  6589
  6590 = 9F89			@VarData	= BALL
  6591 = 0004			@VarDataSize	= 4
  6592
  6593 4B59 60				rts						; ret
  6594 				.endl
  6595
  6596 4B5A			.local	START_BALL					; PROCEDURE
  6597
  6598 				; optimize OK (service.pas), line = 1189
  6599
  6600 4B5A AC 91 9F 84 84 AC + 	mwy BALL :bp2
  6601 4B64 A0 19			ldy #BALL.ONVAUS-DATAORIGIN
  6602 4B66 AD 55 9E			lda VAUS.X
  6603 4B69 18 71 84			add (:bp2),y
  6604 4B6C 85 9F			sta :STACKORIGIN+9
  6605 4B6E C8				iny
  6606 4B6F A9 00			lda #$00
  6607 4B71 71 84			adc (:bp2),y
  6608 4B73 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  6609 4B75 A0 00			ldy #BALL.X-DATAORIGIN
  6610 4B77 A5 9F			lda :STACKORIGIN+9
  6611 4B79 91 84			sta (:bp2),y
  6612 4B7B C8				iny
  6613 4B7C A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  6614 4B7E 91 84			sta (:bp2),y
  6615
  6616 				; optimize OK (service.pas), line = 1195
  6617
  6618 4B80 A0 02			ldy #BALL.Y-DATAORIGIN
  6619 4B82 AD 56 9E			lda VAUS.Y
  6620 4B85 38 E9 03			sub #$03
  6621 4B88 91 84			sta (:bp2),y
  6622 4B8A C8				iny
  6623 4B8B A9 00			lda #$00
  6624 4B8D E9 00			sbc #$00
  6625 4B8F 91 84			sta (:bp2),y
  6626
  6627 				; optimize OK (service.pas), line = 1200
  6628
  6629 4B91 A0 04			ldy #BALL.FINEX-DATAORIGIN
  6630 4B93 A9 00			lda #$00
  6631 4B95 91 84			sta (:bp2),y
  6632 4B97 C8				iny
  6633 4B98 91 84			sta (:bp2),y
  6634
  6635 				; optimize OK (service.pas), line = 1201
  6636
  6637 4B9A A0 06			ldy #BALL.FINEY-DATAORIGIN
  6638 4B9C 91 84			sta (:bp2),y
  6639 4B9E C8				iny
  6640 4B9F 91 84			sta (:bp2),y
  6641
  6642 				; optimize OK (service.pas), line = 1203
  6643
  6644 4BA1 A0 17			ldy #BALL.INPLAY-DATAORIGIN
  6645 4BA3 A9 01			lda #$01
  6646 4BA5 91 84			sta (:bp2),y
  6647
  6648 				; optimize OK (service.pas), line = 1205
  6649
  6650 4BA7 A0 14			ldy #BALL.SBD-DATAORIGIN
  6651 4BA9 A9 00			lda #$00
  6652 4BAB 91 84			sta (:bp2),y
  6653 4BAD C8				iny
  6654 4BAE 91 84			sta (:bp2),y
  6655
  6656 				; optimize OK (service.pas), line = 1206
  6657
  6658 4BB0 A0 16			ldy #BALL.BRWHIT-DATAORIGIN
  6659 4BB2 91 84			sta (:bp2),y
  6660
  6661 				; ------------------------------------------------------------
  6662
  6663 = 9F91			BALL	= DATAORIGIN+$02BF
  6664 = 9CD2			BALL.X	= DATAORIGIN+$0000
  6665 = 9CD4			BALL.Y	= DATAORIGIN+$0002
  6666 = 9CD6			BALL.FINEX	= DATAORIGIN+$0004
  6667 = 9CD8			BALL.FINEY	= DATAORIGIN+$0006
  6668 = 9CDA			BALL.OLDX	= DATAORIGIN+$0008
  6669 = 9CDC			BALL.OLDY	= DATAORIGIN+$000A
  6670 = 9CDE			BALL.SPEED	= DATAORIGIN+$000C
  6671 = 9CE0			BALL.FINESPEED	= DATAORIGIN+$000E
  6672 = 9CE2			BALL.SPEEDX	= DATAORIGIN+$0010
  6673 = 9CE4			BALL.SPEEDY	= DATAORIGIN+$0012
  6674 = 9CE6			BALL.SBD	= DATAORIGIN+$0014
  6675 = 9CE8			BALL.BRWHIT	= DATAORIGIN+$0016
  6676 = 9CE9			BALL.INPLAY	= DATAORIGIN+$0017
  6677 = 9CEA			BALL.LAUNCH	= DATAORIGIN+$0018
  6678 = 9CEB			BALL.ONVAUS	= DATAORIGIN+$0019
  6679 = 9CED			BALL.STM	= DATAORIGIN+$001B
  6680
  6681 = 9F91			@VarData	= BALL
  6682 = 0002			@VarDataSize	= 2
  6683
  6684 4BB4			@exit
  6685 					.ifdef @new
  6686 					lda <@VarData
  6687 					sta :ztmp
  6688 					lda >@VarData
  6689 					ldy #@VarDataSize-1
  6690 					jmp @FreeMem
  6691 					els
  6692 4BB4 60				rts						; ret
  6693 					eif
  6694 				.endl
  6695
  6696 4BB5			.local	BALL_SPEED					; FUNCTION
  6697
  6698 				; ------------------------------------------------------------
  6699
  6700 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
  6701 				; as Pointer
  6702 4BB5 B5 96			lda :STACKORIGIN,x
  6703 4BB7 85 84			sta :bp2
  6704 4BB9 B5 A6			lda :STACKORIGIN+STACKWIDTH,x
  6705 4BBB 85 85			sta :bp2+1
  6706 4BBD A0 1B			ldy #$1B
  6707 4BBF B1 84 99 95 9F 88 + 	mva:rpl (:bp2),y adr.BALL,y-
  6708 4BC7 CA				dex
  6709 4BC8			@main
  6710
  6711 				; optimize OK (service.pas), line = 1217
  6712
  6713 4BC8 AD A5 9F			lda BALL.SPEEDX
  6714 4BCB 85 8A			sta SYSTEM.ABS.@010184000.X
  6715 4BCD AD A6 9F			lda BALL.SPEEDX+1
  6716 4BD0 85 8B			sta SYSTEM.ABS.@010184000.X+1
  6717 4BD2 20 5F 2A			jsr SYSTEM.ABS.@010184000
  6718 4BD5 A5 92			lda SYSTEM.ABS.@010184000.RESULT
  6719 4BD7 8D B7 9F			sta A
  6720 4BDA A5 93			lda SYSTEM.ABS.@010184000.RESULT+1
  6721 4BDC 8D B8 9F			sta A+1
  6722
  6723 				; optimize OK (service.pas), line = 1218
  6724
  6725 4BDF AD A7 9F			lda BALL.SPEEDY
  6726 4BE2 85 8A			sta SYSTEM.ABS.@010184000.X
  6727 4BE4 AD A8 9F			lda BALL.SPEEDY+1
  6728 4BE7 85 8B			sta SYSTEM.ABS.@010184000.X+1
  6729 4BE9 20 5F 2A			jsr SYSTEM.ABS.@010184000
  6730 4BEC A5 92			lda SYSTEM.ABS.@010184000.RESULT
  6731 4BEE 8D B9 9F			sta B
  6732 4BF1 A5 93			lda SYSTEM.ABS.@010184000.RESULT+1
  6733 4BF3 8D BA 9F			sta B+1
  6734
  6735 				; optimize OK (service.pas), line = 1220
  6736
  6737 4BF6 AD B7 9F			lda A
  6738 4BF9 85 8E			sta :ecx
  6739 4BFB 85 86			sta :eax
  6740 4BFD AD B8 9F			lda A+1
  6741 4C00 85 8F			sta :ecx+1
  6742 4C02 85 87			sta :eax+1
  6743 					.ifdef fmulinit
  6744 					fmulu_16
  6745 					els
  6746 4C04 20 8B 22			imulCX
  6747 					eif
  6748 4C07 A5 86			lda :eax
  6749 4C09 85 9F			sta :STACKORIGIN+9
  6750 4C0B A5 87			lda :eax+1
  6751 4C0D 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  6752 4C0F A5 88			lda :eax+2
  6753 4C11 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
  6754 4C13 A5 89			lda :eax+3
  6755 4C15 85 CF			sta :STACKORIGIN+STACKWIDTH*3+9
  6756 4C17 AD B9 9F			lda B
  6757 4C1A 85 8E			sta :ecx
  6758 4C1C 85 86			sta :eax
  6759 4C1E AD BA 9F			lda B+1
  6760 4C21 85 8F			sta :ecx+1
  6761 4C23 85 87			sta :eax+1
  6762 					.ifdef fmulinit
  6763 					fmulu_16
  6764 					els
  6765 4C25 20 8B 22			imulCX
  6766 					eif
  6767 4C28 A5 9F			lda :STACKORIGIN+9
  6768 4C2A 18 65 86			add :eax
  6769 4C2D 8D B3 9F			sta I
  6770 4C30 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  6771 4C32 65 87			adc :eax+1
  6772 4C34 8D B4 9F			sta I+1
  6773 4C37 A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
  6774 4C39 65 88			adc :eax+2
  6775 4C3B 8D B5 9F			sta I+2
  6776 4C3E A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
  6777 4C40 65 89			adc :eax+3
  6778 4C42 8D B6 9F			sta I+3
  6779
  6780 				; optimize OK (service.pas), line = 1222
  6781
  6782 4C45 AD B3 9F			lda I
  6783 4C48 8D BF 9D			sta SQRT32.V
  6784 4C4B AD B4 9F			lda I+1
  6785 4C4E 8D C0 9D			sta SQRT32.V+1
  6786 4C51 AD B5 9F			lda I+2
  6787 4C54 8D C1 9D			sta SQRT32.V+2
  6788 4C57 AD B6 9F			lda I+3
  6789 4C5A 8D C2 9D			sta SQRT32.V+3
  6790 4C5D 20 D2 38			jsr SQRT32
  6791 4C60 AD C3 9D			lda SQRT32.RESULT
  6792 4C63 8D B1 9F			sta RESULT
  6793 4C66 AD C4 9D			lda SQRT32.RESULT+1
  6794 4C69 8D B2 9F			sta RESULT+1
  6795 4C6C			@exit
  6796
  6797 				; ------------------------------------------------------------
  6798
  6799 = 9F95			adr.BALL	= DATAORIGIN+$02C3	; [28] RECORD
  6800 4C6C			.var BALL	= adr.BALL .word
  6801 = 9F95			BALL.X	= DATAORIGIN+$02C3
  6802 = 9F97			BALL.Y	= DATAORIGIN+$02C5
  6803 = 9F99			BALL.FINEX	= DATAORIGIN+$02C7
  6804 = 9F9B			BALL.FINEY	= DATAORIGIN+$02C9
  6805 = 9F9D			BALL.OLDX	= DATAORIGIN+$02CB
  6806 = 9F9F			BALL.OLDY	= DATAORIGIN+$02CD
  6807 = 9FA1			BALL.SPEED	= DATAORIGIN+$02CF
  6808 = 9FA3			BALL.FINESPEED	= DATAORIGIN+$02D1
  6809 = 9FA5			BALL.SPEEDX	= DATAORIGIN+$02D3
  6810 = 9FA7			BALL.SPEEDY	= DATAORIGIN+$02D5
  6811 = 9FA9			BALL.SBD	= DATAORIGIN+$02D7
  6812 = 9FAB			BALL.BRWHIT	= DATAORIGIN+$02D9
  6813 = 9FAC			BALL.INPLAY	= DATAORIGIN+$02DA
  6814 = 9FAD			BALL.LAUNCH	= DATAORIGIN+$02DB
  6815 = 9FAE			BALL.ONVAUS	= DATAORIGIN+$02DC
  6816 = 9FB0			BALL.STM	= DATAORIGIN+$02DE
  6817 = 9FB1			RESULT	= DATAORIGIN+$02DF
  6818 = 9FB3			I	= DATAORIGIN+$02E1
  6819 = 9FB7			A	= DATAORIGIN+$02E5
  6820 = 9FB9			B	= DATAORIGIN+$02E7
  6821
  6822 = 9F95			@VarData	= BALL.X
  6823 = 0024			@VarDataSize	= 36
  6824
  6825 4C6C 60				rts						; ret
  6826 = 4C6D 95 9F		BALL
  6826 				.endl
  6827
  6828 4C6F			.local	MOVE_BALL					; PROCEDURE
  6829
  6830 				; optimize OK (service.pas), line = 1240
  6831
  6832 4C6F AC BB 9F 84 84 AC + 	mwy BALL :bp2
  6833 4C79 A0 00			ldy #BALL.X-DATAORIGIN
  6834 4C7B B1 84			lda (:bp2),y
  6835 4C7D C8				iny
  6836 4C7E 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  6837 4C80 A9 00			lda #$00
  6838 4C82 A0 04			ldy #BALL.FINEX-DATAORIGIN
  6839 4C84 18 71 84			add (:bp2),y
  6840 4C87 85 9F			sta :STACKORIGIN+9
  6841 4C89 C8				iny
  6842 4C8A A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  6843 4C8C 71 84			adc (:bp2),y
  6844 4C8E 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  6845 4C90 A0 10			ldy #BALL.SPEEDX-DATAORIGIN
  6846 4C92 A5 9F			lda :STACKORIGIN+9
  6847 4C94 18 71 84			add (:bp2),y
  6848 4C97 8D C2 9F			sta X
  6849 4C9A C8				iny
  6850 4C9B A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  6851 4C9D 71 84			adc (:bp2),y
  6852 4C9F 8D C3 9F			sta X+1
  6853
  6854 				; optimize OK (service.pas), line = 1241
  6855
  6856 4CA2 A0 02			ldy #BALL.Y-DATAORIGIN
  6857 4CA4 B1 84			lda (:bp2),y
  6858 4CA6 C8				iny
  6859 4CA7 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  6860 4CA9 A9 00			lda #$00
  6861 4CAB A0 06			ldy #BALL.FINEY-DATAORIGIN
  6862 4CAD 18 71 84			add (:bp2),y
  6863 4CB0 85 9F			sta :STACKORIGIN+9
  6864 4CB2 C8				iny
  6865 4CB3 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  6866 4CB5 71 84			adc (:bp2),y
  6867 4CB7 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  6868 4CB9 A0 12			ldy #BALL.SPEEDY-DATAORIGIN
  6869 4CBB A5 9F			lda :STACKORIGIN+9
  6870 4CBD 18 71 84			add (:bp2),y
  6871 4CC0 8D C4 9F			sta Y
  6872 4CC3 C8				iny
  6873 4CC4 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  6874 4CC6 71 84			adc (:bp2),y
  6875 4CC8 8D C5 9F			sta Y+1
  6876
  6877 				; optimize OK (service.pas), line = 1243
  6878
  6879 4CCB A0 00			ldy #BALL.X-DATAORIGIN
  6880 4CCD AD C3 9F			lda X+1
  6881 4CD0 91 84			sta (:bp2),y
  6882 4CD2 C8				iny
  6883 4CD3 A9 00			lda #$00
  6884 4CD5 91 84			sta (:bp2),y
  6885
  6886 				; optimize OK (service.pas), line = 1244
  6887
  6888 4CD7 A0 02			ldy #BALL.Y-DATAORIGIN
  6889 4CD9 AD C5 9F			lda Y+1
  6890 4CDC 91 84			sta (:bp2),y
  6891 4CDE C8				iny
  6892 4CDF A9 00			lda #$00
  6893 4CE1 91 84			sta (:bp2),y
  6894
  6895 				; optimize OK (service.pas), line = 1246
  6896
  6897 4CE3 A0 04			ldy #BALL.FINEX-DATAORIGIN
  6898 4CE5 AD C2 9F			lda X
  6899 4CE8 91 84			sta (:bp2),y
  6900 4CEA C8				iny
  6901 4CEB A9 00			lda #$00
  6902 4CED 91 84			sta (:bp2),y
  6903
  6904 				; optimize OK (service.pas), line = 1247
  6905
  6906 4CEF A0 06			ldy #BALL.FINEY-DATAORIGIN
  6907 4CF1 AD C4 9F			lda Y
  6908 4CF4 91 84			sta (:bp2),y
  6909 4CF6 C8				iny
  6910 4CF7 A9 00			lda #$00
  6911 4CF9 91 84			sta (:bp2),y
  6912
  6913 				; optimize OK (service.pas), line = 1252
  6914
  6915 4CFB A0 00			ldy #BALL.X-DATAORIGIN
  6916 4CFD B1 84			lda (:bp2),y
  6917 4CFF C8				iny
  6918 4D00 C9 D9			cmp #$D9
  6919 4D02 B1 84			lda (:bp2),y
  6920 4D04 E9 00			sbc #$00
  6921 4D06 50 02			svc
  6922 4D08 49 80			eor #$80
  6923 4D0A 30 67			jmi l_0DAF
  6924
  6925 				; optimize OK (service.pas), line = 1254
  6926
  6927 4D0C A0 10			ldy #BALL.SPEEDX-DATAORIGIN
  6928 4D0E A9 00			lda #$00
  6929 4D10 38 F1 84			sub (:bp2),y
  6930 4D13 85 9F			sta :STACKORIGIN+9
  6931 4D15 C8				iny
  6932 4D16 A9 00			lda #$00
  6933 4D18 F1 84			sbc (:bp2),y
  6934 4D1A 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  6935 4D1C A0 10			ldy #BALL.SPEEDX-DATAORIGIN
  6936 4D1E A5 9F			lda :STACKORIGIN+9
  6937 4D20 91 84			sta (:bp2),y
  6938 4D22 C8				iny
  6939 4D23 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  6940 4D25 91 84			sta (:bp2),y
  6941
  6942 				; optimize OK (service.pas), line = 1255
  6943
  6944 4D27 A0 00			ldy #BALL.X-DATAORIGIN
  6945 4D29 A9 B0			lda #$B0
  6946 4D2B 38 F1 84			sub (:bp2),y
  6947 4D2E 85 9F			sta :STACKORIGIN+9
  6948 4D30 C8				iny
  6949 4D31 A9 01			lda #$01
  6950 4D33 F1 84			sbc (:bp2),y
  6951 4D35 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  6952 4D37 A0 00			ldy #BALL.X-DATAORIGIN
  6953 4D39 A5 9F			lda :STACKORIGIN+9
  6954 4D3B 91 84			sta (:bp2),y
  6955 4D3D C8				iny
  6956 4D3E A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  6957 4D40 91 84			sta (:bp2),y
  6958
  6959 				; optimize OK (service.pas), line = 1256
  6960
  6961 4D42 A0 04			ldy #BALL.FINEX-DATAORIGIN
  6962 4D44 A9 FF			lda #$FF
  6963 4D46 51 84			eor (:bp2),y
  6964 4D48 85 9F			sta :STACKORIGIN+9
  6965 4D4A C8				iny
  6966 4D4B A9 00			lda #$00
  6967 4D4D F1 84			sbc (:bp2),y
  6968 4D4F 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  6969 4D51 A0 04			ldy #BALL.FINEX-DATAORIGIN
  6970 4D53 A5 9F			lda :STACKORIGIN+9
  6971 4D55 91 84			sta (:bp2),y
  6972 4D57 C8				iny
  6973 4D58 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  6974 4D5A 91 84			sta (:bp2),y
  6975
  6976 				; optimize OK (service.pas), line = 1257
  6977
  6978 4D5C A9 F0			lda #$F0
  6979 4D5E 8D BB 9D			sta BALL_BLOCK_SOUND.A
  6980 4D61 A9 00			lda #$00
  6981 4D63 8D BC 9D			sta BALL_BLOCK_SOUND.A+1
  6982 4D66 A9 05			lda #$05
  6983 4D68 8D BD 9D			sta BALL_BLOCK_SOUND.B
  6984 4D6B A9 00			lda #$00
  6985 4D6D 8D BE 9D			sta BALL_BLOCK_SOUND.B+1
  6986 4D70 20 D1 38			jsr BALL_BLOCK_SOUND
  6987 4D73			l_0DAF
  6988
  6989 				; optimize OK (service.pas), line = 1262
  6990
  6991 4D73 AC BB 9F 84 84 AC + 	mwy BALL :bp2
  6992 4D7D A0 00			ldy #BALL.X-DATAORIGIN
  6993 4D7F B1 84			lda (:bp2),y
  6994 4D81 C8				iny
  6995 4D82 C9 0A			cmp #$0A
  6996 4D84 B1 84			lda (:bp2),y
  6997 4D86 E9 00			sbc #$00
  6998 4D88 50 02			svc
  6999 4D8A 49 80			eor #$80
  7000 4D8C 10 67			jpl l_0DE4
  7001
  7002 				; optimize OK (service.pas), line = 1264
  7003
  7004 4D8E A0 10			ldy #BALL.SPEEDX-DATAORIGIN
  7005 4D90 A9 00			lda #$00
  7006 4D92 38 F1 84			sub (:bp2),y
  7007 4D95 85 9F			sta :STACKORIGIN+9
  7008 4D97 C8				iny
  7009 4D98 A9 00			lda #$00
  7010 4D9A F1 84			sbc (:bp2),y
  7011 4D9C 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  7012 4D9E A0 10			ldy #BALL.SPEEDX-DATAORIGIN
  7013 4DA0 A5 9F			lda :STACKORIGIN+9
  7014 4DA2 91 84			sta (:bp2),y
  7015 4DA4 C8				iny
  7016 4DA5 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  7017 4DA7 91 84			sta (:bp2),y
  7018
  7019 				; optimize OK (service.pas), line = 1265
  7020
  7021 4DA9 A0 00			ldy #BALL.X-DATAORIGIN
  7022 4DAB A9 14			lda #$14
  7023 4DAD 38 F1 84			sub (:bp2),y
  7024 4DB0 85 9F			sta :STACKORIGIN+9
  7025 4DB2 C8				iny
  7026 4DB3 A9 00			lda #$00
  7027 4DB5 F1 84			sbc (:bp2),y
  7028 4DB7 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  7029 4DB9 A0 00			ldy #BALL.X-DATAORIGIN
  7030 4DBB A5 9F			lda :STACKORIGIN+9
  7031 4DBD 91 84			sta (:bp2),y
  7032 4DBF C8				iny
  7033 4DC0 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  7034 4DC2 91 84			sta (:bp2),y
  7035
  7036 				; optimize OK (service.pas), line = 1266
  7037
  7038 4DC4 A0 04			ldy #BALL.FINEX-DATAORIGIN
  7039 4DC6 A9 FF			lda #$FF
  7040 4DC8 51 84			eor (:bp2),y
  7041 4DCA 85 9F			sta :STACKORIGIN+9
  7042 4DCC C8				iny
  7043 4DCD A9 00			lda #$00
  7044 4DCF F1 84			sbc (:bp2),y
  7045 4DD1 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  7046 4DD3 A0 04			ldy #BALL.FINEX-DATAORIGIN
  7047 4DD5 A5 9F			lda :STACKORIGIN+9
  7048 4DD7 91 84			sta (:bp2),y
  7049 4DD9 C8				iny
  7050 4DDA A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  7051 4DDC 91 84			sta (:bp2),y
  7052
  7053 				; optimize OK (service.pas), line = 1267
  7054
  7055 4DDE A9 F0			lda #$F0
  7056 4DE0 8D BB 9D			sta BALL_BLOCK_SOUND.A
  7057 4DE3 A9 00			lda #$00
  7058 4DE5 8D BC 9D			sta BALL_BLOCK_SOUND.A+1
  7059 4DE8 A9 05			lda #$05
  7060 4DEA 8D BD 9D			sta BALL_BLOCK_SOUND.B
  7061 4DED A9 00			lda #$00
  7062 4DEF 8D BE 9D			sta BALL_BLOCK_SOUND.B+1
  7063 4DF2 20 D1 38			jsr BALL_BLOCK_SOUND
  7064 4DF5			l_0DE4
  7065
  7066 				; optimize OK (service.pas), line = 1272
  7067
  7068 4DF5 AC BB 9F 84 84 AC + 	mwy BALL :bp2
  7069 4DFF A0 02			ldy #BALL.Y-DATAORIGIN
  7070 4E01 B1 84			lda (:bp2),y
  7071 4E03 C8				iny
  7072 4E04 C9 0C			cmp #$0C
  7073 4E06 B1 84			lda (:bp2),y
  7074 4E08 E9 00			sbc #$00
  7075 4E0A 50 02			svc
  7076 4E0C 49 80			eor #$80
  7077 4E0E 10 67			jpl l_0E19
  7078
  7079 				; optimize OK (service.pas), line = 1274
  7080
  7081 4E10 A0 12			ldy #BALL.SPEEDY-DATAORIGIN
  7082 4E12 A9 00			lda #$00
  7083 4E14 38 F1 84			sub (:bp2),y
  7084 4E17 85 9F			sta :STACKORIGIN+9
  7085 4E19 C8				iny
  7086 4E1A A9 00			lda #$00
  7087 4E1C F1 84			sbc (:bp2),y
  7088 4E1E 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  7089 4E20 A0 12			ldy #BALL.SPEEDY-DATAORIGIN
  7090 4E22 A5 9F			lda :STACKORIGIN+9
  7091 4E24 91 84			sta (:bp2),y
  7092 4E26 C8				iny
  7093 4E27 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  7094 4E29 91 84			sta (:bp2),y
  7095
  7096 				; optimize OK (service.pas), line = 1275
  7097
  7098 4E2B A0 02			ldy #BALL.Y-DATAORIGIN
  7099 4E2D A9 18			lda #$18
  7100 4E2F 38 F1 84			sub (:bp2),y
  7101 4E32 85 9F			sta :STACKORIGIN+9
  7102 4E34 C8				iny
  7103 4E35 A9 00			lda #$00
  7104 4E37 F1 84			sbc (:bp2),y
  7105 4E39 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  7106 4E3B A0 02			ldy #BALL.Y-DATAORIGIN
  7107 4E3D A5 9F			lda :STACKORIGIN+9
  7108 4E3F 91 84			sta (:bp2),y
  7109 4E41 C8				iny
  7110 4E42 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  7111 4E44 91 84			sta (:bp2),y
  7112
  7113 				; optimize OK (service.pas), line = 1276
  7114
  7115 4E46 A0 06			ldy #BALL.FINEY-DATAORIGIN
  7116 4E48 A9 FF			lda #$FF
  7117 4E4A 51 84			eor (:bp2),y
  7118 4E4C 85 9F			sta :STACKORIGIN+9
  7119 4E4E C8				iny
  7120 4E4F A9 00			lda #$00
  7121 4E51 F1 84			sbc (:bp2),y
  7122 4E53 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  7123 4E55 A0 06			ldy #BALL.FINEY-DATAORIGIN
  7124 4E57 A5 9F			lda :STACKORIGIN+9
  7125 4E59 91 84			sta (:bp2),y
  7126 4E5B C8				iny
  7127 4E5C A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  7128 4E5E 91 84			sta (:bp2),y
  7129
  7130 				; optimize OK (service.pas), line = 1277
  7131
  7132 4E60 A9 F0			lda #$F0
  7133 4E62 8D BB 9D			sta BALL_BLOCK_SOUND.A
  7134 4E65 A9 00			lda #$00
  7135 4E67 8D BC 9D			sta BALL_BLOCK_SOUND.A+1
  7136 4E6A A9 05			lda #$05
  7137 4E6C 8D BD 9D			sta BALL_BLOCK_SOUND.B
  7138 4E6F A9 00			lda #$00
  7139 4E71 8D BE 9D			sta BALL_BLOCK_SOUND.B+1
  7140 4E74 20 D1 38			jsr BALL_BLOCK_SOUND
  7141 4E77			l_0E19
  7142
  7143 				; optimize OK (service.pas), line = 1285
  7144
  7145 4E77 AC BB 9F 84 84 AC + 	mwy BALL :bp2
  7146 4E81 A0 02			ldy #BALL.Y-DATAORIGIN
  7147 4E83 B1 84			lda (:bp2),y
  7148 4E85 18 69 03			add #$03
  7149 4E88 85 9F			sta :STACKORIGIN+9
  7150 4E8A C8				iny
  7151 4E8B B1 84			lda (:bp2),y
  7152 4E8D 69 00			adc #$00
  7153 4E8F 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  7154 4E91 A0 01			ldy #1
  7155 4E93 A5 9F			lda :STACKORIGIN+9
  7156 4E95 C9 B9			cmp #$B9
  7157 4E97 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  7158 4E99 E9 00			sbc #$00
  7159 4E9B 50 02			svc
  7160 4E9D 49 80			eor #$80
  7161 4E9F 10 01			bpl @+
  7162 4EA1 88				dey
  7163 				@
  7164 4EA2 98				tya
  7165 4EA3 8D BF 9F			sta B0
  7166
  7167 				; optimize OK (service.pas), line = 1286
  7168
  7169 4EA6 A0 12			ldy #BALL.SPEEDY-DATAORIGIN
  7170 4EA8 B1 84			lda (:bp2),y
  7171 4EAA 85 9F			sta :STACKORIGIN+9
  7172 4EAC C8				iny
  7173 4EAD B1 84			lda (:bp2),y
  7174 4EAF 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  7175 4EB1 A0 01			ldy #1
  7176 4EB3 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  7177 4EB5 30 04			bmi @+
  7178 4EB7 05 9F			ora :STACKORIGIN+9
  7179 4EB9 D0 01			sne
  7180 				@
  7181 4EBB 88				dey
  7182 				@
  7183 4EBC 98				tya
  7184 4EBD 8D C0 9F			sta B1
  7185
  7186 				; optimize OK (service.pas), line = 1287
  7187
  7188 4EC0 A0 0A			ldy #BALL.OLDY-DATAORIGIN
  7189 4EC2 B1 84			lda (:bp2),y
  7190 4EC4 85 9F			sta :STACKORIGIN+9
  7191 4EC6 C8				iny
  7192 4EC7 B1 84			lda (:bp2),y
  7193 4EC9 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  7194 4ECB A0 01			ldy #1
  7195 4ECD A5 9F			lda :STACKORIGIN+9
  7196 4ECF C9 B9			cmp #$B9
  7197 4ED1 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  7198 4ED3 E9 00			sbc #$00
  7199 4ED5 50 02			svc
  7200 4ED7 49 80			eor #$80
  7201 4ED9 30 01			bmi @+
  7202 4EDB 88				dey
  7203 				@
  7204 4EDC 98				tya
  7205 4EDD 8D C1 9F			sta B2
  7206
  7207 				; optimize OK (service.pas), line = 1290
  7208
  7209 4EE0 AD BF 9F			lda B0
  7210 4EE3 2D C0 9F			and B1
  7211 4EE6 2D C1 9F			and B2
  7212 4EE9 D0 03 4C 97 51		jeq l_0E7A
  7213
  7214 				; optimize OK (service.pas), line = 1294
  7215
  7216 4EEE A0 00			ldy #BALL.X-DATAORIGIN
  7217 4EF0 B1 84			lda (:bp2),y
  7218 4EF2 85 9F			sta :STACKORIGIN+9
  7219 4EF4 C8				iny
  7220 4EF5 AD 55 9E			lda VAUS.X
  7221 4EF8 38 E9 03			sub #$03
  7222 4EFB 85 A0			sta :STACKORIGIN+10
  7223 4EFD A9 00			lda #$00
  7224 4EFF E9 00			sbc #$00
  7225 4F01 85 B0			sta :STACKORIGIN+STACKWIDTH+10
  7226 4F03 A5 A0			lda :STACKORIGIN+10
  7227 4F05 C5 9F			cmp :STACKORIGIN+9
  7228 4F07 A5 B0			lda :STACKORIGIN+STACKWIDTH+10
  7229 4F09 F1 84			sbc (:bp2),y
  7230 4F0B 50 02			svc
  7231 4F0D 49 80			eor #$80
  7232 4F0F 30 03 4C 97 51		jpl l_0EA9
  7233 4F14 A0 00			ldy #BALL.X-DATAORIGIN
  7234 4F16 B1 84			lda (:bp2),y
  7235 4F18 85 A0			sta :STACKORIGIN+10
  7236 4F1A C8				iny
  7237 4F1B AD 55 9E			lda VAUS.X
  7238 4F1E 18 6D 5D 9E			add VAUS.WIDTH
  7239 4F22 85 A1			sta :STACKORIGIN+11
  7240 4F24 A9 00			lda #$00
  7241 4F26 69 00			adc #$00
  7242 4F28 85 B1			sta :STACKORIGIN+STACKWIDTH+11
  7243 4F2A A5 A1			lda :STACKORIGIN+11
  7244 4F2C 18 69 03			add #$03
  7245 4F2F 85 A1			sta :STACKORIGIN+11
  7246 4F31 A5 B1			lda :STACKORIGIN+STACKWIDTH+11
  7247 4F33 69 00			adc #$00
  7248 4F35 85 B1			sta :STACKORIGIN+STACKWIDTH+11
  7249 4F37 A5 A0			lda :STACKORIGIN+10
  7250 4F39 C5 A1			cmp :STACKORIGIN+11
  7251 4F3B B1 84			lda (:bp2),y
  7252 4F3D E5 B1			sbc :STACKORIGIN+STACKWIDTH+11
  7253 4F3F 50 02			svc
  7254 4F41 49 80			eor #$80
  7255 4F43 30 03 4C 97 51		jpl l_0EA9
  7256
  7257 				; optimize OK (service.pas), line = 1297
  7258
  7259 4F48 A0 12			ldy #BALL.SPEEDY-DATAORIGIN
  7260 4F4A A9 00			lda #$00
  7261 4F4C 38 F1 84			sub (:bp2),y
  7262 4F4F 85 9F			sta :STACKORIGIN+9
  7263 4F51 C8				iny
  7264 4F52 A9 00			lda #$00
  7265 4F54 F1 84			sbc (:bp2),y
  7266 4F56 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  7267 4F58 A0 12			ldy #BALL.SPEEDY-DATAORIGIN
  7268 4F5A A5 9F			lda :STACKORIGIN+9
  7269 4F5C 91 84			sta (:bp2),y
  7270 4F5E C8				iny
  7271 4F5F A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  7272 4F61 91 84			sta (:bp2),y
  7273
  7274 				; optimize OK (service.pas), line = 1299
  7275
  7276 4F63 AD 61 9E			lda VAUS.LETTER
  7277 4F66 C9 06			cmp #$06
  7278 4F68 D0 2C			jne l_0ECD
  7279 4F6A A0 18			ldy #BALL.LAUNCH-DATAORIGIN
  7280 4F6C B1 84			lda (:bp2),y
  7281 4F6E D0 26			jne l_0ECD
  7282
  7283 				; optimize OK (service.pas), line = 1301
  7284
  7285 4F70 A0 1B			ldy #BALL.STM-DATAORIGIN
  7286 4F72 91 84			sta (:bp2),y
  7287
  7288 				; optimize OK (service.pas), line = 1302
  7289
  7290 4F74 A0 18			ldy #BALL.LAUNCH-DATAORIGIN
  7291 4F76 A9 01			lda #$01
  7292 4F78 91 84			sta (:bp2),y
  7293
  7294 				; optimize OK (service.pas), line = 1303
  7295
  7296 4F7A A0 00			ldy #BALL.X-DATAORIGIN
  7297 4F7C B1 84			lda (:bp2),y
  7298 4F7E 38 ED 55 9E			sub VAUS.X
  7299 4F82 85 9F			sta :STACKORIGIN+9
  7300 4F84 C8				iny
  7301 4F85 B1 84			lda (:bp2),y
  7302 4F87 E9 00			sbc #$00
  7303 4F89 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  7304 4F8B A0 19			ldy #BALL.ONVAUS-DATAORIGIN
  7305 4F8D A5 9F			lda :STACKORIGIN+9
  7306 4F8F 91 84			sta (:bp2),y
  7307 4F91 C8				iny
  7308 4F92 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  7309 4F94 91 84			sta (:bp2),y
  7310 4F96			l_0ECD
  7311
  7312 				; optimize OK (service.pas), line = 1306
  7313
  7314 4F96 A9 2C			lda #$2C
  7315 4F98 8D BB 9D			sta BALL_BLOCK_SOUND.A
  7316 4F9B A9 01			lda #$01
  7317 4F9D 8D BC 9D			sta BALL_BLOCK_SOUND.A+1
  7318 4FA0 A9 06			lda #$06
  7319 4FA2 8D BD 9D			sta BALL_BLOCK_SOUND.B
  7320 4FA5 A9 00			lda #$00
  7321 4FA7 8D BE 9D			sta BALL_BLOCK_SOUND.B+1
  7322 4FAA 20 D1 38			jsr BALL_BLOCK_SOUND
  7323
  7324 				; optimize OK (service.pas), line = 1310
  7325
  7326 4FAD AC BB 9F 84 84 AC + 	mwy BALL :bp2
  7327 4FB7 A0 00			ldy #BALL.X-DATAORIGIN
  7328 4FB9 B1 84			lda (:bp2),y
  7329 4FBB 85 9F			sta :STACKORIGIN+9
  7330 4FBD C8				iny
  7331 4FBE AD 55 9E			lda VAUS.X
  7332 4FC1 18 69 0A			add #$0A
  7333 4FC4 85 A0			sta :STACKORIGIN+10
  7334 4FC6 A9 00			lda #$00
  7335 4FC8 69 00			adc #$00
  7336 4FCA 85 B0			sta :STACKORIGIN+STACKWIDTH+10
  7337 4FCC A5 9F			lda :STACKORIGIN+9
  7338 4FCE C5 A0			cmp :STACKORIGIN+10
  7339 4FD0 B1 84			lda (:bp2),y
  7340 4FD2 E5 B0			sbc :STACKORIGIN+STACKWIDTH+10
  7341 4FD4 50 02			svc
  7342 4FD6 49 80			eor #$80
  7343 4FD8 30 03 4C 9B 50		jpl l_0EFD
  7344
  7345 				; optimize OK (service.pas), line = 1313
  7346
  7347 4FDD A0 10			ldy #BALL.SPEEDX-DATAORIGIN
  7348 4FDF A9 00			lda #$00
  7349 4FE1 38 F1 84			sub (:bp2),y
  7350 4FE4 85 9F			sta :STACKORIGIN+9
  7351 4FE6 C8				iny
  7352 4FE7 A9 00			lda #$00
  7353 4FE9 F1 84			sbc (:bp2),y
  7354 4FEB 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  7355 4FED A0 10			ldy #BALL.SPEEDX-DATAORIGIN
  7356 4FEF A5 9F			lda :STACKORIGIN+9
  7357 4FF1 91 84			sta (:bp2),y
  7358 4FF3 C8				iny
  7359 4FF4 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  7360 4FF6 91 84			sta (:bp2),y
  7361
  7362 				; optimize OK (service.pas), line = 1317
  7363
  7364 4FF8 AD BB 9F			lda BALL
  7365 4FFB 8D 89 9F			sta GET_BALL_DIRECTION.BALL
  7366 4FFE AD BC 9F			lda BALL+1
  7367 5001 8D 8A 9F			sta GET_BALL_DIRECTION.BALL+1
  7368 5004 20 3C 49			jsr GET_BALL_DIRECTION
  7369 5007 E8				inx
  7370 5008 AD 8D 9F 95 96		mva GET_BALL_DIRECTION.RESULT :STACKORIGIN,x
  7371 500D AD 8E 9F 95 A6		mva GET_BALL_DIRECTION.RESULT+1 :STACKORIGIN+STACKWIDTH,x
  7372 5012 A9 1E			lda #$1E
  7373 5014 20 91 32			jsr SYSTEM.RANDOM.@010180000
  7374 5017 B5 96			lda :STACKORIGIN,x
  7375 5019 18 6D 09 9D			add SYSTEM.RANDOM.@010180000.RESULT
  7376 501D 8D C6 9F			sta ANGLE
  7377 5020 B5 A6			lda :STACKORIGIN+STACKWIDTH,x
  7378 5022 69 00			adc #$00
  7379 5024 8D C7 9F			sta ANGLE+1
  7380 5027 CA				dex
  7381
  7382 				; optimize OK (service.pas), line = 1325
  7383
  7384 5028 A9 A0			lda #$A0
  7385 502A 8D 1A 9F			sta MIN.A
  7386 502D A9 00			lda #$00
  7387 502F 8D 1B 9F			sta MIN.A+1
  7388 5032 AD C6 9F			lda ANGLE
  7389 5035 8D 1C 9F			sta MIN.B
  7390 5038 AD C7 9F			lda ANGLE+1
  7391 503B 8D 1D 9F			sta MIN.B+1
  7392 503E 20 11 3D			jsr MIN
  7393 5041 A9 78			lda #$78
  7394 5043 8D 14 9F			sta MAX.A
  7395 5046 A9 00			lda #$00
  7396 5048 8D 15 9F			sta MAX.A+1
  7397 504B AD 1E 9F			lda MIN.RESULT
  7398 504E 8D 16 9F			sta MAX.B
  7399 5051 AD 1F 9F			lda MIN.RESULT+1
  7400 5054 8D 17 9F			sta MAX.B+1
  7401 5057 20 E6 3C			jsr MAX
  7402 505A AD BB 9F			lda BALL
  7403 505D 8D 7F 9F			sta SET_BALL_DIRECTION.BALL
  7404 5060 AD BC 9F			lda BALL+1
  7405 5063 8D 80 9F			sta SET_BALL_DIRECTION.BALL+1
  7406 5066 AD 18 9F			lda MAX.RESULT
  7407 5069 8D 83 9F			sta SET_BALL_DIRECTION.ANGLE
  7408 506C AD 19 9F			lda MAX.RESULT+1
  7409 506F 8D 84 9F			sta SET_BALL_DIRECTION.ANGLE+1
  7410 5072 20 59 47			jsr SET_BALL_DIRECTION
  7411
  7412 				; optimize OK (service.pas), line = 1330
  7413
  7414 5075 AC BB 9F 84 84 AC + 	mwy BALL :bp2
  7415 507F A0 0C			ldy #BALL.SPEED-DATAORIGIN
  7416 5081 B1 84			lda (:bp2),y
  7417 5083 8D 6D 9F			sta SET_BALL_SPEED.SPEED
  7418 5086 C8				iny
  7419 5087 B1 84			lda (:bp2),y
  7420 5089 8D 6E 9F			sta SET_BALL_SPEED.SPEED+1
  7421 508C AD BB 9F			lda BALL
  7422 508F 8D 69 9F			sta SET_BALL_SPEED.BALL
  7423 5092 AD BC 9F			lda BALL+1
  7424 5095 8D 6A 9F			sta SET_BALL_SPEED.BALL+1
  7425 5098 20 76 45			jsr SET_BALL_SPEED
  7426 509B			l_0EFD
  7427
  7428 				; optimize OK (service.pas), line = 1336
  7429
  7430 509B AC BB 9F 84 84 AC + 	mwy BALL :bp2
  7431 50A5 A0 00			ldy #BALL.X-DATAORIGIN
  7432 50A7 B1 84			lda (:bp2),y
  7433 50A9 85 9F			sta :STACKORIGIN+9
  7434 50AB C8				iny
  7435 50AC AD 55 9E			lda VAUS.X
  7436 50AF 18 6D 5D 9E			add VAUS.WIDTH
  7437 50B3 85 A0			sta :STACKORIGIN+10
  7438 50B5 A9 00			lda #$00
  7439 50B7 69 00			adc #$00
  7440 50B9 85 B0			sta :STACKORIGIN+STACKWIDTH+10
  7441 50BB A5 A0			lda :STACKORIGIN+10
  7442 50BD 38 E9 0A			sub #$0A
  7443 50C0 85 A0			sta :STACKORIGIN+10
  7444 50C2 A5 B0			lda :STACKORIGIN+STACKWIDTH+10
  7445 50C4 E9 00			sbc #$00
  7446 50C6 85 B0			sta :STACKORIGIN+STACKWIDTH+10
  7447 50C8 A5 A0			lda :STACKORIGIN+10
  7448 50CA C5 9F			cmp :STACKORIGIN+9
  7449 50CC A5 B0			lda :STACKORIGIN+STACKWIDTH+10
  7450 50CE F1 84			sbc (:bp2),y
  7451 50D0 50 02			svc
  7452 50D2 49 80			eor #$80
  7453 50D4 30 03 4C 97 51		jpl l_0F3E
  7454
  7455 				; optimize OK (service.pas), line = 1338
  7456
  7457 50D9 A0 10			ldy #BALL.SPEEDX-DATAORIGIN
  7458 50DB A9 00			lda #$00
  7459 50DD 38 F1 84			sub (:bp2),y
  7460 50E0 85 9F			sta :STACKORIGIN+9
  7461 50E2 C8				iny
  7462 50E3 A9 00			lda #$00
  7463 50E5 F1 84			sbc (:bp2),y
  7464 50E7 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  7465 50E9 A0 10			ldy #BALL.SPEEDX-DATAORIGIN
  7466 50EB A5 9F			lda :STACKORIGIN+9
  7467 50ED 91 84			sta (:bp2),y
  7468 50EF C8				iny
  7469 50F0 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  7470 50F2 91 84			sta (:bp2),y
  7471
  7472 				; optimize OK (service.pas), line = 1339
  7473
  7474 50F4 AD BB 9F			lda BALL
  7475 50F7 8D 89 9F			sta GET_BALL_DIRECTION.BALL
  7476 50FA AD BC 9F			lda BALL+1
  7477 50FD 8D 8A 9F			sta GET_BALL_DIRECTION.BALL+1
  7478 5100 20 3C 49			jsr GET_BALL_DIRECTION
  7479 5103 E8				inx
  7480 5104 AD 8D 9F 95 96		mva GET_BALL_DIRECTION.RESULT :STACKORIGIN,x
  7481 5109 AD 8E 9F 95 A6		mva GET_BALL_DIRECTION.RESULT+1 :STACKORIGIN+STACKWIDTH,x
  7482 510E A9 1E			lda #$1E
  7483 5110 20 91 32			jsr SYSTEM.RANDOM.@010180000
  7484 5113 B5 96			lda :STACKORIGIN,x
  7485 5115 38 ED 09 9D			sub SYSTEM.RANDOM.@010180000.RESULT
  7486 5119 8D C6 9F			sta ANGLE
  7487 511C B5 A6			lda :STACKORIGIN+STACKWIDTH,x
  7488 511E E9 00			sbc #$00
  7489 5120 8D C7 9F			sta ANGLE+1
  7490 5123 CA				dex
  7491
  7492 				; optimize OK (service.pas), line = 1340
  7493
  7494 5124 A9 14			lda #$14
  7495 5126 8D 14 9F			sta MAX.A
  7496 5129 A9 00			lda #$00
  7497 512B 8D 15 9F			sta MAX.A+1
  7498 512E AD C6 9F			lda ANGLE
  7499 5131 8D 16 9F			sta MAX.B
  7500 5134 AD C7 9F			lda ANGLE+1
  7501 5137 8D 17 9F			sta MAX.B+1
  7502 513A 20 E6 3C			jsr MAX
  7503 513D A9 3C			lda #$3C
  7504 513F 8D 1A 9F			sta MIN.A
  7505 5142 A9 00			lda #$00
  7506 5144 8D 1B 9F			sta MIN.A+1
  7507 5147 AD 18 9F			lda MAX.RESULT
  7508 514A 8D 1C 9F			sta MIN.B
  7509 514D AD 19 9F			lda MAX.RESULT+1
  7510 5150 8D 1D 9F			sta MIN.B+1
  7511 5153 20 11 3D			jsr MIN
  7512 5156 AD BB 9F			lda BALL
  7513 5159 8D 7F 9F			sta SET_BALL_DIRECTION.BALL
  7514 515C AD BC 9F			lda BALL+1
  7515 515F 8D 80 9F			sta SET_BALL_DIRECTION.BALL+1
  7516 5162 AD 1E 9F			lda MIN.RESULT
  7517 5165 8D 83 9F			sta SET_BALL_DIRECTION.ANGLE
  7518 5168 AD 1F 9F			lda MIN.RESULT+1
  7519 516B 8D 84 9F			sta SET_BALL_DIRECTION.ANGLE+1
  7520 516E 20 59 47			jsr SET_BALL_DIRECTION
  7521
  7522 				; optimize OK (service.pas), line = 1341
  7523
  7524 5171 AC BB 9F 84 84 AC + 	mwy BALL :bp2
  7525 517B A0 0C			ldy #BALL.SPEED-DATAORIGIN
  7526 517D B1 84			lda (:bp2),y
  7527 517F 8D 6D 9F			sta SET_BALL_SPEED.SPEED
  7528 5182 C8				iny
  7529 5183 B1 84			lda (:bp2),y
  7530 5185 8D 6E 9F			sta SET_BALL_SPEED.SPEED+1
  7531 5188 AD BB 9F			lda BALL
  7532 518B 8D 69 9F			sta SET_BALL_SPEED.BALL
  7533 518E AD BC 9F			lda BALL+1
  7534 5191 8D 6A 9F			sta SET_BALL_SPEED.BALL+1
  7535 5194 20 76 45			jsr SET_BALL_SPEED
  7536 5197			l_0F3E
  7537 5197			l_0EA9
  7538 5197			l_0E7A
  7539
  7540 				; optimize OK (service.pas), line = 1353
  7541
  7542 5197 AC BB 9F 84 84 AC + 	mwy BALL :bp2
  7543 51A1 A0 0A			ldy #BALL.OLDY-DATAORIGIN
  7544 51A3 B1 84			lda (:bp2),y
  7545 51A5 85 9F			sta :STACKORIGIN+9
  7546 51A7 C8				iny
  7547 51A8 B1 84			lda (:bp2),y
  7548 51AA 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  7549 51AC A0 01			ldy #1
  7550 51AE A5 9F			lda :STACKORIGIN+9
  7551 51B0 C9 B9			cmp #$B9
  7552 51B2 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  7553 51B4 E9 00			sbc #$00
  7554 51B6 50 02			svc
  7555 51B8 49 80			eor #$80
  7556 51BA 10 01			bpl @+
  7557 51BC 88				dey
  7558 				@
  7559 51BD 84 9F			sty :STACKORIGIN+9
  7560 51BF A0 02			ldy #BALL.Y-DATAORIGIN
  7561 51C1 B1 84			lda (:bp2),y
  7562 51C3 85 A0			sta :STACKORIGIN+10
  7563 51C5 C8				iny
  7564 51C6 B1 84			lda (:bp2),y
  7565 51C8 85 B0			sta :STACKORIGIN+STACKWIDTH+10
  7566 51CA A0 01			ldy #1
  7567 51CC A5 A0			lda :STACKORIGIN+10
  7568 51CE C9 C9			cmp #$C9
  7569 51D0 A5 B0			lda :STACKORIGIN+STACKWIDTH+10
  7570 51D2 E9 00			sbc #$00
  7571 51D4 50 02			svc
  7572 51D6 49 80			eor #$80
  7573 51D8 10 01			bpl @+
  7574 51DA 88				dey
  7575 				@
  7576 51DB 98				tya
  7577 51DC 25 9F			and :STACKORIGIN+9
  7578 51DE 85 9F			sta :STACKORIGIN+9
  7579 51E0 A0 12			ldy #BALL.SPEEDY-DATAORIGIN
  7580 51E2 B1 84			lda (:bp2),y
  7581 51E4 85 A0			sta :STACKORIGIN+10
  7582 51E6 C8				iny
  7583 51E7 B1 84			lda (:bp2),y
  7584 51E9 85 B0			sta :STACKORIGIN+STACKWIDTH+10
  7585 51EB A0 01			ldy #1
  7586 51ED A5 B0			lda :STACKORIGIN+STACKWIDTH+10
  7587 51EF 30 04			bmi @+
  7588 51F1 05 A0			ora :STACKORIGIN+10
  7589 51F3 D0 01			sne
  7590 				@
  7591 51F5 88				dey
  7592 				@
  7593 51F6 98				tya
  7594 51F7 25 9F			and :STACKORIGIN+9
  7595 51F9 F0 15			jeq l_0F8D
  7596
  7597 				; optimize OK (service.pas), line = 1355
  7598
  7599 51FB A0 17			ldy #BALL.INPLAY-DATAORIGIN
  7600 51FD A9 00			lda #$00
  7601 51FF 91 84			sta (:bp2),y
  7602
  7603 				; optimize OK (service.pas), line = 1357
  7604
  7605 5201 AD BB 9F			lda BALL
  7606 5204 8D 5F 9F			sta REMOVE_BALL.BALL
  7607 5207 AD BC 9F			lda BALL+1
  7608 520A 8D 60 9F			sta REMOVE_BALL.BALL+1
  7609 520D 20 13 44			jsr REMOVE_BALL
  7610 5210			l_0F8D
  7611
  7612 				; ------------------------------------------------------------
  7613
  7614 = 9FBB			BALL	= DATAORIGIN+$02E9
  7615 = 9CD2			BALL.X	= DATAORIGIN+$0000
  7616 = 9CD4			BALL.Y	= DATAORIGIN+$0002
  7617 = 9CD6			BALL.FINEX	= DATAORIGIN+$0004
  7618 = 9CD8			BALL.FINEY	= DATAORIGIN+$0006
  7619 = 9CDA			BALL.OLDX	= DATAORIGIN+$0008
  7620 = 9CDC			BALL.OLDY	= DATAORIGIN+$000A
  7621 = 9CDE			BALL.SPEED	= DATAORIGIN+$000C
  7622 = 9CE0			BALL.FINESPEED	= DATAORIGIN+$000E
  7623 = 9CE2			BALL.SPEEDX	= DATAORIGIN+$0010
  7624 = 9CE4			BALL.SPEEDY	= DATAORIGIN+$0012
  7625 = 9CE6			BALL.SBD	= DATAORIGIN+$0014
  7626 = 9CE8			BALL.BRWHIT	= DATAORIGIN+$0016
  7627 = 9CE9			BALL.INPLAY	= DATAORIGIN+$0017
  7628 = 9CEA			BALL.LAUNCH	= DATAORIGIN+$0018
  7629 = 9CEB			BALL.ONVAUS	= DATAORIGIN+$0019
  7630 = 9CED			BALL.STM	= DATAORIGIN+$001B
  7631 = 9FBF			B0	= DATAORIGIN+$02ED
  7632 = 9FC0			B1	= DATAORIGIN+$02EE
  7633 = 9FC1			B2	= DATAORIGIN+$02EF
  7634 = 9FC2			X	= DATAORIGIN+$02F0
  7635 = 9FC4			Y	= DATAORIGIN+$02F2
  7636 = 9FC6			ANGLE	= DATAORIGIN+$02F4
  7637
  7638 = 9FBB			@VarData	= BALL
  7639 = 000B			@VarDataSize	= 11
  7640
  7641 5210			@exit
  7642 					.ifdef @new
  7643 					lda <@VarData
  7644 					sta :ztmp
  7645 					lda >@VarData
  7646 					ldy #@VarDataSize-1
  7647 					jmp @FreeMem
  7648 					els
  7649 5210 60				rts						; ret
  7650 					eif
  7651 				.endl
  7652
  7653 5211			.local	MODIFY_VAUS					; PROCEDURE
  7654
  7655 				; optimize OK (service.pas), line = 1364
  7656
  7657 5211 AD 5D 9E			lda VAUS.WIDTH
  7658 5214 8D 5B 9E			sta VAUS.OLDLEN
  7659 5217 A9 00			lda #$00
  7660 5219 8D 5C 9E			sta VAUS.OLDLEN+1
  7661
  7662 				; optimize OK (service.pas), line = 1365
  7663
  7664 521C AD E5 9D			lda PLAYVAUS.WIDTH
  7665 521F 8D 5D 9E			sta VAUS.WIDTH
  7666
  7667 				; optimize OK (service.pas), line = 1366
  7668
  7669 5222 AD E7 9D			lda PLAYVAUS.HEIGHT
  7670 5225 8D 5E 9E			sta VAUS.HEIGHT
  7671
  7672 5228			@exit
  7673 					.ifdef @new
  7674 					lda <@VarData
  7675 					sta :ztmp
  7676 					lda >@VarData
  7677 					ldy #@VarDataSize-1
  7678 					jmp @FreeMem
  7679 					els
  7680 5228 60				rts						; ret
  7681 					eif
  7682 				.endl
  7683
  7684 5229			.local	SET_VAUS					; PROCEDURE
  7685
  7686 				; optimize OK (service.pas), line = 1371
  7687
  7688 5229 A9 5F			lda #$5F
  7689 522B 8D 55 9E			sta VAUS.X
  7690
  7691 				; optimize OK (service.pas), line = 1372
  7692
  7693 522E A9 B8			lda #$B8
  7694 5230 8D 56 9E			sta VAUS.Y
  7695
  7696 				; optimize OK (service.pas), line = 1374
  7697
  7698 5233 A9 FF			lda #$FF
  7699 5235 8D 57 9E			sta VAUS.OLDX
  7700 5238 8D 58 9E			sta VAUS.OLDX+1
  7701
  7702 				; optimize OK (service.pas), line = 1375
  7703
  7704 523B 8D 59 9E			sta VAUS.OLDY
  7705 523E 8D 5A 9E			sta VAUS.OLDY+1
  7706
  7707 				; optimize OK (service.pas), line = 1376
  7708
  7709 5241 A9 00			lda #$00
  7710 5243 8D 60 9E			sta VAUS.IFLASH
  7711
  7712 				; optimize OK (service.pas), line = 1380
  7713
  7714 5246 8D 5F 9E			sta VAUS.FLASH
  7715
  7716 				; optimize OK (service.pas), line = 1384
  7717
  7718 5249 AD E5 9D			lda PLAYVAUS.WIDTH
  7719 524C 8D 5D 9E			sta VAUS.WIDTH
  7720
  7721 				; optimize OK (service.pas), line = 1385
  7722
  7723 524F AD E7 9D			lda PLAYVAUS.HEIGHT
  7724 5252 8D 5E 9E			sta VAUS.HEIGHT
  7725
  7726 				; optimize OK (service.pas), line = 1386
  7727
  7728 5255 AD 5D 9E			lda VAUS.WIDTH
  7729 5258 8D 5B 9E			sta VAUS.OLDLEN
  7730 525B A9 00			lda #$00
  7731 525D 8D 5C 9E			sta VAUS.OLDLEN+1
  7732
  7733 				; optimize OK (service.pas), line = 1387
  7734
  7735 5260 A9 FF			lda #$FF
  7736 5262 8D 61 9E			sta VAUS.LETTER
  7737
  7738 5265			@exit
  7739 					.ifdef @new
  7740 					lda <@VarData
  7741 					sta :ztmp
  7742 					lda >@VarData
  7743 					ldy #@VarDataSize-1
  7744 					jmp @FreeMem
  7745 					els
  7746 5265 60				rts						; ret
  7747 					eif
  7748 				.endl
  7749
  7750 5266			.local	START_VAUS					; PROCEDURE
  7751
  7752 				; optimize OK (service.pas), line = 1396
  7753
  7754 5266 A9 5F			lda #$5F
  7755 5268 8D 55 9E			sta VAUS.X
  7756
  7757 				; optimize OK (service.pas), line = 1397
  7758
  7759 526B A9 B8			lda #$B8
  7760 526D 8D 56 9E			sta VAUS.Y
  7761
  7762 5270			@exit
  7763 					.ifdef @new
  7764 					lda <@VarData
  7765 					sta :ztmp
  7766 					lda >@VarData
  7767 					ldy #@VarDataSize-1
  7768 					jmp @FreeMem
  7769 					els
  7770 5270 60				rts						; ret
  7771 					eif
  7772 				.endl
  7773
  7774 5271			.local	REMOVE_VAUS					; PROCEDURE
  7775
  7776 				; optimize OK (service.pas), line = 1411
  7777
  7778 5271 AC 59 9E			ldy VAUS.OLDY
  7779 5274 AD 57 9E			lda VAUS.OLDX
  7780 5277 18 79 00 C0			add adr.ROW,y
  7781 527B 8D D8 9E			sta HLP
  7782 527E AD 58 9E			lda VAUS.OLDX+1
  7783 5281 79 00 C1			adc adr.ROW+256,y
  7784 5284 8D D9 9E			sta HLP+1
  7785
  7786 				; optimize OK (service.pas), line = 1413
  7787
  7788 5287 AD D8 9E			lda HLP
  7789 528A 8D E7 9E			sta BLITBOX.DST
  7790 528D A9 50			lda #$50
  7791 528F 18 6D D9 9E			add HLP+1
  7792 5293 8D E8 9E			sta BLITBOX.DST+1
  7793 5296 A9 00			lda #$00
  7794 5298 69 00			adc #$00
  7795 529A 8D E9 9E			sta BLITBOX.DST+2
  7796 529D A9 00			lda #$00
  7797 529F 69 00			adc #$00
  7798 52A1 8D EA 9E			sta BLITBOX.DST+3
  7799 52A4 AD E1 9D			lda PLAYSCREEN.OFS
  7800 52A7 18 6D D8 9E			add HLP
  7801 52AB 8D E3 9E			sta BLITBOX.SRC
  7802 52AE AD E2 9D			lda PLAYSCREEN.OFS+1
  7803 52B1 6D D9 9E			adc HLP+1
  7804 52B4 8D E4 9E			sta BLITBOX.SRC+1
  7805 52B7 AD E3 9D			lda PLAYSCREEN.OFS+2
  7806 52BA 69 00			adc #$00
  7807 52BC 8D E5 9E			sta BLITBOX.SRC+2
  7808 52BF AD E4 9D			lda PLAYSCREEN.OFS+3
  7809 52C2 69 00			adc #$00
  7810 52C4 8D E6 9E			sta BLITBOX.SRC+3
  7811 52C7 AD 5B 9E			lda VAUS.OLDLEN
  7812 52CA 8D EB 9E			sta BLITBOX.W
  7813 52CD AD 5C 9E			lda VAUS.OLDLEN+1
  7814 52D0 8D EC 9E			sta BLITBOX.W+1
  7815 52D3 AD 5E 9E			lda VAUS.HEIGHT
  7816 52D6 8D ED 9E			sta BLITBOX.H
  7817 52D9 20 EA 3A			jsr BLITBOX
  7818
  7819 				; optimize OK (service.pas), line = 1421
  7820
  7821 52DC AD 5D 9E			lda VAUS.WIDTH
  7822 52DF 8D 5B 9E			sta VAUS.OLDLEN
  7823 52E2 A9 00			lda #$00
  7824 52E4 8D 5C 9E			sta VAUS.OLDLEN+1
  7825
  7826 52E7			@exit
  7827 					.ifdef @new
  7828 					lda <@VarData
  7829 					sta :ztmp
  7830 					lda >@VarData
  7831 					ldy #@VarDataSize-1
  7832 					jmp @FreeMem
  7833 					els
  7834 52E7 60				rts						; ret
  7835 					eif
  7836 				.endl
  7837
  7838 52E8			.local	PLACE_VAUS					; PROCEDURE
  7839
  7840 				; optimize FAIL (0, service.pas), line = 1430
  7841
  7842 52E8 EE 60 9E			inc VAUS.IFLASH
  7843
  7844 				; optimize OK (service.pas), line = 1432
  7845
  7846 52EB AD 60 9E			lda VAUS.IFLASH
  7847 52EE C9 0B			cmp #$0B
  7848 52F0 90 08			jcc l_1029
  7849
  7850 				; optimize FAIL (0, service.pas), line = 1434
  7851
  7852 52F2 EE 5F 9E			inc VAUS.FLASH
  7853
  7854 				; optimize OK (service.pas), line = 1435
  7855
  7856 52F5 A9 00			lda #$00
  7857 52F7 8D 60 9E			sta VAUS.IFLASH
  7858 52FA			l_1029
  7859
  7860 				; optimize OK (service.pas), line = 1438
  7861
  7862 52FA AD 5F 9E			lda VAUS.FLASH
  7863 52FD C9 0B			cmp #$0B
  7864 52FF 90 05			jcc l_1046
  7865 5301 A9 00			lda #$00
  7866 5303 8D 5F 9E			sta VAUS.FLASH
  7867 5306			l_1046
  7868
  7869 				; optimize OK (service.pas), line = 1448
  7870
  7871 5306 A9 00			lda #$00
  7872 5308 8D D8 9E			sta HLP
  7873 530B 8D D9 9E			sta HLP+1
  7874
  7875 				; optimize OK (service.pas), line = 1450
  7876
  7877 530E 8D C8 9F			sta Y
  7878 5311 AC 5E 9E			ldy VAUS.HEIGHT
  7879 5314 88				dey
  7880 5315 8C 19 53			sty @FORTMP_105D_0
  7881
  7882 5318			l_1060
  7883 				; --- ForToDoCondition
  7884 5318 A9 00			lda @FORTMP_105D_0::#$00
  7885 531A CD C8 9F			cmp Y
  7886 531D B0 03 4C 5B 54		jcc l_106E
  7887
  7888 				; optimize OK (service.pas), line = 1456
  7889
  7890 5322 AD C8 9F			lda Y
  7891 5325 18 6D 56 9E			add VAUS.Y
  7892 5329 A8				tay
  7893 532A AD 55 9E			lda VAUS.X
  7894 532D 18 79 00 C0			add adr.ROW,y
  7895 5331 8D F2 9E			sta BLITZERO.DST
  7896 5334 A9 50			lda #$50
  7897 5336 79 00 C1			adc adr.ROW+256,y
  7898 5339 8D F3 9E			sta BLITZERO.DST+1
  7899 533C A9 00			lda #$00
  7900 533E 69 00			adc #$00
  7901 5340 8D F4 9E			sta BLITZERO.DST+2
  7902 5343 A9 00			lda #$00
  7903 5345 69 00			adc #$00
  7904 5347 8D F5 9E			sta BLITZERO.DST+3
  7905 534A AD E9 9D			lda PLAYVAUS.OFS
  7906 534D 18 6D D8 9E			add HLP
  7907 5351 8D EE 9E			sta BLITZERO.SRC
  7908 5354 AD EA 9D			lda PLAYVAUS.OFS+1
  7909 5357 6D D9 9E			adc HLP+1
  7910 535A 8D EF 9E			sta BLITZERO.SRC+1
  7911 535D AD EB 9D			lda PLAYVAUS.OFS+2
  7912 5360 69 00			adc #$00
  7913 5362 8D F0 9E			sta BLITZERO.SRC+2
  7914 5365 AD EC 9D			lda PLAYVAUS.OFS+3
  7915 5368 69 00			adc #$00
  7916 536A 8D F1 9E			sta BLITZERO.SRC+3
  7917 536D AD 5D 9E			lda VAUS.WIDTH
  7918 5370 8D F6 9E			sta BLITZERO.W
  7919 5373 A9 00			lda #$00
  7920 5375 8D F7 9E			sta BLITZERO.W+1
  7921 5378 A9 01			lda #$01
  7922 537A 8D F8 9E			sta BLITZERO.H
  7923 537D 20 6B 3B			jsr BLITZERO
  7924
  7925 				; optimize OK (service.pas), line = 1458
  7926
  7927 5380 AD C8 9F			lda Y
  7928 5383 C9 02			cmp #$02
  7929 5385 B0 03 4C 44 54		jcc l_10B2
  7930 538A AD 5E 9E			lda VAUS.HEIGHT
  7931 538D E9 02			sbc #$02
  7932 538F 85 A1			sta :STACKORIGIN+11
  7933 5391 A9 00			lda #$00
  7934 5393 E9 00			sbc #$00
  7935 5395 85 B1			sta :STACKORIGIN+STACKWIDTH+11
  7936 5397 AD C8 9F			lda Y
  7937 539A C5 A1			cmp :STACKORIGIN+11
  7938 539C A9 00			lda #$00
  7939 539E E5 B1			sbc :STACKORIGIN+STACKWIDTH+11
  7940 53A0 50 02			svc
  7941 53A2 49 80			eor #$80
  7942 53A4 30 03 4C 44 54		jpl l_10B2
  7943
  7944 				; optimize OK (service.pas), line = 1461
  7945
  7946 53A9 AC 5F 9E			ldy VAUS.FLASH
  7947 53AC B9 5E 20			lda adr.FLASH,y
  7948 53AF 8D 0C 9F			sta PUTBYTE.V
  7949 53B2 AD C8 9F			lda Y
  7950 53B5 18 6D 56 9E			add VAUS.Y
  7951 53B9 A8				tay
  7952 53BA AD 55 9E			lda VAUS.X
  7953 53BD 18 79 00 C0			add adr.ROW,y
  7954 53C1 8D 08 9F			sta PUTBYTE.DST
  7955 53C4 A9 50			lda #$50
  7956 53C6 79 00 C1			adc adr.ROW+256,y
  7957 53C9 8D 09 9F			sta PUTBYTE.DST+1
  7958 53CC A9 00			lda #$00
  7959 53CE 69 00			adc #$00
  7960 53D0 8D 0A 9F			sta PUTBYTE.DST+2
  7961 53D3 A9 00			lda #$00
  7962 53D5 69 00			adc #$00
  7963 53D7 8D 0B 9F			sta PUTBYTE.DST+3
  7964 53DA 20 94 3C			jsr PUTBYTE
  7965
  7966 				; optimize OK (service.pas), line = 1464
  7967
  7968 53DD AC 5F 9E			ldy VAUS.FLASH
  7969 53E0 B9 5E 20			lda adr.FLASH,y
  7970 53E3 8D 0C 9F			sta PUTBYTE.V
  7971 53E6 AD 55 9E			lda VAUS.X
  7972 53E9 18 6D 5D 9E			add VAUS.WIDTH
  7973 53ED 85 A0			sta :STACKORIGIN+10
  7974 53EF A9 50			lda #$50
  7975 53F1 69 00			adc #$00
  7976 53F3 85 B0			sta :STACKORIGIN+STACKWIDTH+10
  7977 53F5 A9 00			lda #$00
  7978 53F7 69 00			adc #$00
  7979 53F9 85 C0			sta :STACKORIGIN+STACKWIDTH*2+10
  7980 53FB A9 00			lda #$00
  7981 53FD 69 00			adc #$00
  7982 53FF 85 D0			sta :STACKORIGIN+STACKWIDTH*3+10
  7983 5401 A5 A0			lda :STACKORIGIN+10
  7984 5403 38 E9 01			sub #$01
  7985 5406 85 A0			sta :STACKORIGIN+10
  7986 5408 A5 B0			lda :STACKORIGIN+STACKWIDTH+10
  7987 540A E9 00			sbc #$00
  7988 540C 85 B0			sta :STACKORIGIN+STACKWIDTH+10
  7989 540E A5 C0			lda :STACKORIGIN+STACKWIDTH*2+10
  7990 5410 E9 00			sbc #$00
  7991 5412 85 C0			sta :STACKORIGIN+STACKWIDTH*2+10
  7992 5414 A5 D0			lda :STACKORIGIN+STACKWIDTH*3+10
  7993 5416 E9 00			sbc #$00
  7994 5418 85 D0			sta :STACKORIGIN+STACKWIDTH*3+10
  7995 541A AD C8 9F			lda Y
  7996 541D 18 6D 56 9E			add VAUS.Y
  7997 5421 A8				tay
  7998 5422 A5 A0			lda :STACKORIGIN+10
  7999 5424 18 79 00 C0			add adr.ROW,y
  8000 5428 8D 08 9F			sta PUTBYTE.DST
  8001 542B A5 B0			lda :STACKORIGIN+STACKWIDTH+10
  8002 542D 79 00 C1			adc adr.ROW+256,y
  8003 5430 8D 09 9F			sta PUTBYTE.DST+1
  8004 5433 A5 C0			lda :STACKORIGIN+STACKWIDTH*2+10
  8005 5435 69 00			adc #$00
  8006 5437 8D 0A 9F			sta PUTBYTE.DST+2
  8007 543A A5 D0			lda :STACKORIGIN+STACKWIDTH*3+10
  8008 543C 69 00			adc #$00
  8009 543E 8D 0B 9F			sta PUTBYTE.DST+3
  8010 5441 20 94 3C			jsr PUTBYTE
  8011 5444			l_10B2
  8012
  8013 				; optimize OK (service.pas), line = 1467
  8014
  8015 5444 AD D8 9E			lda HLP
  8016 5447 18 6D 5D 9E			add VAUS.WIDTH
  8017 544B 8D D8 9E			sta HLP
  8018 544E 90 03			scc
  8019 5450 EE D9 9E			inc HLP+1
  8020
  8021 				; --- ForToDoEpilog
  8022 5453 EE C8 9F			inc Y
  8023 5456 F0 03 4C 18 53		jne l_1060
  8024 545B			l_106E
  8025
  8026 				; ------------------------------------------------------------
  8027
  8028 = 9FC8			Y	= DATAORIGIN+$02F6
  8029
  8030 = 9FC8			@VarData	= Y
  8031 = 0001			@VarDataSize	= 1
  8032
  8033 545B			@exit
  8034 					.ifdef @new
  8035 					lda <@VarData
  8036 					sta :ztmp
  8037 					lda >@VarData
  8038 					ldy #@VarDataSize-1
  8039 					jmp @FreeMem
  8040 					els
  8041 545B 60				rts						; ret
  8042 					eif
  8043 				.endl
  8044
  8045 545C			.local	MOVE_VAUS					; PROCEDURE
  8046
  8047 				; optimize OK (service.pas), line = 1478
  8048
  8049 545C A0 01			ldy #1
  8050 545E AD 58 9E			lda VAUS.OLDX+1
  8051 5461 C9 FF			cmp #$FF
  8052 5463 D0 05			bne @+
  8053 5465 AD 57 9E			lda VAUS.OLDX
  8054 5468 C9 FF			cmp #$FF
  8055 				@
  8056 546A D0 01			bne @+
  8057 546C 88				dey
  8058 				@
  8059 546D 84 9F			sty :STACKORIGIN+9
  8060 546F A0 01			ldy #1
  8061 5471 AD 58 9E			lda VAUS.OLDX+1
  8062 5474 C9 00			cmp #$00
  8063 5476 D0 06			bne @+
  8064 5478 AD 57 9E			lda VAUS.OLDX
  8065 547B CD 55 9E			cmp VAUS.X
  8066 				@
  8067 547E D0 01			bne @+
  8068 5480 88				dey
  8069 				@
  8070 5481 98				tya
  8071 5482 25 9F			and :STACKORIGIN+9
  8072 5484 85 9F			sta :STACKORIGIN+9
  8073 5486 A0 01			ldy #1
  8074 5488 A9 00			lda #$00
  8075 548A CD 5C 9E			cmp VAUS.OLDLEN+1
  8076 548D D0 06			bne @+
  8077 548F AD 5D 9E			lda VAUS.WIDTH
  8078 5492 CD 5B 9E			cmp VAUS.OLDLEN
  8079 				@
  8080 5495 D0 01			bne @+
  8081 5497 88				dey
  8082 				@
  8083 5498 98				tya
  8084 5499 05 9F			ora :STACKORIGIN+9
  8085 549B F0 03			jeq l_112E
  8086
  8087 				; optimize FAIL ('REMOVE_VAUS', service.pas), line = 1479
  8088
  8089 549D 20 71 52			jsr REMOVE_VAUS
  8090 54A0			l_112E
  8091
  8092 				; optimize OK (service.pas), line = 1481
  8093
  8094 54A0 AD 55 9E			lda VAUS.X
  8095 54A3 8D 57 9E			sta VAUS.OLDX
  8096 54A6 A9 00			lda #$00
  8097 54A8 8D 58 9E			sta VAUS.OLDX+1
  8098
  8099 				; optimize OK (service.pas), line = 1482
  8100
  8101 54AB AD 56 9E			lda VAUS.Y
  8102 54AE 8D 59 9E			sta VAUS.OLDY
  8103 54B1 A9 00			lda #$00
  8104 54B3 8D 5A 9E			sta VAUS.OLDY+1
  8105
  8106 				; optimize OK (service.pas), line = 1489
  8107
  8108 54B6 A9 D8			lda #$D8
  8109 54B8 38 ED 5D 9E			sub VAUS.WIDTH
  8110 54BC 8D 1C 9F			sta MIN.B
  8111 54BF A9 00			lda #$00
  8112 54C1 E9 00			sbc #$00
  8113 54C3 8D 1D 9F			sta MIN.B+1
  8114 54C6 AD CA 9F			lda X
  8115 54C9 8D 1A 9F			sta MIN.A
  8116 54CC AD CB 9F			lda X+1
  8117 54CF 8D 1B 9F			sta MIN.A+1
  8118 54D2 20 11 3D			jsr MIN
  8119 54D5 A9 0A			lda #$0A
  8120 54D7 8D 14 9F			sta MAX.A
  8121 54DA A9 00			lda #$00
  8122 54DC 8D 15 9F			sta MAX.A+1
  8123 54DF AD 1E 9F			lda MIN.RESULT
  8124 54E2 8D 16 9F			sta MAX.B
  8125 54E5 AD 1F 9F			lda MIN.RESULT+1
  8126 54E8 8D 17 9F			sta MAX.B+1
  8127 54EB 20 E6 3C			jsr MAX
  8128 54EE AD 18 9F			lda MAX.RESULT
  8129 54F1 8D 55 9E			sta VAUS.X
  8130
  8131 				; optimize OK (service.pas), line = 1490
  8132
  8133 54F4 A9 C8			lda #$C8
  8134 54F6 38 ED 5E 9E			sub VAUS.HEIGHT
  8135 54FA 8D 1C 9F			sta MIN.B
  8136 54FD A9 00			lda #$00
  8137 54FF E9 00			sbc #$00
  8138 5501 8D 1D 9F			sta MIN.B+1
  8139 5504 AD CC 9F			lda Y
  8140 5507 8D 1A 9F			sta MIN.A
  8141 550A AD CD 9F			lda Y+1
  8142 550D 8D 1B 9F			sta MIN.A+1
  8143 5510 20 11 3D			jsr MIN
  8144 5513 A9 0C			lda #$0C
  8145 5515 8D 14 9F			sta MAX.A
  8146 5518 A9 00			lda #$00
  8147 551A 8D 15 9F			sta MAX.A+1
  8148 551D AD 1E 9F			lda MIN.RESULT
  8149 5520 8D 16 9F			sta MAX.B
  8150 5523 AD 1F 9F			lda MIN.RESULT+1
  8151 5526 8D 17 9F			sta MAX.B+1
  8152 5529 20 E6 3C			jsr MAX
  8153 552C AD 18 9F			lda MAX.RESULT
  8154 552F 8D 56 9E			sta VAUS.Y
  8155
  8156 				; optimize FAIL ('PLACE_VAUS', service.pas), line = 1492
  8157
  8158 5532 20 E8 52			jsr PLACE_VAUS
  8159
  8160 				; ------------------------------------------------------------
  8161
  8162 = 9FCA			X	= DATAORIGIN+$02F8
  8163 = 9FCC			Y	= DATAORIGIN+$02FA
  8164
  8165 = 9FCA			@VarData	= X
  8166 = 0004			@VarDataSize	= 4
  8167
  8168 5535			@exit
  8169 					.ifdef @new
  8170 					lda <@VarData
  8171 					sta :ztmp
  8172 					lda >@VarData
  8173 					ldy #@VarDataSize-1
  8174 					jmp @FreeMem
  8175 					els
  8176 5535 60				rts						; ret
  8177 					eif
  8178 				.endl
  8179
  8180 5536			.local	REMOVE_BLOCK					; PROCEDURE
  8181
  8182 				; optimize OK (service.pas), line = 1507
  8183
  8184 5536 AD CE 9F			lda XA
  8185 5539 0A				asl @
  8186 553A 0A				asl @
  8187 553B 0A				asl @
  8188 553C 0A				asl @
  8189 553D 18 69 09			add #$09
  8190 5540 8D D3 9F			sta XS
  8191
  8192 				; optimize OK (service.pas), line = 1508
  8193
  8194 5543 AD CF 9F			lda YA
  8195 5546 0A				asl @
  8196 5547 0A				asl @
  8197 5548 0A				asl @
  8198 5549 18 69 16			add #$16
  8199 554C 8D D4 9F			sta YS
  8200
  8201 				; optimize OK (service.pas), line = 1510
  8202
  8203 554F A9 00			lda #$00
  8204 5551 8D D1 9F			sta Y
  8205
  8206 5554			l_1186
  8207 				; --- ForToDoCondition
  8208 5554 AD D1 9F			lda Y
  8209 5557 C9 08			cmp #$08
  8210 5559 90 03 4C F3 56		jcs l_1194
  8211
  8212 				; optimize OK (service.pas), line = 1512
  8213
  8214 555E AD D4 9F			lda YS
  8215 5561 6D D1 9F			adc Y
  8216 5564 A8				tay
  8217 5565 B9 00 C3			lda adr.MODY,y
  8218 5568 85 86			sta :eax
  8219 556A A9 00			lda #$00
  8220 556C 85 87			sta :eax+1
  8221 556E AD 62 9E			lda PATTERN.WIDTH
  8222 5571 85 8E			sta :ecx
  8223 5573 AD 63 9E			lda PATTERN.WIDTH+1
  8224 5576 85 8F			sta :ecx+1
  8225 					.ifdef fmulinit
  8226 					fmulu_16
  8227 					els
  8228 5578 20 CF 22			imulCX_AL
  8229 					eif
  8230 557B A5 86			lda :eax
  8231 557D 8D D5 9F			sta YH
  8232 5580 A5 87			lda :eax+1
  8233 5582 8D D6 9F			sta YH+1
  8234
  8235 				; optimize OK (service.pas), line = 1520
  8236
  8237 5585 AD D1 9F			lda Y
  8238 5588 18 6D D4 9F			add YS
  8239 558C A8				tay
  8240 558D AD D3 9F			lda XS
  8241 5590 18 79 00 C0			add adr.ROW,y
  8242 5594 8D D8 9E			sta HLP
  8243 5597 A9 00			lda #$00
  8244 5599 79 00 C1			adc adr.ROW+256,y
  8245 559C 8D D9 9E			sta HLP+1
  8246
  8247 				; optimize OK (service.pas), line = 1522
  8248
  8249 559F A9 00			lda #$00
  8250 55A1 8D D2 9F			sta I
  8251
  8252 				; optimize OK (service.pas), line = 1524
  8253
  8254 55A4 AD E1 9D			lda PLAYSCREEN.OFS
  8255 55A7 18 6D D8 9E			add HLP
  8256 55AB 8D B1 9D			sta VBXE_RAM.POSITION
  8257 55AE AD E2 9D			lda PLAYSCREEN.OFS+1
  8258 55B1 6D D9 9E			adc HLP+1
  8259 55B4 8D B2 9D			sta VBXE_RAM.POSITION+1
  8260 55B7 AD E3 9D			lda PLAYSCREEN.OFS+2
  8261 55BA 69 00			adc #$00
  8262 55BC 8D B3 9D			sta VBXE_RAM.POSITION+2
  8263 55BF AD E4 9D			lda PLAYSCREEN.OFS+3
  8264 55C2 69 00			adc #$00
  8265 55C4 8D B4 9D			sta VBXE_RAM.POSITION+3
  8266
  8267 				; optimize OK (service.pas), line = 1525
  8268
  8269 55C7 AD 8F 9C			lda SCANLINE
  8270 55CA 8D 57 9D			sta VBXE.TVBXEMEMORYSTREAM.READBUFFER.BUFFER
  8271 55CD AD 90 9C			lda SCANLINE+1
  8272 55D0 8D 58 9D			sta VBXE.TVBXEMEMORYSTREAM.READBUFFER.BUFFER+1
  8273 55D3 A9 10			lda #$10
  8274 55D5 8D 59 9D			sta VBXE.TVBXEMEMORYSTREAM.READBUFFER.COUNT
  8275 55D8 A9 00			lda #$00
  8276 55DA 8D 5A 9D			sta VBXE.TVBXEMEMORYSTREAM.READBUFFER.COUNT+1
  8277 55DD AD 37 9C			lda VBXE_RAM
  8278 55E0 AC 38 9C			ldy VBXE_RAM+1
  8279 55E3 20 44 34			jsr VBXE.TVBXEMEMORYSTREAM.READBUFFER
  8280
  8281 				; optimize OK (service.pas), line = 1527
  8282
  8283 55E6 AD 66 9E			lda PATTERN.OFS
  8284 55E9 18 6D D5 9F			add YH
  8285 55ED 8D B1 9D			sta VBXE_RAM.POSITION
  8286 55F0 AD 67 9E			lda PATTERN.OFS+1
  8287 55F3 6D D6 9F			adc YH+1
  8288 55F6 8D B2 9D			sta VBXE_RAM.POSITION+1
  8289 55F9 AD 68 9E			lda PATTERN.OFS+2
  8290 55FC 69 00			adc #$00
  8291 55FE 8D B3 9D			sta VBXE_RAM.POSITION+2
  8292 5601 AD 69 9E			lda PATTERN.OFS+3
  8293 5604 69 00			adc #$00
  8294 5606 8D B4 9D			sta VBXE_RAM.POSITION+3
  8295
  8296 				; optimize OK (service.pas), line = 1528
  8297
  8298 5609 AD 91 9C			lda SCANLINE2
  8299 560C 8D 57 9D			sta VBXE.TVBXEMEMORYSTREAM.READBUFFER.BUFFER
  8300 560F AD 92 9C			lda SCANLINE2+1
  8301 5612 8D 58 9D			sta VBXE.TVBXEMEMORYSTREAM.READBUFFER.BUFFER+1
  8302 5615 A9 28			lda #$28
  8303 5617 8D 59 9D			sta VBXE.TVBXEMEMORYSTREAM.READBUFFER.COUNT
  8304 561A A9 00			lda #$00
  8305 561C 8D 5A 9D			sta VBXE.TVBXEMEMORYSTREAM.READBUFFER.COUNT+1
  8306 561F AD 37 9C			lda VBXE_RAM
  8307 5622 AC 38 9C			ldy VBXE_RAM+1
  8308 5625 20 44 34			jsr VBXE.TVBXEMEMORYSTREAM.READBUFFER
  8309
  8310 				; optimize OK (service.pas), line = 1530
  8311
  8312 5628 A9 00			lda #$00
  8313 562A 8D D0 9F			sta X
  8314
  8315 562D			l_11E3
  8316 				; --- ForToDoCondition
  8317 562D AD D0 9F			lda X
  8318 5630 C9 10			cmp #$10
  8319 5632 B0 43			jcs l_11F1
  8320
  8321 				; optimize OK (service.pas), line = 1531
  8322
  8323 5634 6D D3 9F			adc XS
  8324 5637 85 9F			sta :STACKORIGIN+9
  8325 5639 A9 00			lda #$00
  8326 563B 69 00			adc #$00
  8327 563D C9 00			cmp #$00
  8328 563F D0 04			bne @+
  8329 5641 A5 9F			lda :STACKORIGIN+9
  8330 5643 C9 D8			cmp #$D8
  8331 				@
  8332 5645 B0 2B			jcs l_1209
  8333
  8334 				; optimize OK (service.pas), line = 1538
  8335
  8336 5647 AC D0 9F			ldy X
  8337 564A B9 00 C5			lda adr.SCANLINE,y
  8338 564D 29 80			and #$80
  8339 564F 8D D8 9F			sta SHADOW
  8340
  8341 				; optimize OK (service.pas), line = 1543
  8342
  8343 5652 AD D0 9F			lda X
  8344 5655 18 6D D3 9F			add XS
  8345 5659 A8				tay
  8346 565A B9 00 C4			lda adr.MODX,y
  8347 565D A8				tay
  8348 565E B9 80 C5			lda adr.SCANLINE2,y
  8349 5661 29 7F			and #$7F
  8350 5663 0D D8 9F			ora SHADOW
  8351 5666 8D D7 9F			sta CL
  8352
  8353 				; optimize OK (service.pas), line = 1545
  8354
  8355 5669 AC D2 9F			ldy I
  8356 566C 99 00 C2			sta adr.TMP,y
  8357
  8358 				; optimize FAIL (0, service.pas), line = 1546
  8359
  8360 566F EE D2 9F			inc I
  8361 5672			l_1209
  8362
  8363 				; --- ForToDoEpilog
  8364 5672 EE D0 9F			inc X
  8365 5675 D0 B6			jne l_11E3
  8366 5677			l_11F1
  8367
  8368 				; optimize OK (service.pas), line = 1558
  8369
  8370 5677 AD D8 9E			lda HLP
  8371 567A 8D F9 9E			sta BLITTMP.DST
  8372 567D A9 50			lda #$50
  8373 567F 18 6D D9 9E			add HLP+1
  8374 5683 8D FA 9E			sta BLITTMP.DST+1
  8375 5686 A9 00			lda #$00
  8376 5688 69 00			adc #$00
  8377 568A 8D FB 9E			sta BLITTMP.DST+2
  8378 568D A9 00			lda #$00
  8379 568F 69 00			adc #$00
  8380 5691 8D FC 9E			sta BLITTMP.DST+3
  8381 5694 AD D2 9F			lda I
  8382 5697 8D FD 9E			sta BLITTMP.SIZE
  8383 569A 20 E9 3B			jsr BLITTMP
  8384
  8385 				; optimize OK (service.pas), line = 1560
  8386
  8387 569D AD E1 9D			lda PLAYSCREEN.OFS
  8388 56A0 18 6D D8 9E			add HLP
  8389 56A4 8D 02 9F			sta BLITROW.DST
  8390 56A7 AD E2 9D			lda PLAYSCREEN.OFS+1
  8391 56AA 6D D9 9E			adc HLP+1
  8392 56AD 8D 03 9F			sta BLITROW.DST+1
  8393 56B0 AD E3 9D			lda PLAYSCREEN.OFS+2
  8394 56B3 69 00			adc #$00
  8395 56B5 8D 04 9F			sta BLITROW.DST+2
  8396 56B8 AD E4 9D			lda PLAYSCREEN.OFS+3
  8397 56BB 69 00			adc #$00
  8398 56BD 8D 05 9F			sta BLITROW.DST+3
  8399 56C0 AD D8 9E			lda HLP
  8400 56C3 8D FE 9E			sta BLITROW.SRC
  8401 56C6 A9 50			lda #$50
  8402 56C8 18 6D D9 9E			add HLP+1
  8403 56CC 8D FF 9E			sta BLITROW.SRC+1
  8404 56CF A9 00			lda #$00
  8405 56D1 69 00			adc #$00
  8406 56D3 8D 00 9F			sta BLITROW.SRC+2
  8407 56D6 A9 00			lda #$00
  8408 56D8 69 00			adc #$00
  8409 56DA 8D 01 9F			sta BLITROW.SRC+3
  8410 56DD AD D2 9F			lda I
  8411 56E0 8D 06 9F			sta BLITROW.SIZE
  8412 56E3 A9 00			lda #$00
  8413 56E5 8D 07 9F			sta BLITROW.SIZE+1
  8414 56E8 20 22 3C			jsr BLITROW
  8415
  8416 				; --- ForToDoEpilog
  8417 56EB EE D1 9F			inc Y
  8418 56EE F0 03 4C 54 55		jne l_1186
  8419 56F3			l_1194
  8420
  8421 				; optimize OK (service.pas), line = 1570
  8422
  8423 56F3 AD D4 9F			lda YS
  8424 56F6 18 69 04			add #$04
  8425 56F9 8D D1 9F			sta Y
  8426 56FC AD D4 9F			lda YS
  8427 56FF 18 69 0C			add #$0C
  8428 5702 8D 06 57			sta @FORTMP_1278_0
  8429
  8430 5705			l_127B
  8431 				; --- ForToDoCondition
  8432 5705 A9 00			lda @FORTMP_1278_0::#$00
  8433 5707 CD D1 9F			cmp Y
  8434 570A B0 03 4C 1D 58		jcc l_1289
  8435
  8436 				; optimize OK (service.pas), line = 1572
  8437
  8438 570F AC D1 9F			ldy Y
  8439 5712 B9 00 C0			lda adr.ROW,y
  8440 5715 18 6D D3 9F			add XS
  8441 5719 8D D8 9E			sta HLP
  8442 571C B9 00 C1			lda adr.ROW+256,y
  8443 571F 69 00			adc #$00
  8444 5721 8D D9 9E			sta HLP+1
  8445
  8446 				; optimize OK (service.pas), line = 1574
  8447
  8448 5724 AD E1 9D			lda PLAYSCREEN.OFS
  8449 5727 18 6D D8 9E			add HLP
  8450 572B 8D B1 9D			sta VBXE_RAM.POSITION
  8451 572E AD E2 9D			lda PLAYSCREEN.OFS+1
  8452 5731 6D D9 9E			adc HLP+1
  8453 5734 8D B2 9D			sta VBXE_RAM.POSITION+1
  8454 5737 AD E3 9D			lda PLAYSCREEN.OFS+2
  8455 573A 69 00			adc #$00
  8456 573C 8D B3 9D			sta VBXE_RAM.POSITION+2
  8457 573F AD E4 9D			lda PLAYSCREEN.OFS+3
  8458 5742 69 00			adc #$00
  8459 5744 8D B4 9D			sta VBXE_RAM.POSITION+3
  8460
  8461 				; optimize OK (service.pas), line = 1575
  8462
  8463 5747 AD 89 9C			lda TMP
  8464 574A 8D 57 9D			sta VBXE.TVBXEMEMORYSTREAM.READBUFFER.BUFFER
  8465 574D AD 8A 9C			lda TMP+1
  8466 5750 8D 58 9D			sta VBXE.TVBXEMEMORYSTREAM.READBUFFER.BUFFER+1
  8467 5753 A9 20			lda #$20
  8468 5755 8D 59 9D			sta VBXE.TVBXEMEMORYSTREAM.READBUFFER.COUNT
  8469 5758 A9 00			lda #$00
  8470 575A 8D 5A 9D			sta VBXE.TVBXEMEMORYSTREAM.READBUFFER.COUNT+1
  8471 575D AD 37 9C			lda VBXE_RAM
  8472 5760 AC 38 9C			ldy VBXE_RAM+1
  8473 5763 20 44 34			jsr VBXE.TVBXEMEMORYSTREAM.READBUFFER
  8474
  8475 				; optimize OK (service.pas), line = 1577
  8476
  8477 5766 AD D3 9F			lda XS
  8478 5769 18 69 08			add #$08
  8479 576C 8D D0 9F			sta X
  8480 576F AD D3 9F			lda XS
  8481 5772 18 69 18			add #$18
  8482 5775 8D 79 57			sta @FORTMP_12B6_0
  8483
  8484 5778			l_12B9
  8485 				; --- ForToDoCondition
  8486 5778 A9 00			lda @FORTMP_12B6_0::#$00
  8487 577A CD D0 9F			cmp X
  8488 577D 90 24			jcc l_12C7
  8489
  8490 				; optimize OK (service.pas), line = 1593
  8491
  8492 577F AD D0 9F			lda X
  8493 5782 C9 D8			cmp #$D8
  8494 5784 B0 18			jcs l_12D9
  8495
  8496 				; optimize OK (service.pas), line = 1598
  8497
  8498 5786 38 ED D3 9F			sub XS
  8499 578A 85 9F			sta :STACKORIGIN+9
  8500 578C AD D0 9F			lda X
  8501 578F 38 ED D3 9F			sub XS
  8502 5793 A8				tay
  8503 5794 B9 00 C2			lda adr.TMP,y
  8504 5797 09 80			ora #$80
  8505 5799 A4 9F			ldy :STACKORIGIN+9
  8506 579B 99 00 C2			sta adr.TMP,y
  8507 579E			l_12D9
  8508
  8509 				; --- ForToDoEpilog
  8510 579E EE D0 9F			inc X
  8511 57A1 D0 D5			jne l_12B9
  8512 57A3			l_12C7
  8513
  8514 				; optimize OK (service.pas), line = 1615
  8515
  8516 57A3 AD D8 9E			lda HLP
  8517 57A6 8D F9 9E			sta BLITTMP.DST
  8518 57A9 A9 50			lda #$50
  8519 57AB 18 6D D9 9E			add HLP+1
  8520 57AF 8D FA 9E			sta BLITTMP.DST+1
  8521 57B2 A9 00			lda #$00
  8522 57B4 69 00			adc #$00
  8523 57B6 8D FB 9E			sta BLITTMP.DST+2
  8524 57B9 A9 00			lda #$00
  8525 57BB 69 00			adc #$00
  8526 57BD 8D FC 9E			sta BLITTMP.DST+3
  8527 57C0 A9 20			lda #$20
  8528 57C2 8D FD 9E			sta BLITTMP.SIZE
  8529 57C5 20 E9 3B			jsr BLITTMP
  8530
  8531 				; optimize OK (service.pas), line = 1617
  8532
  8533 57C8 AD E1 9D			lda PLAYSCREEN.OFS
  8534 57CB 18 6D D8 9E			add HLP
  8535 57CF 8D 02 9F			sta BLITROW.DST
  8536 57D2 AD E2 9D			lda PLAYSCREEN.OFS+1
  8537 57D5 6D D9 9E			adc HLP+1
  8538 57D8 8D 03 9F			sta BLITROW.DST+1
  8539 57DB AD E3 9D			lda PLAYSCREEN.OFS+2
  8540 57DE 69 00			adc #$00
  8541 57E0 8D 04 9F			sta BLITROW.DST+2
  8542 57E3 AD E4 9D			lda PLAYSCREEN.OFS+3
  8543 57E6 69 00			adc #$00
  8544 57E8 8D 05 9F			sta BLITROW.DST+3
  8545 57EB AD D8 9E			lda HLP
  8546 57EE 8D FE 9E			sta BLITROW.SRC
  8547 57F1 A9 50			lda #$50
  8548 57F3 18 6D D9 9E			add HLP+1
  8549 57F7 8D FF 9E			sta BLITROW.SRC+1
  8550 57FA A9 00			lda #$00
  8551 57FC 69 00			adc #$00
  8552 57FE 8D 00 9F			sta BLITROW.SRC+2
  8553 5801 A9 00			lda #$00
  8554 5803 69 00			adc #$00
  8555 5805 8D 01 9F			sta BLITROW.SRC+3
  8556 5808 A9 20			lda #$20
  8557 580A 8D 06 9F			sta BLITROW.SIZE
  8558 580D A9 00			lda #$00
  8559 580F 8D 07 9F			sta BLITROW.SIZE+1
  8560 5812 20 22 3C			jsr BLITROW
  8561
  8562 				; --- ForToDoEpilog
  8563 5815 EE D1 9F			inc Y
  8564 5818 F0 03 4C 05 57		jne l_127B
  8565 581D			l_1289
  8566
  8567 				; ------------------------------------------------------------
  8568
  8569 = 9FCE			XA	= DATAORIGIN+$02FC
  8570 = 9FCF			YA	= DATAORIGIN+$02FD
  8571 = 9FD0			X	= DATAORIGIN+$02FE
  8572 = 9FD1			Y	= DATAORIGIN+$02FF
  8573 = 9FD2			I	= DATAORIGIN+$0300
  8574 = 9FD3			XS	= DATAORIGIN+$0301
  8575 = 9FD4			YS	= DATAORIGIN+$0302
  8576 = 9FD5			YH	= DATAORIGIN+$0303
  8577 = 9FD7			CL	= DATAORIGIN+$0305
  8578 = 9FD8			SHADOW	= DATAORIGIN+$0306
  8579
  8580 = 9FCE			@VarData	= XA
  8581 = 000B			@VarDataSize	= 11
  8582
  8583 581D			@exit
  8584 					.ifdef @new
  8585 					lda <@VarData
  8586 					sta :ztmp
  8587 					lda >@VarData
  8588 					ldy #@VarDataSize-1
  8589 					jmp @FreeMem
  8590 					els
  8591 581D 60				rts						; ret
  8592 					eif
  8593 				.endl
  8594
  8595 581E			.local	PLACE_BLOCK					; PROCEDURE
  8596
  8597 				; optimize OK (service.pas), line = 1634
  8598
  8599 581E AD DB 9F			lda XA
  8600 5821 85 9F			sta :STACKORIGIN+9
  8601 5823 A9 00			lda #$00
  8602 5825 06 9F			asl :STACKORIGIN+9
  8603 5827 2A				rol @
  8604 5828 06 9F			asl :STACKORIGIN+9
  8605 582A 2A				rol @
  8606 582B 06 9F			asl :STACKORIGIN+9
  8607 582D 2A				rol @
  8608 582E 06 9F			asl :STACKORIGIN+9
  8609 5830 2A				rol @
  8610 5831 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  8611 5833 A5 9F			lda :STACKORIGIN+9
  8612 5835 18 69 09			add #$09
  8613 5838 8D E1 9F			sta XS
  8614 583B A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  8615 583D 69 00			adc #$00
  8616 583F 8D E2 9F			sta XS+1
  8617
  8618 				; optimize OK (service.pas), line = 1635
  8619
  8620 5842 AD DC 9F			lda YA
  8621 5845 85 9F			sta :STACKORIGIN+9
  8622 5847 A9 00			lda #$00
  8623 5849 06 9F			asl :STACKORIGIN+9
  8624 584B 2A				rol @
  8625 584C 06 9F			asl :STACKORIGIN+9
  8626 584E 2A				rol @
  8627 584F 06 9F			asl :STACKORIGIN+9
  8628 5851 2A				rol @
  8629 5852 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  8630 5854 A5 9F			lda :STACKORIGIN+9
  8631 5856 18 69 16			add #$16
  8632 5859 8D E3 9F			sta YS
  8633 585C A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  8634 585E 69 00			adc #$00
  8635 5860 8D E4 9F			sta YS+1
  8636
  8637 				; optimize OK (service.pas), line = 1637
  8638
  8639 5863 A9 00			lda #$00
  8640 5865 8D DF 9F			sta Y
  8641
  8642 5868			l_1341
  8643 				; --- ForToDoCondition
  8644 5868 AD DF 9F			lda Y
  8645 586B C9 08			cmp #$08
  8646 586D 90 03 4C 9A 59		jcs l_134F
  8647
  8648 				; optimize OK (service.pas), line = 1639
  8649
  8650 5872 AD E3 9F			lda YS
  8651 5875 6D DF 9F			adc Y
  8652 5878 A8				tay
  8653 5879 AD E1 9F			lda XS
  8654 587C 18 79 00 C0			add adr.ROW,y
  8655 5880 8D D8 9E			sta HLP
  8656 5883 AD E2 9F			lda XS+1
  8657 5886 79 00 C1			adc adr.ROW+256,y
  8658 5889 8D D9 9E			sta HLP+1
  8659
  8660 				; optimize OK (service.pas), line = 1641
  8661
  8662 588C AD E1 9D			lda PLAYSCREEN.OFS
  8663 588F 18 6D D8 9E			add HLP
  8664 5893 8D B1 9D			sta VBXE_RAM.POSITION
  8665 5896 AD E2 9D			lda PLAYSCREEN.OFS+1
  8666 5899 6D D9 9E			adc HLP+1
  8667 589C 8D B2 9D			sta VBXE_RAM.POSITION+1
  8668 589F AD E3 9D			lda PLAYSCREEN.OFS+2
  8669 58A2 69 00			adc #$00
  8670 58A4 8D B3 9D			sta VBXE_RAM.POSITION+2
  8671 58A7 AD E4 9D			lda PLAYSCREEN.OFS+3
  8672 58AA 69 00			adc #$00
  8673 58AC 8D B4 9D			sta VBXE_RAM.POSITION+3
  8674
  8675 				; optimize OK (service.pas), line = 1642
  8676
  8677 58AF AD 8F 9C			lda SCANLINE
  8678 58B2 8D 57 9D			sta VBXE.TVBXEMEMORYSTREAM.READBUFFER.BUFFER
  8679 58B5 AD 90 9C			lda SCANLINE+1
  8680 58B8 8D 58 9D			sta VBXE.TVBXEMEMORYSTREAM.READBUFFER.BUFFER+1
  8681 58BB A9 10			lda #$10
  8682 58BD 8D 59 9D			sta VBXE.TVBXEMEMORYSTREAM.READBUFFER.COUNT
  8683 58C0 A9 00			lda #$00
  8684 58C2 8D 5A 9D			sta VBXE.TVBXEMEMORYSTREAM.READBUFFER.COUNT+1
  8685 58C5 AD 37 9C			lda VBXE_RAM
  8686 58C8 AC 38 9C			ldy VBXE_RAM+1
  8687 58CB 20 44 34			jsr VBXE.TVBXEMEMORYSTREAM.READBUFFER
  8688
  8689 				; optimize OK (service.pas), line = 1644
  8690
  8691 58CE A9 00			lda #$00
  8692 58D0 8D DE 9F			sta X
  8693
  8694 58D3			l_1377
  8695 				; --- ForToDoCondition
  8696 58D3 AC DE 9F			ldy X
  8697 58D6 C0 10			cpy #$10
  8698 58D8 B0 46			jcs l_1385
  8699
  8700 				; optimize OK (service.pas), line = 1650
  8701
  8702 58DA B9 00 C5			lda adr.SCANLINE,y
  8703 58DD 29 80			and #$80
  8704 58DF 8D E7 9F			sta SHADOW
  8705
  8706 				; optimize OK (service.pas), line = 1652
  8707
  8708 58E2 AD DF 9F			lda Y
  8709 58E5 C9 07			cmp #$07
  8710 58E7 B0 29			jcs l_13B0
  8711 58E9 AD DE 9F			lda X
  8712 58EC C9 0F			cmp #$0F
  8713 58EE B0 22			jcs l_13B0
  8714
  8715 				; optimize OK (service.pas), line = 1657
  8716
  8717 58F0 AD DD 9F			lda BLOCK
  8718 58F3 38 E9 01			sub #$01
  8719 58F6 85 9F			sta :STACKORIGIN+9
  8720 58F8 A9 00			lda #$00
  8721 58FA E9 00			sbc #$00
  8722 58FC A5 9F			lda :STACKORIGIN+9
  8723 58FE 29 0F			and #$0F
  8724 5900 A8				tay
  8725 5901 B9 88 20			lda adr.COLORBLOCK,y
  8726 5904 29 7F			and #$7F
  8727 5906 0D E7 9F			ora SHADOW
  8728 5909 8D E5 9F			sta CL
  8729
  8730 				; optimize OK (service.pas), line = 1659
  8731
  8732 590C AC DE 9F			ldy X
  8733 590F 4C 18 59			jmp l_13DE
  8734 5912			l_13B0
  8735
  8736 				; optimize OK (service.pas), line = 1672
  8737
  8738 5912 AC DE 9F			ldy X
  8739 5915 AD E7 9F			lda SHADOW
  8740 5918			l_13DE
  8741 5918 99 00 C2			sta adr.TMP,y
  8742
  8743 				; --- ForToDoEpilog
  8744 591B EE DE 9F			inc X
  8745 591E D0 B3			jne l_1377
  8746 5920			l_1385
  8747
  8748 				; optimize OK (service.pas), line = 1683
  8749
  8750 5920 AD D8 9E			lda HLP
  8751 5923 8D F9 9E			sta BLITTMP.DST
  8752 5926 A9 50			lda #$50
  8753 5928 18 6D D9 9E			add HLP+1
  8754 592C 8D FA 9E			sta BLITTMP.DST+1
  8755 592F A9 00			lda #$00
  8756 5931 69 00			adc #$00
  8757 5933 8D FB 9E			sta BLITTMP.DST+2
  8758 5936 A9 00			lda #$00
  8759 5938 69 00			adc #$00
  8760 593A 8D FC 9E			sta BLITTMP.DST+3
  8761 593D A9 10			lda #$10
  8762 593F 8D FD 9E			sta BLITTMP.SIZE
  8763 5942 20 E9 3B			jsr BLITTMP
  8764
  8765 				; optimize OK (service.pas), line = 1685
  8766
  8767 5945 AD E1 9D			lda PLAYSCREEN.OFS
  8768 5948 18 6D D8 9E			add HLP
  8769 594C 8D 02 9F			sta BLITROW.DST
  8770 594F AD E2 9D			lda PLAYSCREEN.OFS+1
  8771 5952 6D D9 9E			adc HLP+1
  8772 5955 8D 03 9F			sta BLITROW.DST+1
  8773 5958 AD E3 9D			lda PLAYSCREEN.OFS+2
  8774 595B 69 00			adc #$00
  8775 595D 8D 04 9F			sta BLITROW.DST+2
  8776 5960 AD E4 9D			lda PLAYSCREEN.OFS+3
  8777 5963 69 00			adc #$00
  8778 5965 8D 05 9F			sta BLITROW.DST+3
  8779 5968 AD D8 9E			lda HLP
  8780 596B 8D FE 9E			sta BLITROW.SRC
  8781 596E A9 50			lda #$50
  8782 5970 18 6D D9 9E			add HLP+1
  8783 5974 8D FF 9E			sta BLITROW.SRC+1
  8784 5977 A9 00			lda #$00
  8785 5979 69 00			adc #$00
  8786 597B 8D 00 9F			sta BLITROW.SRC+2
  8787 597E A9 00			lda #$00
  8788 5980 69 00			adc #$00
  8789 5982 8D 01 9F			sta BLITROW.SRC+3
  8790 5985 A9 10			lda #$10
  8791 5987 8D 06 9F			sta BLITROW.SIZE
  8792 598A A9 00			lda #$00
  8793 598C 8D 07 9F			sta BLITROW.SIZE+1
  8794 598F 20 22 3C			jsr BLITROW
  8795
  8796 				; --- ForToDoEpilog
  8797 5992 EE DF 9F			inc Y
  8798 5995 F0 03 4C 68 58		jne l_1341
  8799 599A			l_134F
  8800
  8801 				; optimize OK (service.pas), line = 1691
  8802
  8803 599A AD E3 9F			lda YS
  8804 599D 18 69 04			add #$04
  8805 59A0 8D DF 9F			sta Y
  8806 59A3 AD E3 9F			lda YS
  8807 59A6 18 69 0C			add #$0C
  8808 59A9 8D AD 59			sta @FORTMP_1417_0
  8809
  8810 59AC			l_141A
  8811 				; --- ForToDoCondition
  8812 59AC A9 00			lda @FORTMP_1417_0::#$00
  8813 59AE CD DF 9F			cmp Y
  8814 59B1 B0 03 4C C5 5A		jcc l_1428
  8815
  8816 				; optimize OK (service.pas), line = 1695
  8817
  8818 59B6 AC DF 9F			ldy Y
  8819 59B9 B9 00 C0			lda adr.ROW,y
  8820 59BC 18 6D E1 9F			add XS
  8821 59C0 8D D8 9E			sta HLP
  8822 59C3 B9 00 C1			lda adr.ROW+256,y
  8823 59C6 6D E2 9F			adc XS+1
  8824 59C9 8D D9 9E			sta HLP+1
  8825
  8826 				; optimize OK (service.pas), line = 1697
  8827
  8828 59CC AD E1 9D			lda PLAYSCREEN.OFS
  8829 59CF 18 6D D8 9E			add HLP
  8830 59D3 8D B1 9D			sta VBXE_RAM.POSITION
  8831 59D6 AD E2 9D			lda PLAYSCREEN.OFS+1
  8832 59D9 6D D9 9E			adc HLP+1
  8833 59DC 8D B2 9D			sta VBXE_RAM.POSITION+1
  8834 59DF AD E3 9D			lda PLAYSCREEN.OFS+2
  8835 59E2 69 00			adc #$00
  8836 59E4 8D B3 9D			sta VBXE_RAM.POSITION+2
  8837 59E7 AD E4 9D			lda PLAYSCREEN.OFS+3
  8838 59EA 69 00			adc #$00
  8839 59EC 8D B4 9D			sta VBXE_RAM.POSITION+3
  8840
  8841 				; optimize OK (service.pas), line = 1698
  8842
  8843 59EF AD 89 9C			lda TMP
  8844 59F2 8D 57 9D			sta VBXE.TVBXEMEMORYSTREAM.READBUFFER.BUFFER
  8845 59F5 AD 8A 9C			lda TMP+1
  8846 59F8 8D 58 9D			sta VBXE.TVBXEMEMORYSTREAM.READBUFFER.BUFFER+1
  8847 59FB A9 20			lda #$20
  8848 59FD 8D 59 9D			sta VBXE.TVBXEMEMORYSTREAM.READBUFFER.COUNT
  8849 5A00 A9 00			lda #$00
  8850 5A02 8D 5A 9D			sta VBXE.TVBXEMEMORYSTREAM.READBUFFER.COUNT+1
  8851 5A05 AD 37 9C			lda VBXE_RAM
  8852 5A08 AC 38 9C			ldy VBXE_RAM+1
  8853 5A0B 20 44 34			jsr VBXE.TVBXEMEMORYSTREAM.READBUFFER
  8854
  8855 				; optimize OK (service.pas), line = 1700
  8856
  8857 5A0E AD E1 9F			lda XS
  8858 5A11 18 69 08			add #$08
  8859 5A14 8D DE 9F			sta X
  8860 5A17 AD E1 9F			lda XS
  8861 5A1A 18 69 18			add #$18
  8862 5A1D 8D 21 5A			sta @FORTMP_1452_0
  8863
  8864 5A20			l_1455
  8865 				; --- ForToDoCondition
  8866 5A20 A9 00			lda @FORTMP_1452_0::#$00
  8867 5A22 CD DE 9F			cmp X
  8868 5A25 90 24			jcc l_1463
  8869
  8870 				; optimize OK (service.pas), line = 1701
  8871
  8872 5A27 AD DE 9F			lda X
  8873 5A2A C9 D8			cmp #$D8
  8874 5A2C B0 18			jcs l_1475
  8875
  8876 				; optimize OK (service.pas), line = 1710
  8877
  8878 5A2E 38 ED E1 9F			sub XS
  8879 5A32 85 9F			sta :STACKORIGIN+9
  8880 5A34 AD DE 9F			lda X
  8881 5A37 38 ED E1 9F			sub XS
  8882 5A3B A8				tay
  8883 5A3C B9 00 C2			lda adr.TMP,y
  8884 5A3F 29 7F			and #$7F
  8885 5A41 A4 9F			ldy :STACKORIGIN+9
  8886 5A43 99 00 C2			sta adr.TMP,y
  8887 5A46			l_1475
  8888
  8889 				; --- ForToDoEpilog
  8890 5A46 EE DE 9F			inc X
  8891 5A49 D0 D5			jne l_1455
  8892 5A4B			l_1463
  8893
  8894 				; optimize OK (service.pas), line = 1726
  8895
  8896 5A4B AD D8 9E			lda HLP
  8897 5A4E 8D F9 9E			sta BLITTMP.DST
  8898 5A51 A9 50			lda #$50
  8899 5A53 18 6D D9 9E			add HLP+1
  8900 5A57 8D FA 9E			sta BLITTMP.DST+1
  8901 5A5A A9 00			lda #$00
  8902 5A5C 69 00			adc #$00
  8903 5A5E 8D FB 9E			sta BLITTMP.DST+2
  8904 5A61 A9 00			lda #$00
  8905 5A63 69 00			adc #$00
  8906 5A65 8D FC 9E			sta BLITTMP.DST+3
  8907 5A68 A9 20			lda #$20
  8908 5A6A 8D FD 9E			sta BLITTMP.SIZE
  8909 5A6D 20 E9 3B			jsr BLITTMP
  8910
  8911 				; optimize OK (service.pas), line = 1728
  8912
  8913 5A70 AD E1 9D			lda PLAYSCREEN.OFS
  8914 5A73 18 6D D8 9E			add HLP
  8915 5A77 8D 02 9F			sta BLITROW.DST
  8916 5A7A AD E2 9D			lda PLAYSCREEN.OFS+1
  8917 5A7D 6D D9 9E			adc HLP+1
  8918 5A80 8D 03 9F			sta BLITROW.DST+1
  8919 5A83 AD E3 9D			lda PLAYSCREEN.OFS+2
  8920 5A86 69 00			adc #$00
  8921 5A88 8D 04 9F			sta BLITROW.DST+2
  8922 5A8B AD E4 9D			lda PLAYSCREEN.OFS+3
  8923 5A8E 69 00			adc #$00
  8924 5A90 8D 05 9F			sta BLITROW.DST+3
  8925 5A93 AD D8 9E			lda HLP
  8926 5A96 8D FE 9E			sta BLITROW.SRC
  8927 5A99 A9 50			lda #$50
  8928 5A9B 18 6D D9 9E			add HLP+1
  8929 5A9F 8D FF 9E			sta BLITROW.SRC+1
  8930 5AA2 A9 00			lda #$00
  8931 5AA4 69 00			adc #$00
  8932 5AA6 8D 00 9F			sta BLITROW.SRC+2
  8933 5AA9 A9 00			lda #$00
  8934 5AAB 69 00			adc #$00
  8935 5AAD 8D 01 9F			sta BLITROW.SRC+3
  8936 5AB0 A9 20			lda #$20
  8937 5AB2 8D 06 9F			sta BLITROW.SIZE
  8938 5AB5 A9 00			lda #$00
  8939 5AB7 8D 07 9F			sta BLITROW.SIZE+1
  8940 5ABA 20 22 3C			jsr BLITROW
  8941
  8942 				; --- ForToDoEpilog
  8943 5ABD EE DF 9F			inc Y
  8944 5AC0 F0 03 4C AC 59		jne l_141A
  8945 5AC5			l_1428
  8946
  8947 				; optimize OK (service.pas), line = 1733
  8948
  8949 5AC5 AD DD 9F			lda BLOCK
  8950 5AC8 C9 09			cmp #$09
  8951 5ACA B0 03 4C A5 5C		jcc l_14C4
  8952
  8953 				; optimize OK (service.pas), line = 1735
  8954
  8955 5ACF A9 00			lda #$00
  8956 5AD1 8D E6 9F			sta CL2
  8957
  8958 				; optimize OK (service.pas), line = 1736
  8959
  8960 5AD4 AD DD 9F			lda BLOCK
  8961 5AD7 29 0F			and #$0F
  8962 5AD9 C9 09			cmp #$09
  8963 5ADB D0 19			jne l_14DF
  8964
  8965 				; optimize OK (service.pas), line = 1738
  8966
  8967 5ADD A9 CA			lda #$CA
  8968 5ADF 8D E6 9F			sta CL2
  8969
  8970 				; optimize OK (service.pas), line = 1739
  8971
  8972 5AE2 AD DC 9F			lda YA
  8973 5AE5 0A				asl @
  8974 5AE6 0A				asl @
  8975 5AE7 0A				asl @
  8976 5AE8 0A				asl @
  8977 5AE9 18 6D DB 9F			add XA
  8978 5AED A8				tay
  8979 5AEE A9 19			lda #$19
  8980 5AF0 99 00 DB			sta adr.WALL,y
  8981 5AF3 4C 02 5B			jmp l_14FE
  8982 5AF6			l_14DF
  8983
  8984 				; optimize OK (service.pas), line = 1745
  8985
  8986 5AF6 AD DD 9F			lda BLOCK
  8987 5AF9 C9 0A			cmp #$0A
  8988 5AFB D0 05			jne l_1510
  8989 5AFD A9 C9			lda #$C9
  8990 5AFF 8D E6 9F			sta CL2
  8991 5B02			l_14FE
  8992 5B02			l_1510
  8993
  8994 				; optimize OK (service.pas), line = 1749
  8995
  8996 5B02 A9 00			lda #$00
  8997 5B04 8D DF 9F			sta Y
  8998
  8999 5B07			l_1520
  9000 				; --- ForToDoCondition
  9001 5B07 AD DF 9F			lda Y
  9002 5B0A C9 07			cmp #$07
  9003 5B0C 90 03 4C BB 5B		jcs l_152E
  9004
  9005 				; optimize OK (service.pas), line = 1752
  9006
  9007 5B11 6D E3 9F			adc YS
  9008 5B14 A8				tay
  9009 5B15 AD E1 9F			lda XS
  9010 5B18 18 79 00 C0			add adr.ROW,y
  9011 5B1C 8D D8 9E			sta HLP
  9012 5B1F AD E2 9F			lda XS+1
  9013 5B22 79 00 C1			adc adr.ROW+256,y
  9014 5B25 8D D9 9E			sta HLP+1
  9015
  9016 				; optimize OK (service.pas), line = 1757
  9017
  9018 5B28 AD E1 9D			lda PLAYSCREEN.OFS
  9019 5B2B 18 6D D8 9E			add HLP
  9020 5B2F 8D 0D 9F			sta GETBYTE.SRC
  9021 5B32 AD E2 9D			lda PLAYSCREEN.OFS+1
  9022 5B35 6D D9 9E			adc HLP+1
  9023 5B38 8D 0E 9F			sta GETBYTE.SRC+1
  9024 5B3B AD E3 9D			lda PLAYSCREEN.OFS+2
  9025 5B3E 69 00			adc #$00
  9026 5B40 8D 0F 9F			sta GETBYTE.SRC+2
  9027 5B43 AD E4 9D			lda PLAYSCREEN.OFS+3
  9028 5B46 69 00			adc #$00
  9029 5B48 8D 10 9F			sta GETBYTE.SRC+3
  9030 5B4B 20 BC 3C			jsr GETBYTE
  9031 5B4E AD 11 9F			lda GETBYTE.RESULT
  9032 5B51 29 80			and #$80
  9033 5B53 8D E5 9F			sta CL
  9034
  9035 				; optimize OK (service.pas), line = 1759
  9036
  9037 5B56 AD E6 9F			lda CL2
  9038 5B59 29 7F			and #$7F
  9039 5B5B 0D E5 9F			ora CL
  9040 5B5E 8D E6 9F			sta CL2
  9041
  9042 				; optimize OK (service.pas), line = 1763
  9043
  9044 5B61 AD D8 9E			lda HLP
  9045 5B64 8D 08 9F			sta PUTBYTE.DST
  9046 5B67 A9 50			lda #$50
  9047 5B69 18 6D D9 9E			add HLP+1
  9048 5B6D 8D 09 9F			sta PUTBYTE.DST+1
  9049 5B70 A9 00			lda #$00
  9050 5B72 69 00			adc #$00
  9051 5B74 8D 0A 9F			sta PUTBYTE.DST+2
  9052 5B77 A9 00			lda #$00
  9053 5B79 69 00			adc #$00
  9054 5B7B 8D 0B 9F			sta PUTBYTE.DST+3
  9055 5B7E AD E6 9F			lda CL2
  9056 5B81 8D 0C 9F			sta PUTBYTE.V
  9057 5B84 20 94 3C			jsr PUTBYTE
  9058
  9059 				; optimize OK (service.pas), line = 1767
  9060
  9061 5B87 AD E1 9D			lda PLAYSCREEN.OFS
  9062 5B8A 18 6D D8 9E			add HLP
  9063 5B8E 8D 08 9F			sta PUTBYTE.DST
  9064 5B91 AD E2 9D			lda PLAYSCREEN.OFS+1
  9065 5B94 6D D9 9E			adc HLP+1
  9066 5B97 8D 09 9F			sta PUTBYTE.DST+1
  9067 5B9A AD E3 9D			lda PLAYSCREEN.OFS+2
  9068 5B9D 69 00			adc #$00
  9069 5B9F 8D 0A 9F			sta PUTBYTE.DST+2
  9070 5BA2 AD E4 9D			lda PLAYSCREEN.OFS+3
  9071 5BA5 69 00			adc #$00
  9072 5BA7 8D 0B 9F			sta PUTBYTE.DST+3
  9073 5BAA AD E6 9F			lda CL2
  9074 5BAD 8D 0C 9F			sta PUTBYTE.V
  9075 5BB0 20 94 3C			jsr PUTBYTE
  9076
  9077 				; --- ForToDoEpilog
  9078 5BB3 EE DF 9F			inc Y
  9079 5BB6 F0 03 4C 07 5B		jne l_1520
  9080 5BBB			l_152E
  9081
  9082 				; optimize OK (service.pas), line = 1770
  9083
  9084 5BBB AC E3 9F			ldy YS
  9085 5BBE AD E1 9F			lda XS
  9086 5BC1 18 79 00 C0			add adr.ROW,y
  9087 5BC5 8D D8 9E			sta HLP
  9088 5BC8 AD E2 9F			lda XS+1
  9089 5BCB 79 00 C1			adc adr.ROW+256,y
  9090 5BCE 8D D9 9E			sta HLP+1
  9091
  9092 				; optimize OK (service.pas), line = 1772
  9093
  9094 5BD1 AD E1 9D			lda PLAYSCREEN.OFS
  9095 5BD4 18 6D D8 9E			add HLP
  9096 5BD8 8D B1 9D			sta VBXE_RAM.POSITION
  9097 5BDB AD E2 9D			lda PLAYSCREEN.OFS+1
  9098 5BDE 6D D9 9E			adc HLP+1
  9099 5BE1 8D B2 9D			sta VBXE_RAM.POSITION+1
  9100 5BE4 AD E3 9D			lda PLAYSCREEN.OFS+2
  9101 5BE7 69 00			adc #$00
  9102 5BE9 8D B3 9D			sta VBXE_RAM.POSITION+2
  9103 5BEC AD E4 9D			lda PLAYSCREEN.OFS+3
  9104 5BEF 69 00			adc #$00
  9105 5BF1 8D B4 9D			sta VBXE_RAM.POSITION+3
  9106
  9107 				; optimize OK (service.pas), line = 1773
  9108
  9109 5BF4 AD 8F 9C			lda SCANLINE
  9110 5BF7 8D 57 9D			sta VBXE.TVBXEMEMORYSTREAM.READBUFFER.BUFFER
  9111 5BFA AD 90 9C			lda SCANLINE+1
  9112 5BFD 8D 58 9D			sta VBXE.TVBXEMEMORYSTREAM.READBUFFER.BUFFER+1
  9113 5C00 A9 0F			lda #$0F
  9114 5C02 8D 59 9D			sta VBXE.TVBXEMEMORYSTREAM.READBUFFER.COUNT
  9115 5C05 A9 00			lda #$00
  9116 5C07 8D 5A 9D			sta VBXE.TVBXEMEMORYSTREAM.READBUFFER.COUNT+1
  9117 5C0A AD 37 9C			lda VBXE_RAM
  9118 5C0D AC 38 9C			ldy VBXE_RAM+1
  9119 5C10 20 44 34			jsr VBXE.TVBXEMEMORYSTREAM.READBUFFER
  9120
  9121 				; optimize OK (service.pas), line = 1776
  9122
  9123 5C13 A9 00			lda #$00
  9124 5C15 A8				tay
  9125
  9126 5C16			l_1599
  9127 				; --- ForToDoCondition
  9128 5C16 C0 0F			cpy #$0F
  9129 5C18 B0 16			jcs l_15A7
  9130
  9131 				; optimize OK (service.pas), line = 1782
  9132
  9133 5C1A B9 00 C5			lda adr.SCANLINE,y
  9134 5C1D 29 80			and #$80
  9135 5C1F 8D E5 9F			sta CL
  9136
  9137 				; optimize OK (service.pas), line = 1784
  9138
  9139 5C22 AD E6 9F			lda CL2
  9140 5C25 29 7F			and #$7F
  9141 5C27 0D E5 9F			ora CL
  9142 5C2A 99 00 C2			sta adr.TMP,y
  9143
  9144 				; --- ForToDoEpilog
  9145 5C2D C8				iny
  9146 5C2E D0 E6			jne l_1599
  9147 5C30			l_15A7
  9148 5C30 8C DE 9F			sty X
  9149
  9150 				; optimize OK (service.pas), line = 1793
  9151
  9152 5C33 AD D8 9E			lda HLP
  9153 5C36 8D F9 9E			sta BLITTMP.DST
  9154 5C39 A9 50			lda #$50
  9155 5C3B 18 6D D9 9E			add HLP+1
  9156 5C3F 8D FA 9E			sta BLITTMP.DST+1
  9157 5C42 A9 00			lda #$00
  9158 5C44 69 00			adc #$00
  9159 5C46 8D FB 9E			sta BLITTMP.DST+2
  9160 5C49 A9 00			lda #$00
  9161 5C4B 69 00			adc #$00
  9162 5C4D 8D FC 9E			sta BLITTMP.DST+3
  9163 5C50 A9 0F			lda #$0F
  9164 5C52 8D FD 9E			sta BLITTMP.SIZE
  9165 5C55 20 E9 3B			jsr BLITTMP
  9166
  9167 				; optimize OK (service.pas), line = 1795
  9168
  9169 5C58 AD E1 9D			lda PLAYSCREEN.OFS
  9170 5C5B 18 6D D8 9E			add HLP
  9171 5C5F 8D 02 9F			sta BLITROW.DST
  9172 5C62 AD E2 9D			lda PLAYSCREEN.OFS+1
  9173 5C65 6D D9 9E			adc HLP+1
  9174 5C68 8D 03 9F			sta BLITROW.DST+1
  9175 5C6B AD E3 9D			lda PLAYSCREEN.OFS+2
  9176 5C6E 69 00			adc #$00
  9177 5C70 8D 04 9F			sta BLITROW.DST+2
  9178 5C73 AD E4 9D			lda PLAYSCREEN.OFS+3
  9179 5C76 69 00			adc #$00
  9180 5C78 8D 05 9F			sta BLITROW.DST+3
  9181 5C7B AD D8 9E			lda HLP
  9182 5C7E 8D FE 9E			sta BLITROW.SRC
  9183 5C81 A9 50			lda #$50
  9184 5C83 18 6D D9 9E			add HLP+1
  9185 5C87 8D FF 9E			sta BLITROW.SRC+1
  9186 5C8A A9 00			lda #$00
  9187 5C8C 69 00			adc #$00
  9188 5C8E 8D 00 9F			sta BLITROW.SRC+2
  9189 5C91 A9 00			lda #$00
  9190 5C93 69 00			adc #$00
  9191 5C95 8D 01 9F			sta BLITROW.SRC+3
  9192 5C98 A9 0F			lda #$0F
  9193 5C9A 8D 06 9F			sta BLITROW.SIZE
  9194 5C9D A9 00			lda #$00
  9195 5C9F 8D 07 9F			sta BLITROW.SIZE+1
  9196 5CA2 20 22 3C			jsr BLITROW
  9197 5CA5			l_14C4
  9198
  9199 				; ------------------------------------------------------------
  9200
  9201 = 9FDB			XA	= DATAORIGIN+$0309
  9202 = 9FDC			YA	= DATAORIGIN+$030A
  9203 = 9FDD			BLOCK	= DATAORIGIN+$030B
  9204 = 9FDE			X	= DATAORIGIN+$030C
  9205 = 9FDF			Y	= DATAORIGIN+$030D
  9206 = 9FE0			I	= DATAORIGIN+$030E
  9207 = 9FE1			XS	= DATAORIGIN+$030F
  9208 = 9FE3			YS	= DATAORIGIN+$0311
  9209 = 9FE5			CL	= DATAORIGIN+$0313
  9210 = 9FE6			CL2	= DATAORIGIN+$0314
  9211 = 9FE7			SHADOW	= DATAORIGIN+$0315
  9212
  9213 = 9FDB			@VarData	= XA
  9214 = 000D			@VarDataSize	= 13
  9215
  9216 5CA5			@exit
  9217 					.ifdef @new
  9218 					lda <@VarData
  9219 					sta :ztmp
  9220 					lda >@VarData
  9221 					ldy #@VarDataSize-1
  9222 					jmp @FreeMem
  9223 					els
  9224 5CA5 60				rts						; ret
  9225 					eif
  9226 				.endl
  9227
  9228 5CA6			.local	PUT_WALL					; PROCEDURE
  9229
  9230 				; optimize OK (service.pas), line = 1807
  9231
  9232 5CA6 A9 00			lda #$00
  9233 5CA8 8D EB 9F			sta Y
  9234
  9235 5CAB			l_15F1
  9236 				; --- ForToDoCondition
  9237 5CAB AD EB 9F			lda Y
  9238 5CAE C9 0F			cmp #$0F
  9239 5CB0 B0 48			jcs l_15FF
  9240
  9241 				; optimize OK (service.pas), line = 1808
  9242
  9243 5CB2 A9 00			lda #$00
  9244 5CB4 8D EA 9F			sta X
  9245
  9246 5CB7			l_1608
  9247 				; --- ForToDoCondition
  9248 5CB7 AD EA 9F			lda X
  9249 5CBA C9 0D			cmp #$0D
  9250 5CBC B0 37			jcs l_1616
  9251
  9252 				; optimize OK (service.pas), line = 1809
  9253
  9254 5CBE AD EB 9F			lda Y
  9255 5CC1 0A				asl @
  9256 5CC2 0A				asl @
  9257 5CC3 0A				asl @
  9258 5CC4 0A				asl @
  9259 5CC5 18 6D EA 9F			add X
  9260 5CC9 A8				tay
  9261 5CCA B9 00 DB			lda adr.WALL,y
  9262 5CCD F0 21			jeq l_1635
  9263 5CCF AD EB 9F			lda Y
  9264 5CD2 0A				asl @
  9265 5CD3 0A				asl @
  9266 5CD4 0A				asl @
  9267 5CD5 0A				asl @
  9268 5CD6 18 6D EA 9F			add X
  9269 5CDA A8				tay
  9270 5CDB B9 00 DB			lda adr.WALL,y
  9271 5CDE 8D DD 9F			sta PLACE_BLOCK.BLOCK
  9272 5CE1 AD EA 9F			lda X
  9273 5CE4 8D DB 9F			sta PLACE_BLOCK.XA
  9274 5CE7 AD EB 9F			lda Y
  9275 5CEA 8D DC 9F			sta PLACE_BLOCK.YA
  9276 5CED 20 1E 58			jsr PLACE_BLOCK
  9277 5CF0			l_1635
  9278
  9279 				; --- ForToDoEpilog
  9280 5CF0 EE EA 9F			inc X
  9281 5CF3 D0 C2			jne l_1608
  9282 5CF5			l_1616
  9283
  9284 				; --- ForToDoEpilog
  9285 5CF5 EE EB 9F			inc Y
  9286 5CF8 D0 B1			jne l_15F1
  9287 5CFA			l_15FF
  9288
  9289 				; ------------------------------------------------------------
  9290
  9291 = 9FEA			X	= DATAORIGIN+$0318
  9292 = 9FEB			Y	= DATAORIGIN+$0319
  9293
  9294 = 9FEA			@VarData	= X
  9295 = 0002			@VarDataSize	= 2
  9296
  9297 5CFA			@exit
  9298 					.ifdef @new
  9299 					lda <@VarData
  9300 					sta :ztmp
  9301 					lda >@VarData
  9302 					ldy #@VarDataSize-1
  9303 					jmp @FreeMem
  9304 					els
  9305 5CFA 60				rts						; ret
  9306 					eif
  9307 				.endl
  9308
  9309 5CFB			.local	SET_WALL					; PROCEDURE
  9310
  9311 				; optimize OK (service.pas), line = 1818
  9312
  9313 5CFB A9 00			lda #$00
  9314 5CFD 8D 94 9E			sta REMAIN_BLK
  9315
  9316 				; optimize OK (service.pas), line = 1819
  9317
  9318 5D00 AC B1 9E			ldy CUR_PLAYER
  9319 5D03 B9 A2 9E			lda adr.SCORE.WALL_N,y
  9320 5D06 8D EE 9F			sta WL
  9321
  9322 				; optimize OK (service.pas), line = 1822
  9323
  9324 5D09 A9 00			lda #$00
  9325 5D0B 8D ED 9F			sta Y
  9326
  9327 5D0E			l_1673
  9328 				; --- ForToDoCondition
  9329 5D0E AD ED 9F			lda Y
  9330 5D11 C9 0F			cmp #$0F
  9331 5D13 B0 3D			jcs l_1681
  9332
  9333 				; optimize OK (service.pas), line = 1823
  9334
  9335 5D15 A9 00			lda #$00
  9336 5D17 8D EC 9F			sta X
  9337
  9338 5D1A			l_168A
  9339 				; --- ForToDoCondition
  9340 5D1A AD EC 9F			lda X
  9341 5D1D C9 0D			cmp #$0D
  9342 5D1F B0 2C			jcs l_1698
  9343
  9344 				; optimize OK (service.pas), line = 1826
  9345
  9346 5D21 AD ED 9F			lda Y
  9347 5D24 0A				asl @
  9348 5D25 0A				asl @
  9349 5D26 0A				asl @
  9350 5D27 0A				asl @
  9351 5D28 18 6D EC 9F			add X
  9352 5D2C A8				tay
  9353 5D2D B9 00 DB			lda adr.WALL,y
  9354 5D30 F0 16			jeq l_16D0
  9355 5D32 AD ED 9F			lda Y
  9356 5D35 0A				asl @
  9357 5D36 0A				asl @
  9358 5D37 0A				asl @
  9359 5D38 0A				asl @
  9360 5D39 18 6D EC 9F			add X
  9361 5D3D A8				tay
  9362 5D3E B9 00 DB			lda adr.WALL,y
  9363 5D41 C9 0A			cmp #$0A
  9364 5D43 F0 03			jeq l_16D0
  9365 5D45 EE 94 9E			inc REMAIN_BLK
  9366 5D48			l_16D0
  9367
  9368 				; --- ForToDoEpilog
  9369 5D48 EE EC 9F			inc X
  9370 5D4B D0 CD			jne l_168A
  9371 5D4D			l_1698
  9372
  9373 				; --- ForToDoEpilog
  9374 5D4D EE ED 9F			inc Y
  9375 5D50 D0 BC			jne l_1673
  9376 5D52			l_1681
  9377
  9378 				; optimize OK (service.pas), line = 1828
  9379
  9380 5D52 AD EE 9F			lda WL
  9381 5D55 38 E9 01			sub #$01
  9382 5D58 85 86			sta @SMALLINT.MOD.A
  9383 5D5A A9 00			lda #$00
  9384 5D5C E9 00			sbc #$00
  9385 5D5E 85 87			sta @SMALLINT.MOD.A+1
  9386 5D60 A9 04			lda #$04
  9387 5D62 85 8E			sta @SMALLINT.MOD.B
  9388 5D64 A9 00			lda #$00
  9389 5D66 85 8F			sta @SMALLINT.MOD.B+1
  9390 5D68 20 1C 22			jsr @SMALLINT.MOD
  9391 5D6B A5 92			lda @SMALLINT.MOD.RESULT
  9392 5D6D 8D EE 9F			sta WL
  9393
  9394 				; optimize OK (service.pas), line = 1830
  9395
  9396 5D70 8D EF 9F			sta @CASETMP_0008
  9397 5D73 C9 00			cmp #$00
  9398 5D75 D0 33			jne l_16FA
  9399 				@
  9400
  9401 				; optimize OK (service.pas), line = 1831
  9402
  9403 5D77 AD 6A 9E 8D 62 9E + 	:8 mva adr.PATTERN0+# adr.PATTERN+#
  9404 5DA7 4C 83 5E			jmp a_0008
  9405 5DAA			l_16FA
  9406 5DAA C9 01			cmp #$01
  9407 5DAC D0 33			jne l_1703
  9408
  9409 				; optimize OK (service.pas), line = 1832
  9410
  9411 5DAE AD 72 9E 8D 62 9E + 	:8 mva adr.PATTERN1+# adr.PATTERN+#
  9412 5DDE 4C 83 5E			jmp a_0008
  9413 5DE1			l_1703
  9414 5DE1 C9 02			cmp #$02
  9415 5DE3 D0 33			jne l_170C
  9416
  9417 				; optimize OK (service.pas), line = 1833
  9418
  9419 5DE5 AD 7A 9E 8D 62 9E + 	:8 mva adr.PATTERN2+# adr.PATTERN+#
  9420 5E15 4C 83 5E			jmp a_0008
  9421 5E18			l_170C
  9422 5E18 C9 03			cmp #$03
  9423 5E1A D0 33			jne l_1715
  9424
  9425 				; optimize OK (service.pas), line = 1834
  9426
  9427 5E1C AD 82 9E 8D 62 9E + 	:8 mva adr.PATTERN3+# adr.PATTERN+#
  9428 5E4C 4C 83 5E			jmp a_0008
  9429 5E4F			l_1715
  9430 5E4F C9 04			cmp #$04
  9431 5E51 D0 30			jne l_171E
  9432
  9433 				; optimize OK (service.pas), line = 1835
  9434
  9435 5E53 AD 8A 9E 8D 62 9E + 	:8 mva adr.PATTERN4+# adr.PATTERN+#
  9436 5E83			l_171E
  9437 5E83			a_0008
  9438
  9439 				; ------------------------------------------------------------
  9440
  9441 = 9FEC			X	= DATAORIGIN+$031A
  9442 = 9FED			Y	= DATAORIGIN+$031B
  9443 = 9FEE			WL	= DATAORIGIN+$031C
  9444 = 9FEF			@CASETMP_0008	= DATAORIGIN+$031D
  9445
  9446 = 9FEC			@VarData	= X
  9447 = 0004			@VarDataSize	= 4
  9448
  9449 5E83			@exit
  9450 					.ifdef @new
  9451 					lda <@VarData
  9452 					sta :ztmp
  9453 					lda >@VarData
  9454 					ldy #@VarDataSize-1
  9455 					jmp @FreeMem
  9456 					els
  9457 5E83 60				rts						; ret
  9458 					eif
  9459 				.endl
  9460
  9461 5E84			.local	SPLIT_LINE					; FUNCTION
  9462
  9463 				; optimize OK (service.pas), line = 1874
  9464
  9465 5E84 AC F0 9F 84 84 AC + 	mwy X1 :bp2
  9466 5E8E A0 00			ldy #$00
  9467 5E90 B1 84			lda (:bp2),y
  9468 5E92 18 69 10			add #$10
  9469 5E95 91 84			sta (:bp2),y
  9470 5E97 C8				iny
  9471 5E98 B1 84			lda (:bp2),y
  9472 5E9A 69 00			adc #$00
  9473 5E9C 91 84			sta (:bp2),y
  9474
  9475 				; optimize OK (service.pas), line = 1875
  9476
  9477 5E9E AC F2 9F 84 84 AC + 	mwy Y1 :bp2
  9478 5EA8 A0 00			ldy #$00
  9479 5EAA B1 84			lda (:bp2),y
  9480 5EAC 18 69 18			add #$18
  9481 5EAF 91 84			sta (:bp2),y
  9482 5EB1 C8				iny
  9483 5EB2 B1 84			lda (:bp2),y
  9484 5EB4 69 00			adc #$00
  9485 5EB6 91 84			sta (:bp2),y
  9486
  9487 				; optimize OK (service.pas), line = 1876
  9488
  9489 5EB8 AC F4 9F 84 84 AC + 	mwy X2 :bp2
  9490 5EC2 A0 00			ldy #$00
  9491 5EC4 B1 84			lda (:bp2),y
  9492 5EC6 18 69 10			add #$10
  9493 5EC9 91 84			sta (:bp2),y
  9494 5ECB C8				iny
  9495 5ECC B1 84			lda (:bp2),y
  9496 5ECE 69 00			adc #$00
  9497 5ED0 91 84			sta (:bp2),y
  9498
  9499 				; optimize OK (service.pas), line = 1877
  9500
  9501 5ED2 AC F6 9F 84 84 AC + 	mwy Y2 :bp2
  9502 5EDC A0 00			ldy #$00
  9503 5EDE B1 84			lda (:bp2),y
  9504 5EE0 18 69 18			add #$18
  9505 5EE3 91 84			sta (:bp2),y
  9506 5EE5 C8				iny
  9507 5EE6 B1 84			lda (:bp2),y
  9508 5EE8 69 00			adc #$00
  9509 5EEA 91 84			sta (:bp2),y
  9510
  9511 				; optimize OK (service.pas), line = 1879
  9512
  9513 5EEC A9 00			lda #$00
  9514 5EEE 8D 19 A0			sta COLLISION
  9515
  9516 				; optimize OK (service.pas), line = 1881
  9517
  9518 5EF1 AC F0 9F 84 84 AC + 	mwy X1 :bp2
  9519 5EFB A0 00			ldy #$00
  9520 5EFD B1 84			lda (:bp2),y
  9521 5EFF 85 9F			sta :STACKORIGIN+9
  9522 5F01 C8				iny
  9523 5F02 B1 84			lda (:bp2),y
  9524 5F04 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  9525 5F06 A0 00			ldy #$00
  9526 5F08 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  9527 5F0A 10 01			spl
  9528 5F0C 88				dey
  9529 5F0D 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  9530 5F0F 84 BF			sty :STACKORIGIN+STACKWIDTH*2+9
  9531 5F11 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
  9532 5F13 66 AF			ror :STACKORIGIN+STACKWIDTH+9
  9533 5F15 66 9F			ror :STACKORIGIN+9
  9534 5F17 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
  9535 5F19 66 AF			ror :STACKORIGIN+STACKWIDTH+9
  9536 5F1B 66 9F			ror :STACKORIGIN+9
  9537 5F1D 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
  9538 5F1F 66 AF			ror :STACKORIGIN+STACKWIDTH+9
  9539 5F21 66 9F			ror :STACKORIGIN+9
  9540 5F23 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
  9541 5F25 66 AF			ror :STACKORIGIN+STACKWIDTH+9
  9542 5F27 66 9F			ror :STACKORIGIN+9
  9543 5F29 A5 9F			lda :STACKORIGIN+9
  9544 5F2B 8D 0D A0			sta XP1
  9545 5F2E A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  9546 5F30 8D 0E A0			sta XP1+1
  9547
  9548 				; optimize OK (service.pas), line = 1882
  9549
  9550 5F33 AC F2 9F 84 84 AC + 	mwy Y1 :bp2
  9551 5F3D A0 00			ldy #$00
  9552 5F3F B1 84			lda (:bp2),y
  9553 5F41 85 9F			sta :STACKORIGIN+9
  9554 5F43 C8				iny
  9555 5F44 B1 84			lda (:bp2),y
  9556 5F46 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  9557 5F48 A0 00			ldy #$00
  9558 5F4A A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  9559 5F4C 10 01			spl
  9560 5F4E 88				dey
  9561 5F4F 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  9562 5F51 84 BF			sty :STACKORIGIN+STACKWIDTH*2+9
  9563 5F53 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
  9564 5F55 66 AF			ror :STACKORIGIN+STACKWIDTH+9
  9565 5F57 66 9F			ror :STACKORIGIN+9
  9566 5F59 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
  9567 5F5B 66 AF			ror :STACKORIGIN+STACKWIDTH+9
  9568 5F5D 66 9F			ror :STACKORIGIN+9
  9569 5F5F 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
  9570 5F61 66 AF			ror :STACKORIGIN+STACKWIDTH+9
  9571 5F63 66 9F			ror :STACKORIGIN+9
  9572 5F65 A5 9F			lda :STACKORIGIN+9
  9573 5F67 8D 0F A0			sta YP1
  9574 5F6A A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  9575 5F6C 8D 10 A0			sta YP1+1
  9576
  9577 				; optimize OK (service.pas), line = 1883
  9578
  9579 5F6F AC F4 9F 84 84 AC + 	mwy X2 :bp2
  9580 5F79 A0 00			ldy #$00
  9581 5F7B B1 84			lda (:bp2),y
  9582 5F7D 85 9F			sta :STACKORIGIN+9
  9583 5F7F C8				iny
  9584 5F80 B1 84			lda (:bp2),y
  9585 5F82 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  9586 5F84 A0 00			ldy #$00
  9587 5F86 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  9588 5F88 10 01			spl
  9589 5F8A 88				dey
  9590 5F8B 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  9591 5F8D 84 BF			sty :STACKORIGIN+STACKWIDTH*2+9
  9592 5F8F 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
  9593 5F91 66 AF			ror :STACKORIGIN+STACKWIDTH+9
  9594 5F93 66 9F			ror :STACKORIGIN+9
  9595 5F95 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
  9596 5F97 66 AF			ror :STACKORIGIN+STACKWIDTH+9
  9597 5F99 66 9F			ror :STACKORIGIN+9
  9598 5F9B 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
  9599 5F9D 66 AF			ror :STACKORIGIN+STACKWIDTH+9
  9600 5F9F 66 9F			ror :STACKORIGIN+9
  9601 5FA1 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
  9602 5FA3 66 AF			ror :STACKORIGIN+STACKWIDTH+9
  9603 5FA5 66 9F			ror :STACKORIGIN+9
  9604 5FA7 A5 9F			lda :STACKORIGIN+9
  9605 5FA9 8D 11 A0			sta XP2
  9606 5FAC A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  9607 5FAE 8D 12 A0			sta XP2+1
  9608
  9609 				; optimize OK (service.pas), line = 1884
  9610
  9611 5FB1 AC F6 9F 84 84 AC + 	mwy Y2 :bp2
  9612 5FBB A0 00			ldy #$00
  9613 5FBD B1 84			lda (:bp2),y
  9614 5FBF 85 9F			sta :STACKORIGIN+9
  9615 5FC1 C8				iny
  9616 5FC2 B1 84			lda (:bp2),y
  9617 5FC4 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  9618 5FC6 A0 00			ldy #$00
  9619 5FC8 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  9620 5FCA 10 01			spl
  9621 5FCC 88				dey
  9622 5FCD 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  9623 5FCF 84 BF			sty :STACKORIGIN+STACKWIDTH*2+9
  9624 5FD1 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
  9625 5FD3 66 AF			ror :STACKORIGIN+STACKWIDTH+9
  9626 5FD5 66 9F			ror :STACKORIGIN+9
  9627 5FD7 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
  9628 5FD9 66 AF			ror :STACKORIGIN+STACKWIDTH+9
  9629 5FDB 66 9F			ror :STACKORIGIN+9
  9630 5FDD 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
  9631 5FDF 66 AF			ror :STACKORIGIN+STACKWIDTH+9
  9632 5FE1 66 9F			ror :STACKORIGIN+9
  9633 5FE3 A5 9F			lda :STACKORIGIN+9
  9634 5FE5 8D 13 A0			sta YP2
  9635 5FE8 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  9636 5FEA 8D 14 A0			sta YP2+1
  9637
  9638 				; optimize OK (service.pas), line = 1886
  9639
  9640 5FED AC F0 9F 84 84 AC + 	mwy X1 :bp2
  9641 5FF7 A0 00			ldy #$00
  9642 5FF9 B1 84			lda (:bp2),y
  9643 5FFB 8D FD 9F			sta XK
  9644 5FFE C8				iny
  9645 5FFF B1 84			lda (:bp2),y
  9646 6001 8D FE 9F			sta XK+1
  9647
  9648 				; optimize OK (service.pas), line = 1887
  9649
  9650 6004 AC F2 9F 84 84 AC + 	mwy Y1 :bp2
  9651 600E A0 00			ldy #$00
  9652 6010 B1 84			lda (:bp2),y
  9653 6012 8D FF 9F			sta YK
  9654 6015 C8				iny
  9655 6016 B1 84			lda (:bp2),y
  9656 6018 8D 00 A0			sta YK+1
  9657
  9658 				; optimize OK (service.pas), line = 1888
  9659
  9660 601B AC F4 9F 84 84 AC + 	mwy X2 :bp2
  9661 6025 A0 00			ldy #$00
  9662 6027 B1 84			lda (:bp2),y
  9663 6029 8D 01 A0			sta XJ
  9664 602C C8				iny
  9665 602D B1 84			lda (:bp2),y
  9666 602F 8D 02 A0			sta XJ+1
  9667
  9668 				; optimize OK (service.pas), line = 1889
  9669
  9670 6032 AC F6 9F 84 84 AC + 	mwy Y2 :bp2
  9671 603C A0 00			ldy #$00
  9672 603E B1 84			lda (:bp2),y
  9673 6040 8D 03 A0			sta YJ
  9674 6043 C8				iny
  9675 6044 B1 84			lda (:bp2),y
  9676 6046 8D 04 A0			sta YJ+1
  9677
  9678 				; optimize OK (service.pas), line = 1891
  9679
  9680 6049 AC F0 9F 84 84 AC + 	mwy X1 :bp2
  9681 6053 A0 00			ldy #$00
  9682 6055 B1 84			lda (:bp2),y
  9683 6057 8D 05 A0			sta XH
  9684 605A C8				iny
  9685 605B B1 84			lda (:bp2),y
  9686 605D 8D 06 A0			sta XH+1
  9687
  9688 				; optimize OK (service.pas), line = 1892
  9689
  9690 6060 AC F2 9F 84 84 AC + 	mwy Y1 :bp2
  9691 606A A0 00			ldy #$00
  9692 606C B1 84			lda (:bp2),y
  9693 606E 8D 07 A0			sta YH
  9694 6071 C8				iny
  9695 6072 B1 84			lda (:bp2),y
  9696 6074 8D 08 A0			sta YH+1
  9697
  9698 				; optimize OK (service.pas), line = 1893
  9699
  9700 6077 AC F4 9F 84 84 AC + 	mwy X2 :bp2
  9701 6081 A0 00			ldy #$00
  9702 6083 B1 84			lda (:bp2),y
  9703 6085 8D 09 A0			sta XN
  9704 6088 C8				iny
  9705 6089 B1 84			lda (:bp2),y
  9706 608B 8D 0A A0			sta XN+1
  9707
  9708 				; optimize OK (service.pas), line = 1894
  9709
  9710 608E AC F6 9F 84 84 AC + 	mwy Y2 :bp2
  9711 6098 A0 00			ldy #$00
  9712 609A B1 84			lda (:bp2),y
  9713 609C 8D 0B A0			sta YN
  9714 609F C8				iny
  9715 60A0 B1 84			lda (:bp2),y
  9716 60A2 8D 0C A0			sta YN+1
  9717
  9718 				; optimize OK (service.pas), line = 1901
  9719
  9720 60A5 AC F0 9F 84 84 AC + 	mwy X1 :bp2
  9721 60AF A0 00			ldy #$00
  9722 60B1 B1 84			lda (:bp2),y
  9723 60B3 85 9F			sta :STACKORIGIN+9
  9724 60B5 C8				iny
  9725 60B6 B1 84			lda (:bp2),y
  9726 60B8 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  9727 60BA AC F4 9F 84 84 AC + 	mwy X2 :bp2
  9728 60C4 A0 00			ldy #$00
  9729 60C6 B1 84			lda (:bp2),y
  9730 60C8 85 A0			sta :STACKORIGIN+10
  9731 60CA C8				iny
  9732 60CB B1 84			lda (:bp2),y
  9733 60CD 85 B0			sta :STACKORIGIN+STACKWIDTH+10
  9734 60CF A0 00			ldy #$00
  9735 60D1 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  9736 60D3 10 01			spl
  9737 60D5 88				dey
  9738 60D6 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  9739 60D8 84 BF			sty :STACKORIGIN+STACKWIDTH*2+9
  9740 60DA 84 CF			sty :STACKORIGIN+STACKWIDTH*3+9
  9741 60DC A0 00			ldy #$00
  9742 60DE A5 B0			lda :STACKORIGIN+STACKWIDTH+10
  9743 60E0 10 01			spl
  9744 60E2 88				dey
  9745 60E3 85 B0			sta :STACKORIGIN+STACKWIDTH+10
  9746 60E5 84 C0			sty :STACKORIGIN+STACKWIDTH*2+10
  9747 60E7 84 D0			sty :STACKORIGIN+STACKWIDTH*3+10
  9748 60E9 A5 9F			lda :STACKORIGIN+9
  9749 60EB 38 E5 A0			sub :STACKORIGIN+10
  9750 60EE 85 8A			sta SYSTEM.ABS.@010185000.X
  9751 60F0 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  9752 60F2 E5 B0			sbc :STACKORIGIN+STACKWIDTH+10
  9753 60F4 85 8B			sta SYSTEM.ABS.@010185000.X+1
  9754 60F6 A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
  9755 60F8 E5 C0			sbc :STACKORIGIN+STACKWIDTH*2+10
  9756 60FA 85 8C			sta SYSTEM.ABS.@010185000.X+2
  9757 60FC A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
  9758 60FE E5 D0			sbc :STACKORIGIN+STACKWIDTH*3+10
  9759 6100 85 8D			sta SYSTEM.ABS.@010185000.X+3
  9760 6102 20 77 2A			jsr SYSTEM.ABS.@010185000
  9761 6105 E8				inx
  9762 6106 A0 01			ldy #1
  9763 6108				.LOCAL
  9764 6108 A5 95			lda SYSTEM.ABS.@010185000.RESULT+3
  9765 610A 38 E9 00			sub #$00
  9766 610D D0 1C			bne L4
  9767 610F A5 94			lda SYSTEM.ABS.@010185000.RESULT+2
  9768 6111 C9 00			cmp #$00
  9769 6113 D0 0A			bne L1
  9770 6115 A5 93			lda SYSTEM.ABS.@010185000.RESULT+1
  9771 6117 C9 00			cmp #$00
  9772 6119 D0 04			bne L1
  9773 611B A5 92			lda SYSTEM.ABS.@010185000.RESULT
  9774 611D C9 10			cmp #$10
  9775 611F F0 10		L1	beq L5
  9776 6121 B0 04			bcs L3
  9777 6123 A9 FF			lda #$FF
  9778 6125 D0 0A			bne L5
  9779 6127 A9 01		L3	lda #$01
  9780 6129 D0 06			bne L5
  9781 612B 50 04		L4	bvc L5
  9782 612D 49 FF			eor #$FF
  9783 612F 09 01			ora #$01
  9784 6131			L5
  9785 					.ENDL
  9786 6131 F0 02			seq
  9787 6133 10 01			bpl @+
  9788 6135 88				dey
  9789 				@
  9790 6136 94 96			sty :STACKORIGIN,x
  9791 6138 AC F6 9F 84 84 AC + 	mwy Y2 :bp2
  9792 6142 A0 00			ldy #$00
  9793 6144 B1 84			lda (:bp2),y
  9794 6146 85 9F			sta :STACKORIGIN+9
  9795 6148 C8				iny
  9796 6149 B1 84			lda (:bp2),y
  9797 614B 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  9798 614D AC F2 9F 84 84 AC + 	mwy Y1 :bp2
  9799 6157 A0 00			ldy #$00
  9800 6159 B1 84			lda (:bp2),y
  9801 615B 85 A0			sta :STACKORIGIN+10
  9802 615D C8				iny
  9803 615E B1 84			lda (:bp2),y
  9804 6160 85 B0			sta :STACKORIGIN+STACKWIDTH+10
  9805 6162 A0 00			ldy #$00
  9806 6164 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  9807 6166 10 01			spl
  9808 6168 88				dey
  9809 6169 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  9810 616B 84 BF			sty :STACKORIGIN+STACKWIDTH*2+9
  9811 616D 84 CF			sty :STACKORIGIN+STACKWIDTH*3+9
  9812 616F A0 00			ldy #$00
  9813 6171 A5 B0			lda :STACKORIGIN+STACKWIDTH+10
  9814 6173 10 01			spl
  9815 6175 88				dey
  9816 6176 85 B0			sta :STACKORIGIN+STACKWIDTH+10
  9817 6178 84 C0			sty :STACKORIGIN+STACKWIDTH*2+10
  9818 617A 84 D0			sty :STACKORIGIN+STACKWIDTH*3+10
  9819 617C A5 9F			lda :STACKORIGIN+9
  9820 617E 38 E5 A0			sub :STACKORIGIN+10
  9821 6181 85 8A			sta SYSTEM.ABS.@010185000.X
  9822 6183 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  9823 6185 E5 B0			sbc :STACKORIGIN+STACKWIDTH+10
  9824 6187 85 8B			sta SYSTEM.ABS.@010185000.X+1
  9825 6189 A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
  9826 618B E5 C0			sbc :STACKORIGIN+STACKWIDTH*2+10
  9827 618D 85 8C			sta SYSTEM.ABS.@010185000.X+2
  9828 618F A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
  9829 6191 E5 D0			sbc :STACKORIGIN+STACKWIDTH*3+10
  9830 6193 85 8D			sta SYSTEM.ABS.@010185000.X+3
  9831 6195 20 77 2A			jsr SYSTEM.ABS.@010185000
  9832 6198 CA				dex
  9833 6199 A0 01			ldy #1
  9834 619B				.LOCAL
  9835 619B A5 95			lda SYSTEM.ABS.@010185000.RESULT+3
  9836 619D 38 E9 00			sub #$00
  9837 61A0 D0 1C			bne L4
  9838 61A2 A5 94			lda SYSTEM.ABS.@010185000.RESULT+2
  9839 61A4 C9 00			cmp #$00
  9840 61A6 D0 0A			bne L1
  9841 61A8 A5 93			lda SYSTEM.ABS.@010185000.RESULT+1
  9842 61AA C9 00			cmp #$00
  9843 61AC D0 04			bne L1
  9844 61AE A5 92			lda SYSTEM.ABS.@010185000.RESULT
  9845 61B0 C9 08			cmp #$08
  9846 61B2 F0 10		L1	beq L5
  9847 61B4 B0 04			bcs L3
  9848 61B6 A9 FF			lda #$FF
  9849 61B8 D0 0A			bne L5
  9850 61BA A9 01		L3	lda #$01
  9851 61BC D0 06			bne L5
  9852 61BE 50 04		L4	bvc L5
  9853 61C0 49 FF			eor #$FF
  9854 61C2 09 01			ora #$01
  9855 61C4			L5
  9856 					.ENDL
  9857 61C4 F0 02			seq
  9858 61C6 10 01			bpl @+
  9859 61C8 88				dey
  9860 				@
  9861 61C9 98				tya
  9862 61CA 15 97			ora :STACKORIGIN+1,x
  9863 61CC F0 05			jeq l_17A7
  9864
  9865 				; optimize OK (service.pas), line = 1902
  9866
  9867 61CE A9 01			lda #$01
  9868 61D0 20 3C 3D			jsr FATAL_ERROR
  9869 61D3			l_17A7
  9870
  9871 				; optimize OK (service.pas), line = 1905
  9872
  9873 61D3 AD 0E A0			lda XP1+1
  9874 61D6 CD 12 A0			cmp XP2+1
  9875 61D9 D0 06			bne @+
  9876 61DB AD 0D A0			lda XP1
  9877 61DE CD 11 A0			cmp XP2
  9878 				@
  9879 61E1 D0 13			jne l_17CAx
  9880 61E3 AD 10 A0			lda YP1+1
  9881 61E6 CD 14 A0			cmp YP2+1
  9882 61E9 D0 06			bne @+
  9883 61EB AD 0F A0			lda YP1
  9884 61EE CD 13 A0			cmp YP2
  9885 				@
  9886 61F1 D0 03 4C 34 65		jeq l_17CA
  9887 61F6			l_17CAx
  9888
  9889 				; optimize OK (service.pas), line = 1907
  9890
  9891 61F6 AD 10 A0			lda YP1+1
  9892 61F9 CD 14 A0			cmp YP2+1
  9893 61FC D0 06			bne @+
  9894 61FE AD 0F A0			lda YP1
  9895 6201 CD 13 A0			cmp YP2
  9896 				@
  9897 6204 D0 03 4C 3F 63		jeq l_17DD
  9898
  9899 				; optimize OK (service.pas), line = 1909
  9900
  9901 6209 AD 19 A0			lda COLLISION
  9902 620C 09 01			ora #$01
  9903 620E 8D 19 A0			sta COLLISION
  9904
  9905 				; --- WhileProlog
  9906 6211 4C 2C 63			jmp l_17EA
  9907 6214			l_17EB
  9908
  9909 				; optimize OK (service.pas), line = 1913
  9910
  9911 6214 AD 05 A0			lda XH
  9912 6217 85 9F			sta :STACKORIGIN+9
  9913 6219 A0 00			ldy #$00
  9914 621B AD 06 A0			lda XH+1
  9915 621E 10 01			spl
  9916 6220 88				dey
  9917 6221 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  9918 6223 84 BF			sty :STACKORIGIN+STACKWIDTH*2+9
  9919 6225 84 CF			sty :STACKORIGIN+STACKWIDTH*3+9
  9920 6227 AD 09 A0			lda XN
  9921 622A 85 A0			sta :STACKORIGIN+10
  9922 622C A0 00			ldy #$00
  9923 622E AD 0A A0			lda XN+1
  9924 6231 10 01			spl
  9925 6233 88				dey
  9926 6234 85 B0			sta :STACKORIGIN+STACKWIDTH+10
  9927 6236 84 C0			sty :STACKORIGIN+STACKWIDTH*2+10
  9928 6238 84 D0			sty :STACKORIGIN+STACKWIDTH*3+10
  9929 623A A5 9F			lda :STACKORIGIN+9
  9930 623C 18 65 A0			add :STACKORIGIN+10
  9931 623F 85 9F			sta :STACKORIGIN+9
  9932 6241 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  9933 6243 65 B0			adc :STACKORIGIN+STACKWIDTH+10
  9934 6245 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  9935 6247 A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
  9936 6249 65 C0			adc :STACKORIGIN+STACKWIDTH*2+10
  9937 624B 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
  9938 624D A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
  9939 624F 65 D0			adc :STACKORIGIN+STACKWIDTH*3+10
  9940 6251 85 CF			sta :STACKORIGIN+STACKWIDTH*3+9
  9941 6253 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
  9942 6255 66 AF			ror :STACKORIGIN+STACKWIDTH+9
  9943 6257 66 9F			ror :STACKORIGIN+9
  9944 6259 A5 9F			lda :STACKORIGIN+9
  9945 625B 8D F9 9F			sta X
  9946 625E A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  9947 6260 8D FA 9F			sta X+1
  9948
  9949 				; optimize OK (service.pas), line = 1914
  9950
  9951 6263 AD 07 A0			lda YH
  9952 6266 85 9F			sta :STACKORIGIN+9
  9953 6268 A0 00			ldy #$00
  9954 626A AD 08 A0			lda YH+1
  9955 626D 10 01			spl
  9956 626F 88				dey
  9957 6270 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  9958 6272 84 BF			sty :STACKORIGIN+STACKWIDTH*2+9
  9959 6274 84 CF			sty :STACKORIGIN+STACKWIDTH*3+9
  9960 6276 AD 0B A0			lda YN
  9961 6279 85 A0			sta :STACKORIGIN+10
  9962 627B A0 00			ldy #$00
  9963 627D AD 0C A0			lda YN+1
  9964 6280 10 01			spl
  9965 6282 88				dey
  9966 6283 85 B0			sta :STACKORIGIN+STACKWIDTH+10
  9967 6285 84 C0			sty :STACKORIGIN+STACKWIDTH*2+10
  9968 6287 84 D0			sty :STACKORIGIN+STACKWIDTH*3+10
  9969 6289 A5 9F			lda :STACKORIGIN+9
  9970 628B 18 65 A0			add :STACKORIGIN+10
  9971 628E 85 9F			sta :STACKORIGIN+9
  9972 6290 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  9973 6292 65 B0			adc :STACKORIGIN+STACKWIDTH+10
  9974 6294 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  9975 6296 A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
  9976 6298 65 C0			adc :STACKORIGIN+STACKWIDTH*2+10
  9977 629A 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
  9978 629C A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
  9979 629E 65 D0			adc :STACKORIGIN+STACKWIDTH*3+10
  9980 62A0 85 CF			sta :STACKORIGIN+STACKWIDTH*3+9
  9981 62A2 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
  9982 62A4 66 AF			ror :STACKORIGIN+STACKWIDTH+9
  9983 62A6 66 9F			ror :STACKORIGIN+9
  9984 62A8 A5 9F			lda :STACKORIGIN+9
  9985 62AA 8D FB 9F			sta Y
  9986 62AD A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  9987 62AF 8D FC 9F			sta Y+1
  9988
  9989 				; optimize OK (service.pas), line = 1916
  9990
  9991 62B2 AD FB 9F			lda Y
  9992 62B5 85 9F			sta :STACKORIGIN+9
  9993 62B7 A0 00			ldy #$00
  9994 62B9 AD FC 9F			lda Y+1
  9995 62BC 10 01			spl
  9996 62BE 88				dey
  9997 62BF 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  9998 62C1 84 BF			sty :STACKORIGIN+STACKWIDTH*2+9
  9999 62C3 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
 10000 62C5 66 AF			ror :STACKORIGIN+STACKWIDTH+9
 10001 62C7 66 9F			ror :STACKORIGIN+9
 10002 62C9 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
 10003 62CB 66 AF			ror :STACKORIGIN+STACKWIDTH+9
 10004 62CD 66 9F			ror :STACKORIGIN+9
 10005 62CF 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
 10006 62D1 66 AF			ror :STACKORIGIN+STACKWIDTH+9
 10007 62D3 66 9F			ror :STACKORIGIN+9
 10008 62D5 A5 9F			lda :STACKORIGIN+9
 10009 62D7 8D 17 A0			sta YP
 10010 62DA A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 10011 62DC 8D 18 A0			sta YP+1
 10012
 10013 				; optimize OK (service.pas), line = 1918
 10014
 10015 62DF CD 10 A0			cmp YP1+1
 10016 62E2 D0 06			bne @+
 10017 62E4 AD 17 A0			lda YP
 10018 62E7 CD 0F A0			cmp YP1
 10019 				@
 10020 62EA D0 18			jne l_1822
 10021
 10022 				; optimize OK (service.pas), line = 1920
 10023
 10024 62EC AD F9 9F			lda X
 10025 62EF 8D 05 A0			sta XH
 10026 62F2 AD FA 9F			lda X+1
 10027 62F5 8D 06 A0			sta XH+1
 10028
 10029 				; optimize OK (service.pas), line = 1921
 10030
 10031 62F8 AD FB 9F			lda Y
 10032 62FB 8D 07 A0			sta YH
 10033 62FE AD FC 9F			lda Y+1
 10034 6301 8D 08 A0			sta YH+1
 10035 6304			l_1822
 10036
 10037 				; optimize OK (service.pas), line = 1924
 10038
 10039 6304 AD 18 A0			lda YP+1
 10040 6307 CD 14 A0			cmp YP2+1
 10041 630A D0 06			bne @+
 10042 630C AD 17 A0			lda YP
 10043 630F CD 13 A0			cmp YP2
 10044 				@
 10045 6312 D0 18			jne l_1841
 10046
 10047 				; optimize OK (service.pas), line = 1926
 10048
 10049 6314 AD F9 9F			lda X
 10050 6317 8D 09 A0			sta XN
 10051 631A AD FA 9F			lda X+1
 10052 631D 8D 0A A0			sta XN+1
 10053
 10054 				; optimize OK (service.pas), line = 1927
 10055
 10056 6320 AD FB 9F			lda Y
 10057 6323 8D 0B A0			sta YN
 10058 6326 AD FC 9F			lda Y+1
 10059 6329 8D 0C A0			sta YN+1
 10060 632C			l_1841
 10061 632C			l_17EA
 10062
 10063 				; optimize OK (service.pas), line = 1911
 10064
 10065 632C AD 0B A0			lda YN
 10066 632F 29 07			and #$07
 10067 6331 F0 0C			jeq l_17EBw
 10068 6333 AD 0B A0			lda YN
 10069 6336 29 07			and #$07
 10070 6338 C9 07			cmp #$07
 10071 633A F0 03 4C 14 62		jne l_17EB
 10072 633F			l_17EBw
 10073 633F			l_17DD
 10074
 10075 				; optimize OK (service.pas), line = 1933
 10076
 10077 633F AD 0E A0			lda XP1+1
 10078 6342 CD 12 A0			cmp XP2+1
 10079 6345 D0 06			bne @+
 10080 6347 AD 0D A0			lda XP1
 10081 634A CD 11 A0			cmp XP2
 10082 				@
 10083 634D D0 03 4C 8E 64		jeq l_1880
 10084
 10085 				; optimize OK (service.pas), line = 1935
 10086
 10087 6352 AD 19 A0			lda COLLISION
 10088 6355 09 02			ora #$02
 10089 6357 8D 19 A0			sta COLLISION
 10090
 10091 				; --- WhileProlog
 10092 635A 4C 7B 64			jmp l_188D
 10093 635D			l_188E
 10094
 10095 				; optimize OK (service.pas), line = 1939
 10096
 10097 635D AD FD 9F			lda XK
 10098 6360 85 9F			sta :STACKORIGIN+9
 10099 6362 A0 00			ldy #$00
 10100 6364 AD FE 9F			lda XK+1
 10101 6367 10 01			spl
 10102 6369 88				dey
 10103 636A 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 10104 636C 84 BF			sty :STACKORIGIN+STACKWIDTH*2+9
 10105 636E 84 CF			sty :STACKORIGIN+STACKWIDTH*3+9
 10106 6370 AD 01 A0			lda XJ
 10107 6373 85 A0			sta :STACKORIGIN+10
 10108 6375 A0 00			ldy #$00
 10109 6377 AD 02 A0			lda XJ+1
 10110 637A 10 01			spl
 10111 637C 88				dey
 10112 637D 85 B0			sta :STACKORIGIN+STACKWIDTH+10
 10113 637F 84 C0			sty :STACKORIGIN+STACKWIDTH*2+10
 10114 6381 84 D0			sty :STACKORIGIN+STACKWIDTH*3+10
 10115 6383 A5 9F			lda :STACKORIGIN+9
 10116 6385 18 65 A0			add :STACKORIGIN+10
 10117 6388 85 9F			sta :STACKORIGIN+9
 10118 638A A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 10119 638C 65 B0			adc :STACKORIGIN+STACKWIDTH+10
 10120 638E 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 10121 6390 A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
 10122 6392 65 C0			adc :STACKORIGIN+STACKWIDTH*2+10
 10123 6394 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
 10124 6396 A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
 10125 6398 65 D0			adc :STACKORIGIN+STACKWIDTH*3+10
 10126 639A 85 CF			sta :STACKORIGIN+STACKWIDTH*3+9
 10127 639C 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
 10128 639E 66 AF			ror :STACKORIGIN+STACKWIDTH+9
 10129 63A0 66 9F			ror :STACKORIGIN+9
 10130 63A2 A5 9F			lda :STACKORIGIN+9
 10131 63A4 8D F9 9F			sta X
 10132 63A7 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 10133 63A9 8D FA 9F			sta X+1
 10134
 10135 				; optimize OK (service.pas), line = 1940
 10136
 10137 63AC AD FF 9F			lda YK
 10138 63AF 85 9F			sta :STACKORIGIN+9
 10139 63B1 A0 00			ldy #$00
 10140 63B3 AD 00 A0			lda YK+1
 10141 63B6 10 01			spl
 10142 63B8 88				dey
 10143 63B9 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 10144 63BB 84 BF			sty :STACKORIGIN+STACKWIDTH*2+9
 10145 63BD 84 CF			sty :STACKORIGIN+STACKWIDTH*3+9
 10146 63BF AD 03 A0			lda YJ
 10147 63C2 85 A0			sta :STACKORIGIN+10
 10148 63C4 A0 00			ldy #$00
 10149 63C6 AD 04 A0			lda YJ+1
 10150 63C9 10 01			spl
 10151 63CB 88				dey
 10152 63CC 85 B0			sta :STACKORIGIN+STACKWIDTH+10
 10153 63CE 84 C0			sty :STACKORIGIN+STACKWIDTH*2+10
 10154 63D0 84 D0			sty :STACKORIGIN+STACKWIDTH*3+10
 10155 63D2 A5 9F			lda :STACKORIGIN+9
 10156 63D4 18 65 A0			add :STACKORIGIN+10
 10157 63D7 85 9F			sta :STACKORIGIN+9
 10158 63D9 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 10159 63DB 65 B0			adc :STACKORIGIN+STACKWIDTH+10
 10160 63DD 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 10161 63DF A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
 10162 63E1 65 C0			adc :STACKORIGIN+STACKWIDTH*2+10
 10163 63E3 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
 10164 63E5 A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
 10165 63E7 65 D0			adc :STACKORIGIN+STACKWIDTH*3+10
 10166 63E9 85 CF			sta :STACKORIGIN+STACKWIDTH*3+9
 10167 63EB 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
 10168 63ED 66 AF			ror :STACKORIGIN+STACKWIDTH+9
 10169 63EF 66 9F			ror :STACKORIGIN+9
 10170 63F1 A5 9F			lda :STACKORIGIN+9
 10171 63F3 8D FB 9F			sta Y
 10172 63F6 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 10173 63F8 8D FC 9F			sta Y+1
 10174
 10175 				; optimize OK (service.pas), line = 1942
 10176
 10177 63FB AD F9 9F			lda X
 10178 63FE 85 9F			sta :STACKORIGIN+9
 10179 6400 A0 00			ldy #$00
 10180 6402 AD FA 9F			lda X+1
 10181 6405 10 01			spl
 10182 6407 88				dey
 10183 6408 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 10184 640A 84 BF			sty :STACKORIGIN+STACKWIDTH*2+9
 10185 640C 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
 10186 640E 66 AF			ror :STACKORIGIN+STACKWIDTH+9
 10187 6410 66 9F			ror :STACKORIGIN+9
 10188 6412 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
 10189 6414 66 AF			ror :STACKORIGIN+STACKWIDTH+9
 10190 6416 66 9F			ror :STACKORIGIN+9
 10191 6418 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
 10192 641A 66 AF			ror :STACKORIGIN+STACKWIDTH+9
 10193 641C 66 9F			ror :STACKORIGIN+9
 10194 641E 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
 10195 6420 66 AF			ror :STACKORIGIN+STACKWIDTH+9
 10196 6422 66 9F			ror :STACKORIGIN+9
 10197 6424 A5 9F			lda :STACKORIGIN+9
 10198 6426 8D 15 A0			sta XP
 10199 6429 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 10200 642B 8D 16 A0			sta XP+1
 10201
 10202 				; optimize OK (service.pas), line = 1944
 10203
 10204 642E CD 0E A0			cmp XP1+1
 10205 6431 D0 06			bne @+
 10206 6433 AD 15 A0			lda XP
 10207 6436 CD 0D A0			cmp XP1
 10208 				@
 10209 6439 D0 18			jne l_18C5
 10210
 10211 				; optimize OK (service.pas), line = 1946
 10212
 10213 643B AD F9 9F			lda X
 10214 643E 8D FD 9F			sta XK
 10215 6441 AD FA 9F			lda X+1
 10216 6444 8D FE 9F			sta XK+1
 10217
 10218 				; optimize OK (service.pas), line = 1947
 10219
 10220 6447 AD FB 9F			lda Y
 10221 644A 8D FF 9F			sta YK
 10222 644D AD FC 9F			lda Y+1
 10223 6450 8D 00 A0			sta YK+1
 10224 6453			l_18C5
 10225
 10226 				; optimize OK (service.pas), line = 1950
 10227
 10228 6453 AD 16 A0			lda XP+1
 10229 6456 CD 12 A0			cmp XP2+1
 10230 6459 D0 06			bne @+
 10231 645B AD 15 A0			lda XP
 10232 645E CD 11 A0			cmp XP2
 10233 				@
 10234 6461 D0 18			jne l_18E4
 10235
 10236 				; optimize OK (service.pas), line = 1952
 10237
 10238 6463 AD F9 9F			lda X
 10239 6466 8D 01 A0			sta XJ
 10240 6469 AD FA 9F			lda X+1
 10241 646C 8D 02 A0			sta XJ+1
 10242
 10243 				; optimize OK (service.pas), line = 1953
 10244
 10245 646F AD FB 9F			lda Y
 10246 6472 8D 03 A0			sta YJ
 10247 6475 AD FC 9F			lda Y+1
 10248 6478 8D 04 A0			sta YJ+1
 10249 647B			l_18E4
 10250 647B			l_188D
 10251
 10252 				; optimize OK (service.pas), line = 1937
 10253
 10254 647B AD 01 A0			lda XJ
 10255 647E 29 0F			and #$0F
 10256 6480 F0 0C			jeq l_188Ew
 10257 6482 AD 01 A0			lda XJ
 10258 6485 29 0F			and #$0F
 10259 6487 C9 0F			cmp #$0F
 10260 6489 F0 03 4C 5D 63		jne l_188E
 10261 648E			l_188Ew
 10262 648E			l_1880
 10263
 10264 				; optimize OK (service.pas), line = 1964
 10265
 10266 648E AD 19 A0			lda COLLISION
 10267 6491 C9 01			cmp #$01
 10268 6493 D0 03			jne l_1923
 10269 				; optimize OK (service.pas), line = 1966
 10270 				; optimize OK (service.pas), line = 1967
 10271 6495 4C 03 65			jmp l_1937
 10272 6498			l_1923
 10273
 10274 				; optimize OK (service.pas), line = 1969
 10275
 10276 6498 AD 19 A0			lda COLLISION
 10277 649B C9 02			cmp #$02
 10278 649D D0 2F			jne l_1949
 10279
 10280 				; optimize OK (service.pas), line = 1971
 10281
 10282 649F AC F4 9F 84 84 AC + 	mwy X2 :bp2
 10283 64A9 A0 00			ldy #$00
 10284 64AB AD 01 A0			lda XJ
 10285 64AE 91 84			sta (:bp2),y
 10286 64B0 C8				iny
 10287 64B1 AD 02 A0			lda XJ+1
 10288 64B4 91 84			sta (:bp2),y
 10289
 10290 				; optimize OK (service.pas), line = 1972
 10291
 10292 64B6 AC F6 9F 84 84 AC + 	mwy Y2 :bp2
 10293 64C0 A0 00			ldy #$00
 10294 64C2 AD 03 A0			lda YJ
 10295 64C5 91 84			sta (:bp2),y
 10296 64C7 C8				iny
 10297 64C8 AD 04 A0			lda YJ+1
 10298 64CB 4C 2F 65			jmp l_195D
 10299 64CE			l_1949
 10300
 10301 				; optimize OK (service.pas), line = 1974
 10302
 10303 64CE AD 19 A0			lda COLLISION
 10304 64D1 C9 03			cmp #$03
 10305 64D3 D0 5C			jne l_196F
 10306
 10307 				; optimize OK (service.pas), line = 1976
 10308
 10309 64D5 AC F0 9F 84 84 AC + 	mwy X1 :bp2
 10310 64DF A0 00			ldy #$00
 10311 64E1 AD 01 A0			lda XJ
 10312 64E4 91 84			sta (:bp2),y
 10313 64E6 C8				iny
 10314 64E7 AD 02 A0			lda XJ+1
 10315 64EA 91 84			sta (:bp2),y
 10316
 10317 				; optimize OK (service.pas), line = 1977
 10318
 10319 64EC AC F2 9F 84 84 AC + 	mwy Y1 :bp2
 10320 64F6 A0 00			ldy #$00
 10321 64F8 AD 03 A0			lda YJ
 10322 64FB 91 84			sta (:bp2),y
 10323 64FD C8				iny
 10324 64FE AD 04 A0			lda YJ+1
 10325 6501 91 84			sta (:bp2),y
 10326 6503			l_1937
 10327
 10328 				; optimize OK (service.pas), line = 1978
 10329
 10330 6503 AC F4 9F 84 84 AC + 	mwy X2 :bp2
 10331 650D A0 00			ldy #$00
 10332 650F AD 09 A0			lda XN
 10333 6512 91 84			sta (:bp2),y
 10334 6514 C8				iny
 10335 6515 AD 0A A0			lda XN+1
 10336 6518 91 84			sta (:bp2),y
 10337
 10338 				; optimize OK (service.pas), line = 1979
 10339
 10340 651A AC F6 9F 84 84 AC + 	mwy Y2 :bp2
 10341 6524 A0 00			ldy #$00
 10342 6526 AD 0B A0			lda YN
 10343 6529 91 84			sta (:bp2),y
 10344 652B C8				iny
 10345 652C AD 0C A0			lda YN+1
 10346 652F			l_195D
 10347 652F 91 84			sta (:bp2),y
 10348 6531			l_196F
 10349 6531 4C 39 65			jmp l_198F
 10350 6534			l_17CA
 10351
 10352 				; optimize OK (service.pas), line = 1984
 10353
 10354 6534 A9 02			lda #$02
 10355 6536 20 3C 3D			jsr FATAL_ERROR
 10356 6539			l_198F
 10357
 10358 				; optimize OK (service.pas), line = 1987
 10359
 10360 6539 AC F0 9F 84 84 AC + 	mwy X1 :bp2
 10361 6543 A0 00			ldy #$00
 10362 6545 B1 84			lda (:bp2),y
 10363 6547 38 E9 10			sub #$10
 10364 654A 91 84			sta (:bp2),y
 10365 654C C8				iny
 10366 654D B1 84			lda (:bp2),y
 10367 654F E9 00			sbc #$00
 10368 6551 91 84			sta (:bp2),y
 10369
 10370 				; optimize OK (service.pas), line = 1988
 10371
 10372 6553 AC F2 9F 84 84 AC + 	mwy Y1 :bp2
 10373 655D A0 00			ldy #$00
 10374 655F B1 84			lda (:bp2),y
 10375 6561 38 E9 18			sub #$18
 10376 6564 91 84			sta (:bp2),y
 10377 6566 C8				iny
 10378 6567 B1 84			lda (:bp2),y
 10379 6569 E9 00			sbc #$00
 10380 656B 91 84			sta (:bp2),y
 10381
 10382 				; optimize OK (service.pas), line = 1989
 10383
 10384 656D AC F4 9F 84 84 AC + 	mwy X2 :bp2
 10385 6577 A0 00			ldy #$00
 10386 6579 B1 84			lda (:bp2),y
 10387 657B 38 E9 10			sub #$10
 10388 657E 91 84			sta (:bp2),y
 10389 6580 C8				iny
 10390 6581 B1 84			lda (:bp2),y
 10391 6583 E9 00			sbc #$00
 10392 6585 91 84			sta (:bp2),y
 10393
 10394 				; optimize OK (service.pas), line = 1990
 10395
 10396 6587 AC F6 9F 84 84 AC + 	mwy Y2 :bp2
 10397 6591 A0 00			ldy #$00
 10398 6593 B1 84			lda (:bp2),y
 10399 6595 38 E9 18			sub #$18
 10400 6598 91 84			sta (:bp2),y
 10401 659A C8				iny
 10402 659B B1 84			lda (:bp2),y
 10403 659D E9 00			sbc #$00
 10404 659F 91 84			sta (:bp2),y
 10405
 10406 				; optimize OK (service.pas), line = 1993
 10407
 10408 65A1 AC F0 9F 84 84 AC + 	mwy X1 :bp2
 10409 65AB A0 00			ldy #$00
 10410 65AD B1 84			lda (:bp2),y
 10411 65AF 8D 16 9F			sta MAX.B
 10412 65B2 C8				iny
 10413 65B3 B1 84			lda (:bp2),y
 10414 65B5 8D 17 9F			sta MAX.B+1
 10415 65B8 A9 00			lda #$00
 10416 65BA 8D 14 9F			sta MAX.A
 10417 65BD 8D 15 9F			sta MAX.A+1
 10418 65C0 20 E6 3C			jsr MAX
 10419 65C3 A9 CF			lda #$CF
 10420 65C5 8D 1A 9F			sta MIN.A
 10421 65C8 A9 00			lda #$00
 10422 65CA 8D 1B 9F			sta MIN.A+1
 10423 65CD AD 18 9F			lda MAX.RESULT
 10424 65D0 8D 1C 9F			sta MIN.B
 10425 65D3 AD 19 9F			lda MAX.RESULT+1
 10426 65D6 8D 1D 9F			sta MIN.B+1
 10427 65D9 20 11 3D			jsr MIN
 10428 65DC AC F0 9F 84 84 AC + 	mwy X1 :bp2
 10429 65E6 A0 00			ldy #$00
 10430 65E8 AD 1E 9F			lda MIN.RESULT
 10431 65EB 91 84			sta (:bp2),y
 10432 65ED C8				iny
 10433 65EE AD 1F 9F			lda MIN.RESULT+1
 10434 65F1 91 84			sta (:bp2),y
 10435
 10436 				; optimize OK (service.pas), line = 1994
 10437
 10438 65F3 AC F4 9F 84 84 AC + 	mwy X2 :bp2
 10439 65FD A0 00			ldy #$00
 10440 65FF B1 84			lda (:bp2),y
 10441 6601 8D 16 9F			sta MAX.B
 10442 6604 C8				iny
 10443 6605 B1 84			lda (:bp2),y
 10444 6607 8D 17 9F			sta MAX.B+1
 10445 660A A9 00			lda #$00
 10446 660C 8D 14 9F			sta MAX.A
 10447 660F 8D 15 9F			sta MAX.A+1
 10448 6612 20 E6 3C			jsr MAX
 10449 6615 A9 CF			lda #$CF
 10450 6617 8D 1A 9F			sta MIN.A
 10451 661A A9 00			lda #$00
 10452 661C 8D 1B 9F			sta MIN.A+1
 10453 661F AD 18 9F			lda MAX.RESULT
 10454 6622 8D 1C 9F			sta MIN.B
 10455 6625 AD 19 9F			lda MAX.RESULT+1
 10456 6628 8D 1D 9F			sta MIN.B+1
 10457 662B 20 11 3D			jsr MIN
 10458 662E AC F4 9F 84 84 AC + 	mwy X2 :bp2
 10459 6638 A0 00			ldy #$00
 10460 663A AD 1E 9F			lda MIN.RESULT
 10461 663D 91 84			sta (:bp2),y
 10462 663F C8				iny
 10463 6640 AD 1F 9F			lda MIN.RESULT+1
 10464 6643 91 84			sta (:bp2),y
 10465
 10466 				; optimize OK (service.pas), line = 2001
 10467
 10468 6645 AD 19 A0			lda COLLISION
 10469 6648 8D F8 9F			sta RESULT
 10470 664B			@exit
 10471
 10472 				; ------------------------------------------------------------
 10473
 10474 = 9FF0			X1	= DATAORIGIN+$031E
 10475 = 9FF2			Y1	= DATAORIGIN+$0320
 10476 = 9FF4			X2	= DATAORIGIN+$0322
 10477 = 9FF6			Y2	= DATAORIGIN+$0324
 10478 = 9FF8			RESULT	= DATAORIGIN+$0326
 10479 = 9FF9			X	= DATAORIGIN+$0327
 10480 = 9FFB			Y	= DATAORIGIN+$0329
 10481 = 9FFD			XK	= DATAORIGIN+$032B
 10482 = 9FFF			YK	= DATAORIGIN+$032D
 10483 = A001			XJ	= DATAORIGIN+$032F
 10484 = A003			YJ	= DATAORIGIN+$0331
 10485 = A005			XH	= DATAORIGIN+$0333
 10486 = A007			YH	= DATAORIGIN+$0335
 10487 = A009			XN	= DATAORIGIN+$0337
 10488 = A00B			YN	= DATAORIGIN+$0339
 10489 = A00D			XP1	= DATAORIGIN+$033B
 10490 = A00F			YP1	= DATAORIGIN+$033D
 10491 = A011			XP2	= DATAORIGIN+$033F
 10492 = A013			YP2	= DATAORIGIN+$0341
 10493 = A015			XP	= DATAORIGIN+$0343
 10494 = A017			YP	= DATAORIGIN+$0345
 10495 = A019			COLLISION	= DATAORIGIN+$0347
 10496
 10497 = 9FF0			@VarData	= X1
 10498 = 0029			@VarDataSize	= 41
 10499
 10500 664B 60				rts						; ret
 10501 				.endl
 10502
 10503 664C			.local	SHOOT_BLOCK					; PROCEDURE
 10504
 10505 				; optimize OK (service.pas), line = 2012
 10506
 10507 664C AD 1B A0			lda XB+1
 10508 664F 10 03 4C 5D 68		jmi l_19E3
 10509 6654 AD 1A A0			lda XB
 10510 6657 C9 0D			cmp #$0D
 10511 6659 AD 1B A0			lda XB+1
 10512 665C E9 00			sbc #$00
 10513 665E 50 02			svc
 10514 6660 49 80			eor #$80
 10515 6662 30 03 4C 5D 68		jpl l_19E3
 10516 6667 AD 1D A0			lda YB+1
 10517 666A 10 03 4C 5D 68		jmi l_19E3
 10518 666F AD 1C A0			lda YB
 10519 6672 C9 0F			cmp #$0F
 10520 6674 AD 1D A0			lda YB+1
 10521 6677 E9 00			sbc #$00
 10522 6679 50 02			svc
 10523 667B 49 80			eor #$80
 10524 667D 30 03 4C 5D 68		jpl l_19E3
 10525
 10526 				; optimize OK (service.pas), line = 2015
 10527
 10528 6682 AD 1C A0			lda YB
 10529 6685 0A				asl @
 10530 6686 0A				asl @
 10531 6687 0A				asl @
 10532 6688 0A				asl @
 10533 6689 18 6D 1A A0			add XB
 10534 668D 8D 22 A0			sta I
 10535
 10536 				; optimize OK (service.pas), line = 2017
 10537
 10538 6690 A8				tay
 10539 6691 B9 00 DB			lda adr.WALL,y
 10540 6694 D0 03 4C 5D 68		jeq l_1A07
 10541
 10542 				; optimize OK (service.pas), line = 2019
 10543
 10544 6699 C9 0A			cmp #$0A
 10545 669B 90 03 4C D3 67		jcs l_1A1D
 10546
 10547 				; optimize OK (service.pas), line = 2021
 10548
 10549 66A0 AD 1A A0			lda XB
 10550 66A3 8D CE 9F			sta REMOVE_BLOCK.XA
 10551 66A6 AD 1C A0			lda YB
 10552 66A9 8D CF 9F			sta REMOVE_BLOCK.YA
 10553 66AC 20 36 55			jsr REMOVE_BLOCK
 10554
 10555 				; optimize FAIL (0, service.pas), line = 2022
 10556
 10557 66AF CE 94 9E			dec REMAIN_BLK
 10558
 10559 				; optimize OK (service.pas), line = 2026
 10560
 10561 66B2 AD B1 9E			lda CUR_PLAYER
 10562 66B5 0A				asl @
 10563 66B6 0A				asl @
 10564 66B7 85 9F			sta :STACKORIGIN+9
 10565 66B9 AC 22 A0			ldy I
 10566 66BC B9 00 DB			lda adr.WALL,y
 10567 66BF 0A				asl @
 10568 66C0 A8				tay
 10569 66C1 B9 69 20			lda adr.SCORE_WALL,y
 10570 66C4 85 A0			sta :STACKORIGIN+10
 10571 66C6 B9 6A 20			lda adr.SCORE_WALL+1,y
 10572 66C9 85 B0			sta :STACKORIGIN+STACKWIDTH+10
 10573 66CB A4 9F			ldy :STACKORIGIN+9
 10574 66CD B9 96 9E			lda adr.SCORE.PLAYER,y
 10575 66D0 18 65 A0			add :STACKORIGIN+10
 10576 66D3 99 96 9E			sta adr.SCORE.PLAYER,y
 10577 66D6 B9 97 9E			lda adr.SCORE.PLAYER+1,y
 10578 66D9 65 B0			adc :STACKORIGIN+STACKWIDTH+10
 10579 66DB 99 97 9E			sta adr.SCORE.PLAYER+1,y
 10580 66DE B9 98 9E			lda adr.SCORE.PLAYER+2,y
 10581 66E1 69 00			adc #$00
 10582 66E3 99 98 9E			sta adr.SCORE.PLAYER+2,y
 10583 66E6 B9 99 9E			lda adr.SCORE.PLAYER+3,y
 10584 66E9 69 00			adc #$00
 10585 66EB 99 99 9E			sta adr.SCORE.PLAYER+3,y
 10586
 10587 				; optimize OK (service.pas), line = 2028
 10588
 10589 66EE A9 2C			lda #$2C
 10590 66F0 8D 0A 9D			sta SYSTEM.RANDOM.@010184000.RANGE
 10591 66F3 A9 01			lda #$01
 10592 66F5 8D 0B 9D			sta SYSTEM.RANDOM.@010184000.RANGE+1
 10593 66F8 20 A8 32			jsr SYSTEM.RANDOM.@010184000
 10594 66FB AD C1 9E			lda LETT.INCOMING
 10595 66FE 18 6D 0C 9D			add SYSTEM.RANDOM.@010184000.RESULT
 10596 6702 8D C1 9E			sta LETT.INCOMING
 10597 6705 AD C2 9E			lda LETT.INCOMING+1
 10598 6708 6D 0D 9D			adc SYSTEM.RANDOM.@010184000.RESULT+1
 10599 670B 8D C2 9E			sta LETT.INCOMING+1
 10600
 10601 				; optimize OK (service.pas), line = 2030
 10602
 10603 670E AD 1A A0			lda XB
 10604 6711 85 9F			sta :STACKORIGIN+9
 10605 6713 A0 00			ldy #$00
 10606 6715 AD 1B A0			lda XB+1
 10607 6718 10 01			spl
 10608 671A 88				dey
 10609 671B 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 10610 671D 84 BF			sty :STACKORIGIN+STACKWIDTH*2+9
 10611 671F 84 CF			sty :STACKORIGIN+STACKWIDTH*3+9
 10612 6721 06 9F			asl :STACKORIGIN+9
 10613 6723 26 AF			rol :STACKORIGIN+STACKWIDTH+9
 10614 6725 26 BF			rol :STACKORIGIN+STACKWIDTH*2+9
 10615 6727 26 CF			rol :STACKORIGIN+STACKWIDTH*3+9
 10616 6729 06 9F			asl :STACKORIGIN+9
 10617 672B 26 AF			rol :STACKORIGIN+STACKWIDTH+9
 10618 672D 06 9F			asl :STACKORIGIN+9
 10619 672F 26 AF			rol :STACKORIGIN+STACKWIDTH+9
 10620 6731 06 9F			asl :STACKORIGIN+9
 10621 6733 26 AF			rol :STACKORIGIN+STACKWIDTH+9
 10622 6735 A5 9F			lda :STACKORIGIN+9
 10623 6737 18 69 09			add #$09
 10624 673A 8D C3 9E			sta LETT.NEXTX
 10625 673D A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 10626 673F 69 00			adc #$00
 10627 6741 8D C4 9E			sta LETT.NEXTX+1
 10628
 10629 				; optimize OK (service.pas), line = 2031
 10630
 10631 6744 AD 1C A0			lda YB
 10632 6747 85 9F			sta :STACKORIGIN+9
 10633 6749 A0 00			ldy #$00
 10634 674B AD 1D A0			lda YB+1
 10635 674E 10 01			spl
 10636 6750 88				dey
 10637 6751 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 10638 6753 84 BF			sty :STACKORIGIN+STACKWIDTH*2+9
 10639 6755 84 CF			sty :STACKORIGIN+STACKWIDTH*3+9
 10640 6757 A5 9F			lda :STACKORIGIN+9
 10641 6759 18 69 01			add #$01
 10642 675C 85 9F			sta :STACKORIGIN+9
 10643 675E A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 10644 6760 69 00			adc #$00
 10645 6762 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 10646 6764 A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
 10647 6766 69 00			adc #$00
 10648 6768 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
 10649 676A A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
 10650 676C 69 00			adc #$00
 10651 676E 85 CF			sta :STACKORIGIN+STACKWIDTH*3+9
 10652 6770 06 9F			asl :STACKORIGIN+9
 10653 6772 26 AF			rol :STACKORIGIN+STACKWIDTH+9
 10654 6774 06 9F			asl :STACKORIGIN+9
 10655 6776 26 AF			rol :STACKORIGIN+STACKWIDTH+9
 10656 6778 06 9F			asl :STACKORIGIN+9
 10657 677A 26 AF			rol :STACKORIGIN+STACKWIDTH+9
 10658 677C A5 9F			lda :STACKORIGIN+9
 10659 677E 18 69 16			add #$16
 10660 6781 8D C5 9E			sta LETT.NEXTY
 10661 6784 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 10662 6786 69 00			adc #$00
 10663 6788 8D C6 9E			sta LETT.NEXTY+1
 10664
 10665 				; optimize FAIL ('RANDOM_LETTER_DROP', service.pas), line = 2032
 10666
 10667 678B 20 E0 3F			jsr RANDOM_LETTER_DROP
 10668 678E AD 34 9F			lda RANDOM_LETTER_DROP.RESULT
 10669 6791 8D C7 9E			sta LETT.NEXTTYPE
 10670 6794 AD 35 9F			lda RANDOM_LETTER_DROP.RESULT+1
 10671 6797 8D C8 9E			sta LETT.NEXTTYPE+1
 10672
 10673 				; optimize OK (service.pas), line = 2034
 10674
 10675 679A AC 22 A0			ldy I
 10676 679D A9 00			lda #$00
 10677 679F 99 00 DB			sta adr.WALL,y
 10678
 10679 				; optimize OK (service.pas), line = 2035
 10680
 10681 67A2 A9 B8			lda #$B8
 10682 67A4 8D BB 9D			sta BALL_BLOCK_SOUND.A
 10683 67A7 A9 01			lda #$01
 10684 67A9 8D BC 9D			sta BALL_BLOCK_SOUND.A+1
 10685 67AC A9 03			lda #$03
 10686 67AE 8D BD 9D			sta BALL_BLOCK_SOUND.B
 10687 67B1 A9 00			lda #$00
 10688 67B3 8D BE 9D			sta BALL_BLOCK_SOUND.B+1
 10689 67B6 20 D1 38			jsr BALL_BLOCK_SOUND
 10690
 10691 				; optimize OK (service.pas), line = 2036
 10692
 10693 67B9 AC 1E A0 84 84 AC + 	mwy BALL :bp2
 10694 67C3 A0 14			ldy #BALL.SBD-DATAORIGIN
 10695 67C5 A9 00			lda #$00
 10696 67C7 91 84			sta (:bp2),y
 10697 67C9 C8				iny
 10698 67CA 91 84			sta (:bp2),y
 10699
 10700 				; optimize OK (service.pas), line = 2037
 10701
 10702 67CC A0 16			ldy #BALL.BRWHIT-DATAORIGIN
 10703 67CE 91 84			sta (:bp2),y
 10704 67D0 4C 5D 68			jmp l_1A71
 10705 67D3			l_1A1D
 10706
 10707 				; optimize OK (service.pas), line = 2042
 10708
 10709 67D3 AC 22 A0			ldy I
 10710 67D6 B9 00 DB			lda adr.WALL,y
 10711 67D9 29 0F			and #$0F
 10712 67DB C9 09			cmp #$09
 10713 67DD D0 45			jne l_1A8A
 10714
 10715 				; optimize OK (service.pas), line = 2044
 10716
 10717 67DF AC 1E A0 84 84 AC + 	mwy BALL :bp2
 10718 67E9 A0 16			ldy #BALL.BRWHIT-DATAORIGIN
 10719 67EB A9 00			lda #$00
 10720 67ED 91 84			sta (:bp2),y
 10721
 10722 				; optimize OK (service.pas), line = 2045
 10723
 10724 67EF AC 22 A0			ldy I
 10725 67F2 B9 00 DB			lda adr.WALL,y
 10726 67F5 38 E9 10			sub #$10
 10727 67F8 99 00 DB			sta adr.WALL,y
 10728
 10729 				; optimize OK (service.pas), line = 2047
 10730
 10731 67FB A9 72			lda #$72
 10732 67FD 8D BB 9D			sta BALL_BLOCK_SOUND.A
 10733 6800 A9 01			lda #$01
 10734 6802 8D BC 9D			sta BALL_BLOCK_SOUND.A+1
 10735 6805 A9 04			lda #$04
 10736 6807 8D BD 9D			sta BALL_BLOCK_SOUND.B
 10737 680A A9 00			lda #$00
 10738 680C 8D BE 9D			sta BALL_BLOCK_SOUND.B+1
 10739 680F 20 D1 38			jsr BALL_BLOCK_SOUND
 10740
 10741 				; optimize OK (service.pas), line = 2048
 10742
 10743 6812 AD 1A A0			lda XB
 10744 6815 8D 32 9F			sta SHINE.XB
 10745 6818 AD 1C A0			lda YB
 10746 681B 8D 33 9F			sta SHINE.YB
 10747 681E 20 A4 3F			jsr SHINE
 10748 6821 4C 5D 68			jmp l_1AA4
 10749 6824			l_1A8A
 10750
 10751 				; optimize OK (service.pas), line = 2052
 10752
 10753 6824 AC 1E A0 84 84 AC + 	mwy BALL :bp2
 10754 682E A0 16			ldy #BALL.BRWHIT-DATAORIGIN
 10755 6830 B1 84			lda (:bp2),y
 10756 6832 18 69 01			add #$01
 10757 6835 91 84			sta (:bp2),y
 10758
 10759 				; optimize OK (service.pas), line = 2053
 10760
 10761 6837 AD 1A A0			lda XB
 10762 683A 8D 32 9F			sta SHINE.XB
 10763 683D AD 1C A0			lda YB
 10764 6840 8D 33 9F			sta SHINE.YB
 10765 6843 20 A4 3F			jsr SHINE
 10766
 10767 				; optimize OK (service.pas), line = 2055
 10768
 10769 6846 A9 C8			lda #$C8
 10770 6848 8D BB 9D			sta BALL_BLOCK_SOUND.A
 10771 684B A9 00			lda #$00
 10772 684D 8D BC 9D			sta BALL_BLOCK_SOUND.A+1
 10773 6850 A9 07			lda #$07
 10774 6852 8D BD 9D			sta BALL_BLOCK_SOUND.B
 10775 6855 A9 00			lda #$00
 10776 6857 8D BE 9D			sta BALL_BLOCK_SOUND.B+1
 10777 685A 20 D1 38			jsr BALL_BLOCK_SOUND
 10778 685D			l_1AA4
 10779 685D			l_1A71
 10780 685D			l_1A07
 10781 685D			l_19E3
 10782
 10783 				; ------------------------------------------------------------
 10784
 10785 = A01A			XB	= DATAORIGIN+$0348
 10786 = A01C			YB	= DATAORIGIN+$034A
 10787 = A01E			BALL	= DATAORIGIN+$034C
 10788 = 9CD2			BALL.X	= DATAORIGIN+$0000
 10789 = 9CD4			BALL.Y	= DATAORIGIN+$0002
 10790 = 9CD6			BALL.FINEX	= DATAORIGIN+$0004
 10791 = 9CD8			BALL.FINEY	= DATAORIGIN+$0006
 10792 = 9CDA			BALL.OLDX	= DATAORIGIN+$0008
 10793 = 9CDC			BALL.OLDY	= DATAORIGIN+$000A
 10794 = 9CDE			BALL.SPEED	= DATAORIGIN+$000C
 10795 = 9CE0			BALL.FINESPEED	= DATAORIGIN+$000E
 10796 = 9CE2			BALL.SPEEDX	= DATAORIGIN+$0010
 10797 = 9CE4			BALL.SPEEDY	= DATAORIGIN+$0012
 10798 = 9CE6			BALL.SBD	= DATAORIGIN+$0014
 10799 = 9CE8			BALL.BRWHIT	= DATAORIGIN+$0016
 10800 = 9CE9			BALL.INPLAY	= DATAORIGIN+$0017
 10801 = 9CEA			BALL.LAUNCH	= DATAORIGIN+$0018
 10802 = 9CEB			BALL.ONVAUS	= DATAORIGIN+$0019
 10803 = 9CED			BALL.STM	= DATAORIGIN+$001B
 10804 = A022			I	= DATAORIGIN+$0350
 10805
 10806 = A01A			@VarData	= XB
 10807 = 0007			@VarDataSize	= 7
 10808
 10809 685D			@exit
 10810 					.ifdef @new
 10811 					lda <@VarData
 10812 					sta :ztmp
 10813 					lda >@VarData
 10814 					ldy #@VarDataSize-1
 10815 					jmp @FreeMem
 10816 					els
 10817 685D 60				rts						; ret
 10818 					eif
 10819 				.endl
 10820
 10821 685E			.local	SHOOT_BLOCK_WITH_FIRE				; PROCEDURE
 10822
 10823 				; optimize OK (service.pas), line = 2066
 10824
 10825 685E AD 24 A0			lda XB+1
 10826 6861 10 03 4C 78 69		jmi l_1AE7
 10827 6866 AD 23 A0			lda XB
 10828 6869 C9 0D			cmp #$0D
 10829 686B AD 24 A0			lda XB+1
 10830 686E E9 00			sbc #$00
 10831 6870 50 02			svc
 10832 6872 49 80			eor #$80
 10833 6874 30 03 4C 78 69		jpl l_1AE7
 10834 6879 AD 26 A0			lda YB+1
 10835 687C 10 03 4C 78 69		jmi l_1AE7
 10836 6881 AD 25 A0			lda YB
 10837 6884 C9 0F			cmp #$0F
 10838 6886 AD 26 A0			lda YB+1
 10839 6889 E9 00			sbc #$00
 10840 688B 50 02			svc
 10841 688D 49 80			eor #$80
 10842 688F 30 03 4C 78 69		jpl l_1AE7
 10843
 10844 				; optimize OK (service.pas), line = 2069
 10845
 10846 6894 AD 25 A0			lda YB
 10847 6897 0A				asl @
 10848 6898 0A				asl @
 10849 6899 0A				asl @
 10850 689A 0A				asl @
 10851 689B 18 6D 23 A0			add XB
 10852 689F 8D 27 A0			sta I
 10853
 10854 				; optimize OK (service.pas), line = 2071
 10855
 10856 68A2 A8				tay
 10857 68A3 B9 00 DB			lda adr.WALL,y
 10858 68A6 D0 03 4C 78 69		jeq l_1B0B
 10859
 10860 				; optimize OK (service.pas), line = 2073
 10861
 10862 68AB C9 0A			cmp #$0A
 10863 68AD B0 65			jcs l_1B21
 10864
 10865 				; optimize OK (service.pas), line = 2075
 10866
 10867 68AF AD 23 A0			lda XB
 10868 68B2 8D CE 9F			sta REMOVE_BLOCK.XA
 10869 68B5 AD 25 A0			lda YB
 10870 68B8 8D CF 9F			sta REMOVE_BLOCK.YA
 10871 68BB 20 36 55			jsr REMOVE_BLOCK
 10872
 10873 				; optimize FAIL (0, service.pas), line = 2076
 10874
 10875 68BE CE 94 9E			dec REMAIN_BLK
 10876
 10877 				; optimize OK (service.pas), line = 2077
 10878
 10879 68C1 AD B1 9E			lda CUR_PLAYER
 10880 68C4 0A				asl @
 10881 68C5 0A				asl @
 10882 68C6 85 9F			sta :STACKORIGIN+9
 10883 68C8 AC 27 A0			ldy I
 10884 68CB B9 00 DB			lda adr.WALL,y
 10885 68CE 0A				asl @
 10886 68CF A8				tay
 10887 68D0 B9 69 20			lda adr.SCORE_WALL,y
 10888 68D3 85 A0			sta :STACKORIGIN+10
 10889 68D5 B9 6A 20			lda adr.SCORE_WALL+1,y
 10890 68D8 85 B0			sta :STACKORIGIN+STACKWIDTH+10
 10891 68DA A4 9F			ldy :STACKORIGIN+9
 10892 68DC B9 96 9E			lda adr.SCORE.PLAYER,y
 10893 68DF 18 65 A0			add :STACKORIGIN+10
 10894 68E2 99 96 9E			sta adr.SCORE.PLAYER,y
 10895 68E5 B9 97 9E			lda adr.SCORE.PLAYER+1,y
 10896 68E8 65 B0			adc :STACKORIGIN+STACKWIDTH+10
 10897 68EA 99 97 9E			sta adr.SCORE.PLAYER+1,y
 10898 68ED B9 98 9E			lda adr.SCORE.PLAYER+2,y
 10899 68F0 69 00			adc #$00
 10900 68F2 99 98 9E			sta adr.SCORE.PLAYER+2,y
 10901 68F5 B9 99 9E			lda adr.SCORE.PLAYER+3,y
 10902 68F8 69 00			adc #$00
 10903 68FA 99 99 9E			sta adr.SCORE.PLAYER+3,y
 10904
 10905 				; optimize OK (service.pas), line = 2078
 10906
 10907 68FD AC 27 A0			ldy I
 10908 6900 A9 00			lda #$00
 10909 6902 99 00 DB			sta adr.WALL,y
 10910
 10911 				; optimize OK (service.pas), line = 2079
 10912
 10913 6905 A9 B8			lda #$B8
 10914 6907 8D BB 9D			sta BALL_BLOCK_SOUND.A
 10915 690A A9 01			lda #$01
 10916 690C 8D BC 9D			sta BALL_BLOCK_SOUND.A+1
 10917 690F A9 03			lda #$03
 10918 6911 4C 6D 69			jmp l_1B49
 10919 6914			l_1B21
 10920
 10921 				; optimize OK (service.pas), line = 2084
 10922
 10923 6914 AC 27 A0			ldy I
 10924 6917 B9 00 DB			lda adr.WALL,y
 10925 691A 29 0F			and #$0F
 10926 691C C9 09			cmp #$09
 10927 691E D0 32			jne l_1B62
 10928
 10929 				; optimize OK (service.pas), line = 2086
 10930
 10931 6920 B9 00 DB			lda adr.WALL,y
 10932 6923 38 E9 10			sub #$10
 10933 6926 99 00 DB			sta adr.WALL,y
 10934
 10935 				; optimize OK (service.pas), line = 2087
 10936
 10937 6929 A9 72			lda #$72
 10938 692B 8D BB 9D			sta BALL_BLOCK_SOUND.A
 10939 692E A9 01			lda #$01
 10940 6930 8D BC 9D			sta BALL_BLOCK_SOUND.A+1
 10941 6933 A9 04			lda #$04
 10942 6935 8D BD 9D			sta BALL_BLOCK_SOUND.B
 10943 6938 A9 00			lda #$00
 10944 693A 8D BE 9D			sta BALL_BLOCK_SOUND.B+1
 10945 693D 20 D1 38			jsr BALL_BLOCK_SOUND
 10946
 10947 				; optimize OK (service.pas), line = 2088
 10948
 10949 6940 AD 23 A0			lda XB
 10950 6943 8D 32 9F			sta SHINE.XB
 10951 6946 AD 25 A0			lda YB
 10952 6949 8D 33 9F			sta SHINE.YB
 10953 694C 20 A4 3F			jsr SHINE
 10954 694F 4C 78 69			jmp l_1B78
 10955 6952			l_1B62
 10956
 10957 				; optimize OK (service.pas), line = 2092
 10958
 10959 6952 AD 23 A0			lda XB
 10960 6955 8D 32 9F			sta SHINE.XB
 10961 6958 AD 25 A0			lda YB
 10962 695B 8D 33 9F			sta SHINE.YB
 10963 695E 20 A4 3F			jsr SHINE
 10964
 10965 				; optimize OK (service.pas), line = 2093
 10966
 10967 6961 A9 C8			lda #$C8
 10968 6963 8D BB 9D			sta BALL_BLOCK_SOUND.A
 10969 6966 A9 00			lda #$00
 10970 6968 8D BC 9D			sta BALL_BLOCK_SOUND.A+1
 10971 696B A9 07			lda #$07
 10972 696D			l_1B49
 10973 696D 8D BD 9D			sta BALL_BLOCK_SOUND.B
 10974 6970 A9 00			lda #$00
 10975 6972 8D BE 9D			sta BALL_BLOCK_SOUND.B+1
 10976 6975 20 D1 38			jsr BALL_BLOCK_SOUND
 10977 6978			l_1B78
 10978 6978			l_1B0B
 10979 6978			l_1AE7
 10980
 10981 				; ------------------------------------------------------------
 10982
 10983 = A023			XB	= DATAORIGIN+$0351
 10984 = A025			YB	= DATAORIGIN+$0353
 10985 = A027			I	= DATAORIGIN+$0355
 10986
 10987 = A023			@VarData	= XB
 10988 = 0005			@VarDataSize	= 5
 10989
 10990 6978			@exit
 10991 					.ifdef @new
 10992 					lda <@VarData
 10993 					sta :ztmp
 10994 					lda >@VarData
 10995 					ldy #@VarDataSize-1
 10996 					jmp @FreeMem
 10997 					els
 10998 6978 60				rts						; ret
 10999 					eif
 11000 				.endl
 11001
 11002 6979			.local	BALL_HIT_BLOCK					; PROCEDURE
 11003
 11004 				; optimize OK (service.pas), line = 2127
 11005
 11006 6979 A9 FF			lda #$FF
 11007 697B 8D 4A A0			sta EMERGENCY
 11008
 11009 				; optimize OK (service.pas), line = 2129
 11010
 11011 697E AC 28 A0 84 84 AC + 	mwy BALL :bp2
 11012 6988 A0 00			ldy #BALL.X-DATAORIGIN
 11013 698A B1 84			lda (:bp2),y
 11014 698C 38 E9 09			sub #$09
 11015 698F 8D 36 A0			sta NX
 11016 6992 C8				iny
 11017 6993 B1 84			lda (:bp2),y
 11018 6995 E9 00			sbc #$00
 11019 6997 8D 37 A0			sta NX+1
 11020
 11021 				; optimize OK (service.pas), line = 2130
 11022
 11023 699A A0 02			ldy #BALL.Y-DATAORIGIN
 11024 699C B1 84			lda (:bp2),y
 11025 699E 38 E9 16			sub #$16
 11026 69A1 8D 38 A0			sta NY
 11027 69A4 C8				iny
 11028 69A5 B1 84			lda (:bp2),y
 11029 69A7 E9 00			sbc #$00
 11030 69A9 8D 39 A0			sta NY+1
 11031
 11032 				; optimize OK (service.pas), line = 2133
 11033
 11034 69AC A0 08			ldy #BALL.OLDX-DATAORIGIN
 11035 69AE B1 84			lda (:bp2),y
 11036 69B0 38 E9 09			sub #$09
 11037 69B3 8D 32 A0			sta OX
 11038 69B6 C8				iny
 11039 69B7 B1 84			lda (:bp2),y
 11040 69B9 E9 00			sbc #$00
 11041 69BB 8D 33 A0			sta OX+1
 11042
 11043 				; optimize OK (service.pas), line = 2134
 11044
 11045 69BE A0 0A			ldy #BALL.OLDY-DATAORIGIN
 11046 69C0 B1 84			lda (:bp2),y
 11047 69C2 38 E9 16			sub #$16
 11048 69C5 8D 34 A0			sta OY
 11049 69C8 C8				iny
 11050 69C9 B1 84			lda (:bp2),y
 11051 69CB E9 00			sbc #$00
 11052 69CD 8D 35 A0			sta OY+1
 11053
 11054 				; optimize OK (service.pas), line = 2136
 11055
 11056 69D0 AD 37 A0			lda NX+1
 11057 69D3 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 11058 69D5 AD 36 A0			lda NX
 11059 69D8 46 AF			lsr :STACKORIGIN+STACKWIDTH+9
 11060 69DA 6A				ror @
 11061 69DB 46 AF			lsr :STACKORIGIN+STACKWIDTH+9
 11062 69DD 6A				ror @
 11063 69DE 46 AF			lsr :STACKORIGIN+STACKWIDTH+9
 11064 69E0 6A				ror @
 11065 69E1 46 AF			lsr :STACKORIGIN+STACKWIDTH+9
 11066 69E3 6A				ror @
 11067 69E4 8D 30 A0			sta XB
 11068
 11069 				; optimize OK (service.pas), line = 2137
 11070
 11071 69E7 AD 39 A0			lda NY+1
 11072 69EA 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 11073 69EC AD 38 A0			lda NY
 11074 69EF 46 AF			lsr :STACKORIGIN+STACKWIDTH+9
 11075 69F1 6A				ror @
 11076 69F2 46 AF			lsr :STACKORIGIN+STACKWIDTH+9
 11077 69F4 6A				ror @
 11078 69F5 46 AF			lsr :STACKORIGIN+STACKWIDTH+9
 11079 69F7 6A				ror @
 11080 69F8 8D 31 A0			sta YB
 11081
 11082 				; optimize OK (service.pas), line = 2141
 11083
 11084 69FB A9 10			lda #$10
 11085 69FD 85 8E			sta :ecx
 11086 69FF 85 92			sta :ztmp8
 11087 6A01 AD 31 A0			lda YB
 11088 6A04 85 86			sta :eax
 11089 6A06 85 94			sta :ztmp10
 11090 					.ifdef fmulinit
 11091 					fmulu_8
 11092 					els
 11093 6A08 20 3F 22			imulCL
 11094 					eif
 11095 6A0B 24 94			bit :ztmp10
 11096 6A0D 10 03			bpl @+
 11097 6A0F 38 E5 92			sub :ztmp8
 11098 				@
 11099 6A12 24 92			bit :ztmp8
 11100 6A14 10 03			bpl @+
 11101 6A16 38 E5 94			sub :ztmp10
 11102 				@
 11103 6A19 85 87			sta :eax+1
 11104 6A1B A5 86			lda :eax
 11105 6A1D 18 6D 30 A0			add XB
 11106 6A21 A8				tay
 11107 6A22 B9 00 DB			lda adr.WALL,y
 11108 6A25 D0 03 4C 10 75		jeq l_1BE1
 11109
 11110 				; optimize OK (service.pas), line = 2143
 11111
 11112 6A2A A9 32			lda <OX
 11113 6A2C 8D F0 9F			sta SPLIT_LINE.X1
 11114 6A2F A9 A0			lda >OX
 11115 6A31 8D F1 9F			sta SPLIT_LINE.X1+1
 11116 6A34 A9 34			lda <OY
 11117 6A36 8D F2 9F			sta SPLIT_LINE.Y1
 11118 6A39 A9 A0			lda >OY
 11119 6A3B 8D F3 9F			sta SPLIT_LINE.Y1+1
 11120 6A3E A9 36			lda <NX
 11121 6A40 8D F4 9F			sta SPLIT_LINE.X2
 11122 6A43 A9 A0			lda >NX
 11123 6A45 8D F5 9F			sta SPLIT_LINE.X2+1
 11124 6A48 A9 38			lda <NY
 11125 6A4A 8D F6 9F			sta SPLIT_LINE.Y2
 11126 6A4D A9 A0			lda >NY
 11127 6A4F 8D F7 9F			sta SPLIT_LINE.Y2+1
 11128 6A52 20 84 5E			jsr SPLIT_LINE
 11129 6A55 AD F8 9F			lda SPLIT_LINE.RESULT
 11130 6A58 8D 4E A0			sta COLLISION
 11131
 11132 				; optimize OK (service.pas), line = 2149
 11133
 11134 6A5B C9 03			cmp #$03
 11135 6A5D F0 03 4C 51 6D		jne l_1BFC
 11136
 11137 				; optimize OK (service.pas), line = 2151
 11138
 11139 6A62 AC 28 A0 84 84 AC + 	mwy BALL :bp2
 11140 6A6C A0 08			ldy #BALL.OLDX-DATAORIGIN
 11141 6A6E B1 84			lda (:bp2),y
 11142 6A70 C8				iny
 11143 6A71 38 ED 32 A0			sub OX
 11144 6A75 38 E9 09			sub #$09
 11145 6A78 8D 2E A0			sta LX
 11146
 11147 				; optimize OK (service.pas), line = 2152
 11148
 11149 6A7B A0 0A			ldy #BALL.OLDY-DATAORIGIN
 11150 6A7D B1 84			lda (:bp2),y
 11151 6A7F C8				iny
 11152 6A80 38 ED 34 A0			sub OY
 11153 6A84 38 E9 16			sub #$16
 11154 6A87 8D 2F A0			sta LY
 11155
 11156 				; optimize OK (service.pas), line = 2154
 11157
 11158 6A8A A0 08			ldy #BALL.OLDX-DATAORIGIN
 11159 6A8C B1 84			lda (:bp2),y
 11160 6A8E 38 ED 36 A0			sub NX
 11161 6A92 85 9F			sta :STACKORIGIN+9
 11162 6A94 C8				iny
 11163 6A95 B1 84			lda (:bp2),y
 11164 6A97 ED 37 A0			sbc NX+1
 11165 6A9A 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 11166 6A9C A5 9F			lda :STACKORIGIN+9
 11167 6A9E 38 E9 09			sub #$09
 11168 6AA1 8D 3A A0			sta MX
 11169 6AA4 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 11170 6AA6 E9 00			sbc #$00
 11171 6AA8 8D 3B A0			sta MX+1
 11172
 11173 				; optimize OK (service.pas), line = 2155
 11174
 11175 6AAB A0 0A			ldy #BALL.OLDY-DATAORIGIN
 11176 6AAD B1 84			lda (:bp2),y
 11177 6AAF 38 ED 38 A0			sub NY
 11178 6AB3 85 9F			sta :STACKORIGIN+9
 11179 6AB5 C8				iny
 11180 6AB6 B1 84			lda (:bp2),y
 11181 6AB8 ED 39 A0			sbc NY+1
 11182 6ABB 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 11183 6ABD A5 9F			lda :STACKORIGIN+9
 11184 6ABF 38 E9 16			sub #$16
 11185 6AC2 8D 3C A0			sta MY
 11186 6AC5 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 11187 6AC7 E9 00			sbc #$00
 11188 6AC9 8D 3D A0			sta MY+1
 11189
 11190 				; optimize OK (service.pas), line = 2157
 11191
 11192 6ACC AD 2E A0			lda LX
 11193 6ACF 20 51 2A			jsr SYSTEM.ABS.@010183000
 11194 6AD2 A5 92			lda SYSTEM.ABS.@010183000.RESULT
 11195 6AD4 8D 48 A0			sta A
 11196 6AD7 AD 2F A0			lda LY
 11197 6ADA 20 51 2A			jsr SYSTEM.ABS.@010183000
 11198 6ADD A5 92			lda SYSTEM.ABS.@010183000.RESULT
 11199 6ADF 8D 49 A0			sta B
 11200
 11201 				; optimize OK (service.pas), line = 2159
 11202
 11203 6AE2 AD 48 A0			lda A
 11204 6AE5 85 8E			sta :ecx
 11205 6AE7 85 86			sta :eax
 11206 					.ifdef fmulinit
 11207 					fmulu_8
 11208 					els
 11209 6AE9 20 3F 22			imulCL
 11210 					eif
 11211 6AEC A5 86			lda :eax
 11212 6AEE 85 9F			sta :STACKORIGIN+9
 11213 6AF0 A5 87			lda :eax+1
 11214 6AF2 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 11215 6AF4 AD 49 A0			lda B
 11216 6AF7 85 8E			sta :ecx
 11217 6AF9 85 86			sta :eax
 11218 					.ifdef fmulinit
 11219 					fmulu_8
 11220 					els
 11221 6AFB 20 3F 22			imulCL
 11222 					eif
 11223 6AFE A5 86			lda :eax
 11224 6B00 18 65 9F			add :STACKORIGIN+9
 11225 6B03 8D 44 A0			sta F1
 11226 6B06 A5 87			lda :eax+1
 11227 6B08 65 AF			adc :STACKORIGIN+STACKWIDTH+9
 11228 6B0A 8D 45 A0			sta F1+1
 11229
 11230 				; optimize OK (service.pas), line = 2161
 11231
 11232 6B0D AD 3A A0			lda MX
 11233 6B10 85 8A			sta SYSTEM.ABS.@010184000.X
 11234 6B12 AD 3B A0			lda MX+1
 11235 6B15 85 8B			sta SYSTEM.ABS.@010184000.X+1
 11236 6B17 20 5F 2A			jsr SYSTEM.ABS.@010184000
 11237 6B1A A5 92			lda SYSTEM.ABS.@010184000.RESULT
 11238 6B1C 8D 48 A0			sta A
 11239 6B1F AD 3C A0			lda MY
 11240 6B22 85 8A			sta SYSTEM.ABS.@010184000.X
 11241 6B24 AD 3D A0			lda MY+1
 11242 6B27 85 8B			sta SYSTEM.ABS.@010184000.X+1
 11243 6B29 20 5F 2A			jsr SYSTEM.ABS.@010184000
 11244 6B2C A5 92			lda SYSTEM.ABS.@010184000.RESULT
 11245 6B2E 8D 49 A0			sta B
 11246
 11247 				; optimize OK (service.pas), line = 2163
 11248
 11249 6B31 AD 48 A0			lda A
 11250 6B34 85 8E			sta :ecx
 11251 6B36 85 86			sta :eax
 11252 					.ifdef fmulinit
 11253 					fmulu_8
 11254 					els
 11255 6B38 20 3F 22			imulCL
 11256 					eif
 11257 6B3B A5 86			lda :eax
 11258 6B3D 85 9F			sta :STACKORIGIN+9
 11259 6B3F A5 87			lda :eax+1
 11260 6B41 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 11261 6B43 AD 49 A0			lda B
 11262 6B46 85 8E			sta :ecx
 11263 6B48 85 86			sta :eax
 11264 					.ifdef fmulinit
 11265 					fmulu_8
 11266 					els
 11267 6B4A 20 3F 22			imulCL
 11268 					eif
 11269 6B4D A5 86			lda :eax
 11270 6B4F 18 65 9F			add :STACKORIGIN+9
 11271 6B52 8D 46 A0			sta F2
 11272 6B55 A5 87			lda :eax+1
 11273 6B57 65 AF			adc :STACKORIGIN+STACKWIDTH+9
 11274 6B59 8D 47 A0			sta F2+1
 11275
 11276 				; optimize OK (service.pas), line = 2165
 11277
 11278 6B5C AD 45 A0			lda F1+1
 11279 6B5F CD 47 A0			cmp F2+1
 11280 6B62 D0 06			bne @+
 11281 6B64 AD 44 A0			lda F1
 11282 6B67 CD 46 A0			cmp F2
 11283 				@
 11284 6B6A 90 03 4C 63 6C		jcs l_1C91
 11285
 11286 				; optimize OK (service.pas), line = 2171
 11287
 11288 6B6F AD 33 A0			lda OX+1
 11289 6B72 85 B0			sta :STACKORIGIN+STACKWIDTH+10
 11290 6B74 AD 32 A0			lda OX
 11291 6B77 46 B0			lsr :STACKORIGIN+STACKWIDTH+10
 11292 6B79 6A				ror @
 11293 6B7A 46 B0			lsr :STACKORIGIN+STACKWIDTH+10
 11294 6B7C 6A				ror @
 11295 6B7D 46 B0			lsr :STACKORIGIN+STACKWIDTH+10
 11296 6B7F 6A				ror @
 11297 6B80 46 B0			lsr :STACKORIGIN+STACKWIDTH+10
 11298 6B82 6A				ror @
 11299 6B83 8D 14 9F			sta MAX.A
 11300 6B86 A5 B0			lda :STACKORIGIN+STACKWIDTH+10
 11301 6B88 8D 15 9F			sta MAX.A+1
 11302 6B8B A9 00			lda #$00
 11303 6B8D 8D 16 9F			sta MAX.B
 11304 6B90 8D 17 9F			sta MAX.B+1
 11305 6B93 20 E6 3C			jsr MAX
 11306 6B96 A9 0C			lda #$0C
 11307 6B98 8D 1A 9F			sta MIN.A
 11308 6B9B A9 00			lda #$00
 11309 6B9D 8D 1B 9F			sta MIN.A+1
 11310 6BA0 AD 18 9F			lda MAX.RESULT
 11311 6BA3 8D 1C 9F			sta MIN.B
 11312 6BA6 AD 19 9F			lda MAX.RESULT+1
 11313 6BA9 8D 1D 9F			sta MIN.B+1
 11314 6BAC 20 11 3D			jsr MIN
 11315 6BAF AD 1E 9F			lda MIN.RESULT
 11316 6BB2 8D 30 A0			sta XB
 11317
 11318 				; optimize OK (service.pas), line = 2172
 11319
 11320 6BB5 AD 34 A0			lda OY
 11321 6BB8 18 69 18			add #$18
 11322 6BBB 4A				lsr @
 11323 6BBC 4A				lsr @
 11324 6BBD 4A				lsr @
 11325 6BBE 38 E9 03			sub #$03
 11326 6BC1 8D 31 A0			sta YB
 11327
 11328 				; optimize OK (service.pas), line = 2175
 11329
 11330 6BC4 A9 10			lda #$10
 11331 6BC6 85 8E			sta :ecx
 11332 6BC8 85 92			sta :ztmp8
 11333 6BCA AD 31 A0			lda YB
 11334 6BCD 85 86			sta :eax
 11335 6BCF 85 94			sta :ztmp10
 11336 					.ifdef fmulinit
 11337 					fmulu_8
 11338 					els
 11339 6BD1 20 3F 22			imulCL
 11340 					eif
 11341 6BD4 24 94			bit :ztmp10
 11342 6BD6 10 03			bpl @+
 11343 6BD8 38 E5 92			sub :ztmp8
 11344 				@
 11345 6BDB 24 92			bit :ztmp8
 11346 6BDD 10 03			bpl @+
 11347 6BDF 38 E5 94			sub :ztmp10
 11348 				@
 11349 6BE2 85 87			sta :eax+1
 11350 6BE4 A5 86			lda :eax
 11351 6BE6 18 6D 30 A0			add XB
 11352 6BEA A8				tay
 11353 6BEB B9 00 DB			lda adr.WALL,y
 11354 6BEE D0 58			jne l_1CCF
 11355
 11356 				; optimize OK (service.pas), line = 2177
 11357
 11358 6BF0 AD 37 A0			lda NX+1
 11359 6BF3 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 11360 6BF5 AD 36 A0			lda NX
 11361 6BF8 46 AF			lsr :STACKORIGIN+STACKWIDTH+9
 11362 6BFA 6A				ror @
 11363 6BFB 46 AF			lsr :STACKORIGIN+STACKWIDTH+9
 11364 6BFD 6A				ror @
 11365 6BFE 46 AF			lsr :STACKORIGIN+STACKWIDTH+9
 11366 6C00 6A				ror @
 11367 6C01 46 AF			lsr :STACKORIGIN+STACKWIDTH+9
 11368 6C03 6A				ror @
 11369 6C04 8D 16 9F			sta MAX.B
 11370 6C07 A9 00			lda #$00
 11371 6C09 8D 14 9F			sta MAX.A
 11372 6C0C 8D 15 9F			sta MAX.A+1
 11373 6C0F A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 11374 6C11 8D 17 9F			sta MAX.B+1
 11375 6C14 20 E6 3C			jsr MAX
 11376 6C17 A9 0C			lda #$0C
 11377 6C19 8D 1A 9F			sta MIN.A
 11378 6C1C A9 00			lda #$00
 11379 6C1E 8D 1B 9F			sta MIN.A+1
 11380 6C21 AD 18 9F			lda MAX.RESULT
 11381 6C24 8D 1C 9F			sta MIN.B
 11382 6C27 AD 19 9F			lda MAX.RESULT+1
 11383 6C2A 8D 1D 9F			sta MIN.B+1
 11384 6C2D 20 11 3D			jsr MIN
 11385 6C30 AD 1E 9F			lda MIN.RESULT
 11386 6C33 8D 30 A0			sta XB
 11387
 11388 				; optimize OK (service.pas), line = 2178
 11389
 11390 6C36 AD 38 A0			lda NY
 11391 6C39 18 69 18			add #$18
 11392 6C3C 4A				lsr @
 11393 6C3D 4A				lsr @
 11394 6C3E 4A				lsr @
 11395 6C3F 38 E9 03			sub #$03
 11396 6C42 8D 31 A0			sta YB
 11397 6C45 4C 60 6C			jmp l_1CF7
 11398 6C48			l_1CCF
 11399
 11400 				; optimize OK (service.pas), line = 2182
 11401
 11402 6C48 AD 32 A0			lda OX
 11403 6C4B 8D 36 A0			sta NX
 11404 6C4E AD 33 A0			lda OX+1
 11405 6C51 8D 37 A0			sta NX+1
 11406
 11407 				; optimize OK (service.pas), line = 2183
 11408
 11409 6C54 AD 34 A0			lda OY
 11410 6C57 8D 38 A0			sta NY
 11411 6C5A AD 35 A0			lda OY+1
 11412 6C5D 8D 39 A0			sta NY+1
 11413 6C60			l_1CF7
 11414 6C60 4C 51 6D			jmp l_1D0A
 11415 6C63			l_1C91
 11416
 11417 				; optimize OK (service.pas), line = 2193
 11418
 11419 6C63 AD 37 A0			lda NX+1
 11420 6C66 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 11421 6C68 AD 36 A0			lda NX
 11422 6C6B 46 AF			lsr :STACKORIGIN+STACKWIDTH+9
 11423 6C6D 6A				ror @
 11424 6C6E 46 AF			lsr :STACKORIGIN+STACKWIDTH+9
 11425 6C70 6A				ror @
 11426 6C71 46 AF			lsr :STACKORIGIN+STACKWIDTH+9
 11427 6C73 6A				ror @
 11428 6C74 46 AF			lsr :STACKORIGIN+STACKWIDTH+9
 11429 6C76 6A				ror @
 11430 6C77 8D 16 9F			sta MAX.B
 11431 6C7A A9 00			lda #$00
 11432 6C7C 8D 14 9F			sta MAX.A
 11433 6C7F 8D 15 9F			sta MAX.A+1
 11434 6C82 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 11435 6C84 8D 17 9F			sta MAX.B+1
 11436 6C87 20 E6 3C			jsr MAX
 11437 6C8A A9 0C			lda #$0C
 11438 6C8C 8D 1A 9F			sta MIN.A
 11439 6C8F A9 00			lda #$00
 11440 6C91 8D 1B 9F			sta MIN.A+1
 11441 6C94 AD 18 9F			lda MAX.RESULT
 11442 6C97 8D 1C 9F			sta MIN.B
 11443 6C9A AD 19 9F			lda MAX.RESULT+1
 11444 6C9D 8D 1D 9F			sta MIN.B+1
 11445 6CA0 20 11 3D			jsr MIN
 11446 6CA3 AD 1E 9F			lda MIN.RESULT
 11447 6CA6 8D 30 A0			sta XB
 11448
 11449 				; optimize OK (service.pas), line = 2194
 11450
 11451 6CA9 AD 38 A0			lda NY
 11452 6CAC 18 69 18			add #$18
 11453 6CAF 4A				lsr @
 11454 6CB0 4A				lsr @
 11455 6CB1 4A				lsr @
 11456 6CB2 38 E9 03			sub #$03
 11457 6CB5 8D 31 A0			sta YB
 11458
 11459 				; optimize OK (service.pas), line = 2196
 11460
 11461 6CB8 A9 10			lda #$10
 11462 6CBA 85 8E			sta :ecx
 11463 6CBC 85 92			sta :ztmp8
 11464 6CBE AD 31 A0			lda YB
 11465 6CC1 85 86			sta :eax
 11466 6CC3 85 94			sta :ztmp10
 11467 					.ifdef fmulinit
 11468 					fmulu_8
 11469 					els
 11470 6CC5 20 3F 22			imulCL
 11471 					eif
 11472 6CC8 24 94			bit :ztmp10
 11473 6CCA 10 03			bpl @+
 11474 6CCC 38 E5 92			sub :ztmp8
 11475 				@
 11476 6CCF 24 92			bit :ztmp8
 11477 6CD1 10 03			bpl @+
 11478 6CD3 38 E5 94			sub :ztmp10
 11479 				@
 11480 6CD6 85 87			sta :eax+1
 11481 6CD8 A5 86			lda :eax
 11482 6CDA 18 6D 30 A0			add XB
 11483 6CDE A8				tay
 11484 6CDF B9 00 DB			lda adr.WALL,y
 11485 6CE2 D0 6D			jne l_1D47
 11486
 11487 				; optimize OK (service.pas), line = 2198
 11488
 11489 6CE4 AD 32 A0			lda OX
 11490 6CE7 8D 36 A0			sta NX
 11491 6CEA AD 33 A0			lda OX+1
 11492 6CED 8D 37 A0			sta NX+1
 11493
 11494 				; optimize OK (service.pas), line = 2199
 11495
 11496 6CF0 AD 34 A0			lda OY
 11497 6CF3 8D 38 A0			sta NY
 11498 6CF6 AD 35 A0			lda OY+1
 11499 6CF9 8D 39 A0			sta NY+1
 11500
 11501 				; optimize OK (service.pas), line = 2201
 11502
 11503 6CFC AD 37 A0			lda NX+1
 11504 6CFF 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 11505 6D01 AD 36 A0			lda NX
 11506 6D04 46 AF			lsr :STACKORIGIN+STACKWIDTH+9
 11507 6D06 6A				ror @
 11508 6D07 46 AF			lsr :STACKORIGIN+STACKWIDTH+9
 11509 6D09 6A				ror @
 11510 6D0A 46 AF			lsr :STACKORIGIN+STACKWIDTH+9
 11511 6D0C 6A				ror @
 11512 6D0D 46 AF			lsr :STACKORIGIN+STACKWIDTH+9
 11513 6D0F 6A				ror @
 11514 6D10 8D 16 9F			sta MAX.B
 11515 6D13 A9 00			lda #$00
 11516 6D15 8D 14 9F			sta MAX.A
 11517 6D18 8D 15 9F			sta MAX.A+1
 11518 6D1B A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 11519 6D1D 8D 17 9F			sta MAX.B+1
 11520 6D20 20 E6 3C			jsr MAX
 11521 6D23 A9 0C			lda #$0C
 11522 6D25 8D 1A 9F			sta MIN.A
 11523 6D28 A9 00			lda #$00
 11524 6D2A 8D 1B 9F			sta MIN.A+1
 11525 6D2D AD 18 9F			lda MAX.RESULT
 11526 6D30 8D 1C 9F			sta MIN.B
 11527 6D33 AD 19 9F			lda MAX.RESULT+1
 11528 6D36 8D 1D 9F			sta MIN.B+1
 11529 6D39 20 11 3D			jsr MIN
 11530 6D3C AD 1E 9F			lda MIN.RESULT
 11531 6D3F 8D 30 A0			sta XB
 11532
 11533 				; optimize OK (service.pas), line = 2202
 11534
 11535 6D42 AD 38 A0			lda NY
 11536 6D45 18 69 18			add #$18
 11537 6D48 4A				lsr @
 11538 6D49 4A				lsr @
 11539 6D4A 4A				lsr @
 11540 6D4B 38 E9 03			sub #$03
 11541 6D4E 8D 31 A0			sta YB
 11542 6D51			l_1D47
 11543 6D51			l_1D0A
 11544 6D51			l_1BFC
 11545
 11546 				; optimize OK (service.pas), line = 2208
 11547
 11548 6D51 AC 28 A0 84 84 AC + 	mwy BALL :bp2
 11549 6D5B A0 00			ldy #BALL.X-DATAORIGIN
 11550 6D5D AD 36 A0			lda NX
 11551 6D60 18 69 09			add #$09
 11552 6D63 91 84			sta (:bp2),y
 11553 6D65 C8				iny
 11554 6D66 AD 37 A0			lda NX+1
 11555 6D69 69 00			adc #$00
 11556 6D6B 91 84			sta (:bp2),y
 11557
 11558 				; optimize OK (service.pas), line = 2209
 11559
 11560 6D6D A0 02			ldy #BALL.Y-DATAORIGIN
 11561 6D6F AD 38 A0			lda NY
 11562 6D72 18 69 16			add #$16
 11563 6D75 91 84			sta (:bp2),y
 11564 6D77 C8				iny
 11565 6D78 AD 39 A0			lda NY+1
 11566 6D7B 69 00			adc #$00
 11567 6D7D 91 84			sta (:bp2),y
 11568
 11569 				; optimize OK (service.pas), line = 2213
 11570
 11571 6D7F A0 00			ldy #$00
 11572 6D81 AD 31 A0			lda YB
 11573 6D84 10 01			spl
 11574 6D86 88				dey
 11575 6D87 8C 1D A0			sty SHOOT_BLOCK.YB+1
 11576 6D8A 8D 1C A0			sta SHOOT_BLOCK.YB
 11577 6D8D A0 00			ldy #$00
 11578 6D8F AD 30 A0			lda XB
 11579 6D92 10 01			spl
 11580 6D94 88				dey
 11581 6D95 8C 1B A0			sty SHOOT_BLOCK.XB+1
 11582 6D98 8D 1A A0			sta SHOOT_BLOCK.XB
 11583 6D9B AD 28 A0			lda BALL
 11584 6D9E 8D 1E A0			sta SHOOT_BLOCK.BALL
 11585 6DA1 AD 29 A0			lda BALL+1
 11586 6DA4 8D 1F A0			sta SHOOT_BLOCK.BALL+1
 11587 6DA7 20 4C 66			jsr SHOOT_BLOCK
 11588
 11589 				; optimize OK (service.pas), line = 2215
 11590
 11591 6DAA AD 36 A0			lda NX
 11592 6DAD 29 0F			and #$0F
 11593 6DAF 85 9F			sta :STACKORIGIN+9
 11594 6DB1 A9 00			lda #$00
 11595 6DB3 4A				lsr @
 11596 6DB4 66 9F			ror :STACKORIGIN+9
 11597 6DB6 A5 9F			lda :STACKORIGIN+9
 11598 6DB8 8D 2C A0			sta X
 11599
 11600 				; optimize OK (service.pas), line = 2216
 11601
 11602 6DBB AD 38 A0			lda NY
 11603 6DBE 29 07			and #$07
 11604 6DC0 8D 2D A0			sta Y
 11605
 11606 				; optimize OK (service.pas), line = 2228
 11607
 11608 6DC3 AD 2C A0			lda X
 11609 6DC6 F0 12			jeq l_1DDB
 11610 6DC8 C9 07			cmp #$07
 11611 6DCA F0 0E			jeq l_1DDB
 11612 6DCC AD 2D A0			lda Y
 11613 6DCF F0 09			jeq l_1DDB
 11614 6DD1 C9 07			cmp #$07
 11615 6DD3 F0 05			jeq l_1DDB
 11616
 11617 				; optimize OK (service.pas), line = 2229
 11618
 11619 6DD5 A9 03			lda #$03
 11620 6DD7 20 3C 3D			jsr FATAL_ERROR
 11621 6DDA			l_1DDB
 11622
 11623 				; optimize OK (service.pas), line = 2244
 11624
 11625 6DDA AD 2D A0			lda Y
 11626 6DDD 38 ED 2C A0			sub X
 11627 6DE1 50 02			svc
 11628 6DE3 49 80			eor #$80
 11629 6DE5 10 3E			jpl l_1E06
 11630 6DE7 A9 07			lda #$07
 11631 6DE9 38 ED 2D A0			sub Y
 11632 6DED 85 A1			sta :STACKORIGIN+11
 11633 6DEF AD 2C A0			lda X
 11634 6DF2 38 E5 A1			sub :STACKORIGIN+11
 11635 6DF5 50 02			svc
 11636 6DF7 49 80			eor #$80
 11637 6DF9 10 2A			jpl l_1E06
 11638
 11639 				; optimize OK (service.pas), line = 2246
 11640
 11641 6DFB AC 28 A0 84 84 AC + 	mwy BALL :bp2
 11642 6E05 A0 12			ldy #BALL.SPEEDY-DATAORIGIN
 11643 6E07 A9 00			lda #$00
 11644 6E09 38 F1 84			sub (:bp2),y
 11645 6E0C 85 9F			sta :STACKORIGIN+9
 11646 6E0E C8				iny
 11647 6E0F A9 00			lda #$00
 11648 6E11 F1 84			sbc (:bp2),y
 11649 6E13 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 11650 6E15 A0 12			ldy #BALL.SPEEDY-DATAORIGIN
 11651 6E17 A5 9F			lda :STACKORIGIN+9
 11652 6E19 91 84			sta (:bp2),y
 11653 6E1B C8				iny
 11654 6E1C A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 11655 6E1E 91 84			sta (:bp2),y
 11656
 11657 				; optimize OK (service.pas), line = 2247
 11658
 11659 6E20 A9 01			lda #$01
 11660 6E22 8D 4A A0			sta EMERGENCY
 11661 6E25			l_1E06
 11662
 11663 				; optimize OK (service.pas), line = 2251
 11664
 11665 6E25 A9 07			lda #$07
 11666 6E27 38 ED 2D A0			sub Y
 11667 6E2B 38 ED 2C A0			sub X
 11668 6E2F 50 02			svc
 11669 6E31 49 80			eor #$80
 11670 6E33 10 37			jpl l_1E3B
 11671 6E35 AD 2C A0			lda X
 11672 6E38 38 ED 2D A0			sub Y
 11673 6E3C 50 02			svc
 11674 6E3E 49 80			eor #$80
 11675 6E40 10 2A			jpl l_1E3B
 11676
 11677 				; optimize OK (service.pas), line = 2253
 11678
 11679 6E42 AC 28 A0 84 84 AC + 	mwy BALL :bp2
 11680 6E4C A0 12			ldy #BALL.SPEEDY-DATAORIGIN
 11681 6E4E A9 00			lda #$00
 11682 6E50 38 F1 84			sub (:bp2),y
 11683 6E53 85 9F			sta :STACKORIGIN+9
 11684 6E55 C8				iny
 11685 6E56 A9 00			lda #$00
 11686 6E58 F1 84			sbc (:bp2),y
 11687 6E5A 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 11688 6E5C A0 12			ldy #BALL.SPEEDY-DATAORIGIN
 11689 6E5E A5 9F			lda :STACKORIGIN+9
 11690 6E60 91 84			sta (:bp2),y
 11691 6E62 C8				iny
 11692 6E63 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 11693 6E65 91 84			sta (:bp2),y
 11694
 11695 				; optimize OK (service.pas), line = 2254
 11696
 11697 6E67 A9 03			lda #$03
 11698 6E69 8D 4A A0			sta EMERGENCY
 11699 6E6C			l_1E3B
 11700
 11701 				; optimize OK (service.pas), line = 2258
 11702
 11703 6E6C AD 2C A0			lda X
 11704 6E6F 38 ED 2D A0			sub Y
 11705 6E73 50 02			svc
 11706 6E75 49 80			eor #$80
 11707 6E77 10 3E			jpl l_1E70
 11708 6E79 A9 07			lda #$07
 11709 6E7B 38 ED 2C A0			sub X
 11710 6E7F 85 A1			sta :STACKORIGIN+11
 11711 6E81 AD 2D A0			lda Y
 11712 6E84 38 E5 A1			sub :STACKORIGIN+11
 11713 6E87 50 02			svc
 11714 6E89 49 80			eor #$80
 11715 6E8B 10 2A			jpl l_1E70
 11716
 11717 				; optimize OK (service.pas), line = 2260
 11718
 11719 6E8D AC 28 A0 84 84 AC + 	mwy BALL :bp2
 11720 6E97 A0 10			ldy #BALL.SPEEDX-DATAORIGIN
 11721 6E99 A9 00			lda #$00
 11722 6E9B 38 F1 84			sub (:bp2),y
 11723 6E9E 85 9F			sta :STACKORIGIN+9
 11724 6EA0 C8				iny
 11725 6EA1 A9 00			lda #$00
 11726 6EA3 F1 84			sbc (:bp2),y
 11727 6EA5 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 11728 6EA7 A0 10			ldy #BALL.SPEEDX-DATAORIGIN
 11729 6EA9 A5 9F			lda :STACKORIGIN+9
 11730 6EAB 91 84			sta (:bp2),y
 11731 6EAD C8				iny
 11732 6EAE A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 11733 6EB0 91 84			sta (:bp2),y
 11734
 11735 				; optimize OK (service.pas), line = 2261
 11736
 11737 6EB2 A9 02			lda #$02
 11738 6EB4 8D 4A A0			sta EMERGENCY
 11739 6EB7			l_1E70
 11740
 11741 				; optimize OK (service.pas), line = 2265
 11742
 11743 6EB7 A9 07			lda #$07
 11744 6EB9 38 ED 2C A0			sub X
 11745 6EBD 38 ED 2D A0			sub Y
 11746 6EC1 50 02			svc
 11747 6EC3 49 80			eor #$80
 11748 6EC5 10 37			jpl l_1EA5
 11749 6EC7 AD 2D A0			lda Y
 11750 6ECA 38 ED 2C A0			sub X
 11751 6ECE 50 02			svc
 11752 6ED0 49 80			eor #$80
 11753 6ED2 10 2A			jpl l_1EA5
 11754
 11755 				; optimize OK (service.pas), line = 2267
 11756
 11757 6ED4 AC 28 A0 84 84 AC + 	mwy BALL :bp2
 11758 6EDE A0 10			ldy #BALL.SPEEDX-DATAORIGIN
 11759 6EE0 A9 00			lda #$00
 11760 6EE2 38 F1 84			sub (:bp2),y
 11761 6EE5 85 9F			sta :STACKORIGIN+9
 11762 6EE7 C8				iny
 11763 6EE8 A9 00			lda #$00
 11764 6EEA F1 84			sbc (:bp2),y
 11765 6EEC 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 11766 6EEE A0 10			ldy #BALL.SPEEDX-DATAORIGIN
 11767 6EF0 A5 9F			lda :STACKORIGIN+9
 11768 6EF2 91 84			sta (:bp2),y
 11769 6EF4 C8				iny
 11770 6EF5 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 11771 6EF7 91 84			sta (:bp2),y
 11772
 11773 				; optimize OK (service.pas), line = 2268
 11774
 11775 6EF9 A9 04			lda #$04
 11776 6EFB 8D 4A A0			sta EMERGENCY
 11777 6EFE			l_1EA5
 11778
 11779 				; optimize OK (service.pas), line = 2272
 11780
 11781 6EFE AD 2C A0			lda X
 11782 6F01 CD 2D A0			cmp Y
 11783 6F04 F0 0E			jeq l_1EDAx
 11784 6F06 A9 07			lda #$07
 11785 6F08 38 ED 2D A0			sub Y
 11786 6F0C CD 2C A0			cmp X
 11787 6F0F F0 03 4C 10 75		jne l_1EDA
 11788 6F14			l_1EDAx
 11789
 11790 				; optimize OK (service.pas), line = 2274
 11791
 11792 6F14 A9 00			lda #$00
 11793 6F16 8D 4C A0			sta DEFLECT
 11794
 11795 				; optimize OK (service.pas), line = 2275
 11796
 11797 6F19 8D 4F A0			sta TOUCH
 11798
 11799 				; optimize OK (service.pas), line = 2283
 11800
 11801 6F1C AD 2C A0			lda X
 11802 6F1F 38 E9 05			sub #$05
 11803 6F22 50 02			svc
 11804 6F24 49 80			eor #$80
 11805 6F26 30 08			jmi l_1EF5
 11806 6F28 AD 4F A0			lda TOUCH
 11807 6F2B 09 01			ora #$01
 11808 6F2D 8D 4F A0			sta TOUCH
 11809 6F30			l_1EF5
 11810
 11811 				; optimize OK (service.pas), line = 2284
 11812
 11813 6F30 AD 2D A0			lda Y
 11814 6F33 38 E9 05			sub #$05
 11815 6F36 50 02			svc
 11816 6F38 49 80			eor #$80
 11817 6F3A 30 08			jmi l_1F14
 11818 6F3C AD 4F A0			lda TOUCH
 11819 6F3F 09 02			ora #$02
 11820 6F41 8D 4F A0			sta TOUCH
 11821 6F44			l_1F14
 11822
 11823 				; optimize OK (service.pas), line = 2293
 11824
 11825 6F44 A9 FF			lda #$FF
 11826 6F46 8D 2E A0			sta LX
 11827
 11828 6F49			l_1F2A
 11829 				; --- ForToDoCondition
 11830 6F49 AD 2E A0			lda LX
 11831 6F4C 38 E9 02			sub #$02
 11832 6F4F 50 02			svc
 11833 6F51 49 80			eor #$80
 11834 6F53 0A				asl @
 11835 6F54 B0 03 4C 7F 70		jcc l_1F38
 11836
 11837 				; optimize OK (service.pas), line = 2294
 11838
 11839 6F59 A9 FF			lda #$FF
 11840 6F5B 8D 2F A0			sta LY
 11841
 11842 6F5E			l_1F41
 11843 				; --- ForToDoCondition
 11844 6F5E AD 2F A0			lda LY
 11845 6F61 38 E9 02			sub #$02
 11846 6F64 50 02			svc
 11847 6F66 49 80			eor #$80
 11848 6F68 0A				asl @
 11849 6F69 B0 03 4C 72 70		jcc l_1F4F
 11850
 11851 				; optimize FAIL (1, service.pas), line = 2296
 11852
 11853 6F6E E8				inx
 11854 6F6F A9 00 95 96			mva #$00 :STACKORIGIN,x
 11855 6F73 95 A6			sta :STACKORIGIN+STACKWIDTH,x
 11856 6F75 E8				inx
 11857 6F76 A9 0C 95 96			mva #$0C :STACKORIGIN,x
 11858 6F7A A9 00 95 A6			mva #$00 :STACKORIGIN+STACKWIDTH,x
 11859 6F7E E8				inx
 11860 6F7F AD 30 A0 95 96		mva XB :STACKORIGIN,x
 11861 6F84 E8				inx
 11862 6F85 AD 2E A0 95 96		mva LX :STACKORIGIN,x
 11863 6F8A 20 0D 21			jsr @expandSHORT2SMALL1
 11864 6F8D 20 02 21			jsr @expandSHORT2SMALL
 11865 6F90 20 B5 20			jsr addAX_CX
 11866 6F93 CA				dex
 11867 6F94 B5 96			lda :STACKORIGIN,x
 11868 6F96 8D 1A 9F			sta MIN.A
 11869 6F99 B5 A6			lda :STACKORIGIN+STACKWIDTH,x
 11870 6F9B 8D 1B 9F			sta MIN.A+1
 11871 6F9E CA				dex
 11872 6F9F B5 96			lda :STACKORIGIN,x
 11873 6FA1 8D 1C 9F			sta MIN.B
 11874 6FA4 B5 A6			lda :STACKORIGIN+STACKWIDTH,x
 11875 6FA6 8D 1D 9F			sta MIN.B+1
 11876 6FA9 CA				dex
 11877 6FAA 20 11 3D			jsr MIN
 11878 6FAD AD 1E 9F			lda MIN.RESULT
 11879 6FB0 8D 14 9F			sta MAX.A
 11880 6FB3 AD 1F 9F			lda MIN.RESULT+1
 11881 6FB6 8D 15 9F			sta MAX.A+1
 11882 6FB9 B5 96			lda :STACKORIGIN,x
 11883 6FBB 8D 16 9F			sta MAX.B
 11884 6FBE B5 A6			lda :STACKORIGIN+STACKWIDTH,x
 11885 6FC0 8D 17 9F			sta MAX.B+1
 11886 6FC3 CA				dex
 11887 6FC4 20 E6 3C			jsr MAX
 11888 6FC7 AD 18 9F			lda MAX.RESULT
 11889 6FCA 8D 3A A0			sta MX
 11890 6FCD AD 19 9F			lda MAX.RESULT+1
 11891 6FD0 8D 3B A0			sta MX+1
 11892
 11893 				; optimize OK (service.pas), line = 2297
 11894
 11895 6FD3 A0 00			ldy #$00
 11896 6FD5 AD 31 A0			lda YB
 11897 6FD8 10 01			spl
 11898 6FDA 88				dey
 11899 6FDB 84 AF			sty :STACKORIGIN+STACKWIDTH+9
 11900 6FDD 85 9F			sta :STACKORIGIN+9
 11901 6FDF A0 00			ldy #$00
 11902 6FE1 AD 2F A0			lda LY
 11903 6FE4 10 01			spl
 11904 6FE6 88				dey
 11905 6FE7 18 65 9F			add :STACKORIGIN+9
 11906 6FEA 8D 3C A0			sta MY
 11907 6FED 98				tya
 11908 6FEE 65 AF			adc :STACKORIGIN+STACKWIDTH+9
 11909 6FF0 8D 3D A0			sta MY+1
 11910
 11911 				; optimize OK (service.pas), line = 2301
 11912
 11913 6FF3 AD 30 A0			lda XB
 11914 6FF6 18 6D 2E A0			add LX
 11915 6FFA 30 21			jmi l_1FACx
 11916 6FFC AD 30 A0			lda XB
 11917 6FFF 18 6D 2E A0			add LX
 11918 7003 38 E9 0D			sub #$0D
 11919 7006 50 02			svc
 11920 7008 49 80			eor #$80
 11921 700A 10 11			jpl l_1FACx
 11922 700C AD 3C A0			lda MY
 11923 700F 0A				asl @
 11924 7010 0A				asl @
 11925 7011 0A				asl @
 11926 7012 0A				asl @
 11927 7013 18 6D 3A A0			add MX
 11928 7017 A8				tay
 11929 7018 B9 00 DB			lda adr.WALL,y
 11930 701B F0 24			jeq l_1FAC
 11931 701D			l_1FACx
 11932
 11933 				; optimize OK (service.pas), line = 2304
 11934
 11935 701D A0 00			ldy #$00
 11936 701F AD 2E A0			lda LX
 11937 7022 10 01			spl
 11938 7024 88				dey
 11939 7025 18 69 01			add #$01
 11940 7028 85 86			sta :eax
 11941 702A 90 01			scc
 11942 702C C8				iny
 11943 702D 84 87			sty :eax+1
 11944 702F A9 03			lda #$03
 11945 7031 85 8E			sta :ecx
 11946 7033 A9 00			lda #$00
 11947 7035 85 8F			sta :ecx+1
 11948 					.ifdef fmulinit
 11949 					fmulu_16
 11950 					els
 11951 7037 20 8B 22			imulCX
 11952 					eif
 11953 703A A4 86			ldy :eax
 11954 703C A9 01			lda #$01
 11955 703E 4C 62 70			jmp l_1FCF
 11956 7041			l_1FAC
 11957
 11958 				; optimize OK (service.pas), line = 2306
 11959
 11960 7041 A0 00			ldy #$00
 11961 7043 AD 2E A0			lda LX
 11962 7046 10 01			spl
 11963 7048 88				dey
 11964 7049 18 69 01			add #$01
 11965 704C 85 86			sta :eax
 11966 704E 90 01			scc
 11967 7050 C8				iny
 11968 7051 84 87			sty :eax+1
 11969 7053 A9 03			lda #$03
 11970 7055 85 8E			sta :ecx
 11971 7057 A9 00			lda #$00
 11972 7059 85 8F			sta :ecx+1
 11973 					.ifdef fmulinit
 11974 					fmulu_16
 11975 					els
 11976 705B 20 8B 22			imulCX
 11977 					eif
 11978 705E A4 86			ldy :eax
 11979 7060 A9 00			lda #$00
 11980 7062			l_1FCF
 11981 7062 99 51 A0			sta adr.ADJW+$01,y
 11982
 11983 				; --- ForToDoEpilog
 11984 7065 EE 2F A0			inc LY
 11985 7068 AD 2F A0			lda LY
 11986 706B C9 80			cmp #$80
 11987 706D F0 03 4C 5E 6F		jne l_1F41
 11988 7072			l_1F4F
 11989
 11990 				; --- ForToDoEpilog
 11991 7072 EE 2E A0			inc LX
 11992 7075 AD 2E A0			lda LX
 11993 7078 C9 80			cmp #$80
 11994 707A F0 03 4C 49 6F		jne l_1F2A
 11995 707F			l_1F38
 11996
 11997 				; optimize OK (service.pas), line = 2325
 11998
 11999 707F AD 50 A0			lda adr.ADJW
 12000 7082 85 9F			sta :STACKORIGIN+9
 12001 7084 AD 53 A0			lda adr.ADJW+$03
 12002 7087 0A				asl @
 12003 7088 05 9F			ora :STACKORIGIN+9
 12004 708A 85 9F			sta :STACKORIGIN+9
 12005 708C AD 56 A0			lda adr.ADJW+$06
 12006 708F 0A				asl @
 12007 7090 0A				asl @
 12008 7091 05 9F			ora :STACKORIGIN+9
 12009 7093 85 9F			sta :STACKORIGIN+9
 12010 7095 AD 57 A0			lda adr.ADJW+$07
 12011 7098 0A				asl @
 12012 7099 0A				asl @
 12013 709A 0A				asl @
 12014 709B 05 9F			ora :STACKORIGIN+9
 12015 709D 85 9F			sta :STACKORIGIN+9
 12016 709F AD 58 A0			lda adr.ADJW+$08
 12017 70A2 0A				asl @
 12018 70A3 0A				asl @
 12019 70A4 0A				asl @
 12020 70A5 0A				asl @
 12021 70A6 05 9F			ora :STACKORIGIN+9
 12022 70A8 85 9F			sta :STACKORIGIN+9
 12023 70AA AD 55 A0			lda adr.ADJW+$05
 12024 70AD 0A				asl @
 12025 70AE 0A				asl @
 12026 70AF 0A				asl @
 12027 70B0 0A				asl @
 12028 70B1 0A				asl @
 12029 70B2 05 9F			ora :STACKORIGIN+9
 12030 70B4 85 9F			sta :STACKORIGIN+9
 12031 70B6 AD 52 A0			lda adr.ADJW+$02
 12032 70B9 0A				asl @
 12033 70BA 0A				asl @
 12034 70BB 0A				asl @
 12035 70BC 0A				asl @
 12036 70BD 0A				asl @
 12037 70BE 0A				asl @
 12038 70BF 05 9F			ora :STACKORIGIN+9
 12039 70C1 85 9F			sta :STACKORIGIN+9
 12040 70C3 AD 51 A0			lda adr.ADJW+$01
 12041 70C6 0A				asl @
 12042 70C7 0A				asl @
 12043 70C8 0A				asl @
 12044 70C9 0A				asl @
 12045 70CA 0A				asl @
 12046 70CB 0A				asl @
 12047 70CC 0A				asl @
 12048 70CD 05 9F			ora :STACKORIGIN+9
 12049 70CF 8D 4D A0			sta AROUND
 12050
 12051 				; optimize OK (service.pas), line = 2356
 12052
 12053 70D2 AD 4F A0			lda TOUCH
 12054 70D5 F0 03 4C 76 71		jne l_2078
 12055
 12056 				; optimize OK (service.pas), line = 2358
 12057
 12058 70DA AD 4D A0			lda AROUND
 12059 70DD 29 83			and #$83
 12060 70DF D0 05			jne l_208F
 12061 70E1 A9 11			lda #$11
 12062 70E3 8D 4C A0			sta DEFLECT
 12063 70E6			l_208F
 12064
 12065 				; optimize OK (service.pas), line = 2359
 12066
 12067 70E6 AD 4D A0			lda AROUND
 12068 70E9 29 83			and #$83
 12069 70EB C9 01			cmp #$01
 12070 70ED D0 05			jne l_20AC
 12071 70EF A9 33			lda #$33
 12072 70F1 8D 4C A0			sta DEFLECT
 12073 70F4			l_20AC
 12074
 12075 				; optimize OK (service.pas), line = 2360
 12076
 12077 70F4 AD 4D A0			lda AROUND
 12078 70F7 29 83			and #$83
 12079 70F9 C9 02			cmp #$02
 12080 70FB D0 05			jne l_20C9
 12081 70FD A9 10			lda #$10
 12082 70FF 8D 4C A0			sta DEFLECT
 12083 7102			l_20C9
 12084
 12085 				; optimize OK (service.pas), line = 2361
 12086
 12087 7102 AD 4D A0			lda AROUND
 12088 7105 29 83			and #$83
 12089 7107 C9 03			cmp #$03
 12090 7109 D0 05			jne l_20E6
 12091 710B A9 12			lda #$12
 12092 710D 8D 4C A0			sta DEFLECT
 12093 7110			l_20E6
 12094
 12095 				; optimize OK (service.pas), line = 2362
 12096
 12097 7110 AD 4D A0			lda AROUND
 12098 7113 29 83			and #$83
 12099 7115 C9 80			cmp #$80
 12100 7117 D0 05			jne l_2103
 12101 7119 A9 01			lda #$01
 12102 711B 8D 4C A0			sta DEFLECT
 12103 711E			l_2103
 12104
 12105 				; optimize OK (service.pas), line = 2363
 12106
 12107 711E AD 4D A0			lda AROUND
 12108 7121 29 83			and #$83
 12109 7123 C9 81			cmp #$81
 12110 7125 D0 05			jne l_2120
 12111 7127 A9 21			lda #$21
 12112 7129 8D 4C A0			sta DEFLECT
 12113 712C			l_2120
 12114
 12115 				; optimize OK (service.pas), line = 2364
 12116
 12117 712C AD 4D A0			lda AROUND
 12118 712F 29 83			and #$83
 12119 7131 C9 82			cmp #$82
 12120 7133 D0 05			jne l_213D
 12121 7135 A9 11			lda #$11
 12122 7137 8D 4C A0			sta DEFLECT
 12123 713A			l_213D
 12124
 12125 				; optimize OK (service.pas), line = 2366
 12126
 12127 713A A9 05			lda #$05
 12128 713C 8D 4A A0			sta EMERGENCY
 12129
 12130 				; optimize OK (service.pas), line = 2367
 12131
 12132 713F A0 00			ldy #$00
 12133 7141 AD 31 A0			lda YB
 12134 7144 10 01			spl
 12135 7146 88				dey
 12136 7147 38 E9 01			sub #$01
 12137 714A 8D 1C A0			sta SHOOT_BLOCK.YB
 12138 714D 98				tya
 12139 714E E9 00			sbc #$00
 12140 7150 8D 1D A0			sta SHOOT_BLOCK.YB+1
 12141 7153 A0 00			ldy #$00
 12142 7155 AD 30 A0			lda XB
 12143 7158 10 01			spl
 12144 715A 88				dey
 12145 715B 38 E9 01			sub #$01
 12146 715E 8D 1A A0			sta SHOOT_BLOCK.XB
 12147 7161 98				tya
 12148 7162 E9 00			sbc #$00
 12149 7164 8D 1B A0			sta SHOOT_BLOCK.XB+1
 12150 7167 AD 28 A0			lda BALL
 12151 716A 8D 1E A0			sta SHOOT_BLOCK.BALL
 12152 716D AD 29 A0			lda BALL+1
 12153 7170 8D 1F A0			sta SHOOT_BLOCK.BALL+1
 12154 7173 20 4C 66			jsr SHOOT_BLOCK
 12155 7176			l_2078
 12156
 12157 				; optimize OK (service.pas), line = 2372
 12158
 12159 7176 AD 4F A0			lda TOUCH
 12160 7179 C9 01			cmp #$01
 12161 717B F0 03 4C 1C 72		jne l_216D
 12162
 12163 				; optimize OK (service.pas), line = 2374
 12164
 12165 7180 AD 4D A0			lda AROUND
 12166 7183 29 0E			and #$0E
 12167 7185 D0 05			jne l_2184
 12168 7187 A9 21			lda #$21
 12169 7189 8D 4C A0			sta DEFLECT
 12170 718C			l_2184
 12171
 12172 				; optimize OK (service.pas), line = 2375
 12173
 12174 718C AD 4D A0			lda AROUND
 12175 718F 29 0E			and #$0E
 12176 7191 C9 02			cmp #$02
 12177 7193 D0 05			jne l_21A1
 12178 7195 A9 20			lda #$20
 12179 7197 8D 4C A0			sta DEFLECT
 12180 719A			l_21A1
 12181
 12182 				; optimize OK (service.pas), line = 2376
 12183
 12184 719A AD 4D A0			lda AROUND
 12185 719D 29 0E			and #$0E
 12186 719F C9 04			cmp #$04
 12187 71A1 D0 05			jne l_21BE
 12188 71A3 A9 33			lda #$33
 12189 71A5 8D 4C A0			sta DEFLECT
 12190 71A8			l_21BE
 12191
 12192 				; optimize OK (service.pas), line = 2377
 12193
 12194 71A8 AD 4D A0			lda AROUND
 12195 71AB 29 0E			and #$0E
 12196 71AD C9 06			cmp #$06
 12197 71AF D0 05			jne l_21DB
 12198 71B1 A9 22			lda #$22
 12199 71B3 8D 4C A0			sta DEFLECT
 12200 71B6			l_21DB
 12201
 12202 				; optimize OK (service.pas), line = 2378
 12203
 12204 71B6 AD 4D A0			lda AROUND
 12205 71B9 29 0E			and #$0E
 12206 71BB C9 08			cmp #$08
 12207 71BD D0 05			jne l_21F8
 12208 71BF A9 01			lda #$01
 12209 71C1 8D 4C A0			sta DEFLECT
 12210 71C4			l_21F8
 12211
 12212 				; optimize OK (service.pas), line = 2379
 12213
 12214 71C4 AD 4D A0			lda AROUND
 12215 71C7 29 0E			and #$0E
 12216 71C9 C9 0A			cmp #$0A
 12217 71CB D0 05			jne l_2215
 12218 71CD A9 21			lda #$21
 12219 71CF 8D 4C A0			sta DEFLECT
 12220 71D2			l_2215
 12221
 12222 				; optimize OK (service.pas), line = 2380
 12223
 12224 71D2 AD 4D A0			lda AROUND
 12225 71D5 29 0E			and #$0E
 12226 71D7 C9 0C			cmp #$0C
 12227 71D9 D0 05			jne l_2232
 12228 71DB A9 11			lda #$11
 12229 71DD 8D 4C A0			sta DEFLECT
 12230 71E0			l_2232
 12231
 12232 				; optimize OK (service.pas), line = 2382
 12233
 12234 71E0 A9 08			lda #$08
 12235 71E2 8D 4A A0			sta EMERGENCY
 12236
 12237 				; optimize OK (service.pas), line = 2383
 12238
 12239 71E5 A0 00			ldy #$00
 12240 71E7 AD 31 A0			lda YB
 12241 71EA 10 01			spl
 12242 71EC 88				dey
 12243 71ED 38 E9 01			sub #$01
 12244 71F0 8D 1C A0			sta SHOOT_BLOCK.YB
 12245 71F3 98				tya
 12246 71F4 E9 00			sbc #$00
 12247 71F6 8D 1D A0			sta SHOOT_BLOCK.YB+1
 12248 71F9 A0 00			ldy #$00
 12249 71FB AD 30 A0			lda XB
 12250 71FE 10 01			spl
 12251 7200 88				dey
 12252 7201 18 69 01			add #$01
 12253 7204 8D 1A A0			sta SHOOT_BLOCK.XB
 12254 7207 90 01			scc
 12255 7209 C8				iny
 12256 720A 8C 1B A0			sty SHOOT_BLOCK.XB+1
 12257 720D AD 28 A0			lda BALL
 12258 7210 8D 1E A0			sta SHOOT_BLOCK.BALL
 12259 7213 AD 29 A0			lda BALL+1
 12260 7216 8D 1F A0			sta SHOOT_BLOCK.BALL+1
 12261 7219 20 4C 66			jsr SHOOT_BLOCK
 12262 721C			l_216D
 12263
 12264 				; optimize OK (service.pas), line = 2386
 12265
 12266 721C AD 4F A0			lda TOUCH
 12267 721F C9 02			cmp #$02
 12268 7221 F0 03 4C C2 72		jne l_2262
 12269
 12270 				; optimize OK (service.pas), line = 2388
 12271
 12272 7226 AD 4D A0			lda AROUND
 12273 7229 29 E0			and #$E0
 12274 722B D0 05			jne l_2279
 12275 722D A9 12			lda #$12
 12276 722F 8D 4C A0			sta DEFLECT
 12277 7232			l_2279
 12278
 12279 				; optimize OK (service.pas), line = 2389
 12280
 12281 7232 AD 4D A0			lda AROUND
 12282 7235 29 E0			and #$E0
 12283 7237 C9 20			cmp #$20
 12284 7239 D0 05			jne l_2296
 12285 723B A9 10			lda #$10
 12286 723D 8D 4C A0			sta DEFLECT
 12287 7240			l_2296
 12288
 12289 				; optimize OK (service.pas), line = 2390
 12290
 12291 7240 AD 4D A0			lda AROUND
 12292 7243 29 E0			and #$E0
 12293 7245 C9 40			cmp #$40
 12294 7247 D0 05			jne l_22B3
 12295 7249 A9 33			lda #$33
 12296 724B 8D 4C A0			sta DEFLECT
 12297 724E			l_22B3
 12298
 12299 				; optimize OK (service.pas), line = 2391
 12300
 12301 724E AD 4D A0			lda AROUND
 12302 7251 29 E0			and #$E0
 12303 7253 C9 60			cmp #$60
 12304 7255 D0 05			jne l_22D0
 12305 7257 A9 11			lda #$11
 12306 7259 8D 4C A0			sta DEFLECT
 12307 725C			l_22D0
 12308
 12309 				; optimize OK (service.pas), line = 2392
 12310
 12311 725C AD 4D A0			lda AROUND
 12312 725F 29 E0			and #$E0
 12313 7261 C9 80			cmp #$80
 12314 7263 D0 05			jne l_22ED
 12315 7265 A9 02			lda #$02
 12316 7267 8D 4C A0			sta DEFLECT
 12317 726A			l_22ED
 12318
 12319 				; optimize OK (service.pas), line = 2393
 12320
 12321 726A AD 4D A0			lda AROUND
 12322 726D 29 E0			and #$E0
 12323 726F C9 A0			cmp #$A0
 12324 7271 D0 05			jne l_230A
 12325 7273 A9 12			lda #$12
 12326 7275 8D 4C A0			sta DEFLECT
 12327 7278			l_230A
 12328
 12329 				; optimize OK (service.pas), line = 2394
 12330
 12331 7278 AD 4D A0			lda AROUND
 12332 727B 29 E0			and #$E0
 12333 727D C9 C0			cmp #$C0
 12334 727F D0 05			jne l_2327
 12335 7281 A9 22			lda #$22
 12336 7283 8D 4C A0			sta DEFLECT
 12337 7286			l_2327
 12338
 12339 				; optimize OK (service.pas), line = 2396
 12340
 12341 7286 A9 06			lda #$06
 12342 7288 8D 4A A0			sta EMERGENCY
 12343
 12344 				; optimize OK (service.pas), line = 2397
 12345
 12346 728B A0 00			ldy #$00
 12347 728D AD 31 A0			lda YB
 12348 7290 10 01			spl
 12349 7292 88				dey
 12350 7293 18 69 01			add #$01
 12351 7296 8D 1C A0			sta SHOOT_BLOCK.YB
 12352 7299 90 01			scc
 12353 729B C8				iny
 12354 729C 8C 1D A0			sty SHOOT_BLOCK.YB+1
 12355 729F A0 00			ldy #$00
 12356 72A1 AD 30 A0			lda XB
 12357 72A4 10 01			spl
 12358 72A6 88				dey
 12359 72A7 38 E9 01			sub #$01
 12360 72AA 8D 1A A0			sta SHOOT_BLOCK.XB
 12361 72AD 98				tya
 12362 72AE E9 00			sbc #$00
 12363 72B0 8D 1B A0			sta SHOOT_BLOCK.XB+1
 12364 72B3 AD 28 A0			lda BALL
 12365 72B6 8D 1E A0			sta SHOOT_BLOCK.BALL
 12366 72B9 AD 29 A0			lda BALL+1
 12367 72BC 8D 1F A0			sta SHOOT_BLOCK.BALL+1
 12368 72BF 20 4C 66			jsr SHOOT_BLOCK
 12369 72C2			l_2262
 12370
 12371 				; optimize OK (service.pas), line = 2400
 12372
 12373 72C2 AD 4F A0			lda TOUCH
 12374 72C5 C9 03			cmp #$03
 12375 72C7 F0 03 4C 68 73		jne l_2357
 12376
 12377 				; optimize OK (service.pas), line = 2402
 12378
 12379 72CC AD 4D A0			lda AROUND
 12380 72CF 29 38			and #$38
 12381 72D1 D0 05			jne l_236E
 12382 72D3 A9 22			lda #$22
 12383 72D5 8D 4C A0			sta DEFLECT
 12384 72D8			l_236E
 12385
 12386 				; optimize OK (service.pas), line = 2403
 12387
 12388 72D8 AD 4D A0			lda AROUND
 12389 72DB 29 38			and #$38
 12390 72DD C9 08			cmp #$08
 12391 72DF D0 05			jne l_238B
 12392 72E1 A9 02			lda #$02
 12393 72E3 8D 4C A0			sta DEFLECT
 12394 72E6			l_238B
 12395
 12396 				; optimize OK (service.pas), line = 2404
 12397
 12398 72E6 AD 4D A0			lda AROUND
 12399 72E9 29 38			and #$38
 12400 72EB C9 10			cmp #$10
 12401 72ED D0 05			jne l_23A8
 12402 72EF A9 33			lda #$33
 12403 72F1 8D 4C A0			sta DEFLECT
 12404 72F4			l_23A8
 12405
 12406 				; optimize OK (service.pas), line = 2405
 12407
 12408 72F4 AD 4D A0			lda AROUND
 12409 72F7 29 38			and #$38
 12410 72F9 C9 18			cmp #$18
 12411 72FB D0 05			jne l_23C5
 12412 72FD A9 12			lda #$12
 12413 72FF 8D 4C A0			sta DEFLECT
 12414 7302			l_23C5
 12415
 12416 				; optimize OK (service.pas), line = 2406
 12417
 12418 7302 AD 4D A0			lda AROUND
 12419 7305 29 38			and #$38
 12420 7307 C9 20			cmp #$20
 12421 7309 D0 05			jne l_23E2
 12422 730B A9 20			lda #$20
 12423 730D 8D 4C A0			sta DEFLECT
 12424 7310			l_23E2
 12425
 12426 				; optimize OK (service.pas), line = 2407
 12427
 12428 7310 AD 4D A0			lda AROUND
 12429 7313 29 38			and #$38
 12430 7315 C9 28			cmp #$28
 12431 7317 D0 05			jne l_23FF
 12432 7319 A9 22			lda #$22
 12433 731B 8D 4C A0			sta DEFLECT
 12434 731E			l_23FF
 12435
 12436 				; optimize OK (service.pas), line = 2408
 12437
 12438 731E AD 4D A0			lda AROUND
 12439 7321 29 38			and #$38
 12440 7323 C9 30			cmp #$30
 12441 7325 D0 05			jne l_241C
 12442 7327 A9 21			lda #$21
 12443 7329 8D 4C A0			sta DEFLECT
 12444 732C			l_241C
 12445
 12446 				; optimize OK (service.pas), line = 2410
 12447
 12448 732C A9 07			lda #$07
 12449 732E 8D 4A A0			sta EMERGENCY
 12450
 12451 				; optimize OK (service.pas), line = 2411
 12452
 12453 7331 A0 00			ldy #$00
 12454 7333 AD 31 A0			lda YB
 12455 7336 10 01			spl
 12456 7338 88				dey
 12457 7339 18 69 01			add #$01
 12458 733C 8D 1C A0			sta SHOOT_BLOCK.YB
 12459 733F 90 01			scc
 12460 7341 C8				iny
 12461 7342 8C 1D A0			sty SHOOT_BLOCK.YB+1
 12462 7345 A0 00			ldy #$00
 12463 7347 AD 30 A0			lda XB
 12464 734A 10 01			spl
 12465 734C 88				dey
 12466 734D 18 69 01			add #$01
 12467 7350 8D 1A A0			sta SHOOT_BLOCK.XB
 12468 7353 90 01			scc
 12469 7355 C8				iny
 12470 7356 8C 1B A0			sty SHOOT_BLOCK.XB+1
 12471 7359 AD 28 A0			lda BALL
 12472 735C 8D 1E A0			sta SHOOT_BLOCK.BALL
 12473 735F AD 29 A0			lda BALL+1
 12474 7362 8D 1F A0			sta SHOOT_BLOCK.BALL+1
 12475 7365 20 4C 66			jsr SHOOT_BLOCK
 12476 7368			l_2357
 12477
 12478 				; optimize OK (service.pas), line = 2417
 12479
 12480 7368 AD 4C A0			lda DEFLECT
 12481 736B 4A				lsr @
 12482 736C 4A				lsr @
 12483 736D 4A				lsr @
 12484 736E 4A				lsr @
 12485 736F 8D 40 A0			sta MYX
 12486 7372 A9 00			lda #$00
 12487 7374 8D 41 A0			sta MYX+1
 12488
 12489 				; optimize OK (service.pas), line = 2418
 12490
 12491 7377 AD 4C A0			lda DEFLECT
 12492 737A 29 0F			and #$0F
 12493 737C 8D 42 A0			sta MYY
 12494 737F A9 00			lda #$00
 12495 7381 8D 43 A0			sta MYY+1
 12496
 12497 				; optimize OK (service.pas), line = 2420
 12498
 12499 7384 AD 41 A0			lda MYX+1
 12500 7387 D0 05			bne @+
 12501 7389 AD 40 A0			lda MYX
 12502 738C C9 01			cmp #$01
 12503 				@
 12504 738E D0 50			jne l_245F
 12505 7390 AC 28 A0 84 84 AC + 	mwy BALL :bp2
 12506 739A A0 10			ldy #BALL.SPEEDX-DATAORIGIN
 12507 739C B1 84			lda (:bp2),y
 12508 739E 85 8A			sta SYSTEM.ABS.@010184000.X
 12509 73A0 C8				iny
 12510 73A1 B1 84			lda (:bp2),y
 12511 73A3 85 8B			sta SYSTEM.ABS.@010184000.X+1
 12512 73A5 20 5F 2A			jsr SYSTEM.ABS.@010184000
 12513 73A8 E8				inx
 12514 73A9 A5 92 95 96			mva SYSTEM.ABS.@010184000.RESULT :STACKORIGIN,x
 12515 73AD A5 93 95 A6			mva SYSTEM.ABS.@010184000.RESULT+1 :STACKORIGIN+STACKWIDTH,x
 12516 73B1 A9 00			lda #$00
 12517 73B3 38 F5 96			sub :STACKORIGIN,x
 12518 73B6 95 96			sta :STACKORIGIN,x
 12519 73B8 A9 00			lda #$00
 12520 73BA F5 A6			sbc :STACKORIGIN+STACKWIDTH,x
 12521 73BC 95 A6			sta :STACKORIGIN+STACKWIDTH,x
 12522 73BE A9 00			lda #$00
 12523 73C0 E9 00			sbc #$00
 12524 73C2 95 B6			sta :STACKORIGIN+STACKWIDTH*2,x
 12525 73C4 A9 00			lda #$00
 12526 73C6 E9 00			sbc #$00
 12527 73C8 95 C6			sta :STACKORIGIN+STACKWIDTH*3,x
 12528 73CA AC 28 A0 84 84 AC + 	mwy BALL :bp2
 12529 73D4 A0 10			ldy #BALL.SPEEDX-DATAORIGIN
 12530 73D6 B5 96			lda :STACKORIGIN,x
 12531 73D8 91 84			sta (:bp2),y
 12532 73DA C8				iny
 12533 73DB B5 A6			lda :STACKORIGIN+STACKWIDTH,x
 12534 73DD 91 84			sta (:bp2),y
 12535 73DF CA				dex
 12536 73E0			l_245F
 12537
 12538 				; optimize OK (service.pas), line = 2421
 12539
 12540 73E0 AD 41 A0			lda MYX+1
 12541 73E3 D0 05			bne @+
 12542 73E5 AD 40 A0			lda MYX
 12543 73E8 C9 02			cmp #$02
 12544 				@
 12545 73EA D0 2D			jne l_247C
 12546 73EC AC 28 A0 84 84 AC + 	mwy BALL :bp2
 12547 73F6 A0 10			ldy #BALL.SPEEDX-DATAORIGIN
 12548 73F8 B1 84			lda (:bp2),y
 12549 73FA 85 8A			sta SYSTEM.ABS.@010184000.X
 12550 73FC C8				iny
 12551 73FD B1 84			lda (:bp2),y
 12552 73FF 85 8B			sta SYSTEM.ABS.@010184000.X+1
 12553 7401 20 5F 2A			jsr SYSTEM.ABS.@010184000
 12554 7404 AC 28 A0 84 84 AC + 	mwy BALL :bp2
 12555 740E A0 10			ldy #BALL.SPEEDX-DATAORIGIN
 12556 7410 A5 92			lda SYSTEM.ABS.@010184000.RESULT
 12557 7412 91 84			sta (:bp2),y
 12558 7414 C8				iny
 12559 7415 A5 93			lda SYSTEM.ABS.@010184000.RESULT+1
 12560 7417 91 84			sta (:bp2),y
 12561 7419			l_247C
 12562
 12563 				; optimize OK (service.pas), line = 2422
 12564
 12565 7419 AD 41 A0			lda MYX+1
 12566 741C D0 05			bne @+
 12567 741E AD 40 A0			lda MYX
 12568 7421 C9 03			cmp #$03
 12569 				@
 12570 7423 D0 25			jne l_2496
 12571 7425 AC 28 A0 84 84 AC + 	mwy BALL :bp2
 12572 742F A0 10			ldy #BALL.SPEEDX-DATAORIGIN
 12573 7431 A9 00			lda #$00
 12574 7433 38 F1 84			sub (:bp2),y
 12575 7436 85 9F			sta :STACKORIGIN+9
 12576 7438 C8				iny
 12577 7439 A9 00			lda #$00
 12578 743B F1 84			sbc (:bp2),y
 12579 743D 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 12580 743F A0 10			ldy #BALL.SPEEDX-DATAORIGIN
 12581 7441 A5 9F			lda :STACKORIGIN+9
 12582 7443 91 84			sta (:bp2),y
 12583 7445 C8				iny
 12584 7446 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 12585 7448 91 84			sta (:bp2),y
 12586 744A			l_2496
 12587
 12588 				; optimize OK (service.pas), line = 2424
 12589
 12590 744A AD 43 A0			lda MYY+1
 12591 744D D0 05			bne @+
 12592 744F AD 42 A0			lda MYY
 12593 7452 C9 01			cmp #$01
 12594 				@
 12595 7454 D0 50			jne l_24B2
 12596 7456 AC 28 A0 84 84 AC + 	mwy BALL :bp2
 12597 7460 A0 12			ldy #BALL.SPEEDY-DATAORIGIN
 12598 7462 B1 84			lda (:bp2),y
 12599 7464 85 8A			sta SYSTEM.ABS.@010184000.X
 12600 7466 C8				iny
 12601 7467 B1 84			lda (:bp2),y
 12602 7469 85 8B			sta SYSTEM.ABS.@010184000.X+1
 12603 746B 20 5F 2A			jsr SYSTEM.ABS.@010184000
 12604 746E E8				inx
 12605 746F A5 92 95 96			mva SYSTEM.ABS.@010184000.RESULT :STACKORIGIN,x
 12606 7473 A5 93 95 A6			mva SYSTEM.ABS.@010184000.RESULT+1 :STACKORIGIN+STACKWIDTH,x
 12607 7477 A9 00			lda #$00
 12608 7479 38 F5 96			sub :STACKORIGIN,x
 12609 747C 95 96			sta :STACKORIGIN,x
 12610 747E A9 00			lda #$00
 12611 7480 F5 A6			sbc :STACKORIGIN+STACKWIDTH,x
 12612 7482 95 A6			sta :STACKORIGIN+STACKWIDTH,x
 12613 7484 A9 00			lda #$00
 12614 7486 E9 00			sbc #$00
 12615 7488 95 B6			sta :STACKORIGIN+STACKWIDTH*2,x
 12616 748A A9 00			lda #$00
 12617 748C E9 00			sbc #$00
 12618 748E 95 C6			sta :STACKORIGIN+STACKWIDTH*3,x
 12619 7490 AC 28 A0 84 84 AC + 	mwy BALL :bp2
 12620 749A A0 12			ldy #BALL.SPEEDY-DATAORIGIN
 12621 749C B5 96			lda :STACKORIGIN,x
 12622 749E 91 84			sta (:bp2),y
 12623 74A0 C8				iny
 12624 74A1 B5 A6			lda :STACKORIGIN+STACKWIDTH,x
 12625 74A3 91 84			sta (:bp2),y
 12626 74A5 CA				dex
 12627 74A6			l_24B2
 12628
 12629 				; optimize OK (service.pas), line = 2425
 12630
 12631 74A6 AD 43 A0			lda MYY+1
 12632 74A9 D0 05			bne @+
 12633 74AB AD 42 A0			lda MYY
 12634 74AE C9 02			cmp #$02
 12635 				@
 12636 74B0 D0 2D			jne l_24CF
 12637 74B2 AC 28 A0 84 84 AC + 	mwy BALL :bp2
 12638 74BC A0 12			ldy #BALL.SPEEDY-DATAORIGIN
 12639 74BE B1 84			lda (:bp2),y
 12640 74C0 85 8A			sta SYSTEM.ABS.@010184000.X
 12641 74C2 C8				iny
 12642 74C3 B1 84			lda (:bp2),y
 12643 74C5 85 8B			sta SYSTEM.ABS.@010184000.X+1
 12644 74C7 20 5F 2A			jsr SYSTEM.ABS.@010184000
 12645 74CA AC 28 A0 84 84 AC + 	mwy BALL :bp2
 12646 74D4 A0 12			ldy #BALL.SPEEDY-DATAORIGIN
 12647 74D6 A5 92			lda SYSTEM.ABS.@010184000.RESULT
 12648 74D8 91 84			sta (:bp2),y
 12649 74DA C8				iny
 12650 74DB A5 93			lda SYSTEM.ABS.@010184000.RESULT+1
 12651 74DD 91 84			sta (:bp2),y
 12652 74DF			l_24CF
 12653
 12654 				; optimize OK (service.pas), line = 2426
 12655
 12656 74DF AD 43 A0			lda MYY+1
 12657 74E2 D0 05			bne @+
 12658 74E4 AD 42 A0			lda MYY
 12659 74E7 C9 03			cmp #$03
 12660 				@
 12661 74E9 D0 25			jne l_24E9
 12662 74EB AC 28 A0 84 84 AC + 	mwy BALL :bp2
 12663 74F5 A0 12			ldy #BALL.SPEEDY-DATAORIGIN
 12664 74F7 A9 00			lda #$00
 12665 74F9 38 F1 84			sub (:bp2),y
 12666 74FC 85 9F			sta :STACKORIGIN+9
 12667 74FE C8				iny
 12668 74FF A9 00			lda #$00
 12669 7501 F1 84			sbc (:bp2),y
 12670 7503 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 12671 7505 A0 12			ldy #BALL.SPEEDY-DATAORIGIN
 12672 7507 A5 9F			lda :STACKORIGIN+9
 12673 7509 91 84			sta (:bp2),y
 12674 750B C8				iny
 12675 750C A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 12676 750E 91 84			sta (:bp2),y
 12677 7510			l_24E9
 12678 7510			l_1EDA
 12679 7510			l_1BE1
 12680
 12681 				; optimize OK (service.pas), line = 2436
 12682
 12683 7510 AC 28 A0 84 84 AC + 	mwy BALL :bp2
 12684 751A A0 16			ldy #BALL.BRWHIT-DATAORIGIN
 12685 751C B1 84			lda (:bp2),y
 12686 751E C9 65			cmp #$65
 12687 7520 B0 03 4C EB 76		jcc l_250A
 12688
 12689 				; optimize OK (service.pas), line = 2439
 12690
 12691 7525 AD 4A A0			lda EMERGENCY
 12692 7528 C9 FF			cmp #$FF
 12693 752A D0 05			jne l_251D
 12694 752C A9 04			lda #$04
 12695 752E 20 3C 3D			jsr FATAL_ERROR
 12696 7531			l_251D
 12697
 12698 				; optimize OK (service.pas), line = 2441
 12699
 12700 7531 AC 4A A0			ldy EMERGENCY
 12701 7534 B9 7F 20			lda adr.EMERG_DEV,y
 12702 7537 8D 4B A0			sta MIMAX
 12703
 12704 				; optimize OK (service.pas), line = 2467
 12705
 12706 753A 98				tya
 12707 753B 8D 59 A0			sta @CASETMP_0009
 12708 753E C9 05			cmp #$05
 12709 7540 D0 1F			jne l_2536
 12710 				@
 12711
 12712 				; optimize OK (service.pas), line = 2470
 12713
 12714 7542 AD 53 A0			lda adr.ADJW+$03
 12715 7545 D0 08			jne l_254D
 12716 7547 AD 4B A0			lda MIMAX
 12717 754A 29 0F			and #$0F
 12718 754C 8D 4B A0			sta MIMAX
 12719 754F			l_254D
 12720
 12721 				; optimize OK (service.pas), line = 2471
 12722
 12723 754F AD 51 A0			lda adr.ADJW+$01
 12724 7552 D0 0A			jne l_2575
 12725 7554 AD 4B A0			lda MIMAX
 12726 7557 29 F0			and #$F0
 12727 7559 09 03			ora #$03
 12728 755B 8D 4B A0			sta MIMAX
 12729 755E			l_2575
 12730 755E 4C CD 75			jmp a_0009
 12731 7561			l_2536
 12732 7561 C9 06			cmp #$06
 12733 7563 D0 21			jne l_258D
 12734
 12735 				; optimize OK (service.pas), line = 2475
 12736
 12737 7565 AD 51 A0			lda adr.ADJW+$01
 12738 7568 D0 0A			jne l_25A4
 12739 756A AD 4B A0			lda MIMAX
 12740 756D 29 0F			and #$0F
 12741 756F 09 10			ora #$10
 12742 7571 8D 4B A0			sta MIMAX
 12743 7574			l_25A4
 12744
 12745 				; optimize OK (service.pas), line = 2476
 12746
 12747 7574 AD 55 A0			lda adr.ADJW+$05
 12748 7577 D0 0A			jne l_25CC
 12749 7579 AD 4B A0			lda MIMAX
 12750 757C 29 F0			and #$F0
 12751 757E 09 04			ora #$04
 12752 7580 8D 4B A0			sta MIMAX
 12753 7583			l_25CC
 12754 7583 4C CD 75			jmp a_0009
 12755 7586			l_258D
 12756 7586 C9 07			cmp #$07
 12757 7588 D0 21			jne l_25E4
 12758
 12759 				; optimize OK (service.pas), line = 2480
 12760
 12761 758A AD 55 A0			lda adr.ADJW+$05
 12762 758D D0 0A			jne l_25FB
 12763 758F AD 4B A0			lda MIMAX
 12764 7592 29 0F			and #$0F
 12765 7594 09 20			ora #$20
 12766 7596 8D 4B A0			sta MIMAX
 12767 7599			l_25FB
 12768
 12769 				; optimize OK (service.pas), line = 2481
 12770
 12771 7599 AD 57 A0			lda adr.ADJW+$07
 12772 759C D0 0A			jne l_2623
 12773 759E AD 4B A0			lda MIMAX
 12774 75A1 29 F0			and #$F0
 12775 75A3 09 05			ora #$05
 12776 75A5 8D 4B A0			sta MIMAX
 12777 75A8			l_2623
 12778 75A8 4C CD 75			jmp a_0009
 12779 75AB			l_25E4
 12780 75AB C9 08			cmp #$08
 12781 75AD D0 1E			jne l_263B
 12782
 12783 				; optimize OK (service.pas), line = 2485
 12784
 12785 75AF AD 57 A0			lda adr.ADJW+$07
 12786 75B2 D0 0A			jne l_2652
 12787 75B4 AD 4B A0			lda MIMAX
 12788 75B7 29 0F			and #$0F
 12789 75B9 09 30			ora #$30
 12790 75BB 8D 4B A0			sta MIMAX
 12791 75BE			l_2652
 12792
 12793 				; optimize OK (service.pas), line = 2486
 12794
 12795 75BE AD 53 A0			lda adr.ADJW+$03
 12796 75C1 D0 0A			jne l_267A
 12797 75C3 AD 4B A0			lda MIMAX
 12798 75C6 29 F0			and #$F0
 12799 75C8 09 06			ora #$06
 12800 75CA 8D 4B A0			sta MIMAX
 12801 75CD			l_267A
 12802 75CD			l_263B
 12803 75CD			a_0009
 12804
 12805 				; --- RepeatUntilProlog
 12806 75CD			l_2692
 12807
 12808 				; optimize OK (service.pas), line = 2494
 12809
 12810 75CD AD 4B A0			lda MIMAX
 12811 75D0 4A				lsr @
 12812 75D1 4A				lsr @
 12813 75D2 4A				lsr @
 12814 75D3 4A				lsr @
 12815 75D4 85 8E			sta :ecx
 12816 75D6 A9 5A			lda #$5A
 12817 75D8 85 86			sta :eax
 12818 					.ifdef fmulinit
 12819 					fmulu_8
 12820 					els
 12821 75DA 20 3F 22			imulCL
 12822 					eif
 12823 75DD A5 86			lda :eax
 12824 75DF 8D 2E A0			sta LX
 12825
 12826 				; optimize OK (service.pas), line = 2495
 12827
 12828 75E2 AD 4B A0			lda MIMAX
 12829 75E5 29 0F			and #$0F
 12830 75E7 85 8E			sta :ecx
 12831 75E9 A9 5A			lda #$5A
 12832 75EB 85 86			sta :eax
 12833 					.ifdef fmulinit
 12834 					fmulu_8
 12835 					els
 12836 75ED 20 3F 22			imulCL
 12837 					eif
 12838 75F0 8D 3B A0			sta MX+1
 12839 75F3 A5 86			lda :eax
 12840 75F5 8D 3A A0			sta MX
 12841
 12842 				; optimize OK (service.pas), line = 2497
 12843
 12844 75F8 A0 00			ldy #$00
 12845 75FA AD 2E A0			lda LX
 12846 75FD 10 01			spl
 12847 75FF 88				dey
 12848 7600 84 B0			sty :STACKORIGIN+STACKWIDTH+10
 12849 7602 85 A0			sta :STACKORIGIN+10
 12850 7604 AD 3A A0			lda MX
 12851 7607 38 E5 A0			sub :STACKORIGIN+10
 12852 760A 8D 0A 9D			sta SYSTEM.RANDOM.@010184000.RANGE
 12853 760D AD 3B A0			lda MX+1
 12854 7610 E5 B0			sbc :STACKORIGIN+STACKWIDTH+10
 12855 7612 8D 0B 9D			sta SYSTEM.RANDOM.@010184000.RANGE+1
 12856 7615 20 A8 32			jsr SYSTEM.RANDOM.@010184000
 12857 7618 E8				inx
 12858 7619 AD 0C 9D 95 96		mva SYSTEM.RANDOM.@010184000.RESULT :STACKORIGIN,x
 12859 761E AD 0D 9D 95 A6		mva SYSTEM.RANDOM.@010184000.RESULT+1 :STACKORIGIN+STACKWIDTH,x
 12860 7623 E8				inx
 12861 7624 AD 2E A0 95 96		mva LX :STACKORIGIN,x
 12862 7629 20 02 21			jsr @expandSHORT2SMALL
 12863 762C 20 B5 20			jsr addAX_CX
 12864 762F CA				dex
 12865 7630 B5 96			lda :STACKORIGIN,x
 12866 7632 8D 3E A0			sta ANGLE
 12867 7635 B5 A6			lda :STACKORIGIN+STACKWIDTH,x
 12868 7637 8D 3F A0			sta ANGLE+1
 12869 763A CA				dex
 12870
 12871 				; optimize OK (service.pas), line = 2500
 12872
 12873 763B A9 5A			lda #$5A
 12874 763D 85 8E			sta @SMALLINT.MOD.B
 12875 763F A9 00			lda #$00
 12876 7641 85 8F			sta @SMALLINT.MOD.B+1
 12877 7643 AD 3E A0			lda ANGLE
 12878 7646 85 86			sta @SMALLINT.MOD.A
 12879 7648 AD 3F A0			lda ANGLE+1
 12880 764B 85 87			sta @SMALLINT.MOD.A+1
 12881 764D 20 1C 22			jsr @SMALLINT.MOD
 12882 7650 A5 92			lda @SMALLINT.MOD.RESULT
 12883 7652 C9 1F			cmp #$1F
 12884 7654 A5 93			lda @SMALLINT.MOD.RESULT+1
 12885 7656 E9 00			sbc #$00
 12886 7658 50 02			svc
 12887 765A 49 80			eor #$80
 12888 765C 10 03 4C CD 75		jmi l_2692
 12889 7661 A9 5A			lda #$5A
 12890 7663 85 8E			sta @SMALLINT.MOD.B
 12891 7665 A9 00			lda #$00
 12892 7667 85 8F			sta @SMALLINT.MOD.B+1
 12893 7669 AD 3E A0			lda ANGLE
 12894 766C 85 86			sta @SMALLINT.MOD.A
 12895 766E AD 3F A0			lda ANGLE+1
 12896 7671 85 87			sta @SMALLINT.MOD.A+1
 12897 7673 20 1C 22			jsr @SMALLINT.MOD
 12898 7676 A5 92			lda @SMALLINT.MOD.RESULT
 12899 7678 C9 3C			cmp #$3C
 12900 767A A5 93			lda @SMALLINT.MOD.RESULT+1
 12901 767C E9 00			sbc #$00
 12902 767E 50 02			svc
 12903 7680 49 80			eor #$80
 12904 7682 30 03 4C CD 75		jpl l_2692
 12905
 12906 				; optimize OK (service.pas), line = 2504
 12907
 12908 7687 A9 68			lda #$68
 12909 7689 85 8E			sta @SMALLINT.MOD.B
 12910 768B A9 01			lda #$01
 12911 768D 85 8F			sta @SMALLINT.MOD.B+1
 12912 768F AD 3E A0			lda ANGLE
 12913 7692 85 86			sta @SMALLINT.MOD.A
 12914 7694 AD 3F A0			lda ANGLE+1
 12915 7697 85 87			sta @SMALLINT.MOD.A+1
 12916 7699 20 1C 22			jsr @SMALLINT.MOD
 12917 769C A5 92			lda @SMALLINT.MOD.RESULT
 12918 769E 8D 83 9F			sta SET_BALL_DIRECTION.ANGLE
 12919 76A1 A5 93			lda @SMALLINT.MOD.RESULT+1
 12920 76A3 8D 84 9F			sta SET_BALL_DIRECTION.ANGLE+1
 12921 76A6 AD 28 A0			lda BALL
 12922 76A9 8D 7F 9F			sta SET_BALL_DIRECTION.BALL
 12923 76AC AD 29 A0			lda BALL+1
 12924 76AF 8D 80 9F			sta SET_BALL_DIRECTION.BALL+1
 12925 76B2 20 59 47			jsr SET_BALL_DIRECTION
 12926
 12927 				; optimize OK (service.pas), line = 2505
 12928
 12929 76B5 AC 28 A0 84 84 AC + 	mwy BALL :bp2
 12930 76BF A0 0C			ldy #BALL.SPEED-DATAORIGIN
 12931 76C1 B1 84			lda (:bp2),y
 12932 76C3 8D 6D 9F			sta SET_BALL_SPEED.SPEED
 12933 76C6 C8				iny
 12934 76C7 B1 84			lda (:bp2),y
 12935 76C9 8D 6E 9F			sta SET_BALL_SPEED.SPEED+1
 12936 76CC AD 28 A0			lda BALL
 12937 76CF 8D 69 9F			sta SET_BALL_SPEED.BALL
 12938 76D2 AD 29 A0			lda BALL+1
 12939 76D5 8D 6A 9F			sta SET_BALL_SPEED.BALL+1
 12940 76D8 20 76 45			jsr SET_BALL_SPEED
 12941
 12942 				; optimize OK (service.pas), line = 2507
 12943
 12944 76DB AC 28 A0 84 84 AC + 	mwy BALL :bp2
 12945 76E5 A0 16			ldy #BALL.BRWHIT-DATAORIGIN
 12946 76E7 A9 00			lda #$00
 12947 76E9 91 84			sta (:bp2),y
 12948 76EB			l_250A
 12949
 12950 				; ------------------------------------------------------------
 12951
 12952 = A028			BALL	= DATAORIGIN+$0356
 12953 = 9CD2			BALL.X	= DATAORIGIN+$0000
 12954 = 9CD4			BALL.Y	= DATAORIGIN+$0002
 12955 = 9CD6			BALL.FINEX	= DATAORIGIN+$0004
 12956 = 9CD8			BALL.FINEY	= DATAORIGIN+$0006
 12957 = 9CDA			BALL.OLDX	= DATAORIGIN+$0008
 12958 = 9CDC			BALL.OLDY	= DATAORIGIN+$000A
 12959 = 9CDE			BALL.SPEED	= DATAORIGIN+$000C
 12960 = 9CE0			BALL.FINESPEED	= DATAORIGIN+$000E
 12961 = 9CE2			BALL.SPEEDX	= DATAORIGIN+$0010
 12962 = 9CE4			BALL.SPEEDY	= DATAORIGIN+$0012
 12963 = 9CE6			BALL.SBD	= DATAORIGIN+$0014
 12964 = 9CE8			BALL.BRWHIT	= DATAORIGIN+$0016
 12965 = 9CE9			BALL.INPLAY	= DATAORIGIN+$0017
 12966 = 9CEA			BALL.LAUNCH	= DATAORIGIN+$0018
 12967 = 9CEB			BALL.ONVAUS	= DATAORIGIN+$0019
 12968 = 9CED			BALL.STM	= DATAORIGIN+$001B
 12969 = A02C			X	= DATAORIGIN+$035A
 12970 = A02D			Y	= DATAORIGIN+$035B
 12971 = A02E			LX	= DATAORIGIN+$035C
 12972 = A02F			LY	= DATAORIGIN+$035D
 12973 = A030			XB	= DATAORIGIN+$035E
 12974 = A031			YB	= DATAORIGIN+$035F
 12975 = A032			OX	= DATAORIGIN+$0360
 12976 = A034			OY	= DATAORIGIN+$0362
 12977 = A036			NX	= DATAORIGIN+$0364
 12978 = A038			NY	= DATAORIGIN+$0366
 12979 = A03A			MX	= DATAORIGIN+$0368
 12980 = A03C			MY	= DATAORIGIN+$036A
 12981 = A03E			ANGLE	= DATAORIGIN+$036C
 12982 = A040			MYX	= DATAORIGIN+$036E
 12983 = A042			MYY	= DATAORIGIN+$0370
 12984 = A044			F1	= DATAORIGIN+$0372
 12985 = A046			F2	= DATAORIGIN+$0374
 12986 = A048			A	= DATAORIGIN+$0376
 12987 = A049			B	= DATAORIGIN+$0377
 12988 = A04A			EMERGENCY	= DATAORIGIN+$0378
 12989 = A04B			MIMAX	= DATAORIGIN+$0379
 12990 = A04C			DEFLECT	= DATAORIGIN+$037A
 12991 = A04D			AROUND	= DATAORIGIN+$037B
 12992 = A04E			COLLISION	= DATAORIGIN+$037C
 12993 = A04F			TOUCH	= DATAORIGIN+$037D
 12994 = A050			adr.ADJW	= [DATAORIGIN+$037E] .array [3] [3]
 12995 76EB			.var ADJW	= adr.ADJW .word
 12996 = A059			@CASETMP_0009	= DATAORIGIN+$0387
 12997
 12998 = A028			@VarData	= BALL
 12999 = 002A			@VarDataSize	= 42
 13000
 13001 76EB			@exit
 13002 					.ifdef @new
 13003 					lda <@VarData
 13004 					sta :ztmp
 13005 					lda >@VarData
 13006 					ldy #@VarDataSize-1
 13007 					jmp @FreeMem
 13008 					els
 13009 76EB 60				rts						; ret
 13010 					eif
 13011 = 76EC 50 A0		ADJW
 13011 				.endl
 13012
 13013 76EE			.local	FILL_PICTURE_WITH_PATTERN			; PROCEDURE
 13014
 13015 				; optimize OK (service.pas), line = 2522
 13016
 13017 76EE A9 00			lda #$00
 13018 76F0 8D 61 A0			sta Y
 13019
 13020 76F3			l_2700
 13021 				; --- ForToDoCondition
 13022 76F3 AC 5A A0 84 84 AC + 	mwy PATT :bp2
 13023 76FD A0 00			ldy #PATT.WIDTH-DATAORIGIN
 13024 76FF B1 84			lda (:bp2),y
 13025 7701 85 8E			sta @WORD.MOD.B
 13026 7703 C8				iny
 13027 7704 B1 84			lda (:bp2),y
 13028 7706 85 8F			sta @WORD.MOD.B+1
 13029 7708 AD 61 A0			lda Y
 13030 770B 85 86			sta @WORD.MOD.A
 13031 770D A9 00			lda #$00
 13032 770F 85 87			sta @WORD.MOD.A+1
 13033 7711 20 20 23			jsr @WORD.MOD
 13034 7714 A5 92			lda @WORD.MOD.RESULT
 13035 7716 AC 61 A0			ldy Y
 13036 7719 99 00 C4			sta adr.MODX,y
 13037
 13038 				; optimize OK (service.pas), line = 2528
 13039
 13040 771C AC 5A A0 84 84 AC + 	mwy PATT :bp2
 13041 7726 A0 02			ldy #PATT.HEIGHT-DATAORIGIN
 13042 7728 B1 84			lda (:bp2),y
 13043 772A 85 8E			sta @WORD.MOD.B
 13044 772C C8				iny
 13045 772D B1 84			lda (:bp2),y
 13046 772F 85 8F			sta @WORD.MOD.B+1
 13047 7731 AD 61 A0			lda Y
 13048 7734 85 86			sta @WORD.MOD.A
 13049 7736 A9 00			lda #$00
 13050 7738 85 87			sta @WORD.MOD.A+1
 13051 773A 20 20 23			jsr @WORD.MOD
 13052 773D A5 92			lda @WORD.MOD.RESULT
 13053 773F AC 61 A0			ldy Y
 13054 7742 99 00 C3			sta adr.MODY,y
 13055
 13056 				; --- ForToDoEpilog
 13057 7745 EE 61 A0			inc Y
 13058 7748 D0 A9			jne l_2700
 13059 774A			l_270E
 13060
 13061 				; optimize OK (service.pas), line = 2534
 13062
 13063 774A A9 0A			lda #$0A
 13064 774C 8D 61 A0			sta Y
 13065
 13066 774F			l_2738
 13067 				; --- ForToDoCondition
 13068 774F AC 61 A0			ldy Y
 13069 7752 C0 C7			cpy #$C7
 13070 7754 90 03 4C 60 78		jcs l_2746
 13071
 13072 				; optimize OK (service.pas), line = 2537
 13073
 13074 7759 B9 00 C3			lda adr.MODY,y
 13075 775C 85 86			sta :eax
 13076 775E AC 5A A0 84 84 AC + 	mwy PATT :bp2
 13077 7768 A0 00			ldy #PATT.WIDTH-DATAORIGIN
 13078 776A B1 84			lda (:bp2),y
 13079 776C 85 8E			sta :ecx
 13080 776E C8				iny
 13081 776F B1 84			lda (:bp2),y
 13082 7771 85 8F			sta :ecx+1
 13083 7773 A9 00			lda #$00
 13084 7775 85 87			sta :eax+1
 13085 					.ifdef fmulinit
 13086 					fmulu_16
 13087 					els
 13088 7777 20 8B 22			imulCX
 13089 					eif
 13090 777A A5 86			lda :eax
 13091 777C 8D 5E A0			sta YB
 13092 777F A5 87			lda :eax+1
 13093 7781 8D 5F A0			sta YB+1
 13094
 13095 				; optimize OK (service.pas), line = 2539
 13096
 13097 7784 A0 04			ldy #PATT.OFS-DATAORIGIN
 13098 7786 B1 84			lda (:bp2),y
 13099 7788 18 6D 5E A0			add YB
 13100 778C 8D B1 9D			sta VBXE_RAM.POSITION
 13101 778F C8				iny
 13102 7790 B1 84			lda (:bp2),y
 13103 7792 6D 5F A0			adc YB+1
 13104 7795 8D B2 9D			sta VBXE_RAM.POSITION+1
 13105 7798 C8				iny
 13106 7799 B1 84			lda (:bp2),y
 13107 779B 69 00			adc #$00
 13108 779D 8D B3 9D			sta VBXE_RAM.POSITION+2
 13109 77A0 C8				iny
 13110 77A1 B1 84			lda (:bp2),y
 13111 77A3 69 00			adc #$00
 13112 77A5 8D B4 9D			sta VBXE_RAM.POSITION+3
 13113
 13114 				; optimize OK (service.pas), line = 2540
 13115
 13116 77A8 AD 8F 9C			lda SCANLINE
 13117 77AB 8D 57 9D			sta VBXE.TVBXEMEMORYSTREAM.READBUFFER.BUFFER
 13118 77AE AD 90 9C			lda SCANLINE+1
 13119 77B1 8D 58 9D			sta VBXE.TVBXEMEMORYSTREAM.READBUFFER.BUFFER+1
 13120 77B4 A9 28			lda #$28
 13121 77B6 8D 59 9D			sta VBXE.TVBXEMEMORYSTREAM.READBUFFER.COUNT
 13122 77B9 A9 00			lda #$00
 13123 77BB 8D 5A 9D			sta VBXE.TVBXEMEMORYSTREAM.READBUFFER.COUNT+1
 13124 77BE AD 37 9C			lda VBXE_RAM
 13125 77C1 AC 38 9C			ldy VBXE_RAM+1
 13126 77C4 20 44 34			jsr VBXE.TVBXEMEMORYSTREAM.READBUFFER
 13127
 13128 				; optimize OK (service.pas), line = 2542
 13129
 13130 77C7 A9 00			lda #$00
 13131 77C9 8D 64 A0			sta K
 13132
 13133 				; optimize OK (service.pas), line = 2543
 13134
 13135 77CC A9 09			lda #$09
 13136 77CE 8D 60 A0			sta X
 13137
 13138 77D1			l_276E
 13139 				; --- ForToDoCondition
 13140 77D1 AC 60 A0			ldy X
 13141 77D4 C0 D8			cpy #$D8
 13142 77D6 B0 38			jcs l_277C
 13143
 13144 				; optimize OK (service.pas), line = 2548
 13145
 13146 77D8 B9 00 C4			lda adr.MODX,y
 13147 77DB A8				tay
 13148 77DC B9 00 C5			lda adr.SCANLINE,y
 13149 77DF 8D 62 A0			sta CL
 13150
 13151 				; optimize OK (service.pas), line = 2550
 13152
 13153 77E2 A9 80			lda #$80
 13154 77E4 8D 63 A0			sta SHADOW
 13155
 13156 				; optimize OK (service.pas), line = 2555
 13157
 13158 77E7 AD 61 A0			lda Y
 13159 77EA C9 10			cmp #$10
 13160 77EC 90 07			jcc l_27AAx
 13161 77EE AD 60 A0			lda X
 13162 77F1 C9 12			cmp #$12
 13163 77F3 B0 05			jcs l_27AA
 13164 77F5			l_27AAx
 13165 77F5 A9 00			lda #$00
 13166 77F7 8D 63 A0			sta SHADOW
 13167 77FA			l_27AA
 13168
 13169 				; optimize OK (service.pas), line = 2560
 13170
 13171 77FA AD 62 A0			lda CL
 13172 77FD 29 7F			and #$7F
 13173 77FF 0D 63 A0			ora SHADOW
 13174 7802 AC 64 A0			ldy K
 13175 7805 99 00 C2			sta adr.TMP,y
 13176
 13177 				; optimize FAIL (0, service.pas), line = 2562
 13178
 13179 7808 EE 64 A0			inc K
 13180
 13181 				; --- ForToDoEpilog
 13182 780B EE 60 A0			inc X
 13183 780E D0 C1			jne l_276E
 13184 7810			l_277C
 13185
 13186 				; optimize OK (service.pas), line = 2565
 13187
 13188 7810 AC 61 A0			ldy Y
 13189 7813 AD E1 9D			lda PLAYSCREEN.OFS
 13190 7816 18 79 00 C0			add adr.ROW,y
 13191 781A 85 A0			sta :STACKORIGIN+10
 13192 781C AD E2 9D			lda PLAYSCREEN.OFS+1
 13193 781F 79 00 C1			adc adr.ROW+256,y
 13194 7822 85 B0			sta :STACKORIGIN+STACKWIDTH+10
 13195 7824 AD E3 9D			lda PLAYSCREEN.OFS+2
 13196 7827 69 00			adc #$00
 13197 7829 85 C0			sta :STACKORIGIN+STACKWIDTH*2+10
 13198 782B AD E4 9D			lda PLAYSCREEN.OFS+3
 13199 782E 69 00			adc #$00
 13200 7830 85 D0			sta :STACKORIGIN+STACKWIDTH*3+10
 13201 7832 A5 A0			lda :STACKORIGIN+10
 13202 7834 18 69 09			add #$09
 13203 7837 8D F9 9E			sta BLITTMP.DST
 13204 783A A5 B0			lda :STACKORIGIN+STACKWIDTH+10
 13205 783C 69 00			adc #$00
 13206 783E 8D FA 9E			sta BLITTMP.DST+1
 13207 7841 A5 C0			lda :STACKORIGIN+STACKWIDTH*2+10
 13208 7843 69 00			adc #$00
 13209 7845 8D FB 9E			sta BLITTMP.DST+2
 13210 7848 A5 D0			lda :STACKORIGIN+STACKWIDTH*3+10
 13211 784A 69 00			adc #$00
 13212 784C 8D FC 9E			sta BLITTMP.DST+3
 13213 784F AD 64 A0			lda K
 13214 7852 8D FD 9E			sta BLITTMP.SIZE
 13215 7855 20 E9 3B			jsr BLITTMP
 13216
 13217 				; --- ForToDoEpilog
 13218 7858 EE 61 A0			inc Y
 13219 785B F0 03 4C 4F 77		jne l_2738
 13220 7860			l_2746
 13221
 13222 				; ------------------------------------------------------------
 13223
 13224 = A05A			PATT	= DATAORIGIN+$0388
 13225 = 9CD2			PATT.WIDTH	= DATAORIGIN+$0000
 13226 = 9CD4			PATT.HEIGHT	= DATAORIGIN+$0002
 13227 = 9CD6			PATT.OFS	= DATAORIGIN+$0004
 13228 = A05E			YB	= DATAORIGIN+$038C
 13229 = A060			X	= DATAORIGIN+$038E
 13230 = A061			Y	= DATAORIGIN+$038F
 13231 = A062			CL	= DATAORIGIN+$0390
 13232 = A063			SHADOW	= DATAORIGIN+$0391
 13233 = A064			K	= DATAORIGIN+$0392
 13234
 13235 = A05A			@VarData	= PATT
 13236 = 0009			@VarDataSize	= 9
 13237
 13238 7860			@exit
 13239 					.ifdef @new
 13240 					lda <@VarData
 13241 					sta :ztmp
 13242 					lda >@VarData
 13243 					ldy #@VarDataSize-1
 13244 					jmp @FreeMem
 13245 					els
 13246 7860 60				rts						; ret
 13247 					eif
 13248 				.endl
 13249
 13250 7861			.local	WRITE_ROUND_LEVEL				; PROCEDURE
 13251
 13252 				; ------------------------------------------------------------
 13253
 13254 = A065			X	= DATAORIGIN+$0393
 13255 = A067			Y	= DATAORIGIN+$0395
 13256
 13257 = A065			@VarData	= X
 13258 = 0004			@VarDataSize	= 4
 13259
 13260 7861			@exit
 13261 					.ifdef @new
 13262 					lda <@VarData
 13263 					sta :ztmp
 13264 					lda >@VarData
 13265 					ldy #@VarDataSize-1
 13266 					jmp @FreeMem
 13267 					els
 13268 7861 60				rts						; ret
 13269 					eif
 13270 				.endl
 13271
 13272 7862			.local	REMOVE_ROUND_LEVEL				; PROCEDURE
 13273
 13274 				; optimize OK (service.pas), line = 2681
 13275
 13276 7862 AD 81 C0			lda adr.ROW+$81
 13277 7865 18 69 48			add #$48
 13278 7868 8D D8 9E			sta HLP
 13279 786B AD 81 C1			lda adr.ROW+256+$81
 13280 786E 69 00			adc #$00
 13281 7870 8D D9 9E			sta HLP+1
 13282
 13283 				; optimize OK (service.pas), line = 2683
 13284
 13285 7873 AD D8 9E			lda HLP
 13286 7876 8D E7 9E			sta BLITBOX.DST
 13287 7879 A9 50			lda #$50
 13288 787B 18 6D D9 9E			add HLP+1
 13289 787F 8D E8 9E			sta BLITBOX.DST+1
 13290 7882 A9 00			lda #$00
 13291 7884 69 00			adc #$00
 13292 7886 8D E9 9E			sta BLITBOX.DST+2
 13293 7889 A9 00			lda #$00
 13294 788B 69 00			adc #$00
 13295 788D 8D EA 9E			sta BLITBOX.DST+3
 13296 7890 AD E1 9D			lda PLAYSCREEN.OFS
 13297 7893 18 6D D8 9E			add HLP
 13298 7897 8D E3 9E			sta BLITBOX.SRC
 13299 789A AD E2 9D			lda PLAYSCREEN.OFS+1
 13300 789D 6D D9 9E			adc HLP+1
 13301 78A0 8D E4 9E			sta BLITBOX.SRC+1
 13302 78A3 AD E3 9D			lda PLAYSCREEN.OFS+2
 13303 78A6 69 00			adc #$00
 13304 78A8 8D E5 9E			sta BLITBOX.SRC+2
 13305 78AB AD E4 9D			lda PLAYSCREEN.OFS+3
 13306 78AE 69 00			adc #$00
 13307 78B0 8D E6 9E			sta BLITBOX.SRC+3
 13308 78B3 A9 58			lda #$58
 13309 78B5 8D EB 9E			sta BLITBOX.W
 13310 78B8 A9 00			lda #$00
 13311 78BA 8D EC 9E			sta BLITBOX.W+1
 13312 78BD A9 1F			lda #$1F
 13313 78BF 8D ED 9E			sta BLITBOX.H
 13314 78C2 20 EA 3A			jsr BLITBOX
 13315
 13316 78C5			@exit
 13317 					.ifdef @new
 13318 					lda <@VarData
 13319 					sta :ztmp
 13320 					lda >@VarData
 13321 					ldy #@VarDataSize-1
 13322 					jmp @FreeMem
 13323 					els
 13324 78C5 60				rts						; ret
 13325 					eif
 13326 				.endl
 13327
 13328 78C6			.local	GAME_OVER					; PROCEDURE
 13329
 13330 				; ------------------------------------------------------------
 13331
 13332 = A069			X	= DATAORIGIN+$0397
 13333 = A06B			Y	= DATAORIGIN+$0399
 13334 = A06D			adr.SC	= [DATAORIGIN+$039B] .array [21]
 13335 78C6			.var SC	= adr.SC .word
 13336
 13337 = A069			@VarData	= X
 13338 = 0019			@VarDataSize	= 25
 13339
 13340 78C6			@exit
 13341 					.ifdef @new
 13342 					lda <@VarData
 13343 					sta :ztmp
 13344 					lda >@VarData
 13345 					ldy #@VarDataSize-1
 13346 					jmp @FreeMem
 13347 					els
 13348 78C6 60				rts						; ret
 13349 					eif
 13350 = 78C7 6D A0		SC
 13350 				.endl
 13351
 13352 78C9			.local	DESTROY_VAUS					; PROCEDURE
 13353
 13354 				; optimize OK (service.pas), line = 2737
 13355
 13356 78C9 AD ED 9D 8D E5 9D + 	:8 mva adr.NORMAL+# adr.PLAYVAUS+#
 13357
 13358 				; optimize FAIL ('MODIFY_VAUS', service.pas), line = 2738
 13359
 13360 78F9 20 11 52			jsr MODIFY_VAUS
 13361
 13362 				; optimize OK (service.pas), line = 2740
 13363
 13364 78FC AD 55 9E			lda VAUS.X
 13365 78FF 8D CA 9F			sta MOVE_VAUS.X
 13366 7902 A9 00			lda #$00
 13367 7904 8D CB 9F			sta MOVE_VAUS.X+1
 13368 7907 AD 56 9E			lda VAUS.Y
 13369 790A 8D CC 9F			sta MOVE_VAUS.Y
 13370 790D A9 00			lda #$00
 13371 790F 8D CD 9F			sta MOVE_VAUS.Y+1
 13372 7912 20 5C 54			jsr MOVE_VAUS
 13373
 13374 				; optimize OK (service.pas), line = 2742
 13375
 13376 7915 AD 55 9E			lda VAUS.X
 13377 7918 38 E9 04			sub #$04
 13378 791B 8D 84 A0			sta A
 13379 791E A9 00			lda #$00
 13380 7920 E9 00			sbc #$00
 13381 7922 8D 85 A0			sta A+1
 13382
 13383 				; optimize OK (service.pas), line = 2743
 13384
 13385 7925 AD 56 9E			lda VAUS.Y
 13386 7928 38 E9 05			sub #$05
 13387 792B 8D 86 A0			sta B
 13388 792E A9 00			lda #$00
 13389 7930 E9 00			sbc #$00
 13390 7932 8D 87 A0			sta B+1
 13391
 13392 				; optimize OK (service.pas), line = 2746
 13393
 13394 7935 A9 00			lda #$00
 13395 7937 8D 88 A0			sta W
 13396
 13397 793A			l_2837
 13398 				; --- ForToDoCondition
 13399 793A AD 88 A0			lda W
 13400 793D C9 07			cmp #$07
 13401 793F 90 03 4C C6 7A		jcs l_2845
 13402
 13403 				; optimize OK (service.pas), line = 2748
 13404
 13405 7944 A9 00			lda #$00
 13406 7946 8D 8A A0			sta Y
 13407
 13408 7949			l_284E
 13409 				; --- ForToDoCondition
 13410 7949 AD 8A A0			lda Y
 13411 794C C9 10			cmp #$10
 13412 794E 90 03 4C B0 7A		jcs l_285C
 13413
 13414 				; optimize OK (service.pas), line = 2751
 13415
 13416 7953 AD 05 9E			lda EXPLOSION.WIDTH
 13417 7956 85 8E			sta :ecx
 13418 7958 AD 06 9E			lda EXPLOSION.WIDTH+1
 13419 795B 85 8F			sta :ecx+1
 13420 795D AD 8A A0			lda Y
 13421 7960 85 86			sta :eax
 13422 7962 A9 00			lda #$00
 13423 7964 85 87			sta :eax+1
 13424 					.ifdef fmulinit
 13425 					fmulu_16
 13426 					els
 13427 7966 20 CF 22			imulCX_AL
 13428 					eif
 13429 7969 A5 86			lda :eax
 13430 796B 85 9F			sta :STACKORIGIN+9
 13431 796D A5 87			lda :eax+1
 13432 796F 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 13433 7971 AD 05 9E			lda EXPLOSION.WIDTH
 13434 7974 85 A1			sta :STACKORIGIN+11
 13435 7976 AD 06 9E			lda EXPLOSION.WIDTH+1
 13436 7979 06 A1			asl :STACKORIGIN+11
 13437 797B 2A				rol @
 13438 797C 06 A1			asl :STACKORIGIN+11
 13439 797E 2A				rol @
 13440 797F 06 A1			asl :STACKORIGIN+11
 13441 7981 2A				rol @
 13442 7982 06 A1			asl :STACKORIGIN+11
 13443 7984 2A				rol @
 13444 7985 85 8F			sta :ecx+1
 13445 7987 A5 A1			lda :STACKORIGIN+11
 13446 7989 85 8E			sta :ecx
 13447 798B AD 88 A0			lda W
 13448 798E 85 86			sta :eax
 13449 7990 A9 00			lda #$00
 13450 7992 85 87			sta :eax+1
 13451 					.ifdef fmulinit
 13452 					fmulu_16
 13453 					els
 13454 7994 20 8B 22			imulCX
 13455 					eif
 13456 7997 A5 86			lda :eax
 13457 7999 18 65 9F			add :STACKORIGIN+9
 13458 799C 8D 82 A0			sta Z
 13459 799F A5 87			lda :eax+1
 13460 79A1 65 AF			adc :STACKORIGIN+STACKWIDTH+9
 13461 79A3 8D 83 A0			sta Z+1
 13462
 13463 				; optimize OK (service.pas), line = 2753
 13464
 13465 79A6 AD 09 9E			lda EXPLOSION.OFS
 13466 79A9 18 6D 82 A0			add Z
 13467 79AD 8D B1 9D			sta VBXE_RAM.POSITION
 13468 79B0 AD 0A 9E			lda EXPLOSION.OFS+1
 13469 79B3 6D 83 A0			adc Z+1
 13470 79B6 8D B2 9D			sta VBXE_RAM.POSITION+1
 13471 79B9 AD 0B 9E			lda EXPLOSION.OFS+2
 13472 79BC 69 00			adc #$00
 13473 79BE 8D B3 9D			sta VBXE_RAM.POSITION+2
 13474 79C1 AD 0C 9E			lda EXPLOSION.OFS+3
 13475 79C4 69 00			adc #$00
 13476 79C6 8D B4 9D			sta VBXE_RAM.POSITION+3
 13477
 13478 				; optimize OK (service.pas), line = 2754
 13479
 13480 79C9 AD 8F 9C			lda SCANLINE
 13481 79CC 8D 57 9D			sta VBXE.TVBXEMEMORYSTREAM.READBUFFER.BUFFER
 13482 79CF AD 90 9C			lda SCANLINE+1
 13483 79D2 8D 58 9D			sta VBXE.TVBXEMEMORYSTREAM.READBUFFER.BUFFER+1
 13484 79D5 AD 05 9E			lda EXPLOSION.WIDTH
 13485 79D8 8D 59 9D			sta VBXE.TVBXEMEMORYSTREAM.READBUFFER.COUNT
 13486 79DB AD 06 9E			lda EXPLOSION.WIDTH+1
 13487 79DE 8D 5A 9D			sta VBXE.TVBXEMEMORYSTREAM.READBUFFER.COUNT+1
 13488 79E1 AD 37 9C			lda VBXE_RAM
 13489 79E4 AC 38 9C			ldy VBXE_RAM+1
 13490 79E7 20 44 34			jsr VBXE.TVBXEMEMORYSTREAM.READBUFFER
 13491
 13492 				; optimize OK (service.pas), line = 2756
 13493
 13494 79EA AD 8A A0			lda Y
 13495 79ED 18 6D 86 A0			add B
 13496 79F1 A8				tay
 13497 79F2 AD 84 A0			lda A
 13498 79F5 18 79 00 C0			add adr.ROW,y
 13499 79F9 8D D8 9E			sta HLP
 13500 79FC AD 85 A0			lda A+1
 13501 79FF 79 00 C1			adc adr.ROW+256,y
 13502 7A02 8D D9 9E			sta HLP+1
 13503
 13504 				; optimize OK (service.pas), line = 2758
 13505
 13506 7A05 AD E1 9D			lda PLAYSCREEN.OFS
 13507 7A08 18 6D D8 9E			add HLP
 13508 7A0C 8D B1 9D			sta VBXE_RAM.POSITION
 13509 7A0F AD E2 9D			lda PLAYSCREEN.OFS+1
 13510 7A12 6D D9 9E			adc HLP+1
 13511 7A15 8D B2 9D			sta VBXE_RAM.POSITION+1
 13512 7A18 AD E3 9D			lda PLAYSCREEN.OFS+2
 13513 7A1B 69 00			adc #$00
 13514 7A1D 8D B3 9D			sta VBXE_RAM.POSITION+2
 13515 7A20 AD E4 9D			lda PLAYSCREEN.OFS+3
 13516 7A23 69 00			adc #$00
 13517 7A25 8D B4 9D			sta VBXE_RAM.POSITION+3
 13518
 13519 				; optimize OK (service.pas), line = 2759
 13520
 13521 7A28 AD 91 9C			lda SCANLINE2
 13522 7A2B 8D 57 9D			sta VBXE.TVBXEMEMORYSTREAM.READBUFFER.BUFFER
 13523 7A2E AD 92 9C			lda SCANLINE2+1
 13524 7A31 8D 58 9D			sta VBXE.TVBXEMEMORYSTREAM.READBUFFER.BUFFER+1
 13525 7A34 AD 05 9E			lda EXPLOSION.WIDTH
 13526 7A37 8D 59 9D			sta VBXE.TVBXEMEMORYSTREAM.READBUFFER.COUNT
 13527 7A3A AD 06 9E			lda EXPLOSION.WIDTH+1
 13528 7A3D 8D 5A 9D			sta VBXE.TVBXEMEMORYSTREAM.READBUFFER.COUNT+1
 13529 7A40 AD 37 9C			lda VBXE_RAM
 13530 7A43 AC 38 9C			ldy VBXE_RAM+1
 13531 7A46 20 44 34			jsr VBXE.TVBXEMEMORYSTREAM.READBUFFER
 13532
 13533 				; optimize OK (service.pas), line = 2761
 13534
 13535 7A49 A9 00			lda #$00
 13536 7A4B 8D 89 A0			sta X
 13537 7A4E AC 05 9E			ldy EXPLOSION.WIDTH
 13538 7A51 88				dey
 13539 7A52 8C 56 7A			sty @FORTMP_28AF_0
 13540
 13541 7A55			l_28B2
 13542 				; --- ForToDoCondition
 13543 7A55 A9 00			lda @FORTMP_28AF_0::#$00
 13544 7A57 CD 89 A0			cmp X
 13545 7A5A 90 26			jcc l_28C0
 13546
 13547 				; optimize OK (service.pas), line = 2765
 13548
 13549 7A5C AD 88 A0			lda W
 13550 7A5F C9 06			cmp #$06
 13551 7A61 F0 08			jeq l_28E1x
 13552 7A63 AC 89 A0			ldy X
 13553 7A66 B9 00 C5			lda adr.SCANLINE,y
 13554 7A69 D0 09			jne l_28E1
 13555 7A6B			l_28E1x
 13556
 13557 				; optimize OK (service.pas), line = 2770
 13558
 13559 7A6B AC 89 A0			ldy X
 13560 7A6E B9 80 C5			lda adr.SCANLINE2,y
 13561 7A71 4C 7A 7A			jmp l_28F7
 13562 7A74			l_28E1
 13563
 13564 				; optimize OK (service.pas), line = 2776
 13565
 13566 7A74 AC 89 A0			ldy X
 13567 7A77 B9 00 C5			lda adr.SCANLINE,y
 13568 7A7A			l_28F7
 13569 7A7A 99 00 C2			sta adr.TMP,y
 13570
 13571 				; --- ForToDoEpilog
 13572 7A7D EE 89 A0			inc X
 13573 7A80 D0 D3			jne l_28B2
 13574 7A82			l_28C0
 13575
 13576 				; optimize OK (service.pas), line = 2779
 13577
 13578 7A82 AD D8 9E			lda HLP
 13579 7A85 8D F9 9E			sta BLITTMP.DST
 13580 7A88 A9 50			lda #$50
 13581 7A8A 18 6D D9 9E			add HLP+1
 13582 7A8E 8D FA 9E			sta BLITTMP.DST+1
 13583 7A91 A9 00			lda #$00
 13584 7A93 69 00			adc #$00
 13585 7A95 8D FB 9E			sta BLITTMP.DST+2
 13586 7A98 A9 00			lda #$00
 13587 7A9A 69 00			adc #$00
 13588 7A9C 8D FC 9E			sta BLITTMP.DST+3
 13589 7A9F AD 05 9E			lda EXPLOSION.WIDTH
 13590 7AA2 8D FD 9E			sta BLITTMP.SIZE
 13591 7AA5 20 E9 3B			jsr BLITTMP
 13592
 13593 				; --- ForToDoEpilog
 13594 7AA8 EE 8A A0			inc Y
 13595 7AAB F0 03 4C 49 79		jne l_284E
 13596 7AB0			l_285C
 13597
 13598 				; optimize OK (service.pas), line = 2782
 13599
 13600 7AB0 AD 88 A0			lda W
 13601 7AB3 8D B9 9D			sta DEATH_SOUND.A
 13602 7AB6 A9 00			lda #$00
 13603 7AB8 8D BA 9D			sta DEATH_SOUND.A+1
 13604 7ABB 20 D0 38			jsr DEATH_SOUND
 13605
 13606 				; --- ForToDoEpilog
 13607 7ABE EE 88 A0			inc W
 13608 7AC1 F0 03 4C 3A 79		jne l_2837
 13609 7AC6			l_2845
 13610
 13611 				; optimize OK (service.pas), line = 2786
 13612
 13613 7AC6 A9 07			lda #$07
 13614 7AC8 8D B9 9D			sta DEATH_SOUND.A
 13615 7ACB A9 00			lda #$00
 13616 7ACD 8D BA 9D			sta DEATH_SOUND.A+1
 13617 7AD0 20 D0 38			jsr DEATH_SOUND
 13618
 13619 				; optimize OK (service.pas), line = 2787
 13620
 13621 7AD3 A9 96			lda #$96
 13622 7AD5 8D 12 9F			sta MYDELAY.A
 13623 7AD8 A9 00			lda #$00
 13624 7ADA 8D 13 9F			sta MYDELAY.A+1
 13625 7ADD 20 E5 3C			jsr MYDELAY
 13626
 13627 				; optimize FAIL ('DISABLE_LETTER', service.pas), line = 2788
 13628
 13629 7AE0 20 DB 41			jsr DISABLE_LETTER
 13630
 13631 				; ------------------------------------------------------------
 13632
 13633 = A082			Z	= DATAORIGIN+$03B0
 13634 = A084			A	= DATAORIGIN+$03B2
 13635 = A086			B	= DATAORIGIN+$03B4
 13636 = A088			W	= DATAORIGIN+$03B6
 13637 = A089			X	= DATAORIGIN+$03B7
 13638 = A08A			Y	= DATAORIGIN+$03B8
 13639
 13640 = A082			@VarData	= Z
 13641 = 0009			@VarDataSize	= 9
 13642
 13643 7AE3			@exit
 13644 					.ifdef @new
 13645 					lda <@VarData
 13646 					sta :ztmp
 13647 					lda >@VarData
 13648 					ldy #@VarDataSize-1
 13649 					jmp @FreeMem
 13650 					els
 13651 7AE3 60				rts						; ret
 13652 					eif
 13653 				.endl
 13654
 13655 7AE4			.local	CREATE_VAUS					; PROCEDURE
 13656
 13657 				; optimize FAIL ('NOSOUND', service.pas), line = 2800
 13658
 13659 7AE4 20 E4 3C			jsr NOSOUND
 13660
 13661 				; optimize OK (service.pas), line = 2801
 13662
 13663 7AE7 A9 5B			lda #$5B
 13664 7AE9 8D 91 A0			sta A
 13665 7AEC A9 00			lda #$00
 13666 7AEE 8D 92 A0			sta A+1
 13667
 13668 				; optimize OK (service.pas), line = 2802
 13669
 13670 7AF1 A9 B3			lda #$B3
 13671 7AF3 8D 93 A0			sta B
 13672 7AF6 A9 00			lda #$00
 13673 7AF8 8D 94 A0			sta B+1
 13674
 13675 				; optimize OK (service.pas), line = 2804
 13676
 13677 7AFB A9 0B			lda #$0B
 13678 7AFD 8D 8E A0			sta W
 13679
 13680 7B00			l_293A
 13681 				; --- ForToDoCondition
 13682 7B00 A9 00			lda #$00
 13683 7B02 8D 8D A0			sta Y
 13684
 13685 7B05			l_2951
 13686 				; --- ForToDoCondition
 13687 7B05 AD 8D A0			lda Y
 13688 7B08 C9 10			cmp #$10
 13689 7B0A 90 03 4C 65 7C		jcs l_295F
 13690
 13691 				; optimize OK (service.pas), line = 2809
 13692
 13693 7B0F AD 0D 9E			lda NEWVAUS.WIDTH
 13694 7B12 85 8E			sta :ecx
 13695 7B14 AD 0E 9E			lda NEWVAUS.WIDTH+1
 13696 7B17 85 8F			sta :ecx+1
 13697 7B19 AD 8D A0			lda Y
 13698 7B1C 85 86			sta :eax
 13699 7B1E A9 00			lda #$00
 13700 7B20 85 87			sta :eax+1
 13701 					.ifdef fmulinit
 13702 					fmulu_16
 13703 					els
 13704 7B22 20 CF 22			imulCX_AL
 13705 					eif
 13706 7B25 A5 86			lda :eax
 13707 7B27 85 9F			sta :STACKORIGIN+9
 13708 7B29 A5 87			lda :eax+1
 13709 7B2B 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 13710 7B2D A9 10			lda #$10
 13711 7B2F 85 8E			sta :ecx
 13712 7B31 A9 00			lda #$00
 13713 7B33 85 8F			sta :ecx+1
 13714 7B35 AD 0D 9E			lda NEWVAUS.WIDTH
 13715 7B38 85 86			sta :eax
 13716 7B3A AD 0E 9E			lda NEWVAUS.WIDTH+1
 13717 7B3D 85 87			sta :eax+1
 13718 					.ifdef fmulinit
 13719 					fmulu_16
 13720 					els
 13721 7B3F 20 8B 22			imulCX
 13722 					eif
 13723 7B42 A5 86			lda :eax
 13724 7B44 85 8E			sta :ecx
 13725 7B46 A5 87			lda :eax+1
 13726 7B48 85 8F			sta :ecx+1
 13727 7B4A AD 8E A0			lda W
 13728 7B4D 85 86			sta :eax
 13729 7B4F A9 00			lda #$00
 13730 7B51 85 87			sta :eax+1
 13731 					.ifdef fmulinit
 13732 					fmulu_16
 13733 					els
 13734 7B53 20 CF 22			imulCX_AL
 13735 					eif
 13736 7B56 A5 86			lda :eax
 13737 7B58 18 65 9F			add :STACKORIGIN+9
 13738 7B5B 8D 8F A0			sta Z
 13739 7B5E A5 87			lda :eax+1
 13740 7B60 65 AF			adc :STACKORIGIN+STACKWIDTH+9
 13741 7B62 8D 90 A0			sta Z+1
 13742
 13743 				; optimize OK (service.pas), line = 2811
 13744
 13745 7B65 AD 8D A0			lda Y
 13746 7B68 18 6D 93 A0			add B
 13747 7B6C A8				tay
 13748 7B6D AD 91 A0			lda A
 13749 7B70 18 79 00 C0			add adr.ROW,y
 13750 7B74 8D D8 9E			sta HLP
 13751 7B77 AD 92 A0			lda A+1
 13752 7B7A 79 00 C1			adc adr.ROW+256,y
 13753 7B7D 8D D9 9E			sta HLP+1
 13754
 13755 				; optimize OK (service.pas), line = 2813
 13756
 13757 7B80 AD 11 9E			lda NEWVAUS.OFS
 13758 7B83 18 6D 8F A0			add Z
 13759 7B87 8D B1 9D			sta VBXE_RAM.POSITION
 13760 7B8A AD 12 9E			lda NEWVAUS.OFS+1
 13761 7B8D 6D 90 A0			adc Z+1
 13762 7B90 8D B2 9D			sta VBXE_RAM.POSITION+1
 13763 7B93 AD 13 9E			lda NEWVAUS.OFS+2
 13764 7B96 69 00			adc #$00
 13765 7B98 8D B3 9D			sta VBXE_RAM.POSITION+2
 13766 7B9B AD 14 9E			lda NEWVAUS.OFS+3
 13767 7B9E 69 00			adc #$00
 13768 7BA0 8D B4 9D			sta VBXE_RAM.POSITION+3
 13769
 13770 				; optimize OK (service.pas), line = 2814
 13771
 13772 7BA3 AD 8F 9C			lda SCANLINE
 13773 7BA6 8D 57 9D			sta VBXE.TVBXEMEMORYSTREAM.READBUFFER.BUFFER
 13774 7BA9 AD 90 9C			lda SCANLINE+1
 13775 7BAC 8D 58 9D			sta VBXE.TVBXEMEMORYSTREAM.READBUFFER.BUFFER+1
 13776 7BAF AD 0D 9E			lda NEWVAUS.WIDTH
 13777 7BB2 8D 59 9D			sta VBXE.TVBXEMEMORYSTREAM.READBUFFER.COUNT
 13778 7BB5 AD 0E 9E			lda NEWVAUS.WIDTH+1
 13779 7BB8 8D 5A 9D			sta VBXE.TVBXEMEMORYSTREAM.READBUFFER.COUNT+1
 13780 7BBB AD 37 9C			lda VBXE_RAM
 13781 7BBE AC 38 9C			ldy VBXE_RAM+1
 13782 7BC1 20 44 34			jsr VBXE.TVBXEMEMORYSTREAM.READBUFFER
 13783
 13784 				; optimize OK (service.pas), line = 2816
 13785
 13786 7BC4 AD E1 9D			lda PLAYSCREEN.OFS
 13787 7BC7 18 6D D8 9E			add HLP
 13788 7BCB 8D B1 9D			sta VBXE_RAM.POSITION
 13789 7BCE AD E2 9D			lda PLAYSCREEN.OFS+1
 13790 7BD1 6D D9 9E			adc HLP+1
 13791 7BD4 8D B2 9D			sta VBXE_RAM.POSITION+1
 13792 7BD7 AD E3 9D			lda PLAYSCREEN.OFS+2
 13793 7BDA 69 00			adc #$00
 13794 7BDC 8D B3 9D			sta VBXE_RAM.POSITION+2
 13795 7BDF AD E4 9D			lda PLAYSCREEN.OFS+3
 13796 7BE2 69 00			adc #$00
 13797 7BE4 8D B4 9D			sta VBXE_RAM.POSITION+3
 13798
 13799 				; optimize OK (service.pas), line = 2817
 13800
 13801 7BE7 AD 91 9C			lda SCANLINE2
 13802 7BEA 8D 57 9D			sta VBXE.TVBXEMEMORYSTREAM.READBUFFER.BUFFER
 13803 7BED AD 92 9C			lda SCANLINE2+1
 13804 7BF0 8D 58 9D			sta VBXE.TVBXEMEMORYSTREAM.READBUFFER.BUFFER+1
 13805 7BF3 AD 0D 9E			lda NEWVAUS.WIDTH
 13806 7BF6 8D 59 9D			sta VBXE.TVBXEMEMORYSTREAM.READBUFFER.COUNT
 13807 7BF9 AD 0E 9E			lda NEWVAUS.WIDTH+1
 13808 7BFC 8D 5A 9D			sta VBXE.TVBXEMEMORYSTREAM.READBUFFER.COUNT+1
 13809 7BFF AD 37 9C			lda VBXE_RAM
 13810 7C02 AC 38 9C			ldy VBXE_RAM+1
 13811 7C05 20 44 34			jsr VBXE.TVBXEMEMORYSTREAM.READBUFFER
 13812
 13813 				; optimize OK (service.pas), line = 2819
 13814
 13815 7C08 A9 00			lda #$00
 13816 7C0A 8D 8C A0			sta X
 13817 7C0D AC 0D 9E			ldy NEWVAUS.WIDTH
 13818 7C10 88				dey
 13819 7C11 8C 15 7C			sty @FORTMP_29B2_0
 13820
 13821 7C14			l_29B5
 13822 				; --- ForToDoCondition
 13823 7C14 A9 00			lda @FORTMP_29B2_0::#$00
 13824 7C16 CD 8C A0			cmp X
 13825 7C19 90 1C			jcc l_29C3
 13826
 13827 				; optimize OK (service.pas), line = 2822
 13828
 13829 7C1B AC 8C A0			ldy X
 13830 7C1E B9 00 C5			lda adr.SCANLINE,y
 13831 7C21 D0 06			jne l_29D8
 13832
 13833 				; optimize OK (service.pas), line = 2828
 13834
 13835 7C23 B9 80 C5			lda adr.SCANLINE2,y
 13836 7C26 4C 2F 7C			jmp l_29EE
 13837 7C29			l_29D8
 13838
 13839 				; optimize OK (service.pas), line = 2835
 13840
 13841 7C29 AC 8C A0			ldy X
 13842 7C2C B9 00 C5			lda adr.SCANLINE,y
 13843 7C2F			l_29EE
 13844 7C2F 99 00 C2			sta adr.TMP,y
 13845
 13846 				; --- ForToDoEpilog
 13847 7C32 EE 8C A0			inc X
 13848 7C35 D0 DD			jne l_29B5
 13849 7C37			l_29C3
 13850
 13851 				; optimize OK (service.pas), line = 2838
 13852
 13853 7C37 AD D8 9E			lda HLP
 13854 7C3A 8D F9 9E			sta BLITTMP.DST
 13855 7C3D A9 50			lda #$50
 13856 7C3F 18 6D D9 9E			add HLP+1
 13857 7C43 8D FA 9E			sta BLITTMP.DST+1
 13858 7C46 A9 00			lda #$00
 13859 7C48 69 00			adc #$00
 13860 7C4A 8D FB 9E			sta BLITTMP.DST+2
 13861 7C4D A9 00			lda #$00
 13862 7C4F 69 00			adc #$00
 13863 7C51 8D FC 9E			sta BLITTMP.DST+3
 13864 7C54 AD 0D 9E			lda NEWVAUS.WIDTH
 13865 7C57 8D FD 9E			sta BLITTMP.SIZE
 13866 7C5A 20 E9 3B			jsr BLITTMP
 13867
 13868 				; --- ForToDoEpilog
 13869 7C5D EE 8D A0			inc Y
 13870 7C60 F0 03 4C 05 7B		jne l_2951
 13871 7C65			l_295F
 13872
 13873 				; optimize OK (service.pas), line = 2841
 13874
 13875 7C65 A9 01			lda #$01
 13876 7C67 8D 12 9F			sta MYDELAY.A
 13877 7C6A A9 00			lda #$00
 13878 7C6C 8D 13 9F			sta MYDELAY.A+1
 13879 7C6F 20 E5 3C			jsr MYDELAY
 13880
 13881 				; --- ForToDoEpilog
 13882 7C72 CE 8E A0			dec W
 13883 7C75 30 03 4C 00 7B		jpl l_293A
 13884 7C7A			l_2948
 13885
 13886 				; ------------------------------------------------------------
 13887
 13888 = A08C			X	= DATAORIGIN+$03BA
 13889 = A08D			Y	= DATAORIGIN+$03BB
 13890 = A08E			W	= DATAORIGIN+$03BC
 13891 = A08F			Z	= DATAORIGIN+$03BD
 13892 = A091			A	= DATAORIGIN+$03BF
 13893 = A093			B	= DATAORIGIN+$03C1
 13894
 13895 = A08C			@VarData	= X
 13896 = 0009			@VarDataSize	= 9
 13897
 13898 7C7A			@exit
 13899 					.ifdef @new
 13900 					lda <@VarData
 13901 					sta :ztmp
 13902 					lda >@VarData
 13903 					ldy #@VarDataSize-1
 13904 					jmp @FreeMem
 13905 					els
 13906 7C7A 60				rts						; ret
 13907 					eif
 13908 				.endl
 13909
 13910 7C7B			.local	PUT_DIGIT					; PROCEDURE
 13911
 13912 				; optimize OK (service.pas), line = 2851
 13913
 13914 7C7B A9 DE			lda #$DE
 13915 7C7D 8D 9C A0			sta A
 13916
 13917 				; optimize OK (service.pas), line = 2873
 13918
 13919 7C80 AC 99 A0			ldy NUM
 13920 7C83 B9 96 20			lda adr.DIGITS,y
 13921 7C86 29 01			and #$01
 13922 7C88 C9 01			cmp #$01
 13923 7C8A D0 05			jne l_2A35
 13924 7C8C A9 DF			lda #$DF
 13925 7C8E 8D 9C A0			sta A
 13926 7C91			l_2A35
 13927
 13928 				; optimize OK (service.pas), line = 2874
 13929
 13930 7C91 A9 01			lda #$01
 13931 7C93 8D 9A A0			sta X
 13932
 13933 7C96			l_2A45
 13934 				; --- ForToDoCondition
 13935 7C96 AD 9A A0			lda X
 13936 7C99 C9 05			cmp #$05
 13937 7C9B B0 63			jcs l_2A53
 13938
 13939 				; optimize OK (service.pas), line = 2876
 13940
 13941 7C9D AD 96 A0			lda PX
 13942 7CA0 85 A0			sta :STACKORIGIN+10
 13943 7CA2 A9 50			lda #$50
 13944 7CA4 18 6D 97 A0			add PX+1
 13945 7CA8 85 B0			sta :STACKORIGIN+STACKWIDTH+10
 13946 7CAA A9 00			lda #$00
 13947 7CAC 69 00			adc #$00
 13948 7CAE 85 C0			sta :STACKORIGIN+STACKWIDTH*2+10
 13949 7CB0 A9 00			lda #$00
 13950 7CB2 69 00			adc #$00
 13951 7CB4 85 D0			sta :STACKORIGIN+STACKWIDTH*3+10
 13952 7CB6 A5 A0			lda :STACKORIGIN+10
 13953 7CB8 18 6D 9A A0			add X
 13954 7CBC 85 A0			sta :STACKORIGIN+10
 13955 7CBE A5 B0			lda :STACKORIGIN+STACKWIDTH+10
 13956 7CC0 69 00			adc #$00
 13957 7CC2 85 B0			sta :STACKORIGIN+STACKWIDTH+10
 13958 7CC4 A5 C0			lda :STACKORIGIN+STACKWIDTH*2+10
 13959 7CC6 69 00			adc #$00
 13960 7CC8 85 C0			sta :STACKORIGIN+STACKWIDTH*2+10
 13961 7CCA A5 D0			lda :STACKORIGIN+STACKWIDTH*3+10
 13962 7CCC 69 00			adc #$00
 13963 7CCE 85 D0			sta :STACKORIGIN+STACKWIDTH*3+10
 13964 7CD0 AC 98 A0			ldy PY
 13965 7CD3 A5 A0			lda :STACKORIGIN+10
 13966 7CD5 18 79 00 C0			add adr.ROW,y
 13967 7CD9 8D 08 9F			sta PUTBYTE.DST
 13968 7CDC A5 B0			lda :STACKORIGIN+STACKWIDTH+10
 13969 7CDE 79 00 C1			adc adr.ROW+256,y
 13970 7CE1 8D 09 9F			sta PUTBYTE.DST+1
 13971 7CE4 A5 C0			lda :STACKORIGIN+STACKWIDTH*2+10
 13972 7CE6 69 00			adc #$00
 13973 7CE8 8D 0A 9F			sta PUTBYTE.DST+2
 13974 7CEB A5 D0			lda :STACKORIGIN+STACKWIDTH*3+10
 13975 7CED 69 00			adc #$00
 13976 7CEF 8D 0B 9F			sta PUTBYTE.DST+3
 13977 7CF2 AD 9C A0			lda A
 13978 7CF5 8D 0C 9F			sta PUTBYTE.V
 13979 7CF8 20 94 3C			jsr PUTBYTE
 13980
 13981 				; --- ForToDoEpilog
 13982 7CFB EE 9A A0			inc X
 13983 7CFE D0 96			jne l_2A45
 13984 7D00			l_2A53
 13985
 13986 				; optimize OK (service.pas), line = 2880
 13987
 13988 7D00 A9 DE			lda #$DE
 13989 7D02 8D 9C A0			sta A
 13990
 13991 				; optimize OK (service.pas), line = 2881
 13992
 13993 7D05 AC 99 A0			ldy NUM
 13994 7D08 B9 96 20			lda adr.DIGITS,y
 13995 7D0B 29 02			and #$02
 13996 7D0D C9 02			cmp #$02
 13997 7D0F D0 05			jne l_2A8D
 13998 7D11 A9 DF			lda #$DF
 13999 7D13 8D 9C A0			sta A
 14000 7D16			l_2A8D
 14001
 14002 				; optimize OK (service.pas), line = 2882
 14003
 14004 7D16 A9 01			lda #$01
 14005 7D18 8D 9A A0			sta X
 14006
 14007 7D1B			l_2A9D
 14008 				; --- ForToDoCondition
 14009 7D1B AD 9A A0			lda X
 14010 7D1E C9 05			cmp #$05
 14011 7D20 B0 63			jcs l_2AAB
 14012
 14013 				; optimize OK (service.pas), line = 2884
 14014
 14015 7D22 AD 96 A0			lda PX
 14016 7D25 85 A0			sta :STACKORIGIN+10
 14017 7D27 A9 50			lda #$50
 14018 7D29 18 6D 97 A0			add PX+1
 14019 7D2D 85 B0			sta :STACKORIGIN+STACKWIDTH+10
 14020 7D2F A9 00			lda #$00
 14021 7D31 69 00			adc #$00
 14022 7D33 85 C0			sta :STACKORIGIN+STACKWIDTH*2+10
 14023 7D35 A9 00			lda #$00
 14024 7D37 69 00			adc #$00
 14025 7D39 85 D0			sta :STACKORIGIN+STACKWIDTH*3+10
 14026 7D3B A5 A0			lda :STACKORIGIN+10
 14027 7D3D 18 6D 9A A0			add X
 14028 7D41 85 A0			sta :STACKORIGIN+10
 14029 7D43 A5 B0			lda :STACKORIGIN+STACKWIDTH+10
 14030 7D45 69 00			adc #$00
 14031 7D47 85 B0			sta :STACKORIGIN+STACKWIDTH+10
 14032 7D49 A5 C0			lda :STACKORIGIN+STACKWIDTH*2+10
 14033 7D4B 69 00			adc #$00
 14034 7D4D 85 C0			sta :STACKORIGIN+STACKWIDTH*2+10
 14035 7D4F A5 D0			lda :STACKORIGIN+STACKWIDTH*3+10
 14036 7D51 69 00			adc #$00
 14037 7D53 85 D0			sta :STACKORIGIN+STACKWIDTH*3+10
 14038 7D55 AC 98 A0			ldy PY
 14039 7D58 A5 A0			lda :STACKORIGIN+10
 14040 7D5A 18 79 05 C0			add adr.ROW+$05,y
 14041 7D5E 8D 08 9F			sta PUTBYTE.DST
 14042 7D61 A5 B0			lda :STACKORIGIN+STACKWIDTH+10
 14043 7D63 79 05 C1			adc adr.ROW+256+$05,y
 14044 7D66 8D 09 9F			sta PUTBYTE.DST+1
 14045 7D69 A5 C0			lda :STACKORIGIN+STACKWIDTH*2+10
 14046 7D6B 69 00			adc #$00
 14047 7D6D 8D 0A 9F			sta PUTBYTE.DST+2
 14048 7D70 A5 D0			lda :STACKORIGIN+STACKWIDTH*3+10
 14049 7D72 69 00			adc #$00
 14050 7D74 8D 0B 9F			sta PUTBYTE.DST+3
 14051 7D77 AD 9C A0			lda A
 14052 7D7A 8D 0C 9F			sta PUTBYTE.V
 14053 7D7D 20 94 3C			jsr PUTBYTE
 14054
 14055 				; --- ForToDoEpilog
 14056 7D80 EE 9A A0			inc X
 14057 7D83 D0 96			jne l_2A9D
 14058 7D85			l_2AAB
 14059
 14060 				; optimize OK (service.pas), line = 2888
 14061
 14062 7D85 A9 DE			lda #$DE
 14063 7D87 8D 9C A0			sta A
 14064
 14065 				; optimize OK (service.pas), line = 2889
 14066
 14067 7D8A AC 99 A0			ldy NUM
 14068 7D8D B9 96 20			lda adr.DIGITS,y
 14069 7D90 29 04			and #$04
 14070 7D92 C9 04			cmp #$04
 14071 7D94 D0 05			jne l_2AE9
 14072 7D96 A9 DF			lda #$DF
 14073 7D98 8D 9C A0			sta A
 14074 7D9B			l_2AE9
 14075
 14076 				; optimize OK (service.pas), line = 2890
 14077
 14078 7D9B A9 01			lda #$01
 14079 7D9D 8D 9A A0			sta X
 14080
 14081 7DA0			l_2AF9
 14082 				; --- ForToDoCondition
 14083 7DA0 AD 9A A0			lda X
 14084 7DA3 C9 05			cmp #$05
 14085 7DA5 B0 63			jcs l_2B07
 14086
 14087 				; optimize OK (service.pas), line = 2892
 14088
 14089 7DA7 AD 96 A0			lda PX
 14090 7DAA 85 A0			sta :STACKORIGIN+10
 14091 7DAC A9 50			lda #$50
 14092 7DAE 18 6D 97 A0			add PX+1
 14093 7DB2 85 B0			sta :STACKORIGIN+STACKWIDTH+10
 14094 7DB4 A9 00			lda #$00
 14095 7DB6 69 00			adc #$00
 14096 7DB8 85 C0			sta :STACKORIGIN+STACKWIDTH*2+10
 14097 7DBA A9 00			lda #$00
 14098 7DBC 69 00			adc #$00
 14099 7DBE 85 D0			sta :STACKORIGIN+STACKWIDTH*3+10
 14100 7DC0 A5 A0			lda :STACKORIGIN+10
 14101 7DC2 18 6D 9A A0			add X
 14102 7DC6 85 A0			sta :STACKORIGIN+10
 14103 7DC8 A5 B0			lda :STACKORIGIN+STACKWIDTH+10
 14104 7DCA 69 00			adc #$00
 14105 7DCC 85 B0			sta :STACKORIGIN+STACKWIDTH+10
 14106 7DCE A5 C0			lda :STACKORIGIN+STACKWIDTH*2+10
 14107 7DD0 69 00			adc #$00
 14108 7DD2 85 C0			sta :STACKORIGIN+STACKWIDTH*2+10
 14109 7DD4 A5 D0			lda :STACKORIGIN+STACKWIDTH*3+10
 14110 7DD6 69 00			adc #$00
 14111 7DD8 85 D0			sta :STACKORIGIN+STACKWIDTH*3+10
 14112 7DDA AC 98 A0			ldy PY
 14113 7DDD A5 A0			lda :STACKORIGIN+10
 14114 7DDF 18 79 0A C0			add adr.ROW+$0A,y
 14115 7DE3 8D 08 9F			sta PUTBYTE.DST
 14116 7DE6 A5 B0			lda :STACKORIGIN+STACKWIDTH+10
 14117 7DE8 79 0A C1			adc adr.ROW+256+$0A,y
 14118 7DEB 8D 09 9F			sta PUTBYTE.DST+1
 14119 7DEE A5 C0			lda :STACKORIGIN+STACKWIDTH*2+10
 14120 7DF0 69 00			adc #$00
 14121 7DF2 8D 0A 9F			sta PUTBYTE.DST+2
 14122 7DF5 A5 D0			lda :STACKORIGIN+STACKWIDTH*3+10
 14123 7DF7 69 00			adc #$00
 14124 7DF9 8D 0B 9F			sta PUTBYTE.DST+3
 14125 7DFC AD 9C A0			lda A
 14126 7DFF 8D 0C 9F			sta PUTBYTE.V
 14127 7E02 20 94 3C			jsr PUTBYTE
 14128
 14129 				; --- ForToDoEpilog
 14130 7E05 EE 9A A0			inc X
 14131 7E08 D0 96			jne l_2AF9
 14132 7E0A			l_2B07
 14133
 14134 				; optimize OK (service.pas), line = 2895
 14135
 14136 7E0A A9 DE			lda #$DE
 14137 7E0C 8D 9C A0			sta A
 14138
 14139 				; optimize OK (service.pas), line = 2896
 14140
 14141 7E0F AC 99 A0			ldy NUM
 14142 7E12 B9 96 20			lda adr.DIGITS,y
 14143 7E15 29 08			and #$08
 14144 7E17 C9 08			cmp #$08
 14145 7E19 D0 05			jne l_2B45
 14146 7E1B A9 DF			lda #$DF
 14147 7E1D 8D 9C A0			sta A
 14148 7E20			l_2B45
 14149
 14150 				; optimize OK (service.pas), line = 2897
 14151
 14152 7E20 A9 01			lda #$01
 14153 7E22 8D 9B A0			sta Y
 14154
 14155 7E25			l_2B55
 14156 				; --- ForToDoCondition
 14157 7E25 AD 9B A0			lda Y
 14158 7E28 C9 05			cmp #$05
 14159 7E2A B0 4E			jcs l_2B63
 14160
 14161 				; optimize OK (service.pas), line = 2899
 14162
 14163 7E2C AD 96 A0			lda PX
 14164 7E2F 85 A0			sta :STACKORIGIN+10
 14165 7E31 A9 50			lda #$50
 14166 7E33 18 6D 97 A0			add PX+1
 14167 7E37 85 B0			sta :STACKORIGIN+STACKWIDTH+10
 14168 7E39 A9 00			lda #$00
 14169 7E3B 69 00			adc #$00
 14170 7E3D 85 C0			sta :STACKORIGIN+STACKWIDTH*2+10
 14171 7E3F A9 00			lda #$00
 14172 7E41 69 00			adc #$00
 14173 7E43 85 D0			sta :STACKORIGIN+STACKWIDTH*3+10
 14174 7E45 AD 98 A0			lda PY
 14175 7E48 18 6D 9B A0			add Y
 14176 7E4C A8				tay
 14177 7E4D A5 A0			lda :STACKORIGIN+10
 14178 7E4F 18 79 00 C0			add adr.ROW,y
 14179 7E53 8D 08 9F			sta PUTBYTE.DST
 14180 7E56 A5 B0			lda :STACKORIGIN+STACKWIDTH+10
 14181 7E58 79 00 C1			adc adr.ROW+256,y
 14182 7E5B 8D 09 9F			sta PUTBYTE.DST+1
 14183 7E5E A5 C0			lda :STACKORIGIN+STACKWIDTH*2+10
 14184 7E60 69 00			adc #$00
 14185 7E62 8D 0A 9F			sta PUTBYTE.DST+2
 14186 7E65 A5 D0			lda :STACKORIGIN+STACKWIDTH*3+10
 14187 7E67 69 00			adc #$00
 14188 7E69 8D 0B 9F			sta PUTBYTE.DST+3
 14189 7E6C AD 9C A0			lda A
 14190 7E6F 8D 0C 9F			sta PUTBYTE.V
 14191 7E72 20 94 3C			jsr PUTBYTE
 14192
 14193 				; --- ForToDoEpilog
 14194 7E75 EE 9B A0			inc Y
 14195 7E78 D0 AB			jne l_2B55
 14196 7E7A			l_2B63
 14197
 14198 				; optimize OK (service.pas), line = 2902
 14199
 14200 7E7A A9 DE			lda #$DE
 14201 7E7C 8D 9C A0			sta A
 14202
 14203 				; optimize OK (service.pas), line = 2903
 14204
 14205 7E7F AC 99 A0			ldy NUM
 14206 7E82 B9 96 20			lda adr.DIGITS,y
 14207 7E85 29 10			and #$10
 14208 7E87 C9 10			cmp #$10
 14209 7E89 D0 05			jne l_2B9D
 14210 7E8B A9 DF			lda #$DF
 14211 7E8D 8D 9C A0			sta A
 14212 7E90			l_2B9D
 14213
 14214 				; optimize OK (service.pas), line = 2904
 14215
 14216 7E90 A9 01			lda #$01
 14217 7E92 8D 9B A0			sta Y
 14218
 14219 7E95			l_2BAD
 14220 				; --- ForToDoCondition
 14221 7E95 AD 9B A0			lda Y
 14222 7E98 C9 05			cmp #$05
 14223 7E9A B0 4E			jcs l_2BBB
 14224
 14225 				; optimize OK (service.pas), line = 2906
 14226
 14227 7E9C AD 96 A0			lda PX
 14228 7E9F 85 A0			sta :STACKORIGIN+10
 14229 7EA1 A9 50			lda #$50
 14230 7EA3 18 6D 97 A0			add PX+1
 14231 7EA7 85 B0			sta :STACKORIGIN+STACKWIDTH+10
 14232 7EA9 A9 00			lda #$00
 14233 7EAB 69 00			adc #$00
 14234 7EAD 85 C0			sta :STACKORIGIN+STACKWIDTH*2+10
 14235 7EAF A9 00			lda #$00
 14236 7EB1 69 00			adc #$00
 14237 7EB3 85 D0			sta :STACKORIGIN+STACKWIDTH*3+10
 14238 7EB5 AD 98 A0			lda PY
 14239 7EB8 18 6D 9B A0			add Y
 14240 7EBC A8				tay
 14241 7EBD A5 A0			lda :STACKORIGIN+10
 14242 7EBF 18 79 05 C0			add adr.ROW+$05,y
 14243 7EC3 8D 08 9F			sta PUTBYTE.DST
 14244 7EC6 A5 B0			lda :STACKORIGIN+STACKWIDTH+10
 14245 7EC8 79 05 C1			adc adr.ROW+256+$05,y
 14246 7ECB 8D 09 9F			sta PUTBYTE.DST+1
 14247 7ECE A5 C0			lda :STACKORIGIN+STACKWIDTH*2+10
 14248 7ED0 69 00			adc #$00
 14249 7ED2 8D 0A 9F			sta PUTBYTE.DST+2
 14250 7ED5 A5 D0			lda :STACKORIGIN+STACKWIDTH*3+10
 14251 7ED7 69 00			adc #$00
 14252 7ED9 8D 0B 9F			sta PUTBYTE.DST+3
 14253 7EDC AD 9C A0			lda A
 14254 7EDF 8D 0C 9F			sta PUTBYTE.V
 14255 7EE2 20 94 3C			jsr PUTBYTE
 14256
 14257 				; --- ForToDoEpilog
 14258 7EE5 EE 9B A0			inc Y
 14259 7EE8 D0 AB			jne l_2BAD
 14260 7EEA			l_2BBB
 14261
 14262 				; optimize OK (service.pas), line = 2909
 14263
 14264 7EEA A9 DE			lda #$DE
 14265 7EEC 8D 9C A0			sta A
 14266
 14267 				; optimize OK (service.pas), line = 2910
 14268
 14269 7EEF AC 99 A0			ldy NUM
 14270 7EF2 B9 96 20			lda adr.DIGITS,y
 14271 7EF5 29 20			and #$20
 14272 7EF7 C9 20			cmp #$20
 14273 7EF9 D0 05			jne l_2BF9
 14274 7EFB A9 DF			lda #$DF
 14275 7EFD 8D 9C A0			sta A
 14276 7F00			l_2BF9
 14277
 14278 				; optimize OK (service.pas), line = 2911
 14279
 14280 7F00 A9 01			lda #$01
 14281 7F02 8D 9B A0			sta Y
 14282
 14283 7F05			l_2C09
 14284 				; --- ForToDoCondition
 14285 7F05 AD 9B A0			lda Y
 14286 7F08 C9 05			cmp #$05
 14287 7F0A B0 4F			jcs l_2C17
 14288
 14289 				; optimize OK (service.pas), line = 2913
 14290
 14291 7F0C A9 05			lda #$05
 14292 7F0E 6D 96 A0			adc PX
 14293 7F11 85 A0			sta :STACKORIGIN+10
 14294 7F13 A9 50			lda #$50
 14295 7F15 6D 97 A0			adc PX+1
 14296 7F18 85 B0			sta :STACKORIGIN+STACKWIDTH+10
 14297 7F1A A9 00			lda #$00
 14298 7F1C 69 00			adc #$00
 14299 7F1E 85 C0			sta :STACKORIGIN+STACKWIDTH*2+10
 14300 7F20 A9 00			lda #$00
 14301 7F22 69 00			adc #$00
 14302 7F24 85 D0			sta :STACKORIGIN+STACKWIDTH*3+10
 14303 7F26 AD 98 A0			lda PY
 14304 7F29 18 6D 9B A0			add Y
 14305 7F2D A8				tay
 14306 7F2E A5 A0			lda :STACKORIGIN+10
 14307 7F30 18 79 00 C0			add adr.ROW,y
 14308 7F34 8D 08 9F			sta PUTBYTE.DST
 14309 7F37 A5 B0			lda :STACKORIGIN+STACKWIDTH+10
 14310 7F39 79 00 C1			adc adr.ROW+256,y
 14311 7F3C 8D 09 9F			sta PUTBYTE.DST+1
 14312 7F3F A5 C0			lda :STACKORIGIN+STACKWIDTH*2+10
 14313 7F41 69 00			adc #$00
 14314 7F43 8D 0A 9F			sta PUTBYTE.DST+2
 14315 7F46 A5 D0			lda :STACKORIGIN+STACKWIDTH*3+10
 14316 7F48 69 00			adc #$00
 14317 7F4A 8D 0B 9F			sta PUTBYTE.DST+3
 14318 7F4D AD 9C A0			lda A
 14319 7F50 8D 0C 9F			sta PUTBYTE.V
 14320 7F53 20 94 3C			jsr PUTBYTE
 14321
 14322 				; --- ForToDoEpilog
 14323 7F56 EE 9B A0			inc Y
 14324 7F59 D0 AA			jne l_2C09
 14325 7F5B			l_2C17
 14326
 14327 				; optimize OK (service.pas), line = 2916
 14328
 14329 7F5B A9 DE			lda #$DE
 14330 7F5D 8D 9C A0			sta A
 14331
 14332 				; optimize OK (service.pas), line = 2917
 14333
 14334 7F60 AC 99 A0			ldy NUM
 14335 7F63 B9 96 20			lda adr.DIGITS,y
 14336 7F66 29 40			and #$40
 14337 7F68 C9 40			cmp #$40
 14338 7F6A D0 05			jne l_2C55
 14339 7F6C A9 DF			lda #$DF
 14340 7F6E 8D 9C A0			sta A
 14341 7F71			l_2C55
 14342
 14343 				; optimize OK (service.pas), line = 2918
 14344
 14345 7F71 A9 01			lda #$01
 14346 7F73 8D 9B A0			sta Y
 14347
 14348 7F76			l_2C65
 14349 				; --- ForToDoCondition
 14350 7F76 AD 9B A0			lda Y
 14351 7F79 C9 05			cmp #$05
 14352 7F7B B0 4F			jcs l_2C73
 14353
 14354 				; optimize OK (service.pas), line = 2920
 14355
 14356 7F7D A9 05			lda #$05
 14357 7F7F 6D 96 A0			adc PX
 14358 7F82 85 A0			sta :STACKORIGIN+10
 14359 7F84 A9 50			lda #$50
 14360 7F86 6D 97 A0			adc PX+1
 14361 7F89 85 B0			sta :STACKORIGIN+STACKWIDTH+10
 14362 7F8B A9 00			lda #$00
 14363 7F8D 69 00			adc #$00
 14364 7F8F 85 C0			sta :STACKORIGIN+STACKWIDTH*2+10
 14365 7F91 A9 00			lda #$00
 14366 7F93 69 00			adc #$00
 14367 7F95 85 D0			sta :STACKORIGIN+STACKWIDTH*3+10
 14368 7F97 AD 98 A0			lda PY
 14369 7F9A 18 6D 9B A0			add Y
 14370 7F9E A8				tay
 14371 7F9F A5 A0			lda :STACKORIGIN+10
 14372 7FA1 18 79 05 C0			add adr.ROW+$05,y
 14373 7FA5 8D 08 9F			sta PUTBYTE.DST
 14374 7FA8 A5 B0			lda :STACKORIGIN+STACKWIDTH+10
 14375 7FAA 79 05 C1			adc adr.ROW+256+$05,y
 14376 7FAD 8D 09 9F			sta PUTBYTE.DST+1
 14377 7FB0 A5 C0			lda :STACKORIGIN+STACKWIDTH*2+10
 14378 7FB2 69 00			adc #$00
 14379 7FB4 8D 0A 9F			sta PUTBYTE.DST+2
 14380 7FB7 A5 D0			lda :STACKORIGIN+STACKWIDTH*3+10
 14381 7FB9 69 00			adc #$00
 14382 7FBB 8D 0B 9F			sta PUTBYTE.DST+3
 14383 7FBE AD 9C A0			lda A
 14384 7FC1 8D 0C 9F			sta PUTBYTE.V
 14385 7FC4 20 94 3C			jsr PUTBYTE
 14386
 14387 				; --- ForToDoEpilog
 14388 7FC7 EE 9B A0			inc Y
 14389 7FCA D0 AA			jne l_2C65
 14390 7FCC			l_2C73
 14391
 14392 				; ------------------------------------------------------------
 14393
 14394 = A096			PX	= DATAORIGIN+$03C4
 14395 = A098			PY	= DATAORIGIN+$03C6
 14396 = A099			NUM	= DATAORIGIN+$03C7
 14397 = A09A			X	= DATAORIGIN+$03C8
 14398 = A09B			Y	= DATAORIGIN+$03C9
 14399 = A09C			A	= DATAORIGIN+$03CA
 14400
 14401 = A096			@VarData	= PX
 14402 = 0007			@VarDataSize	= 7
 14403
 14404 7FCC			@exit
 14405 					.ifdef @new
 14406 					lda <@VarData
 14407 					sta :ztmp
 14408 					lda >@VarData
 14409 					ldy #@VarDataSize-1
 14410 					jmp @FreeMem
 14411 					els
 14412 7FCC 60				rts						; ret
 14413 					eif
 14414 				.endl
 14415
 14416 7FCD			.local	WRITE_SCORE					; PROCEDURE
 14417
 14418 				; optimize OK (service.pas), line = 2931
 14419
 14420 7FCD A9 00			lda #$00
 14421 7FCF 8D A5 A0			sta F
 14422
 14423 				; optimize OK (service.pas), line = 2936
 14424
 14425 7FD2 A9 A0			lda #$A0
 14426 7FD4 85 8E			sta @CARDINAL.DIV.B
 14427 7FD6 A9 86			lda #$86
 14428 7FD8 85 8F			sta @CARDINAL.DIV.B+1
 14429 7FDA A9 01			lda #$01
 14430 7FDC 85 90			sta @CARDINAL.DIV.B+2
 14431 7FDE A9 00			lda #$00
 14432 7FE0 85 91			sta @CARDINAL.DIV.B+3
 14433 7FE2 AD A0 A0			lda SC
 14434 7FE5 85 86			sta @CARDINAL.DIV.A
 14435 7FE7 AD A1 A0			lda SC+1
 14436 7FEA 85 87			sta @CARDINAL.DIV.A+1
 14437 7FEC AD A2 A0			lda SC+2
 14438 7FEF 85 88			sta @CARDINAL.DIV.A+2
 14439 7FF1 AD A3 A0			lda SC+3
 14440 7FF4 85 89			sta @CARDINAL.DIV.A+3
 14441 7FF6 20 56 23			jsr @CARDINAL.DIV
 14442 7FF9 A9 0A			lda #$0A
 14443 7FFB 85 8E			sta @CARDINAL.MOD.B
 14444 7FFD A9 00			lda #$00
 14445 7FFF 85 8F			sta @CARDINAL.MOD.B+1
 14446 8001 85 90			sta @CARDINAL.MOD.B+2
 14447 8003 85 91			sta @CARDINAL.MOD.B+3
 14448 8005 20 56 23			jsr @CARDINAL.MOD
 14449 8008 A5 8A			lda @CARDINAL.MOD.RESULT
 14450 800A 8D A4 A0			sta N1
 14451
 14452 				; optimize OK (service.pas), line = 2937
 14453
 14454 800D F0 05			jeq l_2CBE
 14455 800F A9 01			lda #$01
 14456 8011 8D A5 A0			sta F
 14457 8014			l_2CBE
 14458
 14459 				; optimize OK (service.pas), line = 2938
 14460
 14461 8014 AD A5 A0			lda F
 14462 8017 F0 18			jeq l_2CD1
 14463 8019 AD 9D A0			lda PX
 14464 801C 8D 96 A0			sta PUT_DIGIT.PX
 14465 801F AD 9E A0			lda PX+1
 14466 8022 8D 97 A0			sta PUT_DIGIT.PX+1
 14467 8025 AD 9F A0			lda PY
 14468 8028 8D 98 A0			sta PUT_DIGIT.PY
 14469 802B AD A4 A0			lda N1
 14470 802E 4C 45 80			jmp l_2CE4
 14471 8031			l_2CD1
 14472
 14473 				; optimize OK (service.pas), line = 2939
 14474
 14475 8031 AD 9D A0			lda PX
 14476 8034 8D 96 A0			sta PUT_DIGIT.PX
 14477 8037 AD 9E A0			lda PX+1
 14478 803A 8D 97 A0			sta PUT_DIGIT.PX+1
 14479 803D AD 9F A0			lda PY
 14480 8040 8D 98 A0			sta PUT_DIGIT.PY
 14481 8043 A9 0A			lda #$0A
 14482 8045			l_2CE4
 14483 8045 8D 99 A0			sta PUT_DIGIT.NUM
 14484 8048 20 7B 7C			jsr PUT_DIGIT
 14485
 14486 				; optimize OK (service.pas), line = 2942
 14487
 14488 804B A9 10			lda #$10
 14489 804D 85 8E			sta @CARDINAL.DIV.B
 14490 804F A9 27			lda #$27
 14491 8051 85 8F			sta @CARDINAL.DIV.B+1
 14492 8053 A9 00			lda #$00
 14493 8055 85 90			sta @CARDINAL.DIV.B+2
 14494 8057 85 91			sta @CARDINAL.DIV.B+3
 14495 8059 AD A0 A0			lda SC
 14496 805C 85 86			sta @CARDINAL.DIV.A
 14497 805E AD A1 A0			lda SC+1
 14498 8061 85 87			sta @CARDINAL.DIV.A+1
 14499 8063 AD A2 A0			lda SC+2
 14500 8066 85 88			sta @CARDINAL.DIV.A+2
 14501 8068 AD A3 A0			lda SC+3
 14502 806B 85 89			sta @CARDINAL.DIV.A+3
 14503 806D 20 56 23			jsr @CARDINAL.DIV
 14504 8070 A9 0A			lda #$0A
 14505 8072 85 8E			sta @CARDINAL.MOD.B
 14506 8074 A9 00			lda #$00
 14507 8076 85 8F			sta @CARDINAL.MOD.B+1
 14508 8078 85 90			sta @CARDINAL.MOD.B+2
 14509 807A 85 91			sta @CARDINAL.MOD.B+3
 14510 807C 20 56 23			jsr @CARDINAL.MOD
 14511 807F A5 8A			lda @CARDINAL.MOD.RESULT
 14512 8081 8D A4 A0			sta N1
 14513
 14514 				; optimize OK (service.pas), line = 2943
 14515
 14516 8084 F0 05			jeq l_2D09
 14517 8086 A9 01			lda #$01
 14518 8088 8D A5 A0			sta F
 14519 808B			l_2D09
 14520
 14521 				; optimize OK (service.pas), line = 2944
 14522
 14523 808B AD A5 A0			lda F
 14524 808E F0 1D			jeq l_2D1C
 14525 8090 AD 9D A0			lda PX
 14526 8093 18 69 07			add #$07
 14527 8096 8D 96 A0			sta PUT_DIGIT.PX
 14528 8099 AD 9E A0			lda PX+1
 14529 809C 69 00			adc #$00
 14530 809E 8D 97 A0			sta PUT_DIGIT.PX+1
 14531 80A1 AD 9F A0			lda PY
 14532 80A4 8D 98 A0			sta PUT_DIGIT.PY
 14533 80A7 AD A4 A0			lda N1
 14534 80AA 4C C6 80			jmp l_2D33
 14535 80AD			l_2D1C
 14536
 14537 				; optimize OK (service.pas), line = 2945
 14538
 14539 80AD AD 9D A0			lda PX
 14540 80B0 18 69 07			add #$07
 14541 80B3 8D 96 A0			sta PUT_DIGIT.PX
 14542 80B6 AD 9E A0			lda PX+1
 14543 80B9 69 00			adc #$00
 14544 80BB 8D 97 A0			sta PUT_DIGIT.PX+1
 14545 80BE AD 9F A0			lda PY
 14546 80C1 8D 98 A0			sta PUT_DIGIT.PY
 14547 80C4 A9 0A			lda #$0A
 14548 80C6			l_2D33
 14549 80C6 8D 99 A0			sta PUT_DIGIT.NUM
 14550 80C9 20 7B 7C			jsr PUT_DIGIT
 14551
 14552 				; optimize OK (service.pas), line = 2948
 14553
 14554 80CC A9 E8			lda #$E8
 14555 80CE 85 8E			sta @CARDINAL.DIV.B
 14556 80D0 A9 03			lda #$03
 14557 80D2 85 8F			sta @CARDINAL.DIV.B+1
 14558 80D4 A9 00			lda #$00
 14559 80D6 85 90			sta @CARDINAL.DIV.B+2
 14560 80D8 85 91			sta @CARDINAL.DIV.B+3
 14561 80DA AD A0 A0			lda SC
 14562 80DD 85 86			sta @CARDINAL.DIV.A
 14563 80DF AD A1 A0			lda SC+1
 14564 80E2 85 87			sta @CARDINAL.DIV.A+1
 14565 80E4 AD A2 A0			lda SC+2
 14566 80E7 85 88			sta @CARDINAL.DIV.A+2
 14567 80E9 AD A3 A0			lda SC+3
 14568 80EC 85 89			sta @CARDINAL.DIV.A+3
 14569 80EE 20 56 23			jsr @CARDINAL.DIV
 14570 80F1 A9 0A			lda #$0A
 14571 80F3 85 8E			sta @CARDINAL.MOD.B
 14572 80F5 A9 00			lda #$00
 14573 80F7 85 8F			sta @CARDINAL.MOD.B+1
 14574 80F9 85 90			sta @CARDINAL.MOD.B+2
 14575 80FB 85 91			sta @CARDINAL.MOD.B+3
 14576 80FD 20 56 23			jsr @CARDINAL.MOD
 14577 8100 A5 8A			lda @CARDINAL.MOD.RESULT
 14578 8102 8D A4 A0			sta N1
 14579
 14580 				; optimize OK (service.pas), line = 2949
 14581
 14582 8105 F0 05			jeq l_2D5C
 14583 8107 A9 01			lda #$01
 14584 8109 8D A5 A0			sta F
 14585 810C			l_2D5C
 14586
 14587 				; optimize OK (service.pas), line = 2950
 14588
 14589 810C AD A5 A0			lda F
 14590 810F F0 1D			jeq l_2D6F
 14591 8111 AD 9D A0			lda PX
 14592 8114 18 69 0E			add #$0E
 14593 8117 8D 96 A0			sta PUT_DIGIT.PX
 14594 811A AD 9E A0			lda PX+1
 14595 811D 69 00			adc #$00
 14596 811F 8D 97 A0			sta PUT_DIGIT.PX+1
 14597 8122 AD 9F A0			lda PY
 14598 8125 8D 98 A0			sta PUT_DIGIT.PY
 14599 8128 AD A4 A0			lda N1
 14600 812B 4C 47 81			jmp l_2D86
 14601 812E			l_2D6F
 14602
 14603 				; optimize OK (service.pas), line = 2951
 14604
 14605 812E AD 9D A0			lda PX
 14606 8131 18 69 0E			add #$0E
 14607 8134 8D 96 A0			sta PUT_DIGIT.PX
 14608 8137 AD 9E A0			lda PX+1
 14609 813A 69 00			adc #$00
 14610 813C 8D 97 A0			sta PUT_DIGIT.PX+1
 14611 813F AD 9F A0			lda PY
 14612 8142 8D 98 A0			sta PUT_DIGIT.PY
 14613 8145 A9 0A			lda #$0A
 14614 8147			l_2D86
 14615 8147 8D 99 A0			sta PUT_DIGIT.NUM
 14616 814A 20 7B 7C			jsr PUT_DIGIT
 14617
 14618 				; optimize OK (service.pas), line = 2954
 14619
 14620 814D A9 64			lda #$64
 14621 814F 85 8E			sta @CARDINAL.DIV.B
 14622 8151 A9 00			lda #$00
 14623 8153 85 8F			sta @CARDINAL.DIV.B+1
 14624 8155 85 90			sta @CARDINAL.DIV.B+2
 14625 8157 85 91			sta @CARDINAL.DIV.B+3
 14626 8159 AD A0 A0			lda SC
 14627 815C 85 86			sta @CARDINAL.DIV.A
 14628 815E AD A1 A0			lda SC+1
 14629 8161 85 87			sta @CARDINAL.DIV.A+1
 14630 8163 AD A2 A0			lda SC+2
 14631 8166 85 88			sta @CARDINAL.DIV.A+2
 14632 8168 AD A3 A0			lda SC+3
 14633 816B 85 89			sta @CARDINAL.DIV.A+3
 14634 816D 20 56 23			jsr @CARDINAL.DIV
 14635 8170 A9 0A			lda #$0A
 14636 8172 85 8E			sta @CARDINAL.MOD.B
 14637 8174 A9 00			lda #$00
 14638 8176 85 8F			sta @CARDINAL.MOD.B+1
 14639 8178 85 90			sta @CARDINAL.MOD.B+2
 14640 817A 85 91			sta @CARDINAL.MOD.B+3
 14641 817C 20 56 23			jsr @CARDINAL.MOD
 14642 817F A5 8A			lda @CARDINAL.MOD.RESULT
 14643 8181 8D A4 A0			sta N1
 14644
 14645 				; optimize OK (service.pas), line = 2955
 14646
 14647 8184 F0 05			jeq l_2DAF
 14648 8186 A9 01			lda #$01
 14649 8188 8D A5 A0			sta F
 14650 818B			l_2DAF
 14651
 14652 				; optimize OK (service.pas), line = 2956
 14653
 14654 818B AD A5 A0			lda F
 14655 818E F0 1D			jeq l_2DC2
 14656 8190 AD 9D A0			lda PX
 14657 8193 18 69 15			add #$15
 14658 8196 8D 96 A0			sta PUT_DIGIT.PX
 14659 8199 AD 9E A0			lda PX+1
 14660 819C 69 00			adc #$00
 14661 819E 8D 97 A0			sta PUT_DIGIT.PX+1
 14662 81A1 AD 9F A0			lda PY
 14663 81A4 8D 98 A0			sta PUT_DIGIT.PY
 14664 81A7 AD A4 A0			lda N1
 14665 81AA 4C C6 81			jmp l_2DD9
 14666 81AD			l_2DC2
 14667
 14668 				; optimize OK (service.pas), line = 2957
 14669
 14670 81AD AD 9D A0			lda PX
 14671 81B0 18 69 15			add #$15
 14672 81B3 8D 96 A0			sta PUT_DIGIT.PX
 14673 81B6 AD 9E A0			lda PX+1
 14674 81B9 69 00			adc #$00
 14675 81BB 8D 97 A0			sta PUT_DIGIT.PX+1
 14676 81BE AD 9F A0			lda PY
 14677 81C1 8D 98 A0			sta PUT_DIGIT.PY
 14678 81C4 A9 0A			lda #$0A
 14679 81C6			l_2DD9
 14680 81C6 8D 99 A0			sta PUT_DIGIT.NUM
 14681 81C9 20 7B 7C			jsr PUT_DIGIT
 14682
 14683 				; optimize OK (service.pas), line = 2960
 14684
 14685 81CC A9 0A			lda #$0A
 14686 81CE 85 8E			sta @CARDINAL.DIV.B
 14687 81D0 A9 00			lda #$00
 14688 81D2 85 8F			sta @CARDINAL.DIV.B+1
 14689 81D4 85 90			sta @CARDINAL.DIV.B+2
 14690 81D6 85 91			sta @CARDINAL.DIV.B+3
 14691 81D8 AD A0 A0			lda SC
 14692 81DB 85 86			sta @CARDINAL.DIV.A
 14693 81DD AD A1 A0			lda SC+1
 14694 81E0 85 87			sta @CARDINAL.DIV.A+1
 14695 81E2 AD A2 A0			lda SC+2
 14696 81E5 85 88			sta @CARDINAL.DIV.A+2
 14697 81E7 AD A3 A0			lda SC+3
 14698 81EA 85 89			sta @CARDINAL.DIV.A+3
 14699 81EC 20 56 23			jsr @CARDINAL.DIV
 14700 81EF A9 0A			lda #$0A
 14701 81F1 85 8E			sta @CARDINAL.MOD.B
 14702 81F3 A9 00			lda #$00
 14703 81F5 85 8F			sta @CARDINAL.MOD.B+1
 14704 81F7 85 90			sta @CARDINAL.MOD.B+2
 14705 81F9 85 91			sta @CARDINAL.MOD.B+3
 14706 81FB 20 56 23			jsr @CARDINAL.MOD
 14707 81FE A5 8A			lda @CARDINAL.MOD.RESULT
 14708 8200 8D A4 A0			sta N1
 14709
 14710 				; optimize OK (service.pas), line = 2961
 14711
 14712 8203 AD 9D A0			lda PX
 14713 8206 18 69 1C			add #$1C
 14714 8209 8D 96 A0			sta PUT_DIGIT.PX
 14715 820C AD 9E A0			lda PX+1
 14716 820F 69 00			adc #$00
 14717 8211 8D 97 A0			sta PUT_DIGIT.PX+1
 14718 8214 AD 9F A0			lda PY
 14719 8217 8D 98 A0			sta PUT_DIGIT.PY
 14720 821A AD A4 A0			lda N1
 14721 821D 8D 99 A0			sta PUT_DIGIT.NUM
 14722 8220 20 7B 7C			jsr PUT_DIGIT
 14723
 14724 				; optimize OK (service.pas), line = 2965
 14725
 14726 8223 AD 9D A0			lda PX
 14727 8226 18 69 23			add #$23
 14728 8229 8D 96 A0			sta PUT_DIGIT.PX
 14729 822C AD 9E A0			lda PX+1
 14730 822F 69 00			adc #$00
 14731 8231 8D 97 A0			sta PUT_DIGIT.PX+1
 14732 8234 AD 9F A0			lda PY
 14733 8237 8D 98 A0			sta PUT_DIGIT.PY
 14734 823A A9 00			lda #$00
 14735 823C 8D 99 A0			sta PUT_DIGIT.NUM
 14736 823F 20 7B 7C			jsr PUT_DIGIT
 14737
 14738 				; ------------------------------------------------------------
 14739
 14740 = A09D			PX	= DATAORIGIN+$03CB
 14741 = A09F			PY	= DATAORIGIN+$03CD
 14742 = A0A0			SC	= DATAORIGIN+$03CE
 14743 = A0A4			N1	= DATAORIGIN+$03D2
 14744 = A0A5			F	= DATAORIGIN+$03D3
 14745
 14746 = A09D			@VarData	= PX
 14747 = 0009			@VarDataSize	= 9
 14748
 14749 8242			@exit
 14750 					.ifdef @new
 14751 					lda <@VarData
 14752 					sta :ztmp
 14753 					lda >@VarData
 14754 					ldy #@VarDataSize-1
 14755 					jmp @FreeMem
 14756 					els
 14757 8242 60				rts						; ret
 14758 					eif
 14759 				.endl
 14760
 14761 8243			.local	PLOT_LIVES					; PROCEDURE
 14762
 14763 				; optimize FAIL (0, service.pas), line = 3012
 14764
 14765 8243 AD A6 A0			lda LIVES
 14766 8246 D0 03			bne @+
 14767 8248 CE A7 A0			dec LIVES+1
 14768 				@
 14769 824B CE A6 A0			dec LIVES
 14770
 14771 				; optimize OK (service.pas), line = 3015
 14772
 14773 824E A9 00			lda #$00
 14774 8250 8D AA A0			sta CN
 14775
 14776 8253			l_2E1D
 14777 				; --- ForToDoCondition
 14778 8253 AD AA A0			lda CN
 14779 8256 C9 08			cmp #$08
 14780 8258 90 03 4C DF 84		jcs l_2E2B
 14781
 14782 				; optimize OK (service.pas), line = 3016
 14783
 14784 825D A9 00			lda #$00
 14785 825F 8D A9 A0			sta Y
 14786 8262 AC 2F 9E			ldy MINIVAUS.HEIGHT
 14787 8265 88				dey
 14788 8266 8C 6A 82			sty @FORTMP_2E36_0
 14789
 14790 8269			l_2E39
 14791 				; --- ForToDoCondition
 14792 8269 A9 00			lda @FORTMP_2E36_0::#$00
 14793 826B CD A9 A0			cmp Y
 14794 826E B0 03 4C D7 84		jcc l_2E47
 14795
 14796 				; optimize OK (service.pas), line = 3018
 14797
 14798 8273 AD 2D 9E			lda MINIVAUS.WIDTH
 14799 8276 85 8E			sta :ecx
 14800 8278 AD 2E 9E			lda MINIVAUS.WIDTH+1
 14801 827B 85 8F			sta :ecx+1
 14802 827D AD A9 A0			lda Y
 14803 8280 85 86			sta :eax
 14804 8282 A9 00			lda #$00
 14805 8284 85 87			sta :eax+1
 14806 					.ifdef fmulinit
 14807 					fmulu_16
 14808 					els
 14809 8286 20 CF 22			imulCX_AL
 14810 					eif
 14811 8289 AD 31 9E			lda MINIVAUS.OFS
 14812 828C 18 65 86			add :eax
 14813 828F 8D B1 9D			sta VBXE_RAM.POSITION
 14814 8292 AD 32 9E			lda MINIVAUS.OFS+1
 14815 8295 65 87			adc :eax+1
 14816 8297 8D B2 9D			sta VBXE_RAM.POSITION+1
 14817 829A AD 33 9E			lda MINIVAUS.OFS+2
 14818 829D 65 88			adc :eax+2
 14819 829F 8D B3 9D			sta VBXE_RAM.POSITION+2
 14820 82A2 AD 34 9E			lda MINIVAUS.OFS+3
 14821 82A5 65 89			adc :eax+3
 14822 82A7 8D B4 9D			sta VBXE_RAM.POSITION+3
 14823
 14824 				; optimize OK (service.pas), line = 3019
 14825
 14826 82AA AD 8F 9C			lda SCANLINE
 14827 82AD 8D 57 9D			sta VBXE.TVBXEMEMORYSTREAM.READBUFFER.BUFFER
 14828 82B0 AD 90 9C			lda SCANLINE+1
 14829 82B3 8D 58 9D			sta VBXE.TVBXEMEMORYSTREAM.READBUFFER.BUFFER+1
 14830 82B6 AD 2D 9E			lda MINIVAUS.WIDTH
 14831 82B9 8D 59 9D			sta VBXE.TVBXEMEMORYSTREAM.READBUFFER.COUNT
 14832 82BC AD 2E 9E			lda MINIVAUS.WIDTH+1
 14833 82BF 8D 5A 9D			sta VBXE.TVBXEMEMORYSTREAM.READBUFFER.COUNT+1
 14834 82C2 AD 37 9C			lda VBXE_RAM
 14835 82C5 AC 38 9C			ldy VBXE_RAM+1
 14836 82C8 20 44 34			jsr VBXE.TVBXEMEMORYSTREAM.READBUFFER
 14837
 14838 				; optimize OK (service.pas), line = 3021
 14839
 14840 82CB AD A9 A0			lda Y
 14841 82CE 18 69 C0			add #$C0
 14842 82D1 8D B1 A0			sta YL
 14843 82D4 A9 00			lda #$00
 14844 82D6 69 00			adc #$00
 14845 82D8 8D B2 A0			sta YL+1
 14846
 14847 				; optimize OK (service.pas), line = 3023
 14848
 14849 82DB AD 2D 9E			lda MINIVAUS.WIDTH
 14850 82DE 85 8E			sta :ecx
 14851 82E0 AD 2E 9E			lda MINIVAUS.WIDTH+1
 14852 82E3 85 8F			sta :ecx+1
 14853 82E5 AD AA A0			lda CN
 14854 82E8 85 86			sta :eax
 14855 82EA A9 00			lda #$00
 14856 82EC 85 87			sta :eax+1
 14857 					.ifdef fmulinit
 14858 					fmulu_16
 14859 					els
 14860 82EE 20 CF 22			imulCX_AL
 14861 					eif
 14862 82F1 A5 86			lda :eax
 14863 82F3 18 69 0B			add #$0B
 14864 82F6 8D D8 9E			sta HLP
 14865 82F9 A5 87			lda :eax+1
 14866 82FB 69 00			adc #$00
 14867 82FD 8D D9 9E			sta HLP+1
 14868
 14869 				; optimize OK (service.pas), line = 3026
 14870
 14871 8300 AD E1 9D			lda PLAYSCREEN.OFS
 14872 8303 18 6D D8 9E			add HLP
 14873 8307 85 9F			sta :STACKORIGIN+9
 14874 8309 AD E2 9D			lda PLAYSCREEN.OFS+1
 14875 830C 6D D9 9E			adc HLP+1
 14876 830F 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 14877 8311 AD E3 9D			lda PLAYSCREEN.OFS+2
 14878 8314 69 00			adc #$00
 14879 8316 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
 14880 8318 AD E4 9D			lda PLAYSCREEN.OFS+3
 14881 831B 69 00			adc #$00
 14882 831D 85 CF			sta :STACKORIGIN+STACKWIDTH*3+9
 14883 831F AC B1 A0			ldy YL
 14884 8322 A5 9F			lda :STACKORIGIN+9
 14885 8324 18 79 00 C0			add adr.ROW,y
 14886 8328 8D B1 9D			sta VBXE_RAM.POSITION
 14887 832B A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 14888 832D 79 00 C1			adc adr.ROW+256,y
 14889 8330 8D B2 9D			sta VBXE_RAM.POSITION+1
 14890 8333 A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
 14891 8335 69 00			adc #$00
 14892 8337 8D B3 9D			sta VBXE_RAM.POSITION+2
 14893 833A A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
 14894 833C 69 00			adc #$00
 14895 833E 8D B4 9D			sta VBXE_RAM.POSITION+3
 14896
 14897 				; optimize OK (service.pas), line = 3027
 14898
 14899 8341 AD 91 9C			lda SCANLINE2
 14900 8344 8D 57 9D			sta VBXE.TVBXEMEMORYSTREAM.READBUFFER.BUFFER
 14901 8347 AD 92 9C			lda SCANLINE2+1
 14902 834A 8D 58 9D			sta VBXE.TVBXEMEMORYSTREAM.READBUFFER.BUFFER+1
 14903 834D AD 2D 9E			lda MINIVAUS.WIDTH
 14904 8350 8D 59 9D			sta VBXE.TVBXEMEMORYSTREAM.READBUFFER.COUNT
 14905 8353 AD 2E 9E			lda MINIVAUS.WIDTH+1
 14906 8356 8D 5A 9D			sta VBXE.TVBXEMEMORYSTREAM.READBUFFER.COUNT+1
 14907 8359 AD 37 9C			lda VBXE_RAM
 14908 835C AC 38 9C			ldy VBXE_RAM+1
 14909 835F 20 44 34			jsr VBXE.TVBXEMEMORYSTREAM.READBUFFER
 14910
 14911 				; optimize OK (service.pas), line = 3030
 14912
 14913 8362 A9 00			lda #$00
 14914 8364 8D A8 A0			sta X
 14915 8367 AC 2D 9E			ldy MINIVAUS.WIDTH
 14916 836A 88				dey
 14917 836B 8C 6F 83			sty @FORTMP_2E94_0
 14918
 14919 836E			l_2E97
 14920 				; --- ForToDoCondition
 14921 836E A9 00			lda @FORTMP_2E94_0::#$00
 14922 8370 CD A8 A0			cmp X
 14923 8373 B0 03 4C 44 84		jcc l_2EA5
 14924
 14925 				; optimize OK (service.pas), line = 3032
 14926
 14927 8378 AD A8 A0			lda X
 14928 837B 18 6D D8 9E			add HLP
 14929 837F 8D AF A0			sta XL
 14930 8382 A9 00			lda #$00
 14931 8384 6D D9 9E			adc HLP+1
 14932 8387 8D B0 A0			sta XL+1
 14933
 14934 				; optimize OK (service.pas), line = 3034
 14935
 14936 838A AC AF A0			ldy XL
 14937 838D B9 00 C4			lda adr.MODX,y
 14938 8390 8D AB A0			sta XP
 14939 8393 A9 00			lda #$00
 14940 8395 8D AC A0			sta XP+1
 14941
 14942 				; optimize OK (service.pas), line = 3035
 14943
 14944 8398 AC B1 A0			ldy YL
 14945 839B B9 00 C3			lda adr.MODY,y
 14946 839E 85 86			sta :eax
 14947 83A0 A9 00			lda #$00
 14948 83A2 85 87			sta :eax+1
 14949 83A4 AD 62 9E			lda PATTERN.WIDTH
 14950 83A7 85 8E			sta :ecx
 14951 83A9 AD 63 9E			lda PATTERN.WIDTH+1
 14952 83AC 85 8F			sta :ecx+1
 14953 					.ifdef fmulinit
 14954 					fmulu_16
 14955 					els
 14956 83AE 20 CF 22			imulCX_AL
 14957 					eif
 14958 83B1 A5 86			lda :eax
 14959 83B3 8D AD A0			sta YP
 14960 83B6 A5 87			lda :eax+1
 14961 83B8 8D AE A0			sta YP+1
 14962
 14963 				; optimize OK (service.pas), line = 3039
 14964
 14965 83BB AD AA A0			lda CN
 14966 83BE CD A6 A0			cmp LIVES
 14967 83C1 A9 00			lda #$00
 14968 83C3 ED A7 A0			sbc LIVES+1
 14969 83C6 50 02			svc
 14970 83C8 49 80			eor #$80
 14971 83CA 10 0E			jpl l_2EE7
 14972 83CC AC A8 A0			ldy X
 14973 83CF B9 00 C5			lda adr.SCANLINE,y
 14974 83D2 F0 06			jeq l_2EE7
 14975
 14976 				; optimize OK (service.pas), line = 3043
 14977
 14978 83D4 8D B4 A0			sta CL
 14979
 14980 				; optimize OK (service.pas), line = 3051
 14981
 14982 83D7 4C 36 84			jmp l_2F03
 14983 83DA			l_2EE7
 14984
 14985 				; optimize OK (service.pas), line = 3061
 14986
 14987 83DA AC A8 A0			ldy X
 14988 83DD B9 80 C5			lda adr.SCANLINE2,y
 14989 83E0 29 80			and #$80
 14990 83E2 8D B3 A0			sta SHADOW
 14991
 14992 				; optimize OK (service.pas), line = 3064
 14993
 14994 83E5 AD 66 9E			lda PATTERN.OFS
 14995 83E8 18 6D AB A0			add XP
 14996 83EC 85 9F			sta :STACKORIGIN+9
 14997 83EE AD 67 9E			lda PATTERN.OFS+1
 14998 83F1 6D AC A0			adc XP+1
 14999 83F4 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 15000 83F6 AD 68 9E			lda PATTERN.OFS+2
 15001 83F9 69 00			adc #$00
 15002 83FB 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
 15003 83FD AD 69 9E			lda PATTERN.OFS+3
 15004 8400 69 00			adc #$00
 15005 8402 85 CF			sta :STACKORIGIN+STACKWIDTH*3+9
 15006 8404 A5 9F			lda :STACKORIGIN+9
 15007 8406 18 6D AD A0			add YP
 15008 840A 8D 0D 9F			sta GETBYTE.SRC
 15009 840D A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 15010 840F 6D AE A0			adc YP+1
 15011 8412 8D 0E 9F			sta GETBYTE.SRC+1
 15012 8415 A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
 15013 8417 69 00			adc #$00
 15014 8419 8D 0F 9F			sta GETBYTE.SRC+2
 15015 841C A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
 15016 841E 69 00			adc #$00
 15017 8420 8D 10 9F			sta GETBYTE.SRC+3
 15018 8423 20 BC 3C			jsr GETBYTE
 15019 8426 E8				inx
 15020 8427 AD 11 9F			lda GETBYTE.RESULT
 15021 842A 29 7F			and #$7F
 15022 842C 0D B3 A0			ora SHADOW
 15023 842F 8D B4 A0			sta CL
 15024 8432 CA				dex
 15025
 15026 				; optimize OK (service.pas), line = 3072
 15027
 15028 8433 AC A8 A0			ldy X
 15029 8436			l_2F03
 15030 8436 AD B4 A0			lda CL
 15031 8439 99 00 C2			sta adr.TMP,y
 15032
 15033 				; --- ForToDoEpilog
 15034 843C EE A8 A0			inc X
 15035 843F F0 03 4C 6E 83		jne l_2E97
 15036 8444			l_2EA5
 15037
 15038 				; optimize OK (service.pas), line = 3076
 15039
 15040 8444 AC B1 A0			ldy YL
 15041 8447 AD D8 9E			lda HLP
 15042 844A 18 79 00 C0			add adr.ROW,y
 15043 844E 8D D8 9E			sta HLP
 15044 8451 AD D9 9E			lda HLP+1
 15045 8454 79 00 C1			adc adr.ROW+256,y
 15046 8457 8D D9 9E			sta HLP+1
 15047
 15048 				; optimize OK (service.pas), line = 3077
 15049
 15050 845A AD D8 9E			lda HLP
 15051 845D 8D F9 9E			sta BLITTMP.DST
 15052 8460 A9 50			lda #$50
 15053 8462 18 6D D9 9E			add HLP+1
 15054 8466 8D FA 9E			sta BLITTMP.DST+1
 15055 8469 A9 00			lda #$00
 15056 846B 69 00			adc #$00
 15057 846D 8D FB 9E			sta BLITTMP.DST+2
 15058 8470 A9 00			lda #$00
 15059 8472 69 00			adc #$00
 15060 8474 8D FC 9E			sta BLITTMP.DST+3
 15061 8477 AD 2D 9E			lda MINIVAUS.WIDTH
 15062 847A 8D FD 9E			sta BLITTMP.SIZE
 15063 847D 20 E9 3B			jsr BLITTMP
 15064
 15065 				; optimize OK (service.pas), line = 3079
 15066
 15067 8480 AD E1 9D			lda PLAYSCREEN.OFS
 15068 8483 18 6D D8 9E			add HLP
 15069 8487 8D 02 9F			sta BLITROW.DST
 15070 848A AD E2 9D			lda PLAYSCREEN.OFS+1
 15071 848D 6D D9 9E			adc HLP+1
 15072 8490 8D 03 9F			sta BLITROW.DST+1
 15073 8493 AD E3 9D			lda PLAYSCREEN.OFS+2
 15074 8496 69 00			adc #$00
 15075 8498 8D 04 9F			sta BLITROW.DST+2
 15076 849B AD E4 9D			lda PLAYSCREEN.OFS+3
 15077 849E 69 00			adc #$00
 15078 84A0 8D 05 9F			sta BLITROW.DST+3
 15079 84A3 AD D8 9E			lda HLP
 15080 84A6 8D FE 9E			sta BLITROW.SRC
 15081 84A9 A9 50			lda #$50
 15082 84AB 18 6D D9 9E			add HLP+1
 15083 84AF 8D FF 9E			sta BLITROW.SRC+1
 15084 84B2 A9 00			lda #$00
 15085 84B4 69 00			adc #$00
 15086 84B6 8D 00 9F			sta BLITROW.SRC+2
 15087 84B9 A9 00			lda #$00
 15088 84BB 69 00			adc #$00
 15089 84BD 8D 01 9F			sta BLITROW.SRC+3
 15090 84C0 AD 2D 9E			lda MINIVAUS.WIDTH
 15091 84C3 8D 06 9F			sta BLITROW.SIZE
 15092 84C6 AD 2E 9E			lda MINIVAUS.WIDTH+1
 15093 84C9 8D 07 9F			sta BLITROW.SIZE+1
 15094 84CC 20 22 3C			jsr BLITROW
 15095
 15096 				; --- ForToDoEpilog
 15097 84CF EE A9 A0			inc Y
 15098 84D2 F0 03 4C 69 82		jne l_2E39
 15099 84D7			l_2E47
 15100
 15101 				; --- ForToDoEpilog
 15102 84D7 EE AA A0			inc CN
 15103 84DA F0 03 4C 53 82		jne l_2E1D
 15104 84DF			l_2E2B
 15105
 15106 				; ------------------------------------------------------------
 15107
 15108 = A0A6			LIVES	= DATAORIGIN+$03D4
 15109 = 000B			XLIVES	= $0B
 15110 = 00C0			YLIVES	= $C0
 15111 = A0A8			X	= DATAORIGIN+$03D6
 15112 = A0A9			Y	= DATAORIGIN+$03D7
 15113 = A0AA			CN	= DATAORIGIN+$03D8
 15114 = A0AB			XP	= DATAORIGIN+$03D9
 15115 = A0AD			YP	= DATAORIGIN+$03DB
 15116 = A0AF			XL	= DATAORIGIN+$03DD
 15117 = A0B1			YL	= DATAORIGIN+$03DF
 15118 = A0B3			SHADOW	= DATAORIGIN+$03E1
 15119 = A0B4			CL	= DATAORIGIN+$03E2
 15120
 15121 = A0A6			@VarData	= LIVES
 15122 = 000F			@VarDataSize	= 15
 15123
 15124 84DF			@exit
 15125 					.ifdef @new
 15126 					lda <@VarData
 15127 					sta :ztmp
 15128 					lda >@VarData
 15129 					ldy #@VarDataSize-1
 15130 					jmp @FreeMem
 15131 					els
 15132 84DF 60				rts						; ret
 15133 					eif
 15134 				.endl
 15135
 15136 84E0			.local	PLACE_FIRE					; PROCEDURE
 15137
 15138 				; optimize OK (service.pas), line = 3091
 15139
 15140 84E0 AC CC 9E			ldy FIRE.Y
 15141 84E3 AD CB 9E			lda FIRE.X
 15142 84E6 18 79 00 C0			add adr.ROW,y
 15143 84EA 8D D8 9E			sta HLP
 15144 84ED A9 00			lda #$00
 15145 84EF 79 00 C1			adc adr.ROW+256,y
 15146 84F2 8D D9 9E			sta HLP+1
 15147
 15148 				; optimize OK (service.pas), line = 3093
 15149
 15150 84F5 AD D8 9E			lda HLP
 15151 84F8 8D F2 9E			sta BLITZERO.DST
 15152 84FB A9 50			lda #$50
 15153 84FD 18 6D D9 9E			add HLP+1
 15154 8501 8D F3 9E			sta BLITZERO.DST+1
 15155 8504 A9 00			lda #$00
 15156 8506 69 00			adc #$00
 15157 8508 8D F4 9E			sta BLITZERO.DST+2
 15158 850B A9 00			lda #$00
 15159 850D 69 00			adc #$00
 15160 850F 8D F5 9E			sta BLITZERO.DST+3
 15161 8512 AD 49 9E			lda SHOOTS.OFS
 15162 8515 8D EE 9E			sta BLITZERO.SRC
 15163 8518 AD 4A 9E			lda SHOOTS.OFS+1
 15164 851B 8D EF 9E			sta BLITZERO.SRC+1
 15165 851E AD 4B 9E			lda SHOOTS.OFS+2
 15166 8521 8D F0 9E			sta BLITZERO.SRC+2
 15167 8524 AD 4C 9E			lda SHOOTS.OFS+3
 15168 8527 8D F1 9E			sta BLITZERO.SRC+3
 15169 852A AD 45 9E			lda SHOOTS.WIDTH
 15170 852D 8D F6 9E			sta BLITZERO.W
 15171 8530 AD 46 9E			lda SHOOTS.WIDTH+1
 15172 8533 8D F7 9E			sta BLITZERO.W+1
 15173 8536 AD 47 9E			lda SHOOTS.HEIGHT
 15174 8539 8D F8 9E			sta BLITZERO.H
 15175 853C 20 6B 3B			jsr BLITZERO
 15176
 15177 853F			@exit
 15178 					.ifdef @new
 15179 					lda <@VarData
 15180 					sta :ztmp
 15181 					lda >@VarData
 15182 					ldy #@VarDataSize-1
 15183 					jmp @FreeMem
 15184 					els
 15185 853F 60				rts						; ret
 15186 					eif
 15187 				.endl
 15188
 15189 8540			.local	REMOVE_FIRE					; PROCEDURE
 15190
 15191 				; optimize OK (service.pas), line = 3111
 15192
 15193 8540 AC CC 9E			ldy FIRE.Y
 15194 8543 AD CB 9E			lda FIRE.X
 15195 8546 18 79 00 C0			add adr.ROW,y
 15196 854A 8D D8 9E			sta HLP
 15197 854D A9 00			lda #$00
 15198 854F 79 00 C1			adc adr.ROW+256,y
 15199 8552 8D D9 9E			sta HLP+1
 15200
 15201 				; optimize OK (service.pas), line = 3113
 15202
 15203 8555 AD D8 9E			lda HLP
 15204 8558 8D E7 9E			sta BLITBOX.DST
 15205 855B A9 50			lda #$50
 15206 855D 18 6D D9 9E			add HLP+1
 15207 8561 8D E8 9E			sta BLITBOX.DST+1
 15208 8564 A9 00			lda #$00
 15209 8566 69 00			adc #$00
 15210 8568 8D E9 9E			sta BLITBOX.DST+2
 15211 856B A9 00			lda #$00
 15212 856D 69 00			adc #$00
 15213 856F 8D EA 9E			sta BLITBOX.DST+3
 15214 8572 AD E1 9D			lda PLAYSCREEN.OFS
 15215 8575 18 6D D8 9E			add HLP
 15216 8579 8D E3 9E			sta BLITBOX.SRC
 15217 857C AD E2 9D			lda PLAYSCREEN.OFS+1
 15218 857F 6D D9 9E			adc HLP+1
 15219 8582 8D E4 9E			sta BLITBOX.SRC+1
 15220 8585 AD E3 9D			lda PLAYSCREEN.OFS+2
 15221 8588 69 00			adc #$00
 15222 858A 8D E5 9E			sta BLITBOX.SRC+2
 15223 858D AD E4 9D			lda PLAYSCREEN.OFS+3
 15224 8590 69 00			adc #$00
 15225 8592 8D E6 9E			sta BLITBOX.SRC+3
 15226 8595 AD 45 9E			lda SHOOTS.WIDTH
 15227 8598 8D EB 9E			sta BLITBOX.W
 15228 859B AD 46 9E			lda SHOOTS.WIDTH+1
 15229 859E 8D EC 9E			sta BLITBOX.W+1
 15230 85A1 AD 47 9E			lda SHOOTS.HEIGHT
 15231 85A4 8D ED 9E			sta BLITBOX.H
 15232 85A7 20 EA 3A			jsr BLITBOX
 15233
 15234 85AA			@exit
 15235 					.ifdef @new
 15236 					lda <@VarData
 15237 					sta :ztmp
 15238 					lda >@VarData
 15239 					ldy #@VarDataSize-1
 15240 					jmp @FreeMem
 15241 					els
 15242 85AA 60				rts						; ret
 15243 					eif
 15244 				.endl
 15245
 15246 85AB			.local	CHECK_FIRE					; PROCEDURE
 15247
 15248 				; optimize OK (service.pas), line = 3129
 15249
 15250 85AB AD CE 9E			lda FIRE.AVL
 15251 85AE D0 03 4C 0D 87		jeq l_2FB6
 15252
 15253 				; optimize FAIL ('MOUSECLICK', service.pas), line = 3131
 15254
 15255 85B3 20 E1 3A			jsr MOUSECLICK
 15256 85B6 E8				inx
 15257 85B7 E8				inx
 15258 85B8 A0 01			ldy #1
 15259 85BA AD E2 9E			lda MOUSECLICK.RESULT
 15260 85BD C9 01			cmp #$01
 15261 85BF F0 01			beq @+
 15262 85C1 88				dey
 15263 				@
 15264 85C2 98				tya
 15265 85C3 2D CE 9E			and FIRE.AVL
 15266 85C6 95 95			sta :STACKORIGIN-1,x
 15267 85C8 CA				dex
 15268 85C9 CA				dex
 15269 85CA A0 01			ldy #1
 15270 85CC AD CD 9E			lda FIRE.SHOT
 15271 85CF F0 01			beq @+
 15272 85D1 88				dey
 15273 				@
 15274 85D2 98				tya
 15275 85D3 35 97			and :STACKORIGIN+1,x
 15276 85D5 F0 3A			jeq l_2FD6
 15277
 15278 				; optimize OK (service.pas), line = 3133
 15279
 15280 85D7 AD 5D 9E			lda VAUS.WIDTH
 15281 85DA 38 ED 45 9E			sub SHOOTS.WIDTH
 15282 85DE 4A				lsr @
 15283 85DF 18 6D 55 9E			add VAUS.X
 15284 85E3 8D CB 9E			sta FIRE.X
 15285
 15286 				; optimize OK (service.pas), line = 3134
 15287
 15288 85E6 AD 56 9E			lda VAUS.Y
 15289 85E9 38 ED 47 9E			sub SHOOTS.HEIGHT
 15290 85ED 8D CC 9E			sta FIRE.Y
 15291
 15292 				; optimize OK (service.pas), line = 3135
 15293
 15294 85F0 A9 01			lda #$01
 15295 85F2 8D CD 9E			sta FIRE.SHOT
 15296
 15297 				; optimize OK (service.pas), line = 3136
 15298
 15299 85F5 A9 00			lda #$00
 15300 85F7 8D CF 9E			sta FIRE.NW
 15301
 15302 				; optimize OK (service.pas), line = 3137
 15303
 15304 85FA A9 BC			lda #$BC
 15305 85FC 8D BB 9D			sta BALL_BLOCK_SOUND.A
 15306 85FF A9 02			lda #$02
 15307 8601 8D BC 9D			sta BALL_BLOCK_SOUND.A+1
 15308 8604 A9 05			lda #$05
 15309 8606 8D BD 9D			sta BALL_BLOCK_SOUND.B
 15310 8609 A9 00			lda #$00
 15311 860B 8D BE 9D			sta BALL_BLOCK_SOUND.B+1
 15312 860E 20 D1 38			jsr BALL_BLOCK_SOUND
 15313 8611			l_2FD6
 15314
 15315 				; optimize OK (service.pas), line = 3140
 15316
 15317 8611 AD CD 9E			lda FIRE.SHOT
 15318 8614 D0 03 4C 0D 87		jeq l_3010
 15319
 15320 				; optimize OK (service.pas), line = 3142
 15321
 15322 8619 AD CF 9E			lda FIRE.NW
 15323 861C F0 03			jeq l_301D
 15324 861E 20 40 85			jsr REMOVE_FIRE
 15325 8621			l_301D
 15326
 15327 				; optimize OK (service.pas), line = 3143
 15328
 15329 8621 A9 01			lda #$01
 15330 8623 8D CF 9E			sta FIRE.NW
 15331
 15332 				; optimize OK (service.pas), line = 3145
 15333
 15334 8626 AD CC 9E			lda FIRE.Y
 15335 8629 38 E9 04			sub #$04
 15336 862C 8D CC 9E			sta FIRE.Y
 15337
 15338 				; optimize OK (service.pas), line = 3146
 15339
 15340 862F C9 16			cmp #$16
 15341 8631 B0 08			jcs l_3038
 15342 8633 A9 00			lda #$00
 15343 8635 8D CD 9E			sta FIRE.SHOT
 15344 8638 4C 0D 87			jmp l_3046
 15345 863B			l_3038
 15346
 15347 				; optimize FAIL ('PLACE_FIRE', service.pas), line = 3149
 15348
 15349 863B 20 E0 84			jsr PLACE_FIRE
 15350
 15351 				; optimize OK (service.pas), line = 3151
 15352
 15353 863E AD CC 9E			lda FIRE.Y
 15354 8641 38 E9 16			sub #$16
 15355 8644 10 03 4C 0D 87		jmi l_306D
 15356 8649 AD CC 9E			lda FIRE.Y
 15357 864C 38 E9 16			sub #$16
 15358 864F 85 A0			sta :STACKORIGIN+10
 15359 8651 A9 00			lda #$00
 15360 8653 E9 00			sbc #$00
 15361 8655 85 B0			sta :STACKORIGIN+STACKWIDTH+10
 15362 8657 A5 A0			lda :STACKORIGIN+10
 15363 8659 C9 78			cmp #$78
 15364 865B A5 B0			lda :STACKORIGIN+STACKWIDTH+10
 15365 865D E9 00			sbc #$00
 15366 865F 50 02			svc
 15367 8661 49 80			eor #$80
 15368 8663 30 03 4C 0D 87		jpl l_306D
 15369
 15370 				; optimize OK (service.pas), line = 3153
 15371
 15372 8668 AD CB 9E			lda FIRE.X
 15373 866B 38 E9 09			sub #$09
 15374 866E 4A				lsr @
 15375 866F 4A				lsr @
 15376 8670 4A				lsr @
 15377 8671 4A				lsr @
 15378 8672 8D B7 A0			sta X1
 15379 8675 A9 00			lda #$00
 15380 8677 8D B8 A0			sta X1+1
 15381
 15382 				; optimize OK (service.pas), line = 3154
 15383
 15384 867A AD CC 9E			lda FIRE.Y
 15385 867D 38 E9 16			sub #$16
 15386 8680 4A				lsr @
 15387 8681 4A				lsr @
 15388 8682 4A				lsr @
 15389 8683 8D BB A0			sta Y1
 15390 8686 A9 00			lda #$00
 15391 8688 8D BC A0			sta Y1+1
 15392
 15393 				; optimize OK (service.pas), line = 3156
 15394
 15395 868B AD CB 9E			lda FIRE.X
 15396 868E 18 6D 45 9E			add SHOOTS.WIDTH
 15397 8692 38 E9 09			sub #$09
 15398 8695 4A				lsr @
 15399 8696 4A				lsr @
 15400 8697 4A				lsr @
 15401 8698 4A				lsr @
 15402 8699 8D B9 A0			sta X2
 15403 869C A9 00			lda #$00
 15404 869E 8D BA A0			sta X2+1
 15405
 15406 				; optimize OK (service.pas), line = 3157
 15407
 15408 86A1 AD BB A0			lda Y1
 15409 86A4 8D BD A0			sta Y2
 15410 86A7 AD BC A0			lda Y1+1
 15411 86AA 8D BE A0			sta Y2+1
 15412
 15413 				; optimize OK (service.pas), line = 3159
 15414
 15415 86AD AD BB A0			lda Y1
 15416 86B0 0A				asl @
 15417 86B1 0A				asl @
 15418 86B2 0A				asl @
 15419 86B3 0A				asl @
 15420 86B4 18 6D B7 A0			add X1
 15421 86B8 A8				tay
 15422 86B9 B9 00 DB			lda adr.WALL,y
 15423 86BC D0 11			jne l_30D6x
 15424 86BE AD BD A0			lda Y2
 15425 86C1 0A				asl @
 15426 86C2 0A				asl @
 15427 86C3 0A				asl @
 15428 86C4 0A				asl @
 15429 86C5 18 6D B9 A0			add X2
 15430 86C9 A8				tay
 15431 86CA B9 00 DB			lda adr.WALL,y
 15432 86CD F0 3E			jeq l_30D6
 15433 86CF			l_30D6x
 15434
 15435 				; optimize FAIL ('REMOVE_FIRE', service.pas), line = 3161
 15436
 15437 86CF 20 40 85			jsr REMOVE_FIRE
 15438
 15439 				; optimize OK (service.pas), line = 3162
 15440
 15441 86D2 A9 00			lda #$00
 15442 86D4 8D CD 9E			sta FIRE.SHOT
 15443
 15444 				; optimize OK (service.pas), line = 3164
 15445
 15446 86D7 AD B7 A0			lda X1
 15447 86DA 8D 23 A0			sta SHOOT_BLOCK_WITH_FIRE.XB
 15448 86DD AD B8 A0			lda X1+1
 15449 86E0 8D 24 A0			sta SHOOT_BLOCK_WITH_FIRE.XB+1
 15450 86E3 AD BB A0			lda Y1
 15451 86E6 8D 25 A0			sta SHOOT_BLOCK_WITH_FIRE.YB
 15452 86E9 AD BC A0			lda Y1+1
 15453 86EC 8D 26 A0			sta SHOOT_BLOCK_WITH_FIRE.YB+1
 15454 86EF 20 5E 68			jsr SHOOT_BLOCK_WITH_FIRE
 15455
 15456 				; optimize OK (service.pas), line = 3165
 15457
 15458 86F2 AD B9 A0			lda X2
 15459 86F5 8D 23 A0			sta SHOOT_BLOCK_WITH_FIRE.XB
 15460 86F8 AD BA A0			lda X2+1
 15461 86FB 8D 24 A0			sta SHOOT_BLOCK_WITH_FIRE.XB+1
 15462 86FE AD BD A0			lda Y2
 15463 8701 8D 25 A0			sta SHOOT_BLOCK_WITH_FIRE.YB
 15464 8704 AD BE A0			lda Y2+1
 15465 8707 8D 26 A0			sta SHOOT_BLOCK_WITH_FIRE.YB+1
 15466 870A 20 5E 68			jsr SHOOT_BLOCK_WITH_FIRE
 15467 870D			l_3046
 15468 870D			l_30D6
 15469 870D			l_306D
 15470 870D			l_3010
 15471 870D			l_2FB6
 15472
 15473 				; ------------------------------------------------------------
 15474
 15475 = A0B7			X1	= DATAORIGIN+$03E5
 15476 = A0B9			X2	= DATAORIGIN+$03E7
 15477 = A0BB			Y1	= DATAORIGIN+$03E9
 15478 = A0BD			Y2	= DATAORIGIN+$03EB
 15479
 15480 = A0B7			@VarData	= X1
 15481 = 0008			@VarDataSize	= 8
 15482
 15483 870D			@exit
 15484 					.ifdef @new
 15485 					lda <@VarData
 15486 					sta :ztmp
 15487 					lda >@VarData
 15488 					ldy #@VarDataSize-1
 15489 					jmp @FreeMem
 15490 					els
 15491 870D 60				rts						; ret
 15492 					eif
 15493 				.endl
 15494
 15495 870E			.local	REMOVE_FLUX					; PROCEDURE
 15496
 15497 				; optimize OK (service.pas), line = 3177
 15498
 15499 870E AD B0 C0			lda adr.ROW+$B0
 15500 8711 18 69 D9			add #$D9
 15501 8714 8D D8 9E			sta HLP
 15502 8717 AD B0 C1			lda adr.ROW+256+$B0
 15503 871A 69 00			adc #$00
 15504 871C 8D D9 9E			sta HLP+1
 15505
 15506 				; optimize OK (service.pas), line = 3179
 15507
 15508 871F AD D8 9E			lda HLP
 15509 8722 8D E7 9E			sta BLITBOX.DST
 15510 8725 A9 50			lda #$50
 15511 8727 18 6D D9 9E			add HLP+1
 15512 872B 8D E8 9E			sta BLITBOX.DST+1
 15513 872E A9 00			lda #$00
 15514 8730 69 00			adc #$00
 15515 8732 8D E9 9E			sta BLITBOX.DST+2
 15516 8735 A9 00			lda #$00
 15517 8737 69 00			adc #$00
 15518 8739 8D EA 9E			sta BLITBOX.DST+3
 15519 873C AD E1 9D			lda PLAYSCREEN.OFS
 15520 873F 18 6D D8 9E			add HLP
 15521 8743 8D E3 9E			sta BLITBOX.SRC
 15522 8746 AD E2 9D			lda PLAYSCREEN.OFS+1
 15523 8749 6D D9 9E			adc HLP+1
 15524 874C 8D E4 9E			sta BLITBOX.SRC+1
 15525 874F AD E3 9D			lda PLAYSCREEN.OFS+2
 15526 8752 69 00			adc #$00
 15527 8754 8D E5 9E			sta BLITBOX.SRC+2
 15528 8757 AD E4 9D			lda PLAYSCREEN.OFS+3
 15529 875A 69 00			adc #$00
 15530 875C 8D E6 9E			sta BLITBOX.SRC+3
 15531 875F A9 08			lda #$08
 15532 8761 8D EB 9E			sta BLITBOX.W
 15533 8764 A9 00			lda #$00
 15534 8766 8D EC 9E			sta BLITBOX.W+1
 15535 8769 A9 14			lda #$14
 15536 876B 8D ED 9E			sta BLITBOX.H
 15537 876E 20 EA 3A			jsr BLITBOX
 15538
 15539 8771			@exit
 15540 					.ifdef @new
 15541 					lda <@VarData
 15542 					sta :ztmp
 15543 					lda >@VarData
 15544 					ldy #@VarDataSize-1
 15545 					jmp @FreeMem
 15546 					els
 15547 8771 60				rts						; ret
 15548 					eif
 15549 				.endl
 15550
 15551 8772			.local	CHECK_FLUX					; PROCEDURE
 15552
 15553 				; optimize OK (service.pas), line = 3193
 15554
 15555 8772 AD D2 9E			lda SCRFLUXCNT
 15556 8775 8D C0 A0			sta FX
 15557
 15558 				; optimize OK (service.pas), line = 3195
 15559
 15560 8778 AD D1 9E			lda SCRFLUX
 15561 877B D0 03 4C 0E 88		jeq l_3121
 15562
 15563 				; optimize OK (service.pas), line = 3198
 15564
 15565 8780 A9 00			lda #$00
 15566 8782 8D BF A0			sta Y
 15567
 15568 8785			l_312B
 15569 				; --- ForToDoCondition
 15570 8785 AC BF A0			ldy Y
 15571 8788 C0 14			cpy #$14
 15572 878A B0 73			jcs l_3139
 15573
 15574 				; optimize OK (service.pas), line = 3200
 15575
 15576 878C A9 D9			lda #$D9
 15577 878E 79 B0 C0			adc adr.ROW+$B0,y
 15578 8791 8D 02 9F			sta BLITROW.DST
 15579 8794 A9 50			lda #$50
 15580 8796 79 B0 C1			adc adr.ROW+256+$B0,y
 15581 8799 8D 03 9F			sta BLITROW.DST+1
 15582 879C A9 00			lda #$00
 15583 879E 69 00			adc #$00
 15584 87A0 8D 04 9F			sta BLITROW.DST+2
 15585 87A3 A9 00			lda #$00
 15586 87A5 69 00			adc #$00
 15587 87A7 8D 05 9F			sta BLITROW.DST+3
 15588 87AA AD BF A0			lda Y
 15589 87AD 18 6D C0 A0			add FX
 15590 87B1 85 A2			sta :STACKORIGIN+12
 15591 87B3 A9 00			lda #$00
 15592 87B5 69 00			adc #$00
 15593 87B7 85 B2			sta :STACKORIGIN+STACKWIDTH+12
 15594 87B9 A9 00			lda #$00
 15595 87BB 06 A2			asl :STACKORIGIN+12
 15596 87BD 26 B2			rol :STACKORIGIN+STACKWIDTH+12
 15597 87BF 2A				rol @
 15598 87C0 06 A2			asl :STACKORIGIN+12
 15599 87C2 26 B2			rol :STACKORIGIN+STACKWIDTH+12
 15600 87C4 2A				rol @
 15601 87C5 06 A2			asl :STACKORIGIN+12
 15602 87C7 26 B2			rol :STACKORIGIN+STACKWIDTH+12
 15603 87C9 2A				rol @
 15604 87CA 85 C2			sta :STACKORIGIN+STACKWIDTH*2+12
 15605 87CC AD 51 9E			lda FLUX.OFS
 15606 87CF 18 65 A2			add :STACKORIGIN+12
 15607 87D2 8D FE 9E			sta BLITROW.SRC
 15608 87D5 AD 52 9E			lda FLUX.OFS+1
 15609 87D8 65 B2			adc :STACKORIGIN+STACKWIDTH+12
 15610 87DA 8D FF 9E			sta BLITROW.SRC+1
 15611 87DD AD 53 9E			lda FLUX.OFS+2
 15612 87E0 65 C2			adc :STACKORIGIN+STACKWIDTH*2+12
 15613 87E2 8D 00 9F			sta BLITROW.SRC+2
 15614 87E5 AD 54 9E			lda FLUX.OFS+3
 15615 87E8 69 00			adc #$00
 15616 87EA 8D 01 9F			sta BLITROW.SRC+3
 15617 87ED A9 08			lda #$08
 15618 87EF 8D 06 9F			sta BLITROW.SIZE
 15619 87F2 A9 00			lda #$00
 15620 87F4 8D 07 9F			sta BLITROW.SIZE+1
 15621 87F7 20 22 3C			jsr BLITROW
 15622
 15623 				; --- ForToDoEpilog
 15624 87FA EE BF A0			inc Y
 15625 87FD D0 86			jne l_312B
 15626 87FF			l_3139
 15627
 15628 				; optimize FAIL (0, service.pas), line = 3202
 15629
 15630 87FF EE D2 9E			inc SCRFLUXCNT
 15631
 15632 				; optimize OK (service.pas), line = 3203
 15633
 15634 8802 AD D2 9E			lda SCRFLUXCNT
 15635 8805 C9 15			cmp #$15
 15636 8807 90 05			jcc l_3178
 15637 8809 A9 00			lda #$00
 15638 880B 8D D2 9E			sta SCRFLUXCNT
 15639 880E			l_3178
 15640 880E			l_3121
 15641
 15642 				; ------------------------------------------------------------
 15643
 15644 = A0BF			Y	= DATAORIGIN+$03ED
 15645 = A0C0			FX	= DATAORIGIN+$03EE
 15646
 15647 = A0BF			@VarData	= Y
 15648 = 0002			@VarDataSize	= 2
 15649
 15650 880E			@exit
 15651 					.ifdef @new
 15652 					lda <@VarData
 15653 					sta :ztmp
 15654 					lda >@VarData
 15655 					ldy #@VarDataSize-1
 15656 					jmp @FreeMem
 15657 					els
 15658 880E 60				rts						; ret
 15659 					eif
 15660 				.endl
 15661
 15662 880F			.local	VAUS_OUT					; PROCEDURE
 15663
 15664 				; optimize FAIL ('NOSOUND', service.pas), line = 3211
 15665
 15666 880F 20 E4 3C			jsr NOSOUND
 15667
 15668 				; optimize OK (service.pas), line = 3213
 15669
 15670 8812 AD B1 9E			lda CUR_PLAYER
 15671 8815 0A				asl @
 15672 8816 0A				asl @
 15673 8817 A8				tay
 15674 8818 B9 96 9E			lda adr.SCORE.PLAYER,y
 15675 881B 18 69 10			add #$10
 15676 881E 99 96 9E			sta adr.SCORE.PLAYER,y
 15677 8821 B9 97 9E			lda adr.SCORE.PLAYER+1,y
 15678 8824 69 27			adc #$27
 15679 8826 99 97 9E			sta adr.SCORE.PLAYER+1,y
 15680 8829 B9 98 9E			lda adr.SCORE.PLAYER+2,y
 15681 882C 69 00			adc #$00
 15682 882E 99 98 9E			sta adr.SCORE.PLAYER+2,y
 15683 8831 B9 99 9E			lda adr.SCORE.PLAYER+3,y
 15684 8834 69 00			adc #$00
 15685 8836 99 99 9E			sta adr.SCORE.PLAYER+3,y
 15686
 15687 				; optimize OK (service.pas), line = 3214
 15688
 15689 8839 A9 00			lda #$00
 15690 883B 8D 94 9E			sta REMAIN_BLK
 15691
 15692 				; optimize OK (service.pas), line = 3216
 15693
 15694 883E AD 55 9E			lda VAUS.X
 15695 8841 8D C5 A0			sta Z
 15696 8844 A9 00			lda #$00
 15697 8846 8D C6 A0			sta Z+1
 15698
 15699 				; optimize FAIL ('WAIT_VBL', service.pas), line = 3218
 15700
 15701 8849 20 99 44			jsr WAIT_VBL
 15702
 15703 				; optimize FAIL ('REMOVE_VAUS', service.pas), line = 3219
 15704
 15705 884C 20 71 52			jsr REMOVE_VAUS
 15706
 15707 				; optimize FAIL ('PLACE_VAUS', service.pas), line = 3220
 15708
 15709 884F 20 E8 52			jsr PLACE_VAUS
 15710
 15711 				; optimize OK (service.pas), line = 3222
 15712
 15713 8852 AD C5 A0			lda Z
 15714 8855 8D C1 A0			sta X
 15715 8858 AD C6 A0			lda Z+1
 15716 885B 8D C2 A0			sta X+1
 15717 885E AD C5 A0			lda Z
 15718 8861 18 69 2C			add #$2C
 15719 8864 8D 77 88			sta @FORTMP_31A3_0
 15720 8867 AD C6 A0			lda Z+1
 15721 886A 69 00			adc #$00
 15722 886C 8D 70 88			sta @FORTMP_31A3_1
 15723
 15724 886F			l_31A6
 15725 				; --- ForToDoCondition
 15726 886F A9 00			lda @FORTMP_31A3_1::#$00
 15727 8871 CD C2 A0			cmp X+1
 15728 8874 D0 05			bne @+
 15729 8876 A9 00			lda @FORTMP_31A3_0::#$00
 15730 8878 CD C1 A0			cmp X
 15731 				@
 15732 887B B0 03 4C 14 89		jcc l_31B2
 15733
 15734 				; optimize FAIL ('WAIT_VBL', service.pas), line = 3224
 15735
 15736 8880 20 99 44			jsr WAIT_VBL
 15737
 15738 				; optimize OK (service.pas), line = 3226
 15739
 15740 8883 AD 55 9E			lda VAUS.X
 15741 8886 8D 57 9E			sta VAUS.OLDX
 15742 8889 A9 00			lda #$00
 15743 888B 8D 58 9E			sta VAUS.OLDX+1
 15744
 15745 				; optimize OK (service.pas), line = 3227
 15746
 15747 888E AD C1 A0			lda X
 15748 8891 8D 55 9E			sta VAUS.X
 15749
 15750 				; optimize FAIL ('REMOVE_VAUS', service.pas), line = 3228
 15751
 15752 8894 20 71 52			jsr REMOVE_VAUS
 15753
 15754 				; optimize FAIL ('CHECK_FLUX', service.pas), line = 3229
 15755
 15756 8897 20 72 87			jsr CHECK_FLUX
 15757
 15758 				; optimize FAIL ('PLACE_VAUS', service.pas), line = 3230
 15759
 15760 889A 20 E8 52			jsr PLACE_VAUS
 15761
 15762 				; optimize OK (service.pas), line = 3232
 15763
 15764 889D AC 56 9E			ldy VAUS.Y
 15765 88A0 B9 00 C0			lda adr.ROW,y
 15766 88A3 18 69 E1			add #$E1
 15767 88A6 8D D8 9E			sta HLP
 15768 88A9 B9 00 C1			lda adr.ROW+256,y
 15769 88AC 69 00			adc #$00
 15770 88AE 8D D9 9E			sta HLP+1
 15771
 15772 				; optimize OK (service.pas), line = 3234
 15773
 15774 88B1 AD D8 9E			lda HLP
 15775 88B4 8D E7 9E			sta BLITBOX.DST
 15776 88B7 A9 50			lda #$50
 15777 88B9 18 6D D9 9E			add HLP+1
 15778 88BD 8D E8 9E			sta BLITBOX.DST+1
 15779 88C0 A9 00			lda #$00
 15780 88C2 69 00			adc #$00
 15781 88C4 8D E9 9E			sta BLITBOX.DST+2
 15782 88C7 A9 00			lda #$00
 15783 88C9 69 00			adc #$00
 15784 88CB 8D EA 9E			sta BLITBOX.DST+3
 15785 88CE AD E1 9D			lda PLAYSCREEN.OFS
 15786 88D1 18 6D D8 9E			add HLP
 15787 88D5 8D E3 9E			sta BLITBOX.SRC
 15788 88D8 AD E2 9D			lda PLAYSCREEN.OFS+1
 15789 88DB 6D D9 9E			adc HLP+1
 15790 88DE 8D E4 9E			sta BLITBOX.SRC+1
 15791 88E1 AD E3 9D			lda PLAYSCREEN.OFS+2
 15792 88E4 69 00			adc #$00
 15793 88E6 8D E5 9E			sta BLITBOX.SRC+2
 15794 88E9 AD E4 9D			lda PLAYSCREEN.OFS+3
 15795 88EC 69 00			adc #$00
 15796 88EE 8D E6 9E			sta BLITBOX.SRC+3
 15797 88F1 A9 28			lda #$28
 15798 88F3 8D EB 9E			sta BLITBOX.W
 15799 88F6 A9 00			lda #$00
 15800 88F8 8D EC 9E			sta BLITBOX.W+1
 15801 88FB AD 5E 9E			lda VAUS.HEIGHT
 15802 88FE 8D ED 9E			sta BLITBOX.H
 15803 8901 20 EA 3A			jsr BLITBOX
 15804
 15805 				; --- ForToDoEpilog
 15806 8904 EE C1 A0			inc X
 15807 8907 F0 03 4C 6F 88		jne l_31A6
 15808 890C EE C2 A0			inc X+1
 15809 890F F0 03 4C 6F 88		jne l_31A6
 15810 8914			l_31B2
 15811
 15812 				; ------------------------------------------------------------
 15813
 15814 = A0C1			X	= DATAORIGIN+$03EF
 15815 = A0C3			Y	= DATAORIGIN+$03F1
 15816 = A0C5			Z	= DATAORIGIN+$03F3
 15817
 15818 = A0C1			@VarData	= X
 15819 = 0006			@VarDataSize	= 6
 15820
 15821 8914			@exit
 15822 					.ifdef @new
 15823 					lda <@VarData
 15824 					sta :ztmp
 15825 					lda >@VarData
 15826 					ldy #@VarDataSize-1
 15827 					jmp @FreeMem
 15828 					els
 15829 8914 60				rts						; ret
 15830 					eif
 15831 				.endl
 15832
 15833 8915			.local	CHECK_BONUS_TYPE				; PROCEDURE
 15834
 15835 				; optimize OK (service.pas), line = 3249
 15836
 15837 8915 AD 61 9E			lda VAUS.LETTER
 15838 8918 10 03 4C CB 89		jmi l_31F9
 15839 891D D0 03 4C CB 89		jeq l_31F9
 15840
 15841 				; optimize OK (service.pas), line = 3251
 15842
 15843 8922 A0 00			ldy #$00
 15844 8924 AD 61 9E			lda VAUS.LETTER
 15845 8927 10 01			spl
 15846 8929 88				dey
 15847 892A 38 E9 01			sub #$01
 15848 892D 8D C9 9E			sta LETT.LAST
 15849 8930 98				tya
 15850 8931 E9 00			sbc #$00
 15851 8933 8D CA 9E			sta LETT.LAST+1
 15852
 15853 				; optimize OK (service.pas), line = 3252
 15854
 15855 8936 AC CD A0 84 84 AC + 	mwy B2 :bp2
 15856 8940 A0 17			ldy #B2.INPLAY-DATAORIGIN
 15857 8942 B1 84			lda (:bp2),y
 15858 8944 F0 0F			jeq l_3210
 15859 8946 AD CD A0			lda B2
 15860 8949 8D 5F 9F			sta REMOVE_BALL.BALL
 15861 894C AD CE A0			lda B2+1
 15862 894F 8D 60 9F			sta REMOVE_BALL.BALL+1
 15863 8952 20 13 44			jsr REMOVE_BALL
 15864 8955			l_3210
 15865
 15866 				; optimize OK (service.pas), line = 3253
 15867
 15868 8955 AC D1 A0 84 84 AC + 	mwy B3 :bp2
 15869 895F A0 17			ldy #B3.INPLAY-DATAORIGIN
 15870 8961 B1 84			lda (:bp2),y
 15871 8963 F0 0F			jeq l_3222
 15872 8965 AD D1 A0			lda B3
 15873 8968 8D 5F 9F			sta REMOVE_BALL.BALL
 15874 896B AD D2 A0			lda B3+1
 15875 896E 8D 60 9F			sta REMOVE_BALL.BALL+1
 15876 8971 20 13 44			jsr REMOVE_BALL
 15877 8974			l_3222
 15878
 15879 				; optimize OK (service.pas), line = 3254
 15880
 15881 8974 AC CD A0 84 84 AC + 	mwy B2 :bp2
 15882 897E A0 17			ldy #B2.INPLAY-DATAORIGIN
 15883 8980 A9 00			lda #$00
 15884 8982 91 84			sta (:bp2),y
 15885
 15886 				; optimize OK (service.pas), line = 3255
 15887
 15888 8984 AC D1 A0 84 84 AC + 	mwy B3 :bp2
 15889 898E A0 17			ldy #B3.INPLAY-DATAORIGIN
 15890 8990 91 84			sta (:bp2),y
 15891
 15892 				; optimize OK (service.pas), line = 3256
 15893
 15894 8992 8D D1 9E			sta SCRFLUX
 15895
 15896 				; optimize FAIL ('REMOVE_FLUX', service.pas), line = 3257
 15897
 15898 8995 20 0E 87			jsr REMOVE_FLUX
 15899
 15900 				; optimize OK (service.pas), line = 3259
 15901
 15902 8998 AD 61 9E			lda VAUS.LETTER
 15903 899B C9 06			cmp #$06
 15904 899D F0 2C			jeq l_3247
 15905
 15906 				; optimize OK (service.pas), line = 3261
 15907
 15908 899F AC C9 A0 84 84 AC + 	mwy B1 :bp2
 15909 89A9 A0 18			ldy #B1.LAUNCH-DATAORIGIN
 15910 89AB A9 00			lda #$00
 15911 89AD 91 84			sta (:bp2),y
 15912
 15913 				; optimize OK (service.pas), line = 3262
 15914
 15915 89AF AC CD A0 84 84 AC + 	mwy B2 :bp2
 15916 89B9 A0 18			ldy #B2.LAUNCH-DATAORIGIN
 15917 89BB 91 84			sta (:bp2),y
 15918
 15919 				; optimize OK (service.pas), line = 3263
 15920
 15921 89BD AC D1 A0 84 84 AC + 	mwy B3 :bp2
 15922 89C7 A0 18			ldy #B3.LAUNCH-DATAORIGIN
 15923 89C9 91 84			sta (:bp2),y
 15924 89CB			l_3247
 15925 89CB			l_31F9
 15926
 15927 				; optimize OK (service.pas), line = 3267
 15928
 15929 89CB AD 61 9E			lda VAUS.LETTER
 15930 89CE 8D D7 A0			sta @CASETMP_000A
 15931 89D1 C9 01			cmp #$01
 15932 89D3 D0 4D			jne l_3263
 15933 				@
 15934
 15935 				; optimize OK (service.pas), line = 3270
 15936
 15937 89D5 AD CD 9E			lda FIRE.SHOT
 15938 89D8 F0 03			jeq l_326F
 15939 89DA 20 40 85			jsr REMOVE_FIRE
 15940 89DD			l_326F
 15941
 15942 				; optimize OK (service.pas), line = 3271
 15943
 15944 89DD AD FD 9D 8D E5 9D + 	:8 mva adr.LASERS+# adr.PLAYVAUS+#
 15945
 15946 				; optimize FAIL ('MODIFY_VAUS', service.pas), line = 3272
 15947
 15948 8A0D 20 11 52			jsr MODIFY_VAUS
 15949
 15950 				; optimize OK (service.pas), line = 3273
 15951
 15952 8A10 A9 00			lda #$00
 15953 8A12 8D 61 9E			sta VAUS.LETTER
 15954
 15955 				; optimize OK (service.pas), line = 3274
 15956
 15957 8A15 A9 01			lda #$01
 15958 8A17 8D CE 9E			sta FIRE.AVL
 15959
 15960 				; optimize OK (service.pas), line = 3275
 15961
 15962 8A1A A9 00			lda #$00
 15963 8A1C 8D CD 9E			sta FIRE.SHOT
 15964 8A1F 4C 50 8C			jmp a_000A
 15965 8A22			l_3263
 15966 8A22 C9 02			cmp #$02
 15967 8A24 D0 46			jne l_3289
 15968
 15969 				; optimize OK (service.pas), line = 3279
 15970
 15971 8A26 AD CD 9E			lda FIRE.SHOT
 15972 8A29 F0 03			jeq l_3295
 15973 8A2B 20 40 85			jsr REMOVE_FIRE
 15974 8A2E			l_3295
 15975
 15976 				; optimize OK (service.pas), line = 3280
 15977
 15978 8A2E AD F5 9D 8D E5 9D + 	:8 mva adr.ENLARGED+# adr.PLAYVAUS+#
 15979
 15980 				; optimize FAIL ('MODIFY_VAUS', service.pas), line = 3281
 15981
 15982 8A5E 20 11 52			jsr MODIFY_VAUS
 15983
 15984 				; optimize OK (service.pas), line = 3282
 15985
 15986 8A61 A9 00			lda #$00
 15987 8A63 8D 61 9E			sta VAUS.LETTER
 15988
 15989 				; optimize OK (service.pas), line = 3283
 15990
 15991 8A66 8D CE 9E			sta FIRE.AVL
 15992 8A69 4C 50 8C			jmp a_000A
 15993 8A6C			l_3289
 15994 8A6C C9 03			cmp #$03
 15995 8A6E D0 4B			jne l_32AB
 15996
 15997 				; optimize OK (service.pas), line = 3287
 15998
 15999 8A70 AD CD 9E			lda FIRE.SHOT
 16000 8A73 F0 03			jeq l_32B7
 16001 8A75 20 40 85			jsr REMOVE_FIRE
 16002 8A78			l_32B7
 16003
 16004 				; optimize OK (service.pas), line = 3288
 16005
 16006 8A78 AD ED 9D 8D E5 9D + 	:8 mva adr.NORMAL+# adr.PLAYVAUS+#
 16007
 16008 				; optimize FAIL ('MODIFY_VAUS', service.pas), line = 3289
 16009
 16010 8AA8 20 11 52			jsr MODIFY_VAUS
 16011
 16012 				; optimize OK (service.pas), line = 3290
 16013
 16014 8AAB A9 00			lda #$00
 16015 8AAD 8D 61 9E			sta VAUS.LETTER
 16016
 16017 				; optimize OK (service.pas), line = 3291
 16018
 16019 8AB0 8D CE 9E			sta FIRE.AVL
 16020
 16021 				; optimize OK (service.pas), line = 3292
 16022
 16023 8AB3 A9 01			lda #$01
 16024 8AB5 8D D1 9E			sta SCRFLUX
 16025 8AB8 4C 50 8C			jmp a_000A
 16026 8ABB			l_32AB
 16027 8ABB C9 04			cmp #$04
 16028 8ABD D0 3E			jne l_32D1
 16029
 16030 				; optimize OK (service.pas), line = 3296
 16031
 16032 8ABF AD CD 9E			lda FIRE.SHOT
 16033 8AC2 F0 03			jeq l_32DD
 16034 8AC4 20 40 85			jsr REMOVE_FIRE
 16035 8AC7			l_32DD
 16036
 16037 				; optimize OK (service.pas), line = 3297
 16038
 16039 8AC7 AD ED 9D 8D E5 9D + 	:8 mva adr.NORMAL+# adr.PLAYVAUS+#
 16040
 16041 				; optimize FAIL ('MODIFY_VAUS', service.pas), line = 3298
 16042
 16043 8AF7 20 11 52			jsr MODIFY_VAUS
 16044 				; optimize OK (service.pas), line = 3299
 16045 8AFA 4C 94 8B			jmp s_331A
 16046 8AFD			l_32D1
 16047 8AFD C9 05			cmp #$05
 16048 8AFF F0 03 4C 97 8B		jne l_32EF
 16049
 16050 				; optimize OK (service.pas), line = 3303
 16051
 16052 8B04 AD CD 9E			lda FIRE.SHOT
 16053 8B07 F0 03			jeq l_32FB
 16054 8B09 20 40 85			jsr REMOVE_FIRE
 16055 8B0C			l_32FB
 16056
 16057 				; optimize OK (service.pas), line = 3304
 16058
 16059 8B0C AD ED 9D 8D E5 9D + 	:8 mva adr.NORMAL+# adr.PLAYVAUS+#
 16060
 16061 				; optimize FAIL ('MODIFY_VAUS', service.pas), line = 3305
 16062
 16063 8B3C 20 11 52			jsr MODIFY_VAUS
 16064
 16065 				; optimize OK (service.pas), line = 3306
 16066
 16067 8B3F A9 00			lda #$00
 16068 8B41 8D 61 9E			sta VAUS.LETTER
 16069
 16070 				; optimize OK (service.pas), line = 3307
 16071
 16072 8B44 AC C9 A0 84 84 AC + 	mwy B1 :bp2
 16073 8B4E A0 0C			ldy #B1.SPEED-DATAORIGIN
 16074 8B50 B1 84			lda (:bp2),y
 16075 8B52 38 E9 F4			sub #$F4
 16076 8B55 8D 14 9F			sta MAX.A
 16077 8B58 C8				iny
 16078 8B59 B1 84			lda (:bp2),y
 16079 8B5B E9 01			sbc #$01
 16080 8B5D 8D 15 9F			sta MAX.A+1
 16081 8B60 A9 F4			lda #$F4
 16082 8B62 8D 16 9F			sta MAX.B
 16083 8B65 A9 01			lda #$01
 16084 8B67 8D 17 9F			sta MAX.B+1
 16085 8B6A 20 E6 3C			jsr MAX
 16086 8B6D AD 18 9F			lda MAX.RESULT
 16087 8B70 8D D5 A0			sta X
 16088 8B73 AD 19 9F			lda MAX.RESULT+1
 16089 8B76 8D D6 A0			sta X+1
 16090
 16091 				; optimize OK (service.pas), line = 3308
 16092
 16093 8B79 AD C9 A0			lda B1
 16094 8B7C 8D 69 9F			sta SET_BALL_SPEED.BALL
 16095 8B7F AD CA A0			lda B1+1
 16096 8B82 8D 6A 9F			sta SET_BALL_SPEED.BALL+1
 16097 8B85 AD D5 A0			lda X
 16098 8B88 8D 6D 9F			sta SET_BALL_SPEED.SPEED
 16099 8B8B AD D6 A0			lda X+1
 16100 8B8E 8D 6E 9F			sta SET_BALL_SPEED.SPEED+1
 16101 8B91 20 76 45			jsr SET_BALL_SPEED
 16102 8B94			s_331A
 16103 				; optimize OK (service.pas), line = 3309
 16104 8B94 4C D6 8B			jmp s_3338
 16105 8B97			l_32EF
 16106 8B97 C9 06			cmp #$06
 16107 8B99 D0 3E			jne l_3321
 16108
 16109 				; optimize OK (service.pas), line = 3313
 16110
 16111 8B9B AD CD 9E			lda FIRE.SHOT
 16112 8B9E F0 03			jeq l_332D
 16113 8BA0 20 40 85			jsr REMOVE_FIRE
 16114 8BA3			l_332D
 16115
 16116 				; optimize OK (service.pas), line = 3314
 16117
 16118 8BA3 AD ED 9D 8D E5 9D + 	:8 mva adr.NORMAL+# adr.PLAYVAUS+#
 16119
 16120 				; optimize FAIL ('MODIFY_VAUS', service.pas), line = 3315
 16121
 16122 8BD3 20 11 52			jsr MODIFY_VAUS
 16123 8BD6			s_3338
 16124 				; optimize OK (service.pas), line = 3316
 16125 8BD6 4C 4B 8C			jmp s_3368
 16126 8BD9			l_3321
 16127 8BD9 C9 07			cmp #$07
 16128 8BDB D0 73			jne l_333F
 16129
 16130 				; optimize OK (service.pas), line = 3320
 16131
 16132 8BDD AD CD 9E			lda FIRE.SHOT
 16133 8BE0 F0 03			jeq l_334B
 16134 8BE2 20 40 85			jsr REMOVE_FIRE
 16135 8BE5			l_334B
 16136
 16137 				; optimize OK (service.pas), line = 3321
 16138
 16139 8BE5 AD ED 9D 8D E5 9D + 	:8 mva adr.NORMAL+# adr.PLAYVAUS+#
 16140
 16141 				; optimize FAIL ('MODIFY_VAUS', service.pas), line = 3322
 16142
 16143 8C15 20 11 52			jsr MODIFY_VAUS
 16144
 16145 				; optimize OK (service.pas), line = 3323
 16146
 16147 8C18 A9 00			lda #$00
 16148 8C1A 8D 61 9E			sta VAUS.LETTER
 16149
 16150 				; optimize OK (service.pas), line = 3324
 16151
 16152 8C1D AC B1 9E			ldy CUR_PLAYER
 16153 8C20 B9 A5 9E			lda adr.SCORE.LIVES,y
 16154 8C23 18 69 01			add #$01
 16155 8C26 99 A5 9E			sta adr.SCORE.LIVES,y
 16156
 16157 				; optimize OK (service.pas), line = 3325
 16158
 16159 8C29 8D A6 A0			sta PLOT_LIVES.LIVES
 16160 8C2C A9 00			lda #$00
 16161 8C2E 8D A7 A0			sta PLOT_LIVES.LIVES+1
 16162 8C31 20 43 82			jsr PLOT_LIVES
 16163
 16164 				; optimize OK (service.pas), line = 3326
 16165
 16166 8C34 A9 D0			lda #$D0
 16167 8C36 8D BB 9D			sta BALL_BLOCK_SOUND.A
 16168 8C39 A9 07			lda #$07
 16169 8C3B 8D BC 9D			sta BALL_BLOCK_SOUND.A+1
 16170 8C3E A9 0A			lda #$0A
 16171 8C40 8D BD 9D			sta BALL_BLOCK_SOUND.B
 16172 8C43 A9 00			lda #$00
 16173 8C45 8D BE 9D			sta BALL_BLOCK_SOUND.B+1
 16174 8C48 20 D1 38			jsr BALL_BLOCK_SOUND
 16175 8C4B			s_3368
 16176
 16177 				; optimize OK (service.pas), line = 3327
 16178
 16179 8C4B A9 00			lda #$00
 16180 8C4D 8D CE 9E			sta FIRE.AVL
 16181 8C50			l_333F
 16182 8C50			a_000A
 16183
 16184 				; ------------------------------------------------------------
 16185
 16186 = A0C9			B1	= DATAORIGIN+$03F7
 16187 = 9CD2			B1.X	= DATAORIGIN+$0000
 16188 = 9CD4			B1.Y	= DATAORIGIN+$0002
 16189 = 9CD6			B1.FINEX	= DATAORIGIN+$0004
 16190 = 9CD8			B1.FINEY	= DATAORIGIN+$0006
 16191 = 9CDA			B1.OLDX	= DATAORIGIN+$0008
 16192 = 9CDC			B1.OLDY	= DATAORIGIN+$000A
 16193 = 9CDE			B1.SPEED	= DATAORIGIN+$000C
 16194 = 9CE0			B1.FINESPEED	= DATAORIGIN+$000E
 16195 = 9CE2			B1.SPEEDX	= DATAORIGIN+$0010
 16196 = 9CE4			B1.SPEEDY	= DATAORIGIN+$0012
 16197 = 9CE6			B1.SBD	= DATAORIGIN+$0014
 16198 = 9CE8			B1.BRWHIT	= DATAORIGIN+$0016
 16199 = 9CE9			B1.INPLAY	= DATAORIGIN+$0017
 16200 = 9CEA			B1.LAUNCH	= DATAORIGIN+$0018
 16201 = 9CEB			B1.ONVAUS	= DATAORIGIN+$0019
 16202 = 9CED			B1.STM	= DATAORIGIN+$001B
 16203 = A0CD			B2	= DATAORIGIN+$03FB
 16204 = 9CD2			B2.X	= DATAORIGIN+$0000
 16205 = 9CD4			B2.Y	= DATAORIGIN+$0002
 16206 = 9CD6			B2.FINEX	= DATAORIGIN+$0004
 16207 = 9CD8			B2.FINEY	= DATAORIGIN+$0006
 16208 = 9CDA			B2.OLDX	= DATAORIGIN+$0008
 16209 = 9CDC			B2.OLDY	= DATAORIGIN+$000A
 16210 = 9CDE			B2.SPEED	= DATAORIGIN+$000C
 16211 = 9CE0			B2.FINESPEED	= DATAORIGIN+$000E
 16212 = 9CE2			B2.SPEEDX	= DATAORIGIN+$0010
 16213 = 9CE4			B2.SPEEDY	= DATAORIGIN+$0012
 16214 = 9CE6			B2.SBD	= DATAORIGIN+$0014
 16215 = 9CE8			B2.BRWHIT	= DATAORIGIN+$0016
 16216 = 9CE9			B2.INPLAY	= DATAORIGIN+$0017
 16217 = 9CEA			B2.LAUNCH	= DATAORIGIN+$0018
 16218 = 9CEB			B2.ONVAUS	= DATAORIGIN+$0019
 16219 = 9CED			B2.STM	= DATAORIGIN+$001B
 16220 = A0D1			B3	= DATAORIGIN+$03FF
 16221 = 9CD2			B3.X	= DATAORIGIN+$0000
 16222 = 9CD4			B3.Y	= DATAORIGIN+$0002
 16223 = 9CD6			B3.FINEX	= DATAORIGIN+$0004
 16224 = 9CD8			B3.FINEY	= DATAORIGIN+$0006
 16225 = 9CDA			B3.OLDX	= DATAORIGIN+$0008
 16226 = 9CDC			B3.OLDY	= DATAORIGIN+$000A
 16227 = 9CDE			B3.SPEED	= DATAORIGIN+$000C
 16228 = 9CE0			B3.FINESPEED	= DATAORIGIN+$000E
 16229 = 9CE2			B3.SPEEDX	= DATAORIGIN+$0010
 16230 = 9CE4			B3.SPEEDY	= DATAORIGIN+$0012
 16231 = 9CE6			B3.SBD	= DATAORIGIN+$0014
 16232 = 9CE8			B3.BRWHIT	= DATAORIGIN+$0016
 16233 = 9CE9			B3.INPLAY	= DATAORIGIN+$0017
 16234 = 9CEA			B3.LAUNCH	= DATAORIGIN+$0018
 16235 = 9CEB			B3.ONVAUS	= DATAORIGIN+$0019
 16236 = 9CED			B3.STM	= DATAORIGIN+$001B
 16237 = A0D5			X	= DATAORIGIN+$0403
 16238 = A0D7			@CASETMP_000A	= DATAORIGIN+$0405
 16239
 16240 = A0C9			@VarData	= B1
 16241 = 0009			@VarDataSize	= 9
 16242
 16243 8C50			@exit
 16244 					.ifdef @new
 16245 					lda <@VarData
 16246 					sta :ztmp
 16247 					lda >@VarData
 16248 					ldy #@VarDataSize-1
 16249 					jmp @FreeMem
 16250 					els
 16251 8C50 60				rts						; ret
 16252 					eif
 16253 				.endl
 16254
 16255 8C51			.local	DEVIATE_BALL					; PROCEDURE
 16256
 16257 				; --- RepeatUntilProlog
 16258 8C51			l_3376
 16259
 16260 				; optimize OK (service.pas), line = 3340
 16261
 16262 8C51 AD D8 A0			lda BALL
 16263 8C54 8D 89 9F			sta GET_BALL_DIRECTION.BALL
 16264 8C57 AD D9 A0			lda BALL+1
 16265 8C5A 8D 8A 9F			sta GET_BALL_DIRECTION.BALL+1
 16266 8C5D 20 3C 49			jsr GET_BALL_DIRECTION
 16267 8C60 E8				inx
 16268 8C61 AD 8D 9F 95 96		mva GET_BALL_DIRECTION.RESULT :STACKORIGIN,x
 16269 8C66 AD 8E 9F 95 A6		mva GET_BALL_DIRECTION.RESULT+1 :STACKORIGIN+STACKWIDTH,x
 16270 8C6B A9 1E			lda #$1E
 16271 8C6D 20 91 32			jsr SYSTEM.RANDOM.@010180000
 16272 8C70 E8				inx
 16273 8C71 AD 09 9D 95 96		mva SYSTEM.RANDOM.@010180000.RESULT :STACKORIGIN,x
 16274 8C76 A9 00 95 A6			mva #$00 :STACKORIGIN+STACKWIDTH,x
 16275 8C7A 20 B5 20			jsr addAX_CX
 16276 8C7D B5 95			lda :STACKORIGIN-1,x
 16277 8C7F 38 E9 0F			sub #$0F
 16278 8C82 8D DC A0			sta TEMP
 16279 8C85 B5 A5			lda :STACKORIGIN-1+STACKWIDTH,x
 16280 8C87 E9 00			sbc #$00
 16281 8C89 8D DD A0			sta TEMP+1
 16282 8C8C CA				dex
 16283 8C8D CA				dex
 16284
 16285 				; optimize OK (service.pas), line = 3341
 16286
 16287 8C8E A9 5A			lda #$5A
 16288 8C90 85 8E			sta @SMALLINT.MOD.B
 16289 8C92 A9 00			lda #$00
 16290 8C94 85 8F			sta @SMALLINT.MOD.B+1
 16291 8C96 AD DC A0			lda TEMP
 16292 8C99 85 86			sta @SMALLINT.MOD.A
 16293 8C9B AD DD A0			lda TEMP+1
 16294 8C9E 85 87			sta @SMALLINT.MOD.A+1
 16295 8CA0 20 1C 22			jsr @SMALLINT.MOD
 16296 8CA3 A5 92			lda @SMALLINT.MOD.RESULT
 16297 8CA5 C9 1F			cmp #$1F
 16298 8CA7 A5 93			lda @SMALLINT.MOD.RESULT+1
 16299 8CA9 E9 00			sbc #$00
 16300 8CAB 50 02			svc
 16301 8CAD 49 80			eor #$80
 16302 8CAF 30 A0			jmi l_3376
 16303 8CB1 A9 5A			lda #$5A
 16304 8CB3 85 8E			sta @SMALLINT.MOD.B
 16305 8CB5 A9 00			lda #$00
 16306 8CB7 85 8F			sta @SMALLINT.MOD.B+1
 16307 8CB9 AD DC A0			lda TEMP
 16308 8CBC 85 86			sta @SMALLINT.MOD.A
 16309 8CBE AD DD A0			lda TEMP+1
 16310 8CC1 85 87			sta @SMALLINT.MOD.A+1
 16311 8CC3 20 1C 22			jsr @SMALLINT.MOD
 16312 8CC6 A5 92			lda @SMALLINT.MOD.RESULT
 16313 8CC8 C9 3C			cmp #$3C
 16314 8CCA A5 93			lda @SMALLINT.MOD.RESULT+1
 16315 8CCC E9 00			sbc #$00
 16316 8CCE 50 02			svc
 16317 8CD0 49 80			eor #$80
 16318 8CD2 30 03 4C 51 8C		jpl l_3376
 16319
 16320 				; optimize OK (service.pas), line = 3343
 16321
 16322 8CD7 AD D8 A0			lda BALL
 16323 8CDA 8D 7F 9F			sta SET_BALL_DIRECTION.BALL
 16324 8CDD AD D9 A0			lda BALL+1
 16325 8CE0 8D 80 9F			sta SET_BALL_DIRECTION.BALL+1
 16326 8CE3 AD DC A0			lda TEMP
 16327 8CE6 8D 83 9F			sta SET_BALL_DIRECTION.ANGLE
 16328 8CE9 AD DD A0			lda TEMP+1
 16329 8CEC 8D 84 9F			sta SET_BALL_DIRECTION.ANGLE+1
 16330 8CEF 20 59 47			jsr SET_BALL_DIRECTION
 16331
 16332 				; optimize OK (service.pas), line = 3344
 16333
 16334 8CF2 AC D8 A0 84 84 AC + 	mwy BALL :bp2
 16335 8CFC A0 0C			ldy #BALL.SPEED-DATAORIGIN
 16336 8CFE B1 84			lda (:bp2),y
 16337 8D00 8D 6D 9F			sta SET_BALL_SPEED.SPEED
 16338 8D03 C8				iny
 16339 8D04 B1 84			lda (:bp2),y
 16340 8D06 8D 6E 9F			sta SET_BALL_SPEED.SPEED+1
 16341 8D09 AD D8 A0			lda BALL
 16342 8D0C 8D 69 9F			sta SET_BALL_SPEED.BALL
 16343 8D0F AD D9 A0			lda BALL+1
 16344 8D12 8D 6A 9F			sta SET_BALL_SPEED.BALL+1
 16345 8D15 20 76 45			jsr SET_BALL_SPEED
 16346
 16347 				; optimize OK (service.pas), line = 3346
 16348
 16349 8D18 AC D8 A0 84 84 AC + 	mwy BALL :bp2
 16350 8D22 A0 14			ldy #BALL.SBD-DATAORIGIN
 16351 8D24 A9 00			lda #$00
 16352 8D26 91 84			sta (:bp2),y
 16353 8D28 C8				iny
 16354 8D29 91 84			sta (:bp2),y
 16355
 16356 				; ------------------------------------------------------------
 16357
 16358 = A0D8			BALL	= DATAORIGIN+$0406
 16359 = 9CD2			BALL.X	= DATAORIGIN+$0000
 16360 = 9CD4			BALL.Y	= DATAORIGIN+$0002
 16361 = 9CD6			BALL.FINEX	= DATAORIGIN+$0004
 16362 = 9CD8			BALL.FINEY	= DATAORIGIN+$0006
 16363 = 9CDA			BALL.OLDX	= DATAORIGIN+$0008
 16364 = 9CDC			BALL.OLDY	= DATAORIGIN+$000A
 16365 = 9CDE			BALL.SPEED	= DATAORIGIN+$000C
 16366 = 9CE0			BALL.FINESPEED	= DATAORIGIN+$000E
 16367 = 9CE2			BALL.SPEEDX	= DATAORIGIN+$0010
 16368 = 9CE4			BALL.SPEEDY	= DATAORIGIN+$0012
 16369 = 9CE6			BALL.SBD	= DATAORIGIN+$0014
 16370 = 9CE8			BALL.BRWHIT	= DATAORIGIN+$0016
 16371 = 9CE9			BALL.INPLAY	= DATAORIGIN+$0017
 16372 = 9CEA			BALL.LAUNCH	= DATAORIGIN+$0018
 16373 = 9CEB			BALL.ONVAUS	= DATAORIGIN+$0019
 16374 = 9CED			BALL.STM	= DATAORIGIN+$001B
 16375 = A0DC			TEMP	= DATAORIGIN+$040A
 16376
 16377 = A0D8			@VarData	= BALL
 16378 = 0004			@VarDataSize	= 4
 16379
 16380 8D2B			@exit
 16381 					.ifdef @new
 16382 					lda <@VarData
 16383 					sta :ztmp
 16384 					lda >@VarData
 16385 					ldy #@VarDataSize-1
 16386 					jmp @FreeMem
 16387 					els
 16388 8D2B 60				rts						; ret
 16389 					eif
 16390 				.endl
 16391
 16392 8D2C			.local	BOUNCEBALL					; FUNCTION
 16393
 16394 8D2C 4C A1 8E			jmp l_33B6
 16395
 16396 8D2F			.local	CHECK_BALL					; PROCEDURE
 16397
 16398 				; optimize OK (service.pas), line = 3378
 16399
 16400 8D2F AC 43 A1 84 84 AC + 	mwy BALL :bp2
 16401 8D39 A0 17			ldy #BALL.INPLAY-DATAORIGIN
 16402 8D3B B1 84			lda (:bp2),y
 16403 8D3D F0 65			jeq l_33C5
 16404
 16405 				; optimize OK (service.pas), line = 3381
 16406
 16407 8D3F A0 02			ldy #BALL.Y-DATAORIGIN
 16408 8D41 B1 84			lda (:bp2),y
 16409 8D43 C8				iny
 16410 8D44 C9 16			cmp #$16
 16411 8D46 B1 84			lda (:bp2),y
 16412 8D48 E9 00			sbc #$00
 16413 8D4A 50 02			svc
 16414 8D4C 49 80			eor #$80
 16415 8D4E 30 20			jmi l_33E2
 16416 8D50 A0 02			ldy #BALL.Y-DATAORIGIN
 16417 8D52 B1 84			lda (:bp2),y
 16418 8D54 C8				iny
 16419 8D55 C9 8E			cmp #$8E
 16420 8D57 B1 84			lda (:bp2),y
 16421 8D59 E9 00			sbc #$00
 16422 8D5B 50 02			svc
 16423 8D5D 49 80			eor #$80
 16424 8D5F 10 0F			jpl l_33E2
 16425
 16426 				; optimize OK (service.pas), line = 3382
 16427
 16428 8D61 AD 43 A1			lda BALL
 16429 8D64 8D 28 A0			sta BALL_HIT_BLOCK.BALL
 16430 8D67 AD 44 A1			lda BALL+1
 16431 8D6A 8D 29 A0			sta BALL_HIT_BLOCK.BALL+1
 16432 8D6D 20 79 69			jsr BALL_HIT_BLOCK
 16433 8D70			l_33E2
 16434
 16435 				; optimize OK (service.pas), line = 3384
 16436
 16437 8D70 AD 43 A1			lda BALL
 16438 8D73 8D 63 9F			sta SET_BALL.BALL
 16439 8D76 AD 44 A1			lda BALL+1
 16440 8D79 8D 64 9F			sta SET_BALL.BALL+1
 16441 8D7C 20 9D 44			jsr SET_BALL
 16442
 16443 				; optimize FAIL ('BALL_SPEED', service.pas), line = 3385
 16444
 16445 8D7F E8				inx
 16446 8D80 AD 43 A1 95 96		mva BALL :STACKORIGIN,x
 16447 8D85 AD 44 A1 95 A6		mva BALL+1 :STACKORIGIN+STACKWIDTH,x
 16448 8D8A 20 B5 4B			jsr BALL_SPEED
 16449 8D8D AC 43 A1 84 84 AC + 	mwy BALL :bp2
 16450 8D97 A0 0C			ldy #BALL.SPEED-DATAORIGIN
 16451 8D99 AD B1 9F			lda BALL_SPEED.RESULT
 16452 8D9C 91 84			sta (:bp2),y
 16453 8D9E C8				iny
 16454 8D9F AD B2 9F			lda BALL_SPEED.RESULT+1
 16455 8DA2 91 84			sta (:bp2),y
 16456 8DA4			l_33C5
 16457
 16458 				; ------------------------------------------------------------
 16459
 16460 = A143			BALL	= DATAORIGIN+$0471
 16461 = 9CD2			BALL.X	= DATAORIGIN+$0000
 16462 = 9CD4			BALL.Y	= DATAORIGIN+$0002
 16463 = 9CD6			BALL.FINEX	= DATAORIGIN+$0004
 16464 = 9CD8			BALL.FINEY	= DATAORIGIN+$0006
 16465 = 9CDA			BALL.OLDX	= DATAORIGIN+$0008
 16466 = 9CDC			BALL.OLDY	= DATAORIGIN+$000A
 16467 = 9CDE			BALL.SPEED	= DATAORIGIN+$000C
 16468 = 9CE0			BALL.FINESPEED	= DATAORIGIN+$000E
 16469 = 9CE2			BALL.SPEEDX	= DATAORIGIN+$0010
 16470 = 9CE4			BALL.SPEEDY	= DATAORIGIN+$0012
 16471 = 9CE6			BALL.SBD	= DATAORIGIN+$0014
 16472 = 9CE8			BALL.BRWHIT	= DATAORIGIN+$0016
 16473 = 9CE9			BALL.INPLAY	= DATAORIGIN+$0017
 16474 = 9CEA			BALL.LAUNCH	= DATAORIGIN+$0018
 16475 = 9CEB			BALL.ONVAUS	= DATAORIGIN+$0019
 16476 = 9CED			BALL.STM	= DATAORIGIN+$001B
 16477
 16478 = A143			@VarData	= BALL
 16479 = 0002			@VarDataSize	= 2
 16480
 16481 8DA4			@exit
 16482 					.ifdef @new
 16483 					lda <@VarData
 16484 					sta :ztmp
 16485 					lda >@VarData
 16486 					ldy #@VarDataSize-1
 16487 					jmp @FreeMem
 16488 					els
 16489 8DA4 60				rts						; ret
 16490 					eif
 16491 				.endl
 16492
 16493 8DA5			.local	TEST_BALL					; PROCEDURE
 16494
 16495 				; optimize OK (service.pas), line = 3393
 16496
 16497 8DA5 AC 47 A1 84 84 AC + 	mwy BALL :bp2
 16498 8DAF A0 17			ldy #BALL.INPLAY-DATAORIGIN
 16499 8DB1 B1 84			lda (:bp2),y
 16500 8DB3 D0 03 4C A0 8E		jeq l_3403
 16501
 16502 				; optimize OK (service.pas), line = 3395
 16503
 16504 8DB8 A0 0E			ldy #BALL.FINESPEED-DATAORIGIN
 16505 8DBA B1 84			lda (:bp2),y
 16506 8DBC 18 69 01			add #$01
 16507 8DBF 91 84			sta (:bp2),y
 16508 8DC1 C8				iny
 16509 8DC2 B1 84			lda (:bp2),y
 16510 8DC4 69 00			adc #$00
 16511 8DC6 91 84			sta (:bp2),y
 16512
 16513 				; optimize OK (service.pas), line = 3397
 16514
 16515 8DC8 A0 0E			ldy #BALL.FINESPEED-DATAORIGIN
 16516 8DCA B1 84			lda (:bp2),y
 16517 8DCC 85 9F			sta :STACKORIGIN+9
 16518 8DCE C8				iny
 16519 8DCF B1 84			lda (:bp2),y
 16520 8DD1 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 16521 8DD3 AD B7 9E			lda LV
 16522 8DD6 0A				asl @
 16523 8DD7 A8				tay
 16524 8DD8 B9 A1 20			lda adr.LEVEL,y
 16525 8DDB 85 A0			sta :STACKORIGIN+10
 16526 8DDD B9 A2 20			lda adr.LEVEL+1,y
 16527 8DE0 85 B0			sta :STACKORIGIN+STACKWIDTH+10
 16528 8DE2 A0 00			ldy #$00
 16529 8DE4 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 16530 8DE6 10 01			spl
 16531 8DE8 88				dey
 16532 8DE9 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 16533 8DEB 84 BF			sty :STACKORIGIN+STACKWIDTH*2+9
 16534 8DED 84 CF			sty :STACKORIGIN+STACKWIDTH*3+9
 16535 8DEF				.LOCAL
 16536 8DEF A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
 16537 8DF1 38 E9 00			sub #$00
 16538 8DF4 D0 1C			bne L4
 16539 8DF6 A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
 16540 8DF8 C9 00			cmp #$00
 16541 8DFA D0 0A			bne L1
 16542 8DFC A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 16543 8DFE C5 B0			cmp :STACKORIGIN+STACKWIDTH+10
 16544 8E00 D0 04			bne L1
 16545 8E02 A5 9F			lda :STACKORIGIN+9
 16546 8E04 C5 A0			cmp :STACKORIGIN+10
 16547 8E06 F0 10		L1	beq L5
 16548 8E08 B0 04			bcs L3
 16549 8E0A A9 FF			lda #$FF
 16550 8E0C D0 0A			bne L5
 16551 8E0E A9 01		L3	lda #$01
 16552 8E10 D0 06			bne L5
 16553 8E12 50 04		L4	bvc L5
 16554 8E14 49 FF			eor #$FF
 16555 8E16 09 01			ora #$01
 16556 8E18			L5
 16557 					.ENDL
 16558 8E18 30 48			jmi l_3419
 16559 8E1A F0 46			jeq l_3419
 16560
 16561 				; optimize OK (service.pas), line = 3399
 16562
 16563 8E1C A0 0E			ldy #BALL.FINESPEED-DATAORIGIN
 16564 8E1E A9 00			lda #$00
 16565 8E20 91 84			sta (:bp2),y
 16566 8E22 C8				iny
 16567 8E23 91 84			sta (:bp2),y
 16568
 16569 				; optimize OK (service.pas), line = 3402
 16570
 16571 8E25 A0 0C			ldy #BALL.SPEED-DATAORIGIN
 16572 8E27 B1 84			lda (:bp2),y
 16573 8E29 C8				iny
 16574 8E2A C9 D0			cmp #$D0
 16575 8E2C B1 84			lda (:bp2),y
 16576 8E2E E9 07			sbc #$07
 16577 8E30 50 02			svc
 16578 8E32 49 80			eor #$80
 16579 8E34 10 2C			jpl l_342F
 16580
 16581 				; optimize OK (service.pas), line = 3404
 16582
 16583 8E36 A0 0C			ldy #BALL.SPEED-DATAORIGIN
 16584 8E38 B1 84			lda (:bp2),y
 16585 8E3A 18 69 0A			add #$0A
 16586 8E3D 91 84			sta (:bp2),y
 16587 8E3F C8				iny
 16588 8E40 B1 84			lda (:bp2),y
 16589 8E42 69 00			adc #$00
 16590 8E44 91 84			sta (:bp2),y
 16591
 16592 				; optimize OK (service.pas), line = 3405
 16593
 16594 8E46 A0 0C			ldy #BALL.SPEED-DATAORIGIN
 16595 8E48 B1 84			lda (:bp2),y
 16596 8E4A 8D 6D 9F			sta SET_BALL_SPEED.SPEED
 16597 8E4D C8				iny
 16598 8E4E B1 84			lda (:bp2),y
 16599 8E50 8D 6E 9F			sta SET_BALL_SPEED.SPEED+1
 16600 8E53 AD 47 A1			lda BALL
 16601 8E56 8D 69 9F			sta SET_BALL_SPEED.BALL
 16602 8E59 AD 48 A1			lda BALL+1
 16603 8E5C 8D 6A 9F			sta SET_BALL_SPEED.BALL+1
 16604 8E5F 20 76 45			jsr SET_BALL_SPEED
 16605 8E62			l_342F
 16606 8E62			l_3419
 16607
 16608 				; optimize OK (service.pas), line = 3409
 16609
 16610 8E62 AC 47 A1 84 84 AC + 	mwy BALL :bp2
 16611 8E6C A0 14			ldy #BALL.SBD-DATAORIGIN
 16612 8E6E B1 84			lda (:bp2),y
 16613 8E70 18 69 01			add #$01
 16614 8E73 91 84			sta (:bp2),y
 16615 8E75 C8				iny
 16616 8E76 B1 84			lda (:bp2),y
 16617 8E78 69 00			adc #$00
 16618 8E7A 91 84			sta (:bp2),y
 16619
 16620 				; optimize OK (service.pas), line = 3413
 16621
 16622 8E7C A0 15			ldy #BALL.SBD-DATAORIGIN+$01
 16623 8E7E B1 84			lda (:bp2),y
 16624 8E80 C9 02			cmp #$02
 16625 8E82 D0 05			bne @+
 16626 8E84 88				dey
 16627 8E85 B1 84			lda (:bp2),y
 16628 8E87 C9 58			cmp #$58
 16629 				@
 16630 8E89 90 15			jcc l_3457
 16631 				@
 16632 8E8B A0 00			ldy #$00
 16633 8E8D B1 84			lda (:bp2),y
 16634 8E8F 10 0F			jpl l_3457
 16635 				@
 16636
 16637 				; optimize OK (service.pas), line = 3414
 16638
 16639 8E91 AD 47 A1			lda BALL
 16640 8E94 8D D8 A0			sta DEVIATE_BALL.BALL
 16641 8E97 AD 48 A1			lda BALL+1
 16642 8E9A 8D D9 A0			sta DEVIATE_BALL.BALL+1
 16643 8E9D 20 51 8C			jsr DEVIATE_BALL
 16644 8EA0			l_3457
 16645 8EA0			l_3403
 16646
 16647 				; ------------------------------------------------------------
 16648
 16649 = A147			BALL	= DATAORIGIN+$0475
 16650 = 9CD2			BALL.X	= DATAORIGIN+$0000
 16651 = 9CD4			BALL.Y	= DATAORIGIN+$0002
 16652 = 9CD6			BALL.FINEX	= DATAORIGIN+$0004
 16653 = 9CD8			BALL.FINEY	= DATAORIGIN+$0006
 16654 = 9CDA			BALL.OLDX	= DATAORIGIN+$0008
 16655 = 9CDC			BALL.OLDY	= DATAORIGIN+$000A
 16656 = 9CDE			BALL.SPEED	= DATAORIGIN+$000C
 16657 = 9CE0			BALL.FINESPEED	= DATAORIGIN+$000E
 16658 = 9CE2			BALL.SPEEDX	= DATAORIGIN+$0010
 16659 = 9CE4			BALL.SPEEDY	= DATAORIGIN+$0012
 16660 = 9CE6			BALL.SBD	= DATAORIGIN+$0014
 16661 = 9CE8			BALL.BRWHIT	= DATAORIGIN+$0016
 16662 = 9CE9			BALL.INPLAY	= DATAORIGIN+$0017
 16663 = 9CEA			BALL.LAUNCH	= DATAORIGIN+$0018
 16664 = 9CEB			BALL.ONVAUS	= DATAORIGIN+$0019
 16665 = 9CED			BALL.STM	= DATAORIGIN+$001B
 16666
 16667 = A147			@VarData	= BALL
 16668 = 0002			@VarDataSize	= 2
 16669
 16670 8EA0			@exit
 16671 					.ifdef @new
 16672 					lda <@VarData
 16673 					sta :ztmp
 16674 					lda >@VarData
 16675 					ldy #@VarDataSize-1
 16676 					jmp @FreeMem
 16677 					els
 16678 8EA0 60				rts						; ret
 16679 					eif
 16680 				.endl
 16681 8EA1			l_33B6
 16682
 16683 				; optimize OK (service.pas), line = 3422
 16684
 16685 8EA1 A9 00			lda #$00
 16686 8EA3 8D D2 9E			sta SCRFLUXCNT
 16687
 16688 				; optimize OK (service.pas), line = 3423
 16689
 16690 8EA6 8D D1 9E			sta SCRFLUX
 16691
 16692 				; optimize OK (service.pas), line = 3425
 16693
 16694 8EA9 A9 01			lda #$01
 16695 8EAB 8D D0 9E			sta BALLS_IN_PLAY
 16696
 16697 				; optimize OK (service.pas), line = 3427
 16698
 16699 8EAE A9 00			lda #$00
 16700 8EB0 8D CE 9E			sta FIRE.AVL
 16701
 16702 				; optimize OK (service.pas), line = 3428
 16703
 16704 8EB3 AD ED 9D 8D E5 9D + 	:8 mva adr.NORMAL+# adr.PLAYVAUS+#
 16705
 16706 				; optimize OK (service.pas), line = 3430
 16707
 16708 8EE3 A9 FF			lda #$FF
 16709 8EE5 8D C9 9E			sta LETT.LAST
 16710 8EE8 8D CA 9E			sta LETT.LAST+1
 16711
 16712 				; optimize OK (service.pas), line = 3431
 16713
 16714 8EEB A9 00			lda #$00
 16715 8EED 8D C0 9E			sta LETT.ACTIVE
 16716
 16717 				; optimize OK (service.pas), line = 3434
 16718
 16719 8EF0 AD 6B 9C			lda PATTERN
 16720 8EF3 8D 5A A0			sta FILL_PICTURE_WITH_PATTERN.PATT
 16721 8EF6 AD 6C 9C			lda PATTERN+1
 16722 8EF9 8D 5B A0			sta FILL_PICTURE_WITH_PATTERN.PATT+1
 16723 8EFC 20 EE 76			jsr FILL_PICTURE_WITH_PATTERN
 16724
 16725 				; optimize FAIL ('SHOWBTMPICTURE', service.pas), line = 3437
 16726
 16727 8EFF E8				inx
 16728 8F00 AD 4B 9C 95 96		mva PLAYSCREEN :STACKORIGIN,x
 16729 8F05 AD 4C 9C 95 A6		mva PLAYSCREEN+1 :STACKORIGIN+STACKWIDTH,x
 16730 8F0A 20 43 43			jsr SHOWBTMPICTURE
 16731
 16732 				; optimize OK (service.pas), line = 3441
 16733
 16734 8F0D AC B1 9E			ldy CUR_PLAYER
 16735 8F10 B9 A5 9E			lda adr.SCORE.LIVES,y
 16736 8F13 8D A6 A0			sta PLOT_LIVES.LIVES
 16737 8F16 A9 00			lda #$00
 16738 8F18 8D A7 A0			sta PLOT_LIVES.LIVES+1
 16739 8F1B 20 43 82			jsr PLOT_LIVES
 16740
 16741 				; optimize OK (service.pas), line = 3447
 16742
 16743 8F1E AD 9A 9E			lda adr.SCORE.PLAYER+$04
 16744 8F21 8D A0 A0			sta WRITE_SCORE.SC
 16745 8F24 AD 9B 9E			lda adr.SCORE.PLAYER+1+$04
 16746 8F27 8D A1 A0			sta WRITE_SCORE.SC+1
 16747 8F2A AD 9C 9E			lda adr.SCORE.PLAYER+2+$04
 16748 8F2D 8D A2 A0			sta WRITE_SCORE.SC+2
 16749 8F30 AD 9D 9E			lda adr.SCORE.PLAYER+3+$04
 16750 8F33 8D A3 A0			sta WRITE_SCORE.SC+3
 16751 8F36 A9 FD			lda #$FD
 16752 8F38 8D 9D A0			sta WRITE_SCORE.PX
 16753 8F3B A9 00			lda #$00
 16754 8F3D 8D 9E A0			sta WRITE_SCORE.PX+1
 16755 8F40 A9 3C			lda #$3C
 16756 8F42 8D 9F A0			sta WRITE_SCORE.PY
 16757 8F45 20 CD 7F			jsr WRITE_SCORE
 16758
 16759 				; optimize OK (service.pas), line = 3448
 16760
 16761 8F48 AD 9E 9E			lda adr.SCORE.PLAYER+$08
 16762 8F4B 8D A0 A0			sta WRITE_SCORE.SC
 16763 8F4E AD 9F 9E			lda adr.SCORE.PLAYER+1+$08
 16764 8F51 8D A1 A0			sta WRITE_SCORE.SC+1
 16765 8F54 AD A0 9E			lda adr.SCORE.PLAYER+2+$08
 16766 8F57 8D A2 A0			sta WRITE_SCORE.SC+2
 16767 8F5A AD A1 9E			lda adr.SCORE.PLAYER+3+$08
 16768 8F5D 8D A3 A0			sta WRITE_SCORE.SC+3
 16769 8F60 A9 FD			lda #$FD
 16770 8F62 8D 9D A0			sta WRITE_SCORE.PX
 16771 8F65 A9 00			lda #$00
 16772 8F67 8D 9E A0			sta WRITE_SCORE.PX+1
 16773 8F6A A9 5D			lda #$5D
 16774 8F6C 8D 9F A0			sta WRITE_SCORE.PY
 16775 8F6F 20 CD 7F			jsr WRITE_SCORE
 16776
 16777 				; optimize OK (service.pas), line = 3449
 16778
 16779 8F72 A9 FD			lda #$FD
 16780 8F74 8D 9D A0			sta WRITE_SCORE.PX
 16781 8F77 A9 00			lda #$00
 16782 8F79 8D 9E A0			sta WRITE_SCORE.PX+1
 16783 8F7C A9 80			lda #$80
 16784 8F7E 8D 9F A0			sta WRITE_SCORE.PY
 16785 8F81 AD A8 9E			lda SCORE.HISCORE
 16786 8F84 8D A0 A0			sta WRITE_SCORE.SC
 16787 8F87 AD A9 9E			lda SCORE.HISCORE+1
 16788 8F8A 8D A1 A0			sta WRITE_SCORE.SC+1
 16789 8F8D AD AA 9E			lda SCORE.HISCORE+2
 16790 8F90 8D A2 A0			sta WRITE_SCORE.SC+2
 16791 8F93 AD AB 9E			lda SCORE.HISCORE+3
 16792 8F96 8D A3 A0			sta WRITE_SCORE.SC+3
 16793 8F99 20 CD 7F			jsr WRITE_SCORE
 16794
 16795 				; optimize FAIL ('PUT_WALL', service.pas), line = 3452
 16796
 16797 8F9C 20 A6 5C			jsr PUT_WALL
 16798
 16799 				; optimize OK (service.pas), line = 3459
 16800
 16801 8F9F A9 01			lda #$01
 16802 8FA1 8D 02 A1			sta BALL0.INPLAY
 16803
 16804 				; optimize OK (service.pas), line = 3460
 16805
 16806 8FA4 8D 03 A1			sta BALL0.LAUNCH
 16807
 16808 				; optimize OK (service.pas), line = 3463
 16809
 16810 8FA7 A9 6F			lda #$6F
 16811 8FA9 8D EB A0			sta BALL0.X
 16812 8FAC A9 00			lda #$00
 16813 8FAE 8D EC A0			sta BALL0.X+1
 16814
 16815 				; optimize OK (service.pas), line = 3464
 16816
 16817 8FB1 A9 B5			lda #$B5
 16818 8FB3 8D ED A0			sta BALL0.Y
 16819 8FB6 A9 00			lda #$00
 16820 8FB8 8D EE A0			sta BALL0.Y+1
 16821
 16822 				; optimize OK (service.pas), line = 3467
 16823
 16824 8FBB A9 FF			lda #$FF
 16825 8FBD 8D F3 A0			sta BALL0.OLDX
 16826 8FC0 8D F4 A0			sta BALL0.OLDX+1
 16827
 16828 				; optimize OK (service.pas), line = 3468
 16829
 16830 8FC3 8D F5 A0			sta BALL0.OLDY
 16831 8FC6 8D F6 A0			sta BALL0.OLDY+1
 16832
 16833 				; optimize OK (service.pas), line = 3471
 16834
 16835 8FC9 A9 00			lda #$00
 16836 8FCB 8D FF A0			sta BALL0.SBD
 16837 8FCE 8D 00 A1			sta BALL0.SBD+1
 16838
 16839 				; optimize OK (service.pas), line = 3475
 16840
 16841 8FD1 A9 10			lda #$10
 16842 8FD3 8D 04 A1			sta BALL0.ONVAUS
 16843 8FD6 A9 00			lda #$00
 16844 8FD8 8D 05 A1			sta BALL0.ONVAUS+1
 16845
 16846 				; optimize OK (service.pas), line = 3480
 16847
 16848 8FDB 8D 06 A1			sta BALL0.STM
 16849
 16850 				; optimize OK (service.pas), line = 3484
 16851
 16852 8FDE A9 E8			lda #$E8
 16853 8FE0 8D 0A 9D			sta SYSTEM.RANDOM.@010184000.RANGE
 16854 8FE3 A9 03			lda #$03
 16855 8FE5 8D 0B 9D			sta SYSTEM.RANDOM.@010184000.RANGE+1
 16856 8FE8 20 A8 32			jsr SYSTEM.RANDOM.@010184000
 16857 8FEB AD 0C 9D			lda SYSTEM.RANDOM.@010184000.RESULT
 16858 8FEE 8D C1 9E			sta LETT.INCOMING
 16859 8FF1 AD 0D 9D			lda SYSTEM.RANDOM.@010184000.RESULT+1
 16860 8FF4 8D C2 9E			sta LETT.INCOMING+1
 16861
 16862 				; optimize FAIL ('CREATE_VAUS', service.pas), line = 3487
 16863
 16864 8FF7 20 E4 7A			jsr CREATE_VAUS
 16865
 16866 				; optimize FAIL ('WRITE_ROUND_LEVEL', service.pas), line = 3490
 16867
 16868 8FFA 20 61 78			jsr WRITE_ROUND_LEVEL
 16869
 16870 				; optimize FAIL ('SET_VAUS', service.pas), line = 3492
 16871
 16872 8FFD 20 29 52			jsr SET_VAUS
 16873
 16874 				; optimize FAIL ('START_VAUS', service.pas), line = 3493
 16875
 16876 9000 20 66 52			jsr START_VAUS
 16877
 16878 				; optimize OK (service.pas), line = 3494
 16879
 16880 9003 AD 55 9E			lda VAUS.X
 16881 9006 8D CA 9F			sta MOVE_VAUS.X
 16882 9009 A9 00			lda #$00
 16883 900B 8D CB 9F			sta MOVE_VAUS.X+1
 16884 900E A9 B8			lda #$B8
 16885 9010 8D CC 9F			sta MOVE_VAUS.Y
 16886 9013 A9 00			lda #$00
 16887 9015 8D CD 9F			sta MOVE_VAUS.Y+1
 16888 9018 20 5C 54			jsr MOVE_VAUS
 16889
 16890 				; optimize FAIL ('START_LEVEL', service.pas), line = 3495
 16891
 16892 901B 20 CF 38			jsr START_LEVEL
 16893
 16894 				; optimize FAIL ('START_VAUS', service.pas), line = 3496
 16895
 16896 901E 20 66 52			jsr START_VAUS
 16897
 16898 				; optimize FAIL ('REMOVE_ROUND_LEVEL', service.pas), line = 3497
 16899
 16900 9021 20 62 78			jsr REMOVE_ROUND_LEVEL
 16901
 16902 				; optimize OK (service.pas), line = 3498
 16903
 16904 9024 AD 67 95			lda BALL0
 16905 9027 8D 63 9F			sta SET_BALL.BALL
 16906 902A AD 68 95			lda BALL0+1
 16907 902D 8D 64 9F			sta SET_BALL.BALL+1
 16908 9030 20 9D 44			jsr SET_BALL
 16909
 16910 				; optimize OK (service.pas), line = 3505
 16911
 16912 9033 A9 0F			lda #$0F
 16913 9035 20 91 32			jsr SYSTEM.RANDOM.@010180000
 16914 9038 E8				inx
 16915 9039 E8				inx
 16916 903A AD 09 9D			lda SYSTEM.RANDOM.@010180000.RESULT
 16917 903D 18 69 3C			add #$3C
 16918 9040 95 95			sta :STACKORIGIN-1,x
 16919 9042 A9 00			lda #$00
 16920 9044 69 00			adc #$00
 16921 9046 95 A5			sta :STACKORIGIN-1+STACKWIDTH,x
 16922 9048 AD 67 95			lda BALL0
 16923 904B 8D 7F 9F			sta SET_BALL_DIRECTION.BALL
 16924 904E AD 68 95			lda BALL0+1
 16925 9051 8D 80 9F			sta SET_BALL_DIRECTION.BALL+1
 16926 9054 CA				dex
 16927 9055 B5 96			lda :STACKORIGIN,x
 16928 9057 8D 83 9F			sta SET_BALL_DIRECTION.ANGLE
 16929 905A B5 A6			lda :STACKORIGIN+STACKWIDTH,x
 16930 905C 8D 84 9F			sta SET_BALL_DIRECTION.ANGLE+1
 16931 905F CA				dex
 16932 9060 20 59 47			jsr SET_BALL_DIRECTION
 16933
 16934 				; optimize OK (service.pas), line = 3507
 16935
 16936 9063 AD 67 95			lda BALL0
 16937 9066 8D 69 9F			sta SET_BALL_SPEED.BALL
 16938 9069 AD 68 95			lda BALL0+1
 16939 906C 8D 6A 9F			sta SET_BALL_SPEED.BALL+1
 16940 906F A9 F4			lda #$F4
 16941 9071 8D 6D 9F			sta SET_BALL_SPEED.SPEED
 16942 9074 A9 01			lda #$01
 16943 9076 8D 6E 9F			sta SET_BALL_SPEED.SPEED+1
 16944 9079 20 76 45			jsr SET_BALL_SPEED
 16945
 16946 				; optimize OK (service.pas), line = 3510
 16947
 16948 907C A9 00			lda #$00
 16949 907E 8D F9 A0			sta BALL0.FINESPEED
 16950 9081 8D FA A0			sta BALL0.FINESPEED+1
 16951
 16952 				; optimize OK (service.pas), line = 3512
 16953
 16954 9084 8D 1E A1			sta BALL1.INPLAY
 16955
 16956 				; optimize OK (service.pas), line = 3513
 16957
 16958 9087 8D 3A A1			sta BALL2.INPLAY
 16959
 16960 				; optimize OK (service.pas), line = 3515
 16961
 16962 908A AD 55 9E			lda VAUS.X
 16963 908D 8D DF A0			sta X
 16964 9090 A9 00			lda #$00
 16965 9092 8D E0 A0			sta X+1
 16966
 16967 				; --- WhileProlog
 16968 9095 4C 45 95			jmp l_34EF
 16969 9098			l_34F0
 16970
 16971 				; optimize FAIL ('WAIT_VBL', service.pas), line = 3519
 16972
 16973 9098 20 99 44			jsr WAIT_VBL
 16974
 16975 				; optimize OK (service.pas), line = 3528
 16976
 16977 909B A9 DF			lda <X
 16978 909D 8D DE 9E			sta MOUSECOORDS.X
 16979 90A0 A9 A0			lda >X
 16980 90A2 8D DF 9E			sta MOUSECOORDS.X+1
 16981 90A5 20 60 3A			jsr MOUSECOORDS
 16982
 16983 				; optimize OK (service.pas), line = 3533
 16984
 16985 90A8 AD B9 9E			lda TRAINER
 16986 90AB D0 19			jne l_3505
 16987 90AD AD DF A0			lda X
 16988 90B0 8D CA 9F			sta MOVE_VAUS.X
 16989 90B3 AD E0 A0			lda X+1
 16990 90B6 8D CB 9F			sta MOVE_VAUS.X+1
 16991 90B9 A9 B8			lda #$B8
 16992 90BB 8D CC 9F			sta MOVE_VAUS.Y
 16993 90BE A9 00			lda #$00
 16994 90C0 8D CD 9F			sta MOVE_VAUS.Y+1
 16995 90C3 4C 30 91			jmp l_3513
 16996 90C6			l_3505
 16997
 16998 				; optimize OK (service.pas), line = 3539
 16999
 17000 90C6 AD B9 9E			lda TRAINER
 17001 90C9 C9 01			cmp #$01
 17002 90CB D0 66			jne l_3525
 17003
 17004 				; optimize FAIL (1, service.pas), line = 3540
 17005
 17006 90CD E8				inx
 17007 90CE A9 B8 95 96			mva #$B8 :STACKORIGIN,x
 17008 90D2 A9 00 95 A6			mva #$00 :STACKORIGIN+STACKWIDTH,x
 17009 90D6 E8				inx
 17010 90D7 A9 0A 95 96			mva #$0A :STACKORIGIN,x
 17011 90DB A9 00 95 A6			mva #$00 :STACKORIGIN+STACKWIDTH,x
 17012 90DF AD EB A0			lda BALL0.X
 17013 90E2 38 ED 04 A1			sub BALL0.ONVAUS
 17014 90E6 8D 14 9F			sta MAX.A
 17015 90E9 AD EC A0			lda BALL0.X+1
 17016 90EC ED 05 A1			sbc BALL0.ONVAUS+1
 17017 90EF 8D 15 9F			sta MAX.A+1
 17018 90F2 B5 96			lda :STACKORIGIN,x
 17019 90F4 8D 16 9F			sta MAX.B
 17020 90F7 B5 A6			lda :STACKORIGIN+STACKWIDTH,x
 17021 90F9 8D 17 9F			sta MAX.B+1
 17022 90FC CA				dex
 17023 90FD 20 E6 3C			jsr MAX
 17024 9100 A9 B8			lda #$B8
 17025 9102 8D 1A 9F			sta MIN.A
 17026 9105 A9 00			lda #$00
 17027 9107 8D 1B 9F			sta MIN.A+1
 17028 910A AD 18 9F			lda MAX.RESULT
 17029 910D 8D 1C 9F			sta MIN.B
 17030 9110 AD 19 9F			lda MAX.RESULT+1
 17031 9113 8D 1D 9F			sta MIN.B+1
 17032 9116 20 11 3D			jsr MIN
 17033 9119 AD 1E 9F			lda MIN.RESULT
 17034 911C 8D CA 9F			sta MOVE_VAUS.X
 17035 911F AD 1F 9F			lda MIN.RESULT+1
 17036 9122 8D CB 9F			sta MOVE_VAUS.X+1
 17037 9125 B5 96			lda :STACKORIGIN,x
 17038 9127 8D CC 9F			sta MOVE_VAUS.Y
 17039 912A B5 A6			lda :STACKORIGIN+STACKWIDTH,x
 17040 912C 8D CD 9F			sta MOVE_VAUS.Y+1
 17041 912F CA				dex
 17042 9130			l_3513
 17043 9130 20 5C 54			jsr MOVE_VAUS
 17044 9133			l_3525
 17045
 17046 				; optimize OK (service.pas), line = 3545
 17047
 17048 9133 AD 03 A1			lda BALL0.LAUNCH
 17049 9136 C9 01			cmp #$01
 17050 9138 D0 30			jne l_3547
 17051
 17052 				; optimize FAIL (0, service.pas), line = 3547
 17053
 17054 913A EE 06 A1			inc BALL0.STM
 17055
 17056 				; optimize OK (service.pas), line = 3552
 17057
 17058 913D AD 06 A1			lda BALL0.STM
 17059 9140 C9 FA			cmp #$FA
 17060 9142 D0 05			jne l_355E
 17061 9144 A9 00			lda #$00
 17062 9146 8D 03 A1			sta BALL0.LAUNCH
 17063 9149			l_355E
 17064
 17065 				; optimize OK (service.pas), line = 3555
 17066
 17067 9149 AD 67 95			lda BALL0
 17068 914C 8D 91 9F			sta START_BALL.BALL
 17069 914F AD 68 95			lda BALL0+1
 17070 9152 8D 92 9F			sta START_BALL.BALL+1
 17071 9155 20 5A 4B			jsr START_BALL
 17072
 17073 				; optimize FAIL ('MOUSECLICK', service.pas), line = 3558
 17074
 17075 9158 20 E1 3A			jsr MOUSECLICK
 17076 915B AD E2 9E			lda MOUSECLICK.RESULT
 17077 915E C9 01			cmp #$01
 17078 9160 D0 05			jne l_3578
 17079 9162 A9 00			lda #$00
 17080 9164 8D 03 A1			sta BALL0.LAUNCH
 17081 9167			l_3578
 17082 9167 4C A6 91			jmp l_3588
 17083 916A			l_3547
 17084
 17085 				; optimize OK (service.pas), line = 3566
 17086
 17087 916A AD 02 A1			lda BALL0.INPLAY
 17088 916D F0 0F			jeq l_3594
 17089 916F AD 67 95			lda BALL0
 17090 9172 8D BB 9F			sta MOVE_BALL.BALL
 17091 9175 AD 68 95			lda BALL0+1
 17092 9178 8D BC 9F			sta MOVE_BALL.BALL+1
 17093 917B 20 6F 4C			jsr MOVE_BALL
 17094 917E			l_3594
 17095
 17096 				; optimize OK (service.pas), line = 3567
 17097
 17098 917E AD 1E A1			lda BALL1.INPLAY
 17099 9181 F0 0F			jeq l_35A6
 17100 9183 AD 69 95			lda BALL1
 17101 9186 8D BB 9F			sta MOVE_BALL.BALL
 17102 9189 AD 6A 95			lda BALL1+1
 17103 918C 8D BC 9F			sta MOVE_BALL.BALL+1
 17104 918F 20 6F 4C			jsr MOVE_BALL
 17105 9192			l_35A6
 17106
 17107 				; optimize OK (service.pas), line = 3568
 17108
 17109 9192 AD 3A A1			lda BALL2.INPLAY
 17110 9195 F0 0F			jeq l_35B8
 17111 9197 AD 6B 95			lda BALL2
 17112 919A 8D BB 9F			sta MOVE_BALL.BALL
 17113 919D AD 6C 95			lda BALL2+1
 17114 91A0 8D BC 9F			sta MOVE_BALL.BALL+1
 17115 91A3 20 6F 4C			jsr MOVE_BALL
 17116 91A6			l_35B8
 17117 91A6			l_3588
 17118
 17119 				; optimize OK (service.pas), line = 3576
 17120
 17121 91A6 AD 67 95			lda BALL0
 17122 91A9 8D 43 A1			sta CHECK_BALL.BALL
 17123 91AC AD 68 95			lda BALL0+1
 17124 91AF 8D 44 A1			sta CHECK_BALL.BALL+1
 17125 91B2 20 2F 8D			jsr CHECK_BALL
 17126
 17127 				; optimize OK (service.pas), line = 3577
 17128
 17129 91B5 AD 69 95			lda BALL1
 17130 91B8 8D 43 A1			sta CHECK_BALL.BALL
 17131 91BB AD 6A 95			lda BALL1+1
 17132 91BE 8D 44 A1			sta CHECK_BALL.BALL+1
 17133 91C1 20 2F 8D			jsr CHECK_BALL
 17134
 17135 				; optimize OK (service.pas), line = 3578
 17136
 17137 91C4 AD 6B 95			lda BALL2
 17138 91C7 8D 43 A1			sta CHECK_BALL.BALL
 17139 91CA AD 6C 95			lda BALL2+1
 17140 91CD 8D 44 A1			sta CHECK_BALL.BALL+1
 17141 91D0 20 2F 8D			jsr CHECK_BALL
 17142
 17143 				; optimize FAIL ('CHECKSHINE', service.pas), line = 3593
 17144
 17145 91D3 20 D5 3F			jsr CHECKSHINE
 17146
 17147 				; optimize FAIL ('CHECK_LETTER', service.pas), line = 3594
 17148
 17149 91D6 20 12 42			jsr CHECK_LETTER
 17150
 17151 				; optimize OK (service.pas), line = 3595
 17152
 17153 91D9 AD 67 95			lda BALL0
 17154 91DC 8D C9 A0			sta CHECK_BONUS_TYPE.B1
 17155 91DF AD 68 95			lda BALL0+1
 17156 91E2 8D CA A0			sta CHECK_BONUS_TYPE.B1+1
 17157 91E5 AD 69 95			lda BALL1
 17158 91E8 8D CD A0			sta CHECK_BONUS_TYPE.B2
 17159 91EB AD 6A 95			lda BALL1+1
 17160 91EE 8D CE A0			sta CHECK_BONUS_TYPE.B2+1
 17161 91F1 AD 6B 95			lda BALL2
 17162 91F4 8D D1 A0			sta CHECK_BONUS_TYPE.B3
 17163 91F7 AD 6C 95			lda BALL2+1
 17164 91FA 8D D2 A0			sta CHECK_BONUS_TYPE.B3+1
 17165 91FD 20 15 89			jsr CHECK_BONUS_TYPE
 17166
 17167 				; optimize FAIL ('CHECK_FIRE', service.pas), line = 3596
 17168
 17169 9200 20 AB 85			jsr CHECK_FIRE
 17170
 17171 				; optimize FAIL ('CHECK_FLUX', service.pas), line = 3597
 17172
 17173 9203 20 72 87			jsr CHECK_FLUX
 17174
 17175 				; optimize OK (service.pas), line = 3599
 17176
 17177 9206 AD 55 9E			lda VAUS.X
 17178 9209 18 6D 5D 9E			add VAUS.WIDTH
 17179 920D 85 9F			sta :STACKORIGIN+9
 17180 920F A9 00			lda #$00
 17181 9211 69 00			adc #$00
 17182 9213 A0 01			ldy #1
 17183 9215 C9 00			cmp #$00
 17184 9217 D0 04			bne @+
 17185 9219 A5 9F			lda :STACKORIGIN+9
 17186 921B C9 D7			cmp #$D7
 17187 				@
 17188 921D F0 01			beq @+
 17189 921F 88				dey
 17190 				@
 17191 9220 98				tya
 17192 9221 2D D1 9E			and SCRFLUX
 17193 9224 F0 03			jeq l_35F0
 17194 9226 20 0F 88			jsr VAUS_OUT
 17195 9229			l_35F0
 17196
 17197 				; optimize OK (service.pas), line = 3601
 17198
 17199 9229 AD 61 9E			lda VAUS.LETTER
 17200 922C C9 04			cmp #$04
 17201 922E F0 03 4C 73 93		jne l_3606
 17202
 17203 				; optimize OK (service.pas), line = 3603
 17204
 17205 9233 A9 03			lda #$03
 17206 9235 8D D0 9E			sta BALLS_IN_PLAY
 17207
 17208 				; optimize OK (service.pas), line = 3605
 17209
 17210 9238 AC 69 95 84 84 AC + 	mwy BALL1 :bp2
 17211 9242 A0 1B			ldy #$1B
 17212 9244 B9 EB A0 91 84 88 + 	mva:rpl adr.BALL0,y (:bp2),y-
 17213
 17214 				; optimize OK (service.pas), line = 3606
 17215
 17216 924C AC 6B 95 84 84 AC + 	mwy BALL2 :bp2
 17217 9256 A0 1B			ldy #$1B
 17218 9258 B9 EB A0 91 84 88 + 	mva:rpl adr.BALL0,y (:bp2),y-
 17219
 17220 				; optimize OK (service.pas), line = 3608
 17221
 17222 9260 AD 67 95			lda BALL0
 17223 9263 8D 89 9F			sta GET_BALL_DIRECTION.BALL
 17224 9266 AD 68 95			lda BALL0+1
 17225 9269 8D 8A 9F			sta GET_BALL_DIRECTION.BALL+1
 17226 926C 20 3C 49			jsr GET_BALL_DIRECTION
 17227 926F E8				inx
 17228 9270 E8				inx
 17229 9271 A9 5A			lda #$5A
 17230 9273 85 8E			sta @SMALLINT.DIV.B
 17231 9275 A9 00			lda #$00
 17232 9277 85 8F			sta @SMALLINT.DIV.B+1
 17233 9279 AD 8D 9F			lda GET_BALL_DIRECTION.RESULT
 17234 927C 85 86			sta @SMALLINT.DIV.A
 17235 927E AD 8E 9F			lda GET_BALL_DIRECTION.RESULT+1
 17236 9281 85 87			sta @SMALLINT.DIV.A+1
 17237 9283 20 FF 21			jsr @SMALLINT.DIV
 17238 9286 CA				dex
 17239 9287 A5 86			lda :eax
 17240 9289 8D E5 A0			sta T1
 17241 928C A5 87			lda :eax+1
 17242 928E 8D E6 A0			sta T1+1
 17243 9291 CA				dex
 17244
 17245 				; optimize OK (service.pas), line = 3610
 17246
 17247 9292 AD F7 A0			lda BALL0.SPEED
 17248 9295 8D E7 A0			sta T2
 17249 9298 AD F8 A0			lda BALL0.SPEED+1
 17250 929B 8D E8 A0			sta T2+1
 17251
 17252 				; optimize OK (service.pas), line = 3617
 17253
 17254 929E A9 5A			lda #$5A
 17255 92A0 85 8E			sta :ecx
 17256 92A2 A9 00			lda #$00
 17257 92A4 85 8F			sta :ecx+1
 17258 92A6 AD E5 A0			lda T1
 17259 92A9 85 86			sta :eax
 17260 92AB AD E6 A0			lda T1+1
 17261 92AE 85 87			sta :eax+1
 17262 					.ifdef fmulinit
 17263 					fmulu_16
 17264 					els
 17265 92B0 20 8B 22			imulCX
 17266 					eif
 17267 92B3 A5 86			lda :eax
 17268 92B5 8D E9 A0			sta HLP
 17269 92B8 A5 87			lda :eax+1
 17270 92BA 8D EA A0			sta HLP+1
 17271
 17272 				; optimize OK (service.pas), line = 3619
 17273
 17274 92BD AD E9 A0			lda HLP
 17275 92C0 18 69 1E			add #$1E
 17276 92C3 8D 83 9F			sta SET_BALL_DIRECTION.ANGLE
 17277 92C6 AD EA A0			lda HLP+1
 17278 92C9 69 00			adc #$00
 17279 92CB 8D 84 9F			sta SET_BALL_DIRECTION.ANGLE+1
 17280 92CE AD 67 95			lda BALL0
 17281 92D1 8D 7F 9F			sta SET_BALL_DIRECTION.BALL
 17282 92D4 AD 68 95			lda BALL0+1
 17283 92D7 8D 80 9F			sta SET_BALL_DIRECTION.BALL+1
 17284 92DA 20 59 47			jsr SET_BALL_DIRECTION
 17285
 17286 				; optimize OK (service.pas), line = 3620
 17287
 17288 92DD AD E9 A0			lda HLP
 17289 92E0 18 69 2D			add #$2D
 17290 92E3 8D 83 9F			sta SET_BALL_DIRECTION.ANGLE
 17291 92E6 AD EA A0			lda HLP+1
 17292 92E9 69 00			adc #$00
 17293 92EB 8D 84 9F			sta SET_BALL_DIRECTION.ANGLE+1
 17294 92EE AD 69 95			lda BALL1
 17295 92F1 8D 7F 9F			sta SET_BALL_DIRECTION.BALL
 17296 92F4 AD 6A 95			lda BALL1+1
 17297 92F7 8D 80 9F			sta SET_BALL_DIRECTION.BALL+1
 17298 92FA 20 59 47			jsr SET_BALL_DIRECTION
 17299
 17300 				; optimize OK (service.pas), line = 3621
 17301
 17302 92FD AD E9 A0			lda HLP
 17303 9300 18 69 3C			add #$3C
 17304 9303 8D 83 9F			sta SET_BALL_DIRECTION.ANGLE
 17305 9306 AD EA A0			lda HLP+1
 17306 9309 69 00			adc #$00
 17307 930B 8D 84 9F			sta SET_BALL_DIRECTION.ANGLE+1
 17308 930E AD 6B 95			lda BALL2
 17309 9311 8D 7F 9F			sta SET_BALL_DIRECTION.BALL
 17310 9314 AD 6C 95			lda BALL2+1
 17311 9317 8D 80 9F			sta SET_BALL_DIRECTION.BALL+1
 17312 931A 20 59 47			jsr SET_BALL_DIRECTION
 17313
 17314 				; optimize OK (service.pas), line = 3625
 17315
 17316 931D AD 67 95			lda BALL0
 17317 9320 8D 69 9F			sta SET_BALL_SPEED.BALL
 17318 9323 AD 68 95			lda BALL0+1
 17319 9326 8D 6A 9F			sta SET_BALL_SPEED.BALL+1
 17320 9329 AD E7 A0			lda T2
 17321 932C 8D 6D 9F			sta SET_BALL_SPEED.SPEED
 17322 932F AD E8 A0			lda T2+1
 17323 9332 8D 6E 9F			sta SET_BALL_SPEED.SPEED+1
 17324 9335 20 76 45			jsr SET_BALL_SPEED
 17325
 17326 				; optimize OK (service.pas), line = 3626
 17327
 17328 9338 AD 69 95			lda BALL1
 17329 933B 8D 69 9F			sta SET_BALL_SPEED.BALL
 17330 933E AD 6A 95			lda BALL1+1
 17331 9341 8D 6A 9F			sta SET_BALL_SPEED.BALL+1
 17332 9344 AD E7 A0			lda T2
 17333 9347 8D 6D 9F			sta SET_BALL_SPEED.SPEED
 17334 934A AD E8 A0			lda T2+1
 17335 934D 8D 6E 9F			sta SET_BALL_SPEED.SPEED+1
 17336 9350 20 76 45			jsr SET_BALL_SPEED
 17337
 17338 				; optimize OK (service.pas), line = 3627
 17339
 17340 9353 AD 6B 95			lda BALL2
 17341 9356 8D 69 9F			sta SET_BALL_SPEED.BALL
 17342 9359 AD 6C 95			lda BALL2+1
 17343 935C 8D 6A 9F			sta SET_BALL_SPEED.BALL+1
 17344 935F AD E7 A0			lda T2
 17345 9362 8D 6D 9F			sta SET_BALL_SPEED.SPEED
 17346 9365 AD E8 A0			lda T2+1
 17347 9368 8D 6E 9F			sta SET_BALL_SPEED.SPEED+1
 17348 936B 20 76 45			jsr SET_BALL_SPEED
 17349
 17350 				; optimize OK (service.pas), line = 3629
 17351
 17352 936E A9 00			lda #$00
 17353 9370 8D 61 9E			sta VAUS.LETTER
 17354 9373			l_3606
 17355
 17356 				; optimize OK (service.pas), line = 3633
 17357
 17358 9373 AD D0 9E			lda BALLS_IN_PLAY
 17359 9376 C9 02			cmp #$02
 17360 9378 90 08			jcc l_3669
 17361 937A A9 00			lda #$00
 17362 937C 8D C1 9E			sta LETT.INCOMING
 17363 937F 8D C2 9E			sta LETT.INCOMING+1
 17364 9382			l_3669
 17365
 17366 				; optimize OK (service.pas), line = 3637
 17367
 17368 9382 AD B1 9E			lda CUR_PLAYER
 17369 9385 0A				asl @
 17370 9386 0A				asl @
 17371 9387 A8				tay
 17372 9388 B9 96 9E			lda adr.SCORE.PLAYER,y
 17373 938B 8D 3F A1			sta SCORES
 17374 938E B9 97 9E			lda adr.SCORE.PLAYER+1,y
 17375 9391 8D 40 A1			sta SCORES+1
 17376 9394 B9 98 9E			lda adr.SCORE.PLAYER+2,y
 17377 9397 8D 41 A1			sta SCORES+2
 17378 939A B9 99 9E			lda adr.SCORE.PLAYER+3,y
 17379 939D 8D 42 A1			sta SCORES+3
 17380
 17381 				; optimize OK (service.pas), line = 3639
 17382
 17383 93A0 AD D7 9E			lda OLD_SCORES+3
 17384 93A3 CD 42 A1			cmp SCORES+3
 17385 93A6 D0 16			bne @+
 17386 93A8 AD D6 9E			lda OLD_SCORES+2
 17387 93AB CD 41 A1			cmp SCORES+2
 17388 93AE D0 0E			bne @+
 17389 93B0 AD D5 9E			lda OLD_SCORES+1
 17390 93B3 CD 40 A1			cmp SCORES+1
 17391 93B6 D0 06			bne @+
 17392 93B8 AD D4 9E			lda OLD_SCORES
 17393 93BB CD 3F A1			cmp SCORES
 17394 				@
 17395 93BE F0 46			jeq l_3687
 17396
 17397 				; optimize OK (service.pas), line = 3641
 17398
 17399 93C0 AC B1 9E			ldy CUR_PLAYER
 17400 93C3 B9 92 20			lda adr.POS_DIGIT,y
 17401 93C6 8D 9F A0			sta WRITE_SCORE.PY
 17402 93C9 A9 FD			lda #$FD
 17403 93CB 8D 9D A0			sta WRITE_SCORE.PX
 17404 93CE A9 00			lda #$00
 17405 93D0 8D 9E A0			sta WRITE_SCORE.PX+1
 17406 93D3 AD 3F A1			lda SCORES
 17407 93D6 8D A0 A0			sta WRITE_SCORE.SC
 17408 93D9 AD 40 A1			lda SCORES+1
 17409 93DC 8D A1 A0			sta WRITE_SCORE.SC+1
 17410 93DF AD 41 A1			lda SCORES+2
 17411 93E2 8D A2 A0			sta WRITE_SCORE.SC+2
 17412 93E5 AD 42 A1			lda SCORES+3
 17413 93E8 8D A3 A0			sta WRITE_SCORE.SC+3
 17414 93EB 20 CD 7F			jsr WRITE_SCORE
 17415
 17416 				; optimize OK (service.pas), line = 3643
 17417
 17418 93EE AD 3F A1			lda SCORES
 17419 93F1 8D D4 9E			sta OLD_SCORES
 17420 93F4 AD 40 A1			lda SCORES+1
 17421 93F7 8D D5 9E			sta OLD_SCORES+1
 17422 93FA AD 41 A1			lda SCORES+2
 17423 93FD 8D D6 9E			sta OLD_SCORES+2
 17424 9400 AD 42 A1			lda SCORES+3
 17425 9403 8D D7 9E			sta OLD_SCORES+3
 17426 9406			l_3687
 17427
 17428 				; optimize OK (service.pas), line = 3649
 17429
 17430 9406 AD B1 9E			lda CUR_PLAYER
 17431 9409 0A				asl @
 17432 940A 0A				asl @
 17433 940B A8				tay
 17434 940C B9 96 9E			lda adr.SCORE.PLAYER,y
 17435 940F 85 9F			sta :STACKORIGIN+9
 17436 9411 B9 97 9E			lda adr.SCORE.PLAYER+1,y
 17437 9414 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 17438 9416 B9 99 9E			lda adr.SCORE.PLAYER+3,y
 17439 9419 CD AB 9E			cmp SCORE.HISCORE+3
 17440 941C D0 14			bne @+
 17441 941E B9 98 9E			lda adr.SCORE.PLAYER+2,y
 17442 9421 CD AA 9E			cmp SCORE.HISCORE+2
 17443 9424 D0 0C			bne @+
 17444 9426 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 17445 9428 CD A9 9E			cmp SCORE.HISCORE+1
 17446 942B D0 05			bne @+
 17447 942D A5 9F			lda :STACKORIGIN+9
 17448 942F CD A8 9E			cmp SCORE.HISCORE
 17449 				@
 17450 9432 90 44			jcc l_36AA
 17451 9434 F0 42			jeq l_36AA
 17452
 17453 				; optimize OK (service.pas), line = 3652
 17454
 17455 9436 B9 96 9E			lda adr.SCORE.PLAYER,y
 17456 9439 8D A8 9E			sta SCORE.HISCORE
 17457 943C B9 97 9E			lda adr.SCORE.PLAYER+1,y
 17458 943F 8D A9 9E			sta SCORE.HISCORE+1
 17459 9442 B9 98 9E			lda adr.SCORE.PLAYER+2,y
 17460 9445 8D AA 9E			sta SCORE.HISCORE+2
 17461 9448 B9 99 9E			lda adr.SCORE.PLAYER+3,y
 17462 944B 8D AB 9E			sta SCORE.HISCORE+3
 17463
 17464 				; optimize OK (service.pas), line = 3654
 17465
 17466 944E A9 FD			lda #$FD
 17467 9450 8D 9D A0			sta WRITE_SCORE.PX
 17468 9453 A9 00			lda #$00
 17469 9455 8D 9E A0			sta WRITE_SCORE.PX+1
 17470 9458 A9 80			lda #$80
 17471 945A 8D 9F A0			sta WRITE_SCORE.PY
 17472 945D AD A8 9E			lda SCORE.HISCORE
 17473 9460 8D A0 A0			sta WRITE_SCORE.SC
 17474 9463 AD A9 9E			lda SCORE.HISCORE+1
 17475 9466 8D A1 A0			sta WRITE_SCORE.SC+1
 17476 9469 AD AA 9E			lda SCORE.HISCORE+2
 17477 946C 8D A2 A0			sta WRITE_SCORE.SC+2
 17478 946F AD AB 9E			lda SCORE.HISCORE+3
 17479 9472 8D A3 A0			sta WRITE_SCORE.SC+3
 17480 9475 20 CD 7F			jsr WRITE_SCORE
 17481 9478			l_36AA
 17482
 17483 				; optimize OK (service.pas), line = 3661
 17484
 17485 9478 AD 67 95			lda BALL0
 17486 947B 8D 47 A1			sta TEST_BALL.BALL
 17487 947E AD 68 95			lda BALL0+1
 17488 9481 8D 48 A1			sta TEST_BALL.BALL+1
 17489 9484 20 A5 8D			jsr TEST_BALL
 17490
 17491 				; optimize OK (service.pas), line = 3662
 17492
 17493 9487 AD 69 95			lda BALL1
 17494 948A 8D 47 A1			sta TEST_BALL.BALL
 17495 948D AD 6A 95			lda BALL1+1
 17496 9490 8D 48 A1			sta TEST_BALL.BALL+1
 17497 9493 20 A5 8D			jsr TEST_BALL
 17498
 17499 				; optimize OK (service.pas), line = 3663
 17500
 17501 9496 AD 6B 95			lda BALL2
 17502 9499 8D 47 A1			sta TEST_BALL.BALL
 17503 949C AD 6C 95			lda BALL2+1
 17504 949F 8D 48 A1			sta TEST_BALL.BALL+1
 17505 94A2 20 A5 8D			jsr TEST_BALL
 17506
 17507 				; optimize OK (service.pas), line = 3705
 17508
 17509 94A5 AD 03 A1			lda BALL0.LAUNCH
 17510 94A8 D0 30			jne l_36D3
 17511
 17512 				; optimize OK (service.pas), line = 3707
 17513
 17514 94AA AD 02 A1			lda BALL0.INPLAY
 17515 94AD D0 2B			jne l_36E3
 17516
 17517 				; optimize OK (service.pas), line = 3709
 17518
 17519 94AF AC 67 95 84 84 AC + 	mwy BALL0 :bp2
 17520 94B9 A0 1B			ldy #$1B
 17521 94BB B9 07 A1 91 84 88 + 	mva:rpl adr.BALL1,y (:bp2),y-
 17522
 17523 				; optimize OK (service.pas), line = 3710
 17524
 17525 94C3 AC 69 95 84 84 AC + 	mwy BALL1 :bp2
 17526 94CD A0 1B			ldy #$1B
 17527 94CF B9 23 A1 91 84 88 + 	mva:rpl adr.BALL2,y (:bp2),y-
 17528
 17529 				; optimize OK (service.pas), line = 3711
 17530
 17531 94D7 8D 3A A1			sta BALL2.INPLAY
 17532 94DA			l_36E3
 17533 94DA			l_36D3
 17534
 17535 				; optimize OK (service.pas), line = 3715
 17536
 17537 94DA A9 00			lda #$00
 17538 94DC 8D D0 9E			sta BALLS_IN_PLAY
 17539
 17540 				; optimize OK (service.pas), line = 3717
 17541
 17542 94DF AD 02 A1			lda BALL0.INPLAY
 17543 94E2 F0 03			jeq l_3700
 17544 94E4 EE D0 9E			inc BALLS_IN_PLAY
 17545 94E7			l_3700
 17546
 17547 				; optimize OK (service.pas), line = 3718
 17548
 17549 94E7 AD 1E A1			lda BALL1.INPLAY
 17550 94EA F0 03			jeq l_3713
 17551 94EC EE D0 9E			inc BALLS_IN_PLAY
 17552 94EF			l_3713
 17553
 17554 				; optimize OK (service.pas), line = 3719
 17555
 17556 94EF AD 3A A1			lda BALL2.INPLAY
 17557 94F2 F0 03			jeq l_3726
 17558 94F4 EE D0 9E			inc BALLS_IN_PLAY
 17559 94F7			l_3726
 17560
 17561 				; optimize OK (service.pas), line = 3722
 17562
 17563 94F7 AD 02 A1			lda BALL0.INPLAY
 17564 94FA D0 49			jne l_373C
 17565
 17566 				; optimize OK (service.pas), line = 3724
 17567
 17568 94FC A9 01			lda #$01
 17569 94FE 8D 03 A1			sta BALL0.LAUNCH
 17570
 17571 				; optimize OK (service.pas), line = 3725
 17572
 17573 9501 AD 67 95			lda BALL0
 17574 9504 8D 5F 9F			sta REMOVE_BALL.BALL
 17575 9507 AD 68 95			lda BALL0+1
 17576 950A 8D 60 9F			sta REMOVE_BALL.BALL+1
 17577 950D 20 13 44			jsr REMOVE_BALL
 17578
 17579 				; optimize FAIL ('DESTROY_VAUS', service.pas), line = 3726
 17580
 17581 9510 20 C9 78			jsr DESTROY_VAUS
 17582
 17583 				; optimize OK (service.pas), line = 3727
 17584
 17585 9513 AC B1 9E			ldy CUR_PLAYER
 17586 9516 B9 A5 9E			lda adr.SCORE.LIVES,y
 17587 9519 38 E9 01			sub #$01
 17588 951C 99 A5 9E			sta adr.SCORE.LIVES,y
 17589
 17590 				; optimize OK (service.pas), line = 3728
 17591
 17592 951F AD 93 9C			lda WALL_P
 17593 9522 85 8E			sta @move.dst
 17594 9524 AD B1 9E			lda CUR_PLAYER
 17595 9527 18 6D 94 9C			add WALL_P+1
 17596 952B 85 8F			sta @move.dst+1
 17597 952D AD 95 9C			lda WALL
 17598 9530 85 8A			sta @move.src
 17599 9532 AD 96 9C			lda WALL+1
 17600 9535 85 8B			sta @move.src+1
 17601 9537 A9 00			lda <256
 17602 9539 85 86			sta @move.cnt
 17603 953B A9 01			lda >256
 17604 953D 85 87			sta @move.cnt+1
 17605 953F 20 82 21			jsr @move
 17606
 17607 				; optimize FAIL ('NOSOUND', service.pas), line = 3736
 17608
 17609 9542 20 E4 3C			jsr NOSOUND
 17610 9545			l_373C
 17611 9545			l_34EF
 17612
 17613 				; optimize OK (service.pas), line = 3517
 17614
 17615 9545 AD 94 9E			lda REMAIN_BLK
 17616 9548 F0 0D			jeq l_34F0w
 17617 954A AD 02 A1			lda BALL0.INPLAY
 17618 954D F0 08			jeq l_34F0w
 17619 954F AD B0 9E			lda SCORE.ABORTPLAY
 17620 9552 D0 03 4C 98 90		jeq l_34F0
 17621 9557			l_34F0w
 17622
 17623 				; optimize OK (service.pas), line = 3792
 17624
 17625 9557 A9 00			lda #$00
 17626 9559 8D DE A0			sta RESULT
 17627
 17628 				; optimize OK (service.pas), line = 3793
 17629
 17630 955C AD 94 9E			lda REMAIN_BLK
 17631 955F D0 05			jne l_378A
 17632 9561 A9 01			lda #$01
 17633 9563 8D DE A0			sta RESULT
 17634 9566			l_378A
 17635 9566			@exit
 17636
 17637 				; ------------------------------------------------------------
 17638
 17639 = A0DE			RESULT	= DATAORIGIN+$040C
 17640 = A0DF			X	= DATAORIGIN+$040D
 17641 = A0E1			Y	= DATAORIGIN+$040F
 17642 = A0E3			KEY	= DATAORIGIN+$0411
 17643 = A0E5			T1	= DATAORIGIN+$0413
 17644 = A0E7			T2	= DATAORIGIN+$0415
 17645 = A0E9			HLP	= DATAORIGIN+$0417
 17646 = A0EB			adr.BALL0	= DATAORIGIN+$0419	; [28] RECORD
 17647 9566			.var BALL0	= adr.BALL0 .word
 17648 = A0EB			BALL0.X	= DATAORIGIN+$0419
 17649 = A0ED			BALL0.Y	= DATAORIGIN+$041B
 17650 = A0EF			BALL0.FINEX	= DATAORIGIN+$041D
 17651 = A0F1			BALL0.FINEY	= DATAORIGIN+$041F
 17652 = A0F3			BALL0.OLDX	= DATAORIGIN+$0421
 17653 = A0F5			BALL0.OLDY	= DATAORIGIN+$0423
 17654 = A0F7			BALL0.SPEED	= DATAORIGIN+$0425
 17655 = A0F9			BALL0.FINESPEED	= DATAORIGIN+$0427
 17656 = A0FB			BALL0.SPEEDX	= DATAORIGIN+$0429
 17657 = A0FD			BALL0.SPEEDY	= DATAORIGIN+$042B
 17658 = A0FF			BALL0.SBD	= DATAORIGIN+$042D
 17659 = A101			BALL0.BRWHIT	= DATAORIGIN+$042F
 17660 = A102			BALL0.INPLAY	= DATAORIGIN+$0430
 17661 = A103			BALL0.LAUNCH	= DATAORIGIN+$0431
 17662 = A104			BALL0.ONVAUS	= DATAORIGIN+$0432
 17663 = A106			BALL0.STM	= DATAORIGIN+$0434
 17664 = A107			adr.BALL1	= DATAORIGIN+$0435	; [28] RECORD
 17665 9566			.var BALL1	= adr.BALL1 .word
 17666 = A107			BALL1.X	= DATAORIGIN+$0435
 17667 = A109			BALL1.Y	= DATAORIGIN+$0437
 17668 = A10B			BALL1.FINEX	= DATAORIGIN+$0439
 17669 = A10D			BALL1.FINEY	= DATAORIGIN+$043B
 17670 = A10F			BALL1.OLDX	= DATAORIGIN+$043D
 17671 = A111			BALL1.OLDY	= DATAORIGIN+$043F
 17672 = A113			BALL1.SPEED	= DATAORIGIN+$0441
 17673 = A115			BALL1.FINESPEED	= DATAORIGIN+$0443
 17674 = A117			BALL1.SPEEDX	= DATAORIGIN+$0445
 17675 = A119			BALL1.SPEEDY	= DATAORIGIN+$0447
 17676 = A11B			BALL1.SBD	= DATAORIGIN+$0449
 17677 = A11D			BALL1.BRWHIT	= DATAORIGIN+$044B
 17678 = A11E			BALL1.INPLAY	= DATAORIGIN+$044C
 17679 = A11F			BALL1.LAUNCH	= DATAORIGIN+$044D
 17680 = A120			BALL1.ONVAUS	= DATAORIGIN+$044E
 17681 = A122			BALL1.STM	= DATAORIGIN+$0450
 17682 = A123			adr.BALL2	= DATAORIGIN+$0451	; [28] RECORD
 17683 9566			.var BALL2	= adr.BALL2 .word
 17684 = A123			BALL2.X	= DATAORIGIN+$0451
 17685 = A125			BALL2.Y	= DATAORIGIN+$0453
 17686 = A127			BALL2.FINEX	= DATAORIGIN+$0455
 17687 = A129			BALL2.FINEY	= DATAORIGIN+$0457
 17688 = A12B			BALL2.OLDX	= DATAORIGIN+$0459
 17689 = A12D			BALL2.OLDY	= DATAORIGIN+$045B
 17690 = A12F			BALL2.SPEED	= DATAORIGIN+$045D
 17691 = A131			BALL2.FINESPEED	= DATAORIGIN+$045F
 17692 = A133			BALL2.SPEEDX	= DATAORIGIN+$0461
 17693 = A135			BALL2.SPEEDY	= DATAORIGIN+$0463
 17694 = A137			BALL2.SBD	= DATAORIGIN+$0465
 17695 = A139			BALL2.BRWHIT	= DATAORIGIN+$0467
 17696 = A13A			BALL2.INPLAY	= DATAORIGIN+$0468
 17697 = A13B			BALL2.LAUNCH	= DATAORIGIN+$0469
 17698 = A13C			BALL2.ONVAUS	= DATAORIGIN+$046A
 17699 = A13E			BALL2.STM	= DATAORIGIN+$046C
 17700 = A13F			SCORES	= DATAORIGIN+$046D
 17701
 17702 = A0DF			@VarData	= X
 17703 = 0064			@VarDataSize	= 100
 17704
 17705 9566 60				rts						; ret
 17706 = 9567 EB A0		BALL0
 17706 = 9569 07 A1		BALL1
 17706 = 956B 23 A1		BALL2
 17706 				.endl
 17707
 17708 956D			.local	CHOOSE_START_WALL				; FUNCTION
 17709
 17710 				; optimize OK (service.pas), line = 3816
 17711
 17712 956D A9 01			lda #$01
 17713 956F 8D 51 A1			sta ST
 17714 9572 A9 00			lda #$00
 17715 9574 8D 52 A1			sta ST+1
 17716
 17717 				; optimize OK (service.pas), line = 3874
 17718
 17719 9577 AD 51 A1			lda ST
 17720 957A 8D 4B A1			sta RESULT
 17721 957D AD 52 A1			lda ST+1
 17722 9580 8D 4C A1			sta RESULT+1
 17723 9583			@exit
 17724
 17725 				; ------------------------------------------------------------
 17726
 17727 = A14B			RESULT	= DATAORIGIN+$0479
 17728 = 0046			PX	= $46
 17729 = 0064			PY	= $64
 17730 = 0022			DX	= $22
 17731 = 0023			DY	= $23
 17732 = 0013			DDX	= $13
 17733 = 000E			DDY	= $0E
 17734 = A14D			X	= DATAORIGIN+$047B
 17735 = A14F			Y	= DATAORIGIN+$047D
 17736 = A151			ST	= DATAORIGIN+$047F
 17737 = A153			OLDX	= DATAORIGIN+$0481
 17738 = A155			OLDY	= DATAORIGIN+$0483
 17739 = A157			NEWX	= DATAORIGIN+$0485
 17740 = A159			NEWY	= DATAORIGIN+$0487
 17741
 17742 = A14D			@VarData	= X
 17743 = 000E			@VarDataSize	= 14
 17744
 17745 9583 60				rts						; ret
 17746 				.endl
 17747
 17748 9584			.local	SET_START_PARAMETERS				; PROCEDURE
 17749
 17750 				; optimize OK (service.pas), line = 3883
 17751
 17752 9584 A9 01			lda #$01
 17753 9586 8D D4 9E			sta OLD_SCORES
 17754 9589 A9 00			lda #$00
 17755 958B 8D D5 9E			sta OLD_SCORES+1
 17756 958E 8D D6 9E			sta OLD_SCORES+2
 17757 9591 8D D7 9E			sta OLD_SCORES+3
 17758
 17759 				; optimize OK (service.pas), line = 3885
 17760
 17761 9594 A9 01			lda #$01
 17762 9596 8D 5B A1			sta X
 17763
 17764 9599			l_37AF
 17765 				; --- ForToDoCondition
 17766 9599 AD 5B A1			lda X
 17767 959C C9 03			cmp #$03
 17768 959E B0 4E			jcs l_37BD
 17769
 17770 				; optimize OK (service.pas), line = 3887
 17771
 17772 95A0 0A				asl @
 17773 95A1 0A				asl @
 17774 95A2 A8				tay
 17775 95A3 A9 00			lda #$00
 17776 95A5 99 96 9E			sta adr.SCORE.PLAYER,y
 17777 95A8 99 97 9E			sta adr.SCORE.PLAYER+1,y
 17778 95AB 99 98 9E			sta adr.SCORE.PLAYER+2,y
 17779 95AE 99 99 9E			sta adr.SCORE.PLAYER+3,y
 17780
 17781 				; optimize OK (service.pas), line = 3888
 17782
 17783 95B1 AC 5B A1			ldy X
 17784 95B4 A9 05			lda #$05
 17785 95B6 99 A5 9E			sta adr.SCORE.LIVES,y
 17786
 17787 				; optimize OK (service.pas), line = 3889
 17788
 17789 95B9 A9 01			lda #$01
 17790 95BB 99 A2 9E			sta adr.SCORE.WALL_N,y
 17791
 17792 				; optimize OK (service.pas), line = 3890
 17793
 17794 95BE AD 93 9C			lda WALL_P
 17795 95C1 85 8E			sta @move.dst
 17796 95C3 AD 5B A1			lda X
 17797 95C6 18 6D 94 9C			add WALL_P+1
 17798 95CA 85 8F			sta @move.dst+1
 17799 95CC AD 97 9C			lda ALL_WALLS
 17800 95CF 85 8A			sta @move.src
 17801 95D1 AD 98 9C			lda ALL_WALLS+1
 17802 95D4 85 8B			sta @move.src+1
 17803 95D6 A9 00			lda <256
 17804 95D8 85 86			sta @move.cnt
 17805 95DA A9 01			lda >256
 17806 95DC 85 87			sta @move.cnt+1
 17807 95DE 20 82 21			jsr @move
 17808
 17809 				; optimize OK (service.pas), line = 3892
 17810
 17811 95E1 AC 5B A1			ldy X
 17812 95E4 A9 00			lda #$00
 17813 95E6 99 AD 9E			sta adr.SCORE.ROUNDSEL,y
 17814
 17815 				; --- ForToDoEpilog
 17816 95E9 EE 5B A1			inc X
 17817 95EC D0 AB			jne l_37AF
 17818 95EE			l_37BD
 17819
 17820 				; optimize OK (service.pas), line = 3895
 17821
 17822 95EE A9 01			lda #$01
 17823 95F0 8D B1 9E			sta CUR_PLAYER
 17824
 17825 				; ------------------------------------------------------------
 17826
 17827 = A15B			X	= DATAORIGIN+$0489
 17828
 17829 = A15B			@VarData	= X
 17830 = 0001			@VarDataSize	= 1
 17831
 17832 95F3			@exit
 17833 					.ifdef @new
 17834 					lda <@VarData
 17835 					sta :ztmp
 17836 					lda >@VarData
 17837 					ldy #@VarDataSize-1
 17838 					jmp @FreeMem
 17839 					els
 17840 95F3 60				rts						; ret
 17841 					eif
 17842 				.endl
 17843
 17844 95F4			.local	MAINSCREEN					; FUNCTION
 17845
 17846 				; optimize FAIL ('NOSOUND', service.pas), line = 3955
 17847
 17848 95F4 20 E4 3C			jsr NOSOUND
 17849
 17850 				; optimize OK (service.pas), line = 3956
 17851
 17852 95F7 A9 00			lda #$00
 17853 95F9 8D B0 9E			sta SCORE.ABORTPLAY
 17854
 17855 				; optimize OK (service.pas), line = 3967
 17856
 17857 95FC AD 19 9E			lda PRESENTS.OFS
 17858 95FF 8D E3 9E			sta BLITBOX.SRC
 17859 9602 AD 1A 9E			lda PRESENTS.OFS+1
 17860 9605 8D E4 9E			sta BLITBOX.SRC+1
 17861 9608 AD 1B 9E			lda PRESENTS.OFS+2
 17862 960B 8D E5 9E			sta BLITBOX.SRC+2
 17863 960E AD 1C 9E			lda PRESENTS.OFS+3
 17864 9611 8D E6 9E			sta BLITBOX.SRC+3
 17865 9614 A9 00			lda #$00
 17866 9616 8D E7 9E			sta BLITBOX.DST
 17867 9619 A9 50			lda #$50
 17868 961B 8D E8 9E			sta BLITBOX.DST+1
 17869 961E A9 00			lda #$00
 17870 9620 8D E9 9E			sta BLITBOX.DST+2
 17871 9623 8D EA 9E			sta BLITBOX.DST+3
 17872 9626 A9 40			lda #$40
 17873 9628 8D EB 9E			sta BLITBOX.W
 17874 962B A9 01			lda #$01
 17875 962D 8D EC 9E			sta BLITBOX.W+1
 17876 9630 A9 C8			lda #$C8
 17877 9632 8D ED 9E			sta BLITBOX.H
 17878 9635 20 EA 3A			jsr BLITBOX
 17879
 17880 				; optimize OK (service.pas), line = 4005
 17881
 17882 9638 A9 01			lda #$01
 17883 963A 8D 5C A1			sta RESULT
 17884 963D A9 00			lda #$00
 17885 963F 8D 5D A1			sta RESULT+1
 17886 9642			@exit
 17887
 17888 				; ------------------------------------------------------------
 17889
 17890 = A15C			RESULT	= DATAORIGIN+$048A
 17891 = A15E			X	= DATAORIGIN+$048C
 17892 = A160			Y	= DATAORIGIN+$048E
 17893 = A162			Z	= DATAORIGIN+$0490
 17894 = A164			K	= DATAORIGIN+$0492
 17895 = A166			IK	= DATAORIGIN+$0494
 17896
 17897 = A15E			@VarData	= X
 17898 = 000A			@VarDataSize	= 10
 17899
 17900 9642 60				rts						; ret
 17901 				.endl
 17902
 17903 9643			.local	START_GAME					; PROCEDURE
 17904
 17905 				; optimize FAIL ('SET_START_PARAMETERS', service.pas), line = 4013
 17906
 17907 9643 20 84 95			jsr SET_START_PARAMETERS
 17908
 17909 				; optimize OK (service.pas), line = 4014
 17910
 17911 9646 AD 69 A1			lda PLAYERS+1
 17912 9649 D0 05			bne @+
 17913 964B AD 68 A1			lda PLAYERS
 17914 964E C9 01			cmp #$01
 17915 				@
 17916 9650 D0 05			jne l_381C
 17917 9652 A9 00			lda #$00
 17918 9654 8D A7 9E			sta adr.SCORE.LIVES+$02
 17919 9657			l_381C
 17920
 17921 				; optimize OK (service.pas), line = 4017
 17922
 17923 9657 A9 00			lda #$00
 17924 9659 8D B9 9E			sta TRAINER
 17925
 17926 				; optimize OK (service.pas), line = 4018
 17927
 17928 965C AD 95 9C			lda WALL
 17929 965F 85 8E			sta @move.dst
 17930 9661 AD 96 9C			lda WALL+1
 17931 9664 85 8F			sta @move.dst+1
 17932 9666 AD 93 9C			lda WALL_P
 17933 9669 85 8A			sta @move.src
 17934 966B AD B1 9E			lda CUR_PLAYER
 17935 966E 18 6D 94 9C			add WALL_P+1
 17936 9672 85 8B			sta @move.src+1
 17937 9674 A9 00			lda <256
 17938 9676 85 86			sta @move.cnt
 17939 9678 A9 01			lda >256
 17940 967A 85 87			sta @move.cnt+1
 17941 967C 20 82 21			jsr @move
 17942
 17943 				; optimize FAIL ('SET_WALL', service.pas), line = 4022
 17944
 17945 967F 20 FB 5C			jsr SET_WALL
 17946
 17947 				; optimize OK (service.pas), line = 4024
 17948
 17949 9682 AD 6B 9C			lda PATTERN
 17950 9685 8D 5A A0			sta FILL_PICTURE_WITH_PATTERN.PATT
 17951 9688 AD 6C 9C			lda PATTERN+1
 17952 968B 8D 5B A0			sta FILL_PICTURE_WITH_PATTERN.PATT+1
 17953 968E 20 EE 76			jsr FILL_PICTURE_WITH_PATTERN
 17954
 17955 				; optimize FAIL ('SHOWBTMPICTURE', service.pas), line = 4025
 17956
 17957 9691 E8				inx
 17958 9692 AD 4B 9C 95 96		mva PLAYSCREEN :STACKORIGIN,x
 17959 9697 AD 4C 9C 95 A6		mva PLAYSCREEN+1 :STACKORIGIN+STACKWIDTH,x
 17960 969C 20 43 43			jsr SHOWBTMPICTURE
 17961
 17962 				; optimize OK (service.pas), line = 4032
 17963
 17964 969F AD 9A 9E			lda adr.SCORE.PLAYER+$04
 17965 96A2 8D A0 A0			sta WRITE_SCORE.SC
 17966 96A5 AD 9B 9E			lda adr.SCORE.PLAYER+1+$04
 17967 96A8 8D A1 A0			sta WRITE_SCORE.SC+1
 17968 96AB AD 9C 9E			lda adr.SCORE.PLAYER+2+$04
 17969 96AE 8D A2 A0			sta WRITE_SCORE.SC+2
 17970 96B1 AD 9D 9E			lda adr.SCORE.PLAYER+3+$04
 17971 96B4 8D A3 A0			sta WRITE_SCORE.SC+3
 17972 96B7 A9 FD			lda #$FD
 17973 96B9 8D 9D A0			sta WRITE_SCORE.PX
 17974 96BC A9 00			lda #$00
 17975 96BE 8D 9E A0			sta WRITE_SCORE.PX+1
 17976 96C1 A9 3C			lda #$3C
 17977 96C3 8D 9F A0			sta WRITE_SCORE.PY
 17978 96C6 20 CD 7F			jsr WRITE_SCORE
 17979
 17980 				; optimize OK (service.pas), line = 4033
 17981
 17982 96C9 AD 9E 9E			lda adr.SCORE.PLAYER+$08
 17983 96CC 8D A0 A0			sta WRITE_SCORE.SC
 17984 96CF AD 9F 9E			lda adr.SCORE.PLAYER+1+$08
 17985 96D2 8D A1 A0			sta WRITE_SCORE.SC+1
 17986 96D5 AD A0 9E			lda adr.SCORE.PLAYER+2+$08
 17987 96D8 8D A2 A0			sta WRITE_SCORE.SC+2
 17988 96DB AD A1 9E			lda adr.SCORE.PLAYER+3+$08
 17989 96DE 8D A3 A0			sta WRITE_SCORE.SC+3
 17990 96E1 A9 FD			lda #$FD
 17991 96E3 8D 9D A0			sta WRITE_SCORE.PX
 17992 96E6 A9 00			lda #$00
 17993 96E8 8D 9E A0			sta WRITE_SCORE.PX+1
 17994 96EB A9 5D			lda #$5D
 17995 96ED 8D 9F A0			sta WRITE_SCORE.PY
 17996 96F0 20 CD 7F			jsr WRITE_SCORE
 17997
 17998 				; optimize OK (service.pas), line = 4034
 17999
 18000 96F3 A9 FD			lda #$FD
 18001 96F5 8D 9D A0			sta WRITE_SCORE.PX
 18002 96F8 A9 00			lda #$00
 18003 96FA 8D 9E A0			sta WRITE_SCORE.PX+1
 18004 96FD A9 80			lda #$80
 18005 96FF 8D 9F A0			sta WRITE_SCORE.PY
 18006 9702 AD A8 9E			lda SCORE.HISCORE
 18007 9705 8D A0 A0			sta WRITE_SCORE.SC
 18008 9708 AD A9 9E			lda SCORE.HISCORE+1
 18009 970B 8D A1 A0			sta WRITE_SCORE.SC+1
 18010 970E AD AA 9E			lda SCORE.HISCORE+2
 18011 9711 8D A2 A0			sta WRITE_SCORE.SC+2
 18012 9714 AD AB 9E			lda SCORE.HISCORE+3
 18013 9717 8D A3 A0			sta WRITE_SCORE.SC+3
 18014 971A 20 CD 7F			jsr WRITE_SCORE
 18015
 18016 				; --- RepeatUntilProlog
 18017 971D			l_384B
 18018
 18019 				; --- RepeatUntilProlog
 18020 971D			l_384C
 18021
 18022 				; optimize OK (service.pas), line = 4044
 18023
 18024 971D AC B1 9E			ldy CUR_PLAYER
 18025 9720 B9 AD 9E			lda adr.SCORE.ROUNDSEL,y
 18026 9723 D0 77			jne l_385E
 18027
 18028 				; optimize FAIL (1, service.pas), line = 4046
 18029
 18030 9725 E8				inx
 18031 9726 AD B1 9E 95 96		mva CUR_PLAYER :STACKORIGIN,x
 18032 972B A9 00 95 A6			mva #$00 :STACKORIGIN+STACKWIDTH,x
 18033 972F 20 6D 95			jsr CHOOSE_START_WALL
 18034 9732 E8				inx
 18035 9733 AD 4B A1 95 96		mva CHOOSE_START_WALL.RESULT :STACKORIGIN,x
 18036 9738 AD 4C A1 95 A6		mva CHOOSE_START_WALL.RESULT+1 :STACKORIGIN+STACKWIDTH,x
 18037 973D B4 95			ldy :STACKORIGIN-1,x
 18038 973F B5 96			lda :STACKORIGIN,x
 18039 9741 99 A2 9E			sta adr.SCORE.WALL_N,y
 18040 9744 CA				dex
 18041 9745 CA				dex
 18042
 18043 				; optimize OK (service.pas), line = 4049
 18044
 18045 9746 A9 00			lda #$00
 18046 9748 85 9F			sta :STACKORIGIN+9
 18047 974A AD B1 9E			lda CUR_PLAYER
 18048 974D 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 18049 974F AC B1 9E			ldy CUR_PLAYER
 18050 9752 B9 A2 9E			lda adr.SCORE.WALL_N,y
 18051 9755 38 E9 01			sub #$01
 18052 9758 85 86			sta :eax
 18053 975A A9 00			lda #$00
 18054 975C E9 00			sbc #$00
 18055 975E 85 87			sta :eax+1
 18056 9760 A9 00			lda #$00
 18057 9762 85 8E			sta :ecx
 18058 9764 A9 01			lda #$01
 18059 9766 85 8F			sta :ecx+1
 18060 					.ifdef fmulinit
 18061 					fmulu_16
 18062 					els
 18063 9768 20 8B 22			imulCX
 18064 					eif
 18065 976B AD 93 9C			lda WALL_P
 18066 976E 18 65 9F			add :STACKORIGIN+9
 18067 9771 85 8E			sta @move.dst
 18068 9773 AD 94 9C			lda WALL_P+1
 18069 9776 65 AF			adc :STACKORIGIN+STACKWIDTH+9
 18070 9778 85 8F			sta @move.dst+1
 18071 977A A5 86			lda :eax
 18072 977C 18 6D 97 9C			add ALL_WALLS
 18073 9780 85 8A			sta @move.src
 18074 9782 A5 87			lda :eax+1
 18075 9784 6D 98 9C			adc ALL_WALLS+1
 18076 9787 85 8B			sta @move.src+1
 18077 9789 A9 00			lda <256
 18078 978B 85 86			sta @move.cnt
 18079 978D A9 01			lda >256
 18080 978F 85 87			sta @move.cnt+1
 18081 9791 20 82 21			jsr @move
 18082
 18083 				; optimize OK (service.pas), line = 4053
 18084
 18085 9794 AC B1 9E			ldy CUR_PLAYER
 18086 9797 A9 01			lda #$01
 18087 9799 99 AD 9E			sta adr.SCORE.ROUNDSEL,y
 18088 979C			l_385E
 18089
 18090 				; optimize OK (service.pas), line = 4057
 18091
 18092 979C AD 95 9C			lda WALL
 18093 979F 85 8E			sta @move.dst
 18094 97A1 AD 96 9C			lda WALL+1
 18095 97A4 85 8F			sta @move.dst+1
 18096 97A6 AD 93 9C			lda WALL_P
 18097 97A9 85 8A			sta @move.src
 18098 97AB AD B1 9E			lda CUR_PLAYER
 18099 97AE 18 6D 94 9C			add WALL_P+1
 18100 97B2 85 8B			sta @move.src+1
 18101 97B4 A9 00			lda <256
 18102 97B6 85 86			sta @move.cnt
 18103 97B8 A9 01			lda >256
 18104 97BA 85 87			sta @move.cnt+1
 18105 97BC 20 82 21			jsr @move
 18106
 18107 				; optimize FAIL ('SET_WALL', service.pas), line = 4058
 18108
 18109 97BF 20 FB 5C			jsr SET_WALL
 18110
 18111 				; optimize FAIL ('BOUNCEBALL', service.pas), line = 4063
 18112
 18113 97C2 20 2C 8D			jsr BOUNCEBALL
 18114 97C5 AD DE A0			lda BOUNCEBALL.RESULT
 18115 97C8 8D 6A A1			sta NWALL
 18116
 18117 				; optimize OK (service.pas), line = 4066
 18118
 18119 97CB F0 6A			jeq l_38AC
 18120
 18121 				; optimize OK (service.pas), line = 4069
 18122
 18123 97CD AC B1 9E			ldy CUR_PLAYER
 18124 97D0 B9 A2 9E			lda adr.SCORE.WALL_N,y
 18125 97D3 18 69 01			add #$01
 18126 97D6 99 A2 9E			sta adr.SCORE.WALL_N,y
 18127
 18128 				; optimize OK (service.pas), line = 4072
 18129
 18130 97D9 AD 95 9E			lda TOTALWALL
 18131 97DC D9 A2 9E			cmp adr.SCORE.WALL_N,y
 18132 97DF B0 05			jcs l_38C8
 18133
 18134 				; optimize OK (service.pas), line = 4073
 18135
 18136 97E1 A9 01			lda #$01
 18137 97E3 99 A2 9E			sta adr.SCORE.WALL_N,y
 18138 97E6			l_38C8
 18139
 18140 				; optimize OK (service.pas), line = 4076
 18141
 18142 97E6 A9 00			lda #$00
 18143 97E8 85 9F			sta :STACKORIGIN+9
 18144 97EA AD B1 9E			lda CUR_PLAYER
 18145 97ED 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 18146 97EF AC B1 9E			ldy CUR_PLAYER
 18147 97F2 B9 A2 9E			lda adr.SCORE.WALL_N,y
 18148 97F5 38 E9 01			sub #$01
 18149 97F8 85 86			sta :eax
 18150 97FA A9 00			lda #$00
 18151 97FC E9 00			sbc #$00
 18152 97FE 85 87			sta :eax+1
 18153 9800 A9 00			lda #$00
 18154 9802 85 8E			sta :ecx
 18155 9804 A9 01			lda #$01
 18156 9806 85 8F			sta :ecx+1
 18157 					.ifdef fmulinit
 18158 					fmulu_16
 18159 					els
 18160 9808 20 8B 22			imulCX
 18161 					eif
 18162 980B AD 93 9C			lda WALL_P
 18163 980E 18 65 9F			add :STACKORIGIN+9
 18164 9811 85 8E			sta @move.dst
 18165 9813 AD 94 9C			lda WALL_P+1
 18166 9816 65 AF			adc :STACKORIGIN+STACKWIDTH+9
 18167 9818 85 8F			sta @move.dst+1
 18168 981A A5 86			lda :eax
 18169 981C 18 6D 97 9C			add ALL_WALLS
 18170 9820 85 8A			sta @move.src
 18171 9822 A5 87			lda :eax+1
 18172 9824 6D 98 9C			adc ALL_WALLS+1
 18173 9827 85 8B			sta @move.src+1
 18174 9829 A9 00			lda <256
 18175 982B 85 86			sta @move.cnt
 18176 982D A9 01			lda >256
 18177 982F 85 87			sta @move.cnt+1
 18178 9831 20 82 21			jsr @move
 18179 9834 4C 42 98			jmp l_38FA
 18180 9837			l_38AC
 18181
 18182 				; optimize OK (service.pas), line = 4082
 18183
 18184 9837 AC B1 9E			ldy CUR_PLAYER
 18185 983A B9 A5 9E			lda adr.SCORE.LIVES,y
 18186 983D D0 03			jne l_390F
 18187 983F 20 C6 78			jsr GAME_OVER
 18188 9842			l_38FA
 18189 9842			l_390F
 18190
 18191 				; optimize OK (service.pas), line = 4087
 18192
 18193 9842 AD 6A A1			lda NWALL
 18194 9845 F0 03 4C 1D 97		jne l_384C
 18195
 18196 				; optimize FAIL (0, service.pas), line = 4090
 18197
 18198 984A EE B1 9E			inc CUR_PLAYER
 18199
 18200 				; optimize OK (service.pas), line = 4091
 18201
 18202 984D AD 68 A1			lda PLAYERS
 18203 9850 CD B1 9E			cmp CUR_PLAYER
 18204 9853 AD 69 A1			lda PLAYERS+1
 18205 9856 E9 00			sbc #$00
 18206 9858 50 02			svc
 18207 985A 49 80			eor #$80
 18208 985C 10 05			jpl l_3937
 18209 985E A9 01			lda #$01
 18210 9860 8D B1 9E			sta CUR_PLAYER
 18211 9863			l_3937
 18212
 18213 				; optimize OK (service.pas), line = 4097
 18214
 18215 9863 AC B1 9E			ldy CUR_PLAYER
 18216 9866 B9 A5 9E			lda adr.SCORE.LIVES,y
 18217 9869 D0 09			jne l_3953
 18218 986B A9 03			lda #$03
 18219 986D 38 ED B1 9E			sub CUR_PLAYER
 18220 9871 8D B1 9E			sta CUR_PLAYER
 18221 9874			l_3953
 18222
 18223 				; optimize OK (service.pas), line = 4102
 18224
 18225 9874 A0 01			ldy #1
 18226 9876 AD A6 9E			lda adr.SCORE.LIVES+$01
 18227 9879 F0 01			beq @+
 18228 987B 88				dey
 18229 				@
 18230 987C 84 9F			sty :STACKORIGIN+9
 18231 987E A0 01			ldy #1
 18232 9880 AD A7 9E			lda adr.SCORE.LIVES+$02
 18233 9883 F0 01			beq @+
 18234 9885 88				dey
 18235 				@
 18236 9886 98				tya
 18237 9887 25 9F			and :STACKORIGIN+9
 18238 9889 0D B0 9E			ora SCORE.ABORTPLAY
 18239 988C D0 03 4C 1D 97		jeq l_384B
 18240
 18241 				; ------------------------------------------------------------
 18242
 18243 = A168			PLAYERS	= DATAORIGIN+$0496
 18244 = A16A			NWALL	= DATAORIGIN+$0498
 18245
 18246 = A168			@VarData	= PLAYERS
 18247 = 0003			@VarDataSize	= 3
 18248
 18249 9891			@exit
 18250 					.ifdef @new
 18251 					lda <@VarData
 18252 					sta :ztmp
 18253 					lda >@VarData
 18254 					ldy #@VarDataSize-1
 18255 					jmp @FreeMem
 18256 					els
 18257 9891 60				rts						; ret
 18258 					eif
 18259 				.endl
 18260
 18261 9892			.local	INIT_GAME					; PROCEDURE
 18262
 18263 				; optimize FAIL ('SYSTEM.RANDOMIZE', arkanoid_vbxe.pas), line = 123
 18264
 18265 9892 20 85 32			jsr SYSTEM.RANDOMIZE
 18266
 18267 				; optimize FAIL ('INITSVGA', arkanoid_vbxe.pas), line = 125
 18268
 18269 9895 20 91 3D			jsr INITSVGA
 18270
 18271 				; optimize FAIL ('INITROWARRAY', arkanoid_vbxe.pas), line = 126
 18272
 18273 9898 20 4F 3D			jsr INITROWARRAY
 18274
 18275 				; optimize OK (btm.inc), line = 1
 18276
 18277 989B A9 00			lda #$00
 18278 989D 8D E1 9D			sta PLAYSCREEN.OFS
 18279 98A0 A9 5E			lda #$5E
 18280 98A2 8D E2 9D			sta PLAYSCREEN.OFS+1
 18281 98A5 A9 01			lda #$01
 18282 98A7 8D E3 9D			sta PLAYSCREEN.OFS+2
 18283 98AA A9 00			lda #$00
 18284 98AC 8D E4 9D			sta PLAYSCREEN.OFS+3
 18285
 18286 				; optimize OK (btm.inc), line = 2
 18287
 18288 98AF A9 40			lda #$40
 18289 98B1 8D DD 9D			sta PLAYSCREEN.WIDTH
 18290 98B4 A9 01			lda #$01
 18291 98B6 8D DE 9D			sta PLAYSCREEN.WIDTH+1
 18292
 18293 				; optimize OK (btm.inc), line = 3
 18294
 18295 98B9 A9 C8			lda #$C8
 18296 98BB 8D DF 9D			sta PLAYSCREEN.HEIGHT
 18297 98BE A9 00			lda #$00
 18298 98C0 8D E0 9D			sta PLAYSCREEN.HEIGHT+1
 18299
 18300 				; optimize OK (btm.inc), line = 5
 18301
 18302 98C3 8D 19 9E			sta PRESENTS.OFS
 18303 98C6 A9 58			lda #$58
 18304 98C8 8D 1A 9E			sta PRESENTS.OFS+1
 18305 98CB A9 02			lda #$02
 18306 98CD 8D 1B 9E			sta PRESENTS.OFS+2
 18307 98D0 A9 00			lda #$00
 18308 98D2 8D 1C 9E			sta PRESENTS.OFS+3
 18309
 18310 				; optimize OK (btm.inc), line = 6
 18311
 18312 98D5 A9 40			lda #$40
 18313 98D7 8D 15 9E			sta PRESENTS.WIDTH
 18314 98DA A9 01			lda #$01
 18315 98DC 8D 16 9E			sta PRESENTS.WIDTH+1
 18316
 18317 				; optimize OK (btm.inc), line = 7
 18318
 18319 98DF A9 C8			lda #$C8
 18320 98E1 8D 17 9E			sta PRESENTS.HEIGHT
 18321 98E4 A9 00			lda #$00
 18322 98E6 8D 18 9E			sta PRESENTS.HEIGHT+1
 18323
 18324 				; optimize OK (btm.inc), line = 9
 18325
 18326 98E9 8D 09 9E			sta EXPLOSION.OFS
 18327 98EC A9 52			lda #$52
 18328 98EE 8D 0A 9E			sta EXPLOSION.OFS+1
 18329 98F1 A9 03			lda #$03
 18330 98F3 8D 0B 9E			sta EXPLOSION.OFS+2
 18331 98F6 A9 00			lda #$00
 18332 98F8 8D 0C 9E			sta EXPLOSION.OFS+3
 18333
 18334 				; optimize OK (btm.inc), line = 10
 18335
 18336 98FB A9 2A			lda #$2A
 18337 98FD 8D 05 9E			sta EXPLOSION.WIDTH
 18338 9900 A9 00			lda #$00
 18339 9902 8D 06 9E			sta EXPLOSION.WIDTH+1
 18340
 18341 				; optimize OK (btm.inc), line = 11
 18342
 18343 9905 A9 72			lda #$72
 18344 9907 8D 07 9E			sta EXPLOSION.HEIGHT
 18345 990A A9 00			lda #$00
 18346 990C 8D 08 9E			sta EXPLOSION.HEIGHT+1
 18347
 18348 				; optimize OK (btm.inc), line = 13
 18349
 18350 990F A9 B4			lda #$B4
 18351 9911 8D 11 9E			sta NEWVAUS.OFS
 18352 9914 A9 64			lda #$64
 18353 9916 8D 12 9E			sta NEWVAUS.OFS+1
 18354 9919 A9 03			lda #$03
 18355 991B 8D 13 9E			sta NEWVAUS.OFS+2
 18356 991E A9 00			lda #$00
 18357 9920 8D 14 9E			sta NEWVAUS.OFS+3
 18358
 18359 				; optimize OK (btm.inc), line = 14
 18360
 18361 9923 A9 29			lda #$29
 18362 9925 8D 0D 9E			sta NEWVAUS.WIDTH
 18363 9928 A9 00			lda #$00
 18364 992A 8D 0E 9E			sta NEWVAUS.WIDTH+1
 18365
 18366 				; optimize OK (btm.inc), line = 15
 18367
 18368 992D A9 C1			lda #$C1
 18369 992F 8D 0F 9E			sta NEWVAUS.HEIGHT
 18370 9932 A9 00			lda #$00
 18371 9934 8D 10 9E			sta NEWVAUS.HEIGHT+1
 18372
 18373 				; optimize OK (btm.inc), line = 17
 18374
 18375 9937 A9 9D			lda #$9D
 18376 9939 8D 21 9E			sta SOUNDFX.OFS
 18377 993C A9 83			lda #$83
 18378 993E 8D 22 9E			sta SOUNDFX.OFS+1
 18379 9941 A9 03			lda #$03
 18380 9943 8D 23 9E			sta SOUNDFX.OFS+2
 18381 9946 A9 00			lda #$00
 18382 9948 8D 24 9E			sta SOUNDFX.OFS+3
 18383
 18384 				; optimize OK (btm.inc), line = 18
 18385
 18386 994B A9 15			lda #$15
 18387 994D 8D 1D 9E			sta SOUNDFX.WIDTH
 18388 9950 A9 00			lda #$00
 18389 9952 8D 1E 9E			sta SOUNDFX.WIDTH+1
 18390
 18391 				; optimize OK (btm.inc), line = 19
 18392
 18393 9955 A9 26			lda #$26
 18394 9957 8D 1F 9E			sta SOUNDFX.HEIGHT
 18395 995A A9 00			lda #$00
 18396 995C 8D 20 9E			sta SOUNDFX.HEIGHT+1
 18397
 18398 				; optimize OK (btm.inc), line = 21
 18399
 18400 995F A9 BB			lda #$BB
 18401 9961 8D 29 9E			sta SHINEWALL.OFS
 18402 9964 A9 86			lda #$86
 18403 9966 8D 2A 9E			sta SHINEWALL.OFS+1
 18404 9969 A9 03			lda #$03
 18405 996B 8D 2B 9E			sta SHINEWALL.OFS+2
 18406 996E A9 00			lda #$00
 18407 9970 8D 2C 9E			sta SHINEWALL.OFS+3
 18408
 18409 				; optimize OK (btm.inc), line = 22
 18410
 18411 9973 A9 10			lda #$10
 18412 9975 8D 25 9E			sta SHINEWALL.WIDTH
 18413 9978 A9 00			lda #$00
 18414 997A 8D 26 9E			sta SHINEWALL.WIDTH+1
 18415
 18416 				; optimize OK (btm.inc), line = 23
 18417
 18418 997D A9 50			lda #$50
 18419 997F 8D 27 9E			sta SHINEWALL.HEIGHT
 18420 9982 A9 00			lda #$00
 18421 9984 8D 28 9E			sta SHINEWALL.HEIGHT+1
 18422
 18423 				; optimize OK (btm.inc), line = 25
 18424
 18425 9987 A9 BB			lda #$BB
 18426 9989 8D 31 9E			sta MINIVAUS.OFS
 18427 998C A9 8B			lda #$8B
 18428 998E 8D 32 9E			sta MINIVAUS.OFS+1
 18429 9991 A9 03			lda #$03
 18430 9993 8D 33 9E			sta MINIVAUS.OFS+2
 18431 9996 A9 00			lda #$00
 18432 9998 8D 34 9E			sta MINIVAUS.OFS+3
 18433
 18434 				; optimize OK (btm.inc), line = 26
 18435
 18436 999B A9 14			lda #$14
 18437 999D 8D 2D 9E			sta MINIVAUS.WIDTH
 18438 99A0 A9 00			lda #$00
 18439 99A2 8D 2E 9E			sta MINIVAUS.WIDTH+1
 18440
 18441 				; optimize OK (btm.inc), line = 27
 18442
 18443 99A5 A9 05			lda #$05
 18444 99A7 8D 2F 9E			sta MINIVAUS.HEIGHT
 18445 99AA A9 00			lda #$00
 18446 99AC 8D 30 9E			sta MINIVAUS.HEIGHT+1
 18447
 18448 				; optimize OK (btm.inc), line = 29
 18449
 18450 99AF A9 1F			lda #$1F
 18451 99B1 8D 39 9E			sta LEVELSEL.OFS
 18452 99B4 A9 8C			lda #$8C
 18453 99B6 8D 3A 9E			sta LEVELSEL.OFS+1
 18454 99B9 A9 03			lda #$03
 18455 99BB 8D 3B 9E			sta LEVELSEL.OFS+2
 18456 99BE A9 00			lda #$00
 18457 99C0 8D 3C 9E			sta LEVELSEL.OFS+3
 18458
 18459 				; optimize OK (btm.inc), line = 30
 18460
 18461 99C3 A9 15			lda #$15
 18462 99C5 8D 35 9E			sta LEVELSEL.WIDTH
 18463 99C8 A9 00			lda #$00
 18464 99CA 8D 36 9E			sta LEVELSEL.WIDTH+1
 18465
 18466 				; optimize OK (btm.inc), line = 31
 18467
 18468 99CD A9 5F			lda #$5F
 18469 99CF 8D 37 9E			sta LEVELSEL.HEIGHT
 18470 99D2 A9 00			lda #$00
 18471 99D4 8D 38 9E			sta LEVELSEL.HEIGHT+1
 18472
 18473 				; optimize OK (btm.inc), line = 33
 18474
 18475 99D7 A9 EA			lda #$EA
 18476 99D9 8D 41 9E			sta LETTERS.OFS
 18477 99DC A9 93			lda #$93
 18478 99DE 8D 42 9E			sta LETTERS.OFS+1
 18479 99E1 A9 03			lda #$03
 18480 99E3 8D 43 9E			sta LETTERS.OFS+2
 18481 99E6 A9 00			lda #$00
 18482 99E8 8D 44 9E			sta LETTERS.OFS+3
 18483
 18484 				; optimize OK (btm.inc), line = 34
 18485
 18486 99EB A9 80			lda #$80
 18487 99ED 8D 3D 9E			sta LETTERS.WIDTH
 18488 99F0 A9 00			lda #$00
 18489 99F2 8D 3E 9E			sta LETTERS.WIDTH+1
 18490
 18491 				; optimize OK (btm.inc), line = 35
 18492
 18493 99F5 A9 38			lda #$38
 18494 99F7 8D 3F 9E			sta LETTERS.HEIGHT
 18495 99FA A9 00			lda #$00
 18496 99FC 8D 40 9E			sta LETTERS.HEIGHT+1
 18497
 18498 				; optimize OK (btm.inc), line = 37
 18499
 18500 99FF A9 EA			lda #$EA
 18501 9A01 8D F1 9D			sta NORMAL.OFS
 18502 9A04 A9 AF			lda #$AF
 18503 9A06 8D F2 9D			sta NORMAL.OFS+1
 18504 9A09 A9 03			lda #$03
 18505 9A0B 8D F3 9D			sta NORMAL.OFS+2
 18506 9A0E A9 00			lda #$00
 18507 9A10 8D F4 9D			sta NORMAL.OFS+3
 18508
 18509 				; optimize OK (btm.inc), line = 38
 18510
 18511 9A13 A9 20			lda #$20
 18512 9A15 8D ED 9D			sta NORMAL.WIDTH
 18513 9A18 A9 00			lda #$00
 18514 9A1A 8D EE 9D			sta NORMAL.WIDTH+1
 18515
 18516 				; optimize OK (btm.inc), line = 39
 18517
 18518 9A1D A9 07			lda #$07
 18519 9A1F 8D EF 9D			sta NORMAL.HEIGHT
 18520 9A22 A9 00			lda #$00
 18521 9A24 8D F0 9D			sta NORMAL.HEIGHT+1
 18522
 18523 				; optimize OK (btm.inc), line = 41
 18524
 18525 9A27 A9 CA			lda #$CA
 18526 9A29 8D 01 9E			sta LASERS.OFS
 18527 9A2C A9 B0			lda #$B0
 18528 9A2E 8D 02 9E			sta LASERS.OFS+1
 18529 9A31 A9 03			lda #$03
 18530 9A33 8D 03 9E			sta LASERS.OFS+2
 18531 9A36 A9 00			lda #$00
 18532 9A38 8D 04 9E			sta LASERS.OFS+3
 18533
 18534 				; optimize OK (btm.inc), line = 42
 18535
 18536 9A3B A9 20			lda #$20
 18537 9A3D 8D FD 9D			sta LASERS.WIDTH
 18538 9A40 A9 00			lda #$00
 18539 9A42 8D FE 9D			sta LASERS.WIDTH+1
 18540
 18541 				; optimize OK (btm.inc), line = 43
 18542
 18543 9A45 A9 07			lda #$07
 18544 9A47 8D FF 9D			sta LASERS.HEIGHT
 18545 9A4A A9 00			lda #$00
 18546 9A4C 8D 00 9E			sta LASERS.HEIGHT+1
 18547
 18548 				; optimize OK (btm.inc), line = 45
 18549
 18550 9A4F A9 AA			lda #$AA
 18551 9A51 8D F9 9D			sta ENLARGED.OFS
 18552 9A54 A9 B1			lda #$B1
 18553 9A56 8D FA 9D			sta ENLARGED.OFS+1
 18554 9A59 A9 03			lda #$03
 18555 9A5B 8D FB 9D			sta ENLARGED.OFS+2
 18556 9A5E A9 00			lda #$00
 18557 9A60 8D FC 9D			sta ENLARGED.OFS+3
 18558
 18559 				; optimize OK (btm.inc), line = 46
 18560
 18561 9A63 A9 40			lda #$40
 18562 9A65 8D F5 9D			sta ENLARGED.WIDTH
 18563 9A68 A9 00			lda #$00
 18564 9A6A 8D F6 9D			sta ENLARGED.WIDTH+1
 18565
 18566 				; optimize OK (btm.inc), line = 47
 18567
 18568 9A6D A9 07			lda #$07
 18569 9A6F 8D F7 9D			sta ENLARGED.HEIGHT
 18570 9A72 A9 00			lda #$00
 18571 9A74 8D F8 9D			sta ENLARGED.HEIGHT+1
 18572
 18573 				; optimize OK (btm.inc), line = 49
 18574
 18575 9A77 A9 6A			lda #$6A
 18576 9A79 8D 49 9E			sta SHOOTS.OFS
 18577 9A7C A9 B3			lda #$B3
 18578 9A7E 8D 4A 9E			sta SHOOTS.OFS+1
 18579 9A81 A9 03			lda #$03
 18580 9A83 8D 4B 9E			sta SHOOTS.OFS+2
 18581 9A86 A9 00			lda #$00
 18582 9A88 8D 4C 9E			sta SHOOTS.OFS+3
 18583
 18584 				; optimize OK (btm.inc), line = 50
 18585
 18586 9A8B A9 0D			lda #$0D
 18587 9A8D 8D 45 9E			sta SHOOTS.WIDTH
 18588 9A90 A9 00			lda #$00
 18589 9A92 8D 46 9E			sta SHOOTS.WIDTH+1
 18590
 18591 				; optimize OK (btm.inc), line = 51
 18592
 18593 9A95 A9 08			lda #$08
 18594 9A97 8D 47 9E			sta SHOOTS.HEIGHT
 18595 9A9A A9 00			lda #$00
 18596 9A9C 8D 48 9E			sta SHOOTS.HEIGHT+1
 18597
 18598 				; optimize OK (btm.inc), line = 53
 18599
 18600 9A9F A9 D2			lda #$D2
 18601 9AA1 8D 51 9E			sta FLUX.OFS
 18602 9AA4 A9 B3			lda #$B3
 18603 9AA6 8D 52 9E			sta FLUX.OFS+1
 18604 9AA9 A9 03			lda #$03
 18605 9AAB 8D 53 9E			sta FLUX.OFS+2
 18606 9AAE A9 00			lda #$00
 18607 9AB0 8D 54 9E			sta FLUX.OFS+3
 18608
 18609 				; optimize OK (btm.inc), line = 54
 18610
 18611 9AB3 A9 08			lda #$08
 18612 9AB5 8D 4D 9E			sta FLUX.WIDTH
 18613 9AB8 A9 00			lda #$00
 18614 9ABA 8D 4E 9E			sta FLUX.WIDTH+1
 18615
 18616 				; optimize OK (btm.inc), line = 55
 18617
 18618 9ABD A9 29			lda #$29
 18619 9ABF 8D 4F 9E			sta FLUX.HEIGHT
 18620 9AC2 A9 00			lda #$00
 18621 9AC4 8D 50 9E			sta FLUX.HEIGHT+1
 18622
 18623 				; optimize OK (btm.inc), line = 57
 18624
 18625 9AC7 A9 1A			lda #$1A
 18626 9AC9 8D D9 9D			sta BALLDATA.OFS
 18627 9ACC A9 B5			lda #$B5
 18628 9ACE 8D DA 9D			sta BALLDATA.OFS+1
 18629 9AD1 A9 03			lda #$03
 18630 9AD3 8D DB 9D			sta BALLDATA.OFS+2
 18631 9AD6 A9 00			lda #$00
 18632 9AD8 8D DC 9D			sta BALLDATA.OFS+3
 18633
 18634 				; optimize OK (btm.inc), line = 58
 18635
 18636 9ADB A9 05			lda #$05
 18637 9ADD 8D D5 9D			sta BALLDATA.WIDTH
 18638 9AE0 A9 00			lda #$00
 18639 9AE2 8D D6 9D			sta BALLDATA.WIDTH+1
 18640
 18641 				; optimize OK (btm.inc), line = 59
 18642
 18643 9AE5 A9 05			lda #$05
 18644 9AE7 8D D7 9D			sta BALLDATA.HEIGHT
 18645 9AEA A9 00			lda #$00
 18646 9AEC 8D D8 9D			sta BALLDATA.HEIGHT+1
 18647
 18648 				; optimize OK (btm.inc), line = 61
 18649
 18650 9AEF A9 33			lda #$33
 18651 9AF1 8D 66 9E			sta PATTERN.OFS
 18652 9AF4 A9 B5			lda #$B5
 18653 9AF6 8D 67 9E			sta PATTERN.OFS+1
 18654 9AF9 A9 03			lda #$03
 18655 9AFB 8D 68 9E			sta PATTERN.OFS+2
 18656 9AFE A9 00			lda #$00
 18657 9B00 8D 69 9E			sta PATTERN.OFS+3
 18658
 18659 				; optimize OK (btm.inc), line = 62
 18660
 18661 9B03 A9 1A			lda #$1A
 18662 9B05 8D 62 9E			sta PATTERN.WIDTH
 18663 9B08 A9 00			lda #$00
 18664 9B0A 8D 63 9E			sta PATTERN.WIDTH+1
 18665
 18666 				; optimize OK (btm.inc), line = 63
 18667
 18668 9B0D A9 18			lda #$18
 18669 9B0F 8D 64 9E			sta PATTERN.HEIGHT
 18670 9B12 A9 00			lda #$00
 18671 9B14 8D 65 9E			sta PATTERN.HEIGHT+1
 18672
 18673 				; optimize OK (btm.inc), line = 65
 18674
 18675 9B17 A9 A3			lda #$A3
 18676 9B19 8D 6E 9E			sta PATTERN0.OFS
 18677 9B1C A9 B7			lda #$B7
 18678 9B1E 8D 6F 9E			sta PATTERN0.OFS+1
 18679 9B21 A9 03			lda #$03
 18680 9B23 8D 70 9E			sta PATTERN0.OFS+2
 18681 9B26 A9 00			lda #$00
 18682 9B28 8D 71 9E			sta PATTERN0.OFS+3
 18683
 18684 				; optimize OK (btm.inc), line = 66
 18685
 18686 9B2B A9 1A			lda #$1A
 18687 9B2D 8D 6A 9E			sta PATTERN0.WIDTH
 18688 9B30 A9 00			lda #$00
 18689 9B32 8D 6B 9E			sta PATTERN0.WIDTH+1
 18690
 18691 				; optimize OK (btm.inc), line = 67
 18692
 18693 9B35 A9 18			lda #$18
 18694 9B37 8D 6C 9E			sta PATTERN0.HEIGHT
 18695 9B3A A9 00			lda #$00
 18696 9B3C 8D 6D 9E			sta PATTERN0.HEIGHT+1
 18697
 18698 				; optimize OK (btm.inc), line = 69
 18699
 18700 9B3F A9 13			lda #$13
 18701 9B41 8D 76 9E			sta PATTERN1.OFS
 18702 9B44 A9 BA			lda #$BA
 18703 9B46 8D 77 9E			sta PATTERN1.OFS+1
 18704 9B49 A9 03			lda #$03
 18705 9B4B 8D 78 9E			sta PATTERN1.OFS+2
 18706 9B4E A9 00			lda #$00
 18707 9B50 8D 79 9E			sta PATTERN1.OFS+3
 18708
 18709 				; optimize OK (btm.inc), line = 70
 18710
 18711 9B53 A9 0E			lda #$0E
 18712 9B55 8D 72 9E			sta PATTERN1.WIDTH
 18713 9B58 A9 00			lda #$00
 18714 9B5A 8D 73 9E			sta PATTERN1.WIDTH+1
 18715
 18716 				; optimize OK (btm.inc), line = 71
 18717
 18718 9B5D A9 0E			lda #$0E
 18719 9B5F 8D 74 9E			sta PATTERN1.HEIGHT
 18720 9B62 A9 00			lda #$00
 18721 9B64 8D 75 9E			sta PATTERN1.HEIGHT+1
 18722
 18723 				; optimize OK (btm.inc), line = 73
 18724
 18725 9B67 A9 D7			lda #$D7
 18726 9B69 8D 7E 9E			sta PATTERN2.OFS
 18727 9B6C A9 BA			lda #$BA
 18728 9B6E 8D 7F 9E			sta PATTERN2.OFS+1
 18729 9B71 A9 03			lda #$03
 18730 9B73 8D 80 9E			sta PATTERN2.OFS+2
 18731 9B76 A9 00			lda #$00
 18732 9B78 8D 81 9E			sta PATTERN2.OFS+3
 18733
 18734 				; optimize OK (btm.inc), line = 74
 18735
 18736 9B7B A9 26			lda #$26
 18737 9B7D 8D 7A 9E			sta PATTERN2.WIDTH
 18738 9B80 A9 00			lda #$00
 18739 9B82 8D 7B 9E			sta PATTERN2.WIDTH+1
 18740
 18741 				; optimize OK (btm.inc), line = 75
 18742
 18743 9B85 A9 23			lda #$23
 18744 9B87 8D 7C 9E			sta PATTERN2.HEIGHT
 18745 9B8A A9 00			lda #$00
 18746 9B8C 8D 7D 9E			sta PATTERN2.HEIGHT+1
 18747
 18748 				; optimize OK (btm.inc), line = 77
 18749
 18750 9B8F A9 09			lda #$09
 18751 9B91 8D 86 9E			sta PATTERN3.OFS
 18752 9B94 A9 C0			lda #$C0
 18753 9B96 8D 87 9E			sta PATTERN3.OFS+1
 18754 9B99 A9 03			lda #$03
 18755 9B9B 8D 88 9E			sta PATTERN3.OFS+2
 18756 9B9E A9 00			lda #$00
 18757 9BA0 8D 89 9E			sta PATTERN3.OFS+3
 18758
 18759 				; optimize OK (btm.inc), line = 78
 18760
 18761 9BA3 A9 1C			lda #$1C
 18762 9BA5 8D 82 9E			sta PATTERN3.WIDTH
 18763 9BA8 A9 00			lda #$00
 18764 9BAA 8D 83 9E			sta PATTERN3.WIDTH+1
 18765
 18766 				; optimize OK (btm.inc), line = 79
 18767
 18768 9BAD A9 1D			lda #$1D
 18769 9BAF 8D 84 9E			sta PATTERN3.HEIGHT
 18770 9BB2 A9 00			lda #$00
 18771 9BB4 8D 85 9E			sta PATTERN3.HEIGHT+1
 18772
 18773 				; optimize OK (btm.inc), line = 81
 18774
 18775 9BB7 A9 35			lda #$35
 18776 9BB9 8D 8E 9E			sta PATTERN4.OFS
 18777 9BBC A9 C3			lda #$C3
 18778 9BBE 8D 8F 9E			sta PATTERN4.OFS+1
 18779 9BC1 A9 03			lda #$03
 18780 9BC3 8D 90 9E			sta PATTERN4.OFS+2
 18781 9BC6 A9 00			lda #$00
 18782 9BC8 8D 91 9E			sta PATTERN4.OFS+3
 18783
 18784 				; optimize OK (btm.inc), line = 82
 18785
 18786 9BCB A9 1E			lda #$1E
 18787 9BCD 8D 8A 9E			sta PATTERN4.WIDTH
 18788 9BD0 A9 00			lda #$00
 18789 9BD2 8D 8B 9E			sta PATTERN4.WIDTH+1
 18790
 18791 				; optimize OK (btm.inc), line = 83
 18792
 18793 9BD5 A9 1E			lda #$1E
 18794 9BD7 8D 8C 9E			sta PATTERN4.HEIGHT
 18795 9BDA A9 00			lda #$00
 18796 9BDC 8D 8D 9E			sta PATTERN4.HEIGHT+1
 18797
 18798 				; optimize OK (arkanoid_vbxe.pas), line = 133
 18799
 18800 9BDF A9 20			lda #$20
 18801 9BE1 8D 95 9E			sta TOTALWALL
 18802
 18803 				; optimize OK (arkanoid_vbxe.pas), line = 135
 18804
 18805 9BE4 A9 50			lda #$50
 18806 9BE6 8D A8 9E			sta SCORE.HISCORE
 18807 9BE9 A9 C3			lda #$C3
 18808 9BEB 8D A9 9E			sta SCORE.HISCORE+1
 18809 9BEE A9 00			lda #$00
 18810 9BF0 8D AA 9E			sta SCORE.HISCORE+2
 18811 9BF3 8D AB 9E			sta SCORE.HISCORE+3
 18812
 18813 				; optimize OK (arkanoid_vbxe.pas), line = 138
 18814
 18815 9BF6 A9 01			lda #$01
 18816 9BF8 8D D3 9E			sta SOUND_ON
 18817
 18818 				; optimize OK (arkanoid_vbxe.pas), line = 139
 18819
 18820 9BFB A9 03			lda #$03
 18821 9BFD 8D B7 9E			sta LV
 18822 9C00 A9 00			lda #$00
 18823 9C02 8D B8 9E			sta LV+1
 18824
 18825 				; --- RepeatUntilProlog
 18826 9C05			l_3A95
 18827
 18828 				; optimize FAIL ('MAINSCREEN', arkanoid_vbxe.pas), line = 146
 18829
 18830 9C05 20 F4 95			jsr MAINSCREEN
 18831 9C08 AD 5C A1			lda MAINSCREEN.RESULT
 18832 9C0B 8D AC 9E			sta SCORE.PL_NUMB
 18833
 18834 				; optimize OK (arkanoid_vbxe.pas), line = 148
 18835
 18836 9C0E F0 0D			jeq l_3AAB
 18837 9C10 A9 01			lda #$01
 18838 9C12 8D 68 A1			sta START_GAME.PLAYERS
 18839 9C15 A9 00			lda #$00
 18840 9C17 8D 69 A1			sta START_GAME.PLAYERS+1
 18841 9C1A 20 43 96			jsr START_GAME
 18842 9C1D			l_3AAB
 18843
 18844 				; optimize OK (arkanoid_vbxe.pas), line = 151
 18845
 18846 9C1D AD AC 9E			lda SCORE.PL_NUMB
 18847 9C20 C9 01			cmp #$01
 18848 9C22 B0 E1			jcs l_3A95
 18849
 18850 9C24			@exit
 18851 					.ifdef @new
 18852 					lda <@VarData
 18853 					sta :ztmp
 18854 					lda >@VarData
 18855 					ldy #@VarDataSize-1
 18856 					jmp @FreeMem
 18857 					els
 18858 9C24 60				rts						; ret
 18859 					eif
 18860 				.endl
 18861 9C25			l_0022
 18862
 18863 				; optimize FAIL ('INIT_GAME', arkanoid_vbxe.pas), line = 159
 18864
 18865 9C25 20 92 98			jsr INIT_GAME
 18866
 18867 				; ------------------------------------------------------------
 18868
 18869 = 015E00			VBXE_DATA	= $15E00
 18870 = B100			adr.BLT	= $B100
 18871 9C28			.var BLT	= adr.BLT .word
 18872 = B100			adr.BLT.SRC_ADR	= $B100
 18873 9C28			.var BLT.SRC_ADR	= adr.BLT.SRC_ADR .word
 18874 = B100			BLT.SRC_ADR.BYTE0	= $B100
 18875 = B101			BLT.SRC_ADR.BYTE1	= $B101
 18876 = B102			BLT.SRC_ADR.BYTE2	= $B102
 18877 = B103			BLT.SRC_STEP_Y	= $B103
 18878 = B105			BLT.SRC_STEP_X	= $B105
 18879 = B106			adr.BLT.DST_ADR	= $B106
 18880 9C28			.var BLT.DST_ADR	= adr.BLT.DST_ADR .word
 18881 = B106			BLT.DST_ADR.BYTE0	= $B106
 18882 = B107			BLT.DST_ADR.BYTE1	= $B107
 18883 = B108			BLT.DST_ADR.BYTE2	= $B108
 18884 = B109			BLT.DST_STEP_Y	= $B109
 18885 = B10B			BLT.DST_STEP_X	= $B10B
 18886 = B10C			BLT.BLT_WIDTH	= $B10C
 18887 = B10E			BLT.BLT_HEIGHT	= $B10E
 18888 = B10F			BLT.BLT_AND_MASK	= $B10F
 18889 = B110			BLT.BLT_XOR_MASK	= $B110
 18890 = B111			BLT.BLT_COLLISION_MASK	= $B111
 18891 = B112			BLT.BLT_ZOOM	= $B112
 18892 = B113			BLT.PATTERN_FEATURE	= $B113
 18893 = B114			BLT.BLT_CONTROL	= $B114
 18894 = 9DB1			adr.VBXE_RAM	= DATAORIGIN+$00DF	; [8] OBJECT
 18895 9C28			.var VBXE_RAM	= adr.VBXE_RAM .word
 18896 = 9DB1			VBXE_RAM.POSITION	= DATAORIGIN+$00DF
 18897 = 9DB5			VBXE_RAM.SIZE	= DATAORIGIN+$00E3
 18898 = 5000			VRAM	= $5000
 18899 = 0001			ERR1	= $01
 18900 = 0002			ERR2	= $02
 18901 = 0003			ERR3	= $03
 18902 = 0004			ERR4	= $04
 18903 = 000A			SCRMIN	= $0A
 18904 = 00D8			SCRMAX	= $D8
 18905 = 000C			SCRTOP	= $0C
 18906 = 00C8			SCRBOT	= $C8
 18907 = 0022			VAUS_W	= $22
 18908 = 0004			VAUS_H	= $04
 18909 = 00B8			VAUS_LINE	= $B8
 18910 = 00FF			EMP	= $FF
 18911 = 0005			BALLDIM	= $05
 18912 = 0003			BALLSPOT	= $03
 18913 = 001E			BALLDEV	= $1E
 18914 = 000A			SPEEDFLASH	= $0A
 18915 = 205E			adr.FLASH	= CODEORIGIN+$005E
 18916 9C28			.var FLASH	= adr.FLASH .word
 18917 = 2069			adr.SCORE_WALL	= CODEORIGIN+$0069
 18918 9C28			.var SCORE_WALL	= adr.SCORE_WALL .word
 18919 = 207F			adr.EMERG_DEV	= CODEORIGIN+$007F
 18920 9C28			.var EMERG_DEV	= adr.EMERG_DEV .word
 18921 = 2088			adr.COLORBLOCK	= CODEORIGIN+$0088
 18922 9C28			.var COLORBLOCK	= adr.COLORBLOCK .word
 18923 = 0001			GRAYDOWN	= $01
 18924 = 0001			STARTWALL	= $01
 18925 = 01F4			BALLSPEED	= $01F4
 18926 = 07D0			MAXSPEED	= $07D0
 18927 = 0064			MAXBRWHIT	= $64
 18928 = 0004			PATNUMBER	= $04
 18929 = 2092			adr.POS_DIGIT	= CODEORIGIN+$0092
 18930 9C28			.var POS_DIGIT	= adr.POS_DIGIT .word
 18931 = 2096			adr.DIGITS	= CODEORIGIN+$0096
 18932 9C28			.var DIGITS	= adr.DIGITS .word
 18933 = 20A1			adr.LEVEL	= CODEORIGIN+$00A1
 18934 9C28			.var LEVEL	= adr.LEVEL .word
 18935 = 0258			SBDIR	= $0258
 18936 = 0003			DEFLEVEL	= $03
 18937 = 012C			LETTER_PROB	= $012C
 18938 = 03E8			LETTER_DROP	= $03E8
 18939 = 0008			LETTER_NUMB	= $08
 18940 = 0008			LETTER_FRM	= $08
 18941 = 0005			LETTER_SBF	= $05
 18942 = 20AD			adr.LETTER_DIS	= CODEORIGIN+$00AD
 18943 9C28			.var LETTER_DIS	= adr.LETTER_DIS .word
 18944 = 00B0			FLUXLEVEL	= $B0
 18945 = 9DD5			adr.BALLDATA	= DATAORIGIN+$0103	; [8] RECORD
 18946 9C28			.var BALLDATA	= adr.BALLDATA .word
 18947 = 9DD5			BALLDATA.WIDTH	= DATAORIGIN+$0103
 18948 = 9DD7			BALLDATA.HEIGHT	= DATAORIGIN+$0105
 18949 = 9DD9			BALLDATA.OFS	= DATAORIGIN+$0107
 18950 = 9DDD			adr.PLAYSCREEN	= DATAORIGIN+$010B	; [8] RECORD
 18951 9C28			.var PLAYSCREEN	= adr.PLAYSCREEN .word
 18952 = 9DDD			PLAYSCREEN.WIDTH	= DATAORIGIN+$010B
 18953 = 9DDF			PLAYSCREEN.HEIGHT	= DATAORIGIN+$010D
 18954 = 9DE1			PLAYSCREEN.OFS	= DATAORIGIN+$010F
 18955 = 9DE5			adr.PLAYVAUS	= DATAORIGIN+$0113	; [8] RECORD
 18956 9C28			.var PLAYVAUS	= adr.PLAYVAUS .word
 18957 = 9DE5			PLAYVAUS.WIDTH	= DATAORIGIN+$0113
 18958 = 9DE7			PLAYVAUS.HEIGHT	= DATAORIGIN+$0115
 18959 = 9DE9			PLAYVAUS.OFS	= DATAORIGIN+$0117
 18960 = 9DED			adr.NORMAL	= DATAORIGIN+$011B	; [8] RECORD
 18961 9C28			.var NORMAL	= adr.NORMAL .word
 18962 = 9DED			NORMAL.WIDTH	= DATAORIGIN+$011B
 18963 = 9DEF			NORMAL.HEIGHT	= DATAORIGIN+$011D
 18964 = 9DF1			NORMAL.OFS	= DATAORIGIN+$011F
 18965 = 9DF5			adr.ENLARGED	= DATAORIGIN+$0123	; [8] RECORD
 18966 9C28			.var ENLARGED	= adr.ENLARGED .word
 18967 = 9DF5			ENLARGED.WIDTH	= DATAORIGIN+$0123
 18968 = 9DF7			ENLARGED.HEIGHT	= DATAORIGIN+$0125
 18969 = 9DF9			ENLARGED.OFS	= DATAORIGIN+$0127
 18970 = 9DFD			adr.LASERS	= DATAORIGIN+$012B	; [8] RECORD
 18971 9C28			.var LASERS	= adr.LASERS .word
 18972 = 9DFD			LASERS.WIDTH	= DATAORIGIN+$012B
 18973 = 9DFF			LASERS.HEIGHT	= DATAORIGIN+$012D
 18974 = 9E01			LASERS.OFS	= DATAORIGIN+$012F
 18975 = 9E05			adr.EXPLOSION	= DATAORIGIN+$0133	; [8] RECORD
 18976 9C28			.var EXPLOSION	= adr.EXPLOSION .word
 18977 = 9E05			EXPLOSION.WIDTH	= DATAORIGIN+$0133
 18978 = 9E07			EXPLOSION.HEIGHT	= DATAORIGIN+$0135
 18979 = 9E09			EXPLOSION.OFS	= DATAORIGIN+$0137
 18980 = 9E0D			adr.NEWVAUS	= DATAORIGIN+$013B	; [8] RECORD
 18981 9C28			.var NEWVAUS	= adr.NEWVAUS .word
 18982 = 9E0D			NEWVAUS.WIDTH	= DATAORIGIN+$013B
 18983 = 9E0F			NEWVAUS.HEIGHT	= DATAORIGIN+$013D
 18984 = 9E11			NEWVAUS.OFS	= DATAORIGIN+$013F
 18985 = 9E15			adr.PRESENTS	= DATAORIGIN+$0143	; [8] RECORD
 18986 9C28			.var PRESENTS	= adr.PRESENTS .word
 18987 = 9E15			PRESENTS.WIDTH	= DATAORIGIN+$0143
 18988 = 9E17			PRESENTS.HEIGHT	= DATAORIGIN+$0145
 18989 = 9E19			PRESENTS.OFS	= DATAORIGIN+$0147
 18990 = 9E1D			adr.SOUNDFX	= DATAORIGIN+$014B	; [8] RECORD
 18991 9C28			.var SOUNDFX	= adr.SOUNDFX .word
 18992 = 9E1D			SOUNDFX.WIDTH	= DATAORIGIN+$014B
 18993 = 9E1F			SOUNDFX.HEIGHT	= DATAORIGIN+$014D
 18994 = 9E21			SOUNDFX.OFS	= DATAORIGIN+$014F
 18995 = 9E25			adr.SHINEWALL	= DATAORIGIN+$0153	; [8] RECORD
 18996 9C28			.var SHINEWALL	= adr.SHINEWALL .word
 18997 = 9E25			SHINEWALL.WIDTH	= DATAORIGIN+$0153
 18998 = 9E27			SHINEWALL.HEIGHT	= DATAORIGIN+$0155
 18999 = 9E29			SHINEWALL.OFS	= DATAORIGIN+$0157
 19000 = 9E2D			adr.MINIVAUS	= DATAORIGIN+$015B	; [8] RECORD
 19001 9C28			.var MINIVAUS	= adr.MINIVAUS .word
 19002 = 9E2D			MINIVAUS.WIDTH	= DATAORIGIN+$015B
 19003 = 9E2F			MINIVAUS.HEIGHT	= DATAORIGIN+$015D
 19004 = 9E31			MINIVAUS.OFS	= DATAORIGIN+$015F
 19005 = 9E35			adr.LEVELSEL	= DATAORIGIN+$0163	; [8] RECORD
 19006 9C28			.var LEVELSEL	= adr.LEVELSEL .word
 19007 = 9E35			LEVELSEL.WIDTH	= DATAORIGIN+$0163
 19008 = 9E37			LEVELSEL.HEIGHT	= DATAORIGIN+$0165
 19009 = 9E39			LEVELSEL.OFS	= DATAORIGIN+$0167
 19010 = 9E3D			adr.LETTERS	= DATAORIGIN+$016B	; [8] RECORD
 19011 9C28			.var LETTERS	= adr.LETTERS .word
 19012 = 9E3D			LETTERS.WIDTH	= DATAORIGIN+$016B
 19013 = 9E3F			LETTERS.HEIGHT	= DATAORIGIN+$016D
 19014 = 9E41			LETTERS.OFS	= DATAORIGIN+$016F
 19015 = 9E45			adr.SHOOTS	= DATAORIGIN+$0173	; [8] RECORD
 19016 9C28			.var SHOOTS	= adr.SHOOTS .word
 19017 = 9E45			SHOOTS.WIDTH	= DATAORIGIN+$0173
 19018 = 9E47			SHOOTS.HEIGHT	= DATAORIGIN+$0175
 19019 = 9E49			SHOOTS.OFS	= DATAORIGIN+$0177
 19020 = 9E4D			adr.FLUX	= DATAORIGIN+$017B	; [8] RECORD
 19021 9C28			.var FLUX	= adr.FLUX .word
 19022 = 9E4D			FLUX.WIDTH	= DATAORIGIN+$017B
 19023 = 9E4F			FLUX.HEIGHT	= DATAORIGIN+$017D
 19024 = 9E51			FLUX.OFS	= DATAORIGIN+$017F
 19025 = 9E55			adr.VAUS	= DATAORIGIN+$0183	; [13] RECORD
 19026 9C28			.var VAUS	= adr.VAUS .word
 19027 = 9E55			VAUS.X	= DATAORIGIN+$0183
 19028 = 9E56			VAUS.Y	= DATAORIGIN+$0184
 19029 = 9E57			VAUS.OLDX	= DATAORIGIN+$0185
 19030 = 9E59			VAUS.OLDY	= DATAORIGIN+$0187
 19031 = 9E5B			VAUS.OLDLEN	= DATAORIGIN+$0189
 19032 = 9E5D			VAUS.WIDTH	= DATAORIGIN+$018B
 19033 = 9E5E			VAUS.HEIGHT	= DATAORIGIN+$018C
 19034 = 9E5F			VAUS.FLASH	= DATAORIGIN+$018D
 19035 = 9E60			VAUS.IFLASH	= DATAORIGIN+$018E
 19036 = 9E61			VAUS.LETTER	= DATAORIGIN+$018F
 19037 = 9E62			adr.PATTERN	= DATAORIGIN+$0190	; [8] RECORD
 19038 9C28			.var PATTERN	= adr.PATTERN .word
 19039 = 9E62			PATTERN.WIDTH	= DATAORIGIN+$0190
 19040 = 9E64			PATTERN.HEIGHT	= DATAORIGIN+$0192
 19041 = 9E66			PATTERN.OFS	= DATAORIGIN+$0194
 19042 = 9E6A			adr.PATTERN0	= DATAORIGIN+$0198	; [8] RECORD
 19043 9C28			.var PATTERN0	= adr.PATTERN0 .word
 19044 = 9E6A			PATTERN0.WIDTH	= DATAORIGIN+$0198
 19045 = 9E6C			PATTERN0.HEIGHT	= DATAORIGIN+$019A
 19046 = 9E6E			PATTERN0.OFS	= DATAORIGIN+$019C
 19047 = 9E72			adr.PATTERN1	= DATAORIGIN+$01A0	; [8] RECORD
 19048 9C28			.var PATTERN1	= adr.PATTERN1 .word
 19049 = 9E72			PATTERN1.WIDTH	= DATAORIGIN+$01A0
 19050 = 9E74			PATTERN1.HEIGHT	= DATAORIGIN+$01A2
 19051 = 9E76			PATTERN1.OFS	= DATAORIGIN+$01A4
 19052 = 9E7A			adr.PATTERN2	= DATAORIGIN+$01A8	; [8] RECORD
 19053 9C28			.var PATTERN2	= adr.PATTERN2 .word
 19054 = 9E7A			PATTERN2.WIDTH	= DATAORIGIN+$01A8
 19055 = 9E7C			PATTERN2.HEIGHT	= DATAORIGIN+$01AA
 19056 = 9E7E			PATTERN2.OFS	= DATAORIGIN+$01AC
 19057 = 9E82			adr.PATTERN3	= DATAORIGIN+$01B0	; [8] RECORD
 19058 9C28			.var PATTERN3	= adr.PATTERN3 .word
 19059 = 9E82			PATTERN3.WIDTH	= DATAORIGIN+$01B0
 19060 = 9E84			PATTERN3.HEIGHT	= DATAORIGIN+$01B2
 19061 = 9E86			PATTERN3.OFS	= DATAORIGIN+$01B4
 19062 = 9E8A			adr.PATTERN4	= DATAORIGIN+$01B8	; [8] RECORD
 19063 9C28			.var PATTERN4	= adr.PATTERN4 .word
 19064 = 9E8A			PATTERN4.WIDTH	= DATAORIGIN+$01B8
 19065 = 9E8C			PATTERN4.HEIGHT	= DATAORIGIN+$01BA
 19066 = 9E8E			PATTERN4.OFS	= DATAORIGIN+$01BC
 19067 = 9E92			STATUS	= DATAORIGIN+$01C0
 19068 = 9E93			SUCCESS	= DATAORIGIN+$01C1
 19069 = 9E94			REMAIN_BLK	= DATAORIGIN+$01C2
 19070 = 9E95			TOTALWALL	= DATAORIGIN+$01C3
 19071 = 9E96			adr.SCORE	= DATAORIGIN+$01C4	; [27] RECORD
 19072 9C28			.var SCORE	= adr.SCORE .word
 19073 = 9E96			adr.SCORE.PLAYER	= [DATAORIGIN+$01C4] .array [3] .dword
 19074 9C28			.var SCORE.PLAYER	= adr.SCORE.PLAYER .word
 19075 = 9EA2			adr.SCORE.WALL_N	= [DATAORIGIN+$01D0] .array [3]
 19076 9C28			.var SCORE.WALL_N	= adr.SCORE.WALL_N .word
 19077 = 9EA5			adr.SCORE.LIVES	= [DATAORIGIN+$01D3] .array [3]
 19078 9C28			.var SCORE.LIVES	= adr.SCORE.LIVES .word
 19079 = 9EA8			SCORE.HISCORE	= DATAORIGIN+$01D6
 19080 = 9EAC			SCORE.PL_NUMB	= DATAORIGIN+$01DA
 19081 = 9EAD			adr.SCORE.ROUNDSEL	= [DATAORIGIN+$01DB] .array [3]
 19082 9C28			.var SCORE.ROUNDSEL	= adr.SCORE.ROUNDSEL .word
 19083 = 9EB0			SCORE.ABORTPLAY	= DATAORIGIN+$01DE
 19084 = 9EB1			CUR_PLAYER	= DATAORIGIN+$01DF
 19085 = 9EB2			adr.SHINEREC	= DATAORIGIN+$01E0	; [5] RECORD
 19086 9C28			.var SHINEREC	= adr.SHINEREC .word
 19087 = 9EB2			SHINEREC.XB	= DATAORIGIN+$01E0
 19088 = 9EB3			SHINEREC.YB	= DATAORIGIN+$01E1
 19089 = 9EB4			SHINEREC.FRAME	= DATAORIGIN+$01E2
 19090 = 9EB5			SHINEREC.BLOCK	= DATAORIGIN+$01E3
 19091 = 9EB6			SHINEREC.ACTIVE	= DATAORIGIN+$01E4
 19092 = 9EB7			LV	= DATAORIGIN+$01E5
 19093 = 9EB9			TRAINER	= DATAORIGIN+$01E7
 19094 = 9EBA			adr.LETT	= DATAORIGIN+$01E8	; [17] RECORD
 19095 9C28			.var LETT	= adr.LETT .word
 19096 = 9EBA			LETT.X	= DATAORIGIN+$01E8
 19097 = 9EBB			LETT.Y	= DATAORIGIN+$01E9
 19098 = 9EBC			LETT.TYP	= DATAORIGIN+$01EA
 19099 = 9EBE			LETT.FRAME	= DATAORIGIN+$01EC
 19100 = 9EBF			LETT.SUBFRAME	= DATAORIGIN+$01ED
 19101 = 9EC0			LETT.ACTIVE	= DATAORIGIN+$01EE
 19102 = 9EC1			LETT.INCOMING	= DATAORIGIN+$01EF
 19103 = 9EC3			LETT.NEXTX	= DATAORIGIN+$01F1
 19104 = 9EC5			LETT.NEXTY	= DATAORIGIN+$01F3
 19105 = 9EC7			LETT.NEXTTYPE	= DATAORIGIN+$01F5
 19106 = 9EC9			LETT.LAST	= DATAORIGIN+$01F7
 19107 = 9ECB			adr.FIRE	= DATAORIGIN+$01F9	; [5] RECORD
 19108 9C28			.var FIRE	= adr.FIRE .word
 19109 = 9ECB			FIRE.X	= DATAORIGIN+$01F9
 19110 = 9ECC			FIRE.Y	= DATAORIGIN+$01FA
 19111 = 9ECD			FIRE.SHOT	= DATAORIGIN+$01FB
 19112 = 9ECE			FIRE.AVL	= DATAORIGIN+$01FC
 19113 = 9ECF			FIRE.NW	= DATAORIGIN+$01FD
 19114 = 9ED0			BALLS_IN_PLAY	= DATAORIGIN+$01FE
 19115 = 9ED1			SCRFLUX	= DATAORIGIN+$01FF
 19116 = 9ED2			SCRFLUXCNT	= DATAORIGIN+$0200
 19117 = 9ED3			SOUND_ON	= DATAORIGIN+$0201
 19118 = 9ED4			OLD_SCORES	= DATAORIGIN+$0202
 19119 = 9ED8			HLP	= DATAORIGIN+$0206
 19120 = 9EDA			F_HLP	= DATAORIGIN+$0208
 19121 = C000			adr.ROW	= $C000
 19122 9C28			.var ROW	= adr.ROW .word
 19123 = C200			adr.TMP	= $C200
 19124 9C28			.var TMP	= adr.TMP .word
 19125 = C300			adr.MODY	= $C300
 19126 9C28			.var MODY	= adr.MODY .word
 19127 = C400			adr.MODX	= $C400
 19128 9C28			.var MODX	= adr.MODX .word
 19129 = C500			adr.SCANLINE	= $C500
 19130 9C28			.var SCANLINE	= adr.SCANLINE .word
 19131 = C580			adr.SCANLINE2	= $C580
 19132 9C28			.var SCANLINE2	= adr.SCANLINE2 .word
 19133 = D800			adr.WALL_P	= $D800
 19134 9C28			.var WALL_P	= adr.WALL_P .word
 19135 = DB00			adr.WALL	= $DB00
 19136 9C28			.var WALL	= adr.WALL .word
 19137 = DC00			adr.ALL_WALLS	= $DC00
 19138 9C28			.var ALL_WALLS	= adr.ALL_WALLS .word
 19139 9C28			@exit
 19140
 19141 9C28 A2 00		@halt	ldx #$00
 19142 9C2A 9A				txs
 19143
 19144 					.ifdef MAIN.@DEFINES.ROMOFF
 19145 9C2B EE 01 D3			inc portb
 19146 					.fi
 19147
 19148 9C2E A0 01			ldy #$01
 19149
 19150 9C30 60				rts
 19151
 19152 				; ------------------------------------------------------------
 19153
 19154 9C31			.local	@DEFINES
 19155 9C31			ATARI
 19156 9C31			CPU_6502
 19157 9C31			ROMOFF
 19158 				.endl
 19159
 19160 9C31			.local	@RESOURCE
 19161 				.endl
 19162
 19163 = 9C31 00 B1		BLT
 19163 = 9C33 00 B1		BLT.SRC_ADR
 19163 = 9C35 06 B1		BLT.DST_ADR
 19163 = 9C37 B1 9D		VBXE_RAM
 19163 = 9C39 5E 20		FLASH
 19163 = 9C3B 69 20		SCORE_WALL
 19163 = 9C3D 7F 20		EMERG_DEV
 19163 = 9C3F 88 20		COLORBLOCK
 19163 = 9C41 92 20		POS_DIGIT
 19163 = 9C43 96 20		DIGITS
 19163 = 9C45 A1 20		LEVEL
 19163 = 9C47 AD 20		LETTER_DIS
 19163 = 9C49 D5 9D		BALLDATA
 19163 = 9C4B DD 9D		PLAYSCREEN
 19163 = 9C4D E5 9D		PLAYVAUS
 19163 = 9C4F ED 9D		NORMAL
 19163 = 9C51 F5 9D		ENLARGED
 19163 = 9C53 FD 9D		LASERS
 19163 = 9C55 05 9E		EXPLOSION
 19163 = 9C57 0D 9E		NEWVAUS
 19163 = 9C59 15 9E		PRESENTS
 19163 = 9C5B 1D 9E		SOUNDFX
 19163 = 9C5D 25 9E		SHINEWALL
 19163 = 9C5F 2D 9E		MINIVAUS
 19163 = 9C61 35 9E		LEVELSEL
 19163 = 9C63 3D 9E		LETTERS
 19163 = 9C65 45 9E		SHOOTS
 19163 = 9C67 4D 9E		FLUX
 19163 = 9C69 55 9E		VAUS
 19163 = 9C6B 62 9E		PATTERN
 19163 = 9C6D 6A 9E		PATTERN0
 19163 = 9C6F 72 9E		PATTERN1
 19163 = 9C71 7A 9E		PATTERN2
 19163 = 9C73 82 9E		PATTERN3
 19163 = 9C75 8A 9E		PATTERN4
 19163 = 9C77 96 9E		SCORE
 19163 = 9C79 96 9E		SCORE.PLAYER
 19163 = 9C7B A2 9E		SCORE.WALL_N
 19163 = 9C7D A5 9E		SCORE.LIVES
 19163 = 9C7F AD 9E		SCORE.ROUNDSEL
 19163 = 9C81 B2 9E		SHINEREC
 19163 = 9C83 BA 9E		LETT
 19163 = 9C85 CB 9E		FIRE
 19163 = 9C87 00 C0		ROW
 19163 = 9C89 00 C2		TMP
 19163 = 9C8B 00 C3		MODY
 19163 = 9C8D 00 C4		MODX
 19163 = 9C8F 00 C5		SCANLINE
 19163 = 9C91 80 C5		SCANLINE2
 19163 = 9C93 00 D8		WALL_P
 19163 = 9C95 00 DB		WALL
 19163 = 9C97 00 DC		ALL_WALLS
 19163 				.endl							; MAIN
 19164
 19165 				; ------------------------------------------------------------
 19166 				; ------------------------------------------------------------
 19167
 19168 				.macro	UNITINITIALIZATION
 19169 				
 19170 					.ifdef MAIN.SYSTEM.@UnitInit
 19171 					jsr MAIN.SYSTEM.@UnitInit
 19172 					.fi
 19173 				
 19174 					.ifdef MAIN.ATARI.@UnitInit
 19175 					jsr MAIN.ATARI.@UnitInit
 19176 					.fi
 19177 				
 19178 					.ifdef MAIN.CRT.@UnitInit
 19179 					jsr MAIN.CRT.@UnitInit
 19180 					.fi
 19181 				
 19182 					.ifdef MAIN.TYPES.@UnitInit
 19183 					jsr MAIN.TYPES.@UnitInit
 19184 					.fi
 19185 				
 19186 					.ifdef MAIN.GRAPH.@UnitInit
 19187 					jsr MAIN.GRAPH.@UnitInit
 19188 					.fi
 19189 				
 19190 					.ifdef MAIN.VBXE.@UnitInit
 19191 					jsr MAIN.VBXE.@UnitInit
 19192 					.fi
 19193 				
 19194 					.ifdef MAIN.JOYSTICK.@UnitInit
 19195 					jsr MAIN.JOYSTICK.@UnitInit
 19196 					.fi
 19197 				.endm
 19198
 19199 				; ------------------------------------------------------------
 19200
 19201 					ift .SIZEOF(MAIN.SYSTEM) > 0
 19202 					.print 'SYSTEM: ',MAIN.SYSTEM,'..',MAIN.SYSTEM+.SIZEOF(MAIN.SYSTEM)-1
 19202 				SYSTEM: $2A3C..$3324
 19203 					eif
 19204
 19205 					ift .SIZEOF(MAIN.ATARI) > 0
 19206 					.print 'ATARI: ',MAIN.ATARI,'..',MAIN.ATARI+.SIZEOF(MAIN.ATARI)-1
 19207 					eif
 19208
 19209 					ift .SIZEOF(MAIN.CRT) > 0
 19210 					.print 'CRT: ',MAIN.CRT,'..',MAIN.CRT+.SIZEOF(MAIN.CRT)-1
 19211 					eif
 19212
 19213 					ift .SIZEOF(MAIN.TYPES) > 0
 19214 					.print 'TYPES: ',MAIN.TYPES,'..',MAIN.TYPES+.SIZEOF(MAIN.TYPES)-1
 19215 					eif
 19216
 19217 					ift .SIZEOF(MAIN.GRAPH) > 0
 19218 					.print 'GRAPH: ',MAIN.GRAPH,'..',MAIN.GRAPH+.SIZEOF(MAIN.GRAPH)-1
 19218 				GRAPH: $3325..$3326
 19219 					eif
 19220
 19221 					ift .SIZEOF(MAIN.VBXE) > 0
 19222 					.print 'VBXE: ',MAIN.VBXE,'..',MAIN.VBXE+.SIZEOF(MAIN.VBXE)-1
 19222 				VBXE: $3327..$38C6
 19223 					eif
 19224
 19225 					ift .SIZEOF(MAIN.JOYSTICK) > 0
 19226 					.print 'JOYSTICK: ',MAIN.JOYSTICK,'..',MAIN.JOYSTICK+.SIZEOF(MAIN.JOYSTICK)-1
 19226 				JOYSTICK: $38C7..$38CE
 19227 					eif
 19228
 19229 				.nowarn	.print 'CODE: ',CODEORIGIN,'..',MAIN.@RESOURCE-1
 19229 				CODE: $2000..$9C30
 19230
 19231 					ift .SIZEOF(MAIN.@RESOURCE)>0
 19232 				.nowarn	.print 'RESOURCE: ',MAIN.@RESOURCE,'..',MAIN.@RESOURCE+.SIZEOF(MAIN.@RESOURCE)-1
 19233 					eif
 19234
 19235 9C99			@end
 19236
 19237 				.nowarn	.print 'VARS: ',MAIN.@RESOURCE+.SIZEOF(MAIN.@RESOURCE),'..',@end-1
 19237 				VARS: $9C31..$9C98
 19238
 19239 				; ------------------------------------------------------------
 19240
 19241 = 9C99				?adr = *
 19242 					ift (?adr < ?old_adr) && (?old_adr - ?adr < $120)
 19243 = 9CD2				?adr = ?old_adr
 19244 					eif
 19245
 19246 					org ?adr
 19247 = 9CD2				?old_adr = *
 19248
 19249 9CD2			DATAORIGIN
 19250 9CD2-9D25> 2D 0C 00 00 + .by  $2D $0C $00 $00 $00 $28 $00 $18  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
 19251 9CEA 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
 19252 9D02 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
 19253 9D1A 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $27  $00 $00 $00 $17
 19254
 19255 = 0054			VARINITSIZE	= *-DATAORIGIN
 19256 = 0499			VARDATASIZE	= 1177
 19257
 19258 = A16B			PROGRAMSTACK	= DATAORIGIN+VARDATASIZE
 19259
 19260 					.print 'DATA: ',DATAORIGIN,'..',PROGRAMSTACK
 19260 				DATA: $9CD2..$A16B
 19261
 19262 					ert DATAORIGIN<@end,'DATA memory overlap'
 19263
 19264 02E0-02E1> AF 29			run START
 19265
 19266 				; ------------------------------------------------------------
 19267
 19268 				.macro	STATICDATA
 19269 				.by  $11 $56 $42 $58 $45 $20 $6E $6F  $74 $20 $64 $65 $74 $65 $63 $74  $65 $64 $0B $47 $61 $6D $65 $20
 19270 				.by  $50 $61 $75 $73 $65 $64 $00 $00  $00 $00 $00 $00 $AA $00 $00 $AA  $00 $00 $00 $55 $AA $00 $AA $00
 19271 				.by  $00 $00 $AA $00 $AA $00 $AA $AA  $00 $00 $AA $AA $AA $00 $55 $55  $55 $00 $55 $55 $FF $00 $55 $FF
 19272 				.by  $55 $00 $55 $FF $FF $00 $FF $55  $55 $00 $FF $55 $FF $00 $FF $FF  $55 $00 $FF $FF $FF $00 $FF $D4
 19273 				.by  $D3 $D2 $D1 $D0 $CF $CE $CD $CC  $CB $00 $00 $0A $00 $14 $00 $1E  $00 $28 $00 $32 $00 $64 $00 $C8
 19274 				.by  $00 $FA $00 $F4 $01 $E8 $03 $00  $02 $13 $24 $35 $12 $23 $34 $45  $D4 $D3 $D2 $D1 $D0 $CF $CE $CD
 19275 				.by  $CC $CB $00 $3C $5D $80 $7D $60  $37 $67 $6A $4F $5F $61 $7F $6F  $00 $00 $00 $E8 $03 $2C $01 $64
 19276 				.by  $00 $3C $00 $23 $00 $00 $10 $14  $03 $12 $14 $14 $03
 19277 				.endm
 19278
 19279 					end
